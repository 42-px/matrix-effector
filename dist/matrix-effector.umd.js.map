{"version":3,"file":"matrix-effector.umd.js","sources":["../src/domain.ts","../src/effects.ts","../src/events.ts","../src/matrix-client.ts","../src/utils.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { matrixDomain } from \"./domain\"\nimport {\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    LoginByPasswordParams,\n    LoginPayload,\n    Room,\n    SendMessagePayload,\n    StartClientParams,\n    Message,\n    LoginByTokenParams,\n    InitTimelineWindowParams,\n    TimelineWindowPaginationParams,\n    SearchRoomMessagesPayload,\n    LoadTimelineWindowParams,\n    ReadAllMessagesParams,\n    RoomWithActivity,\n    MappedRoom,\n    RoomInfo,\n    MappedUser,\n    MessageResponse,\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const getRoomTimelineFx = matrixDomain\n    .effect<Room[\"roomId\"], Message[], Error>()\nexport const initTimelineWindowFx = matrixDomain\n    .effect<InitTimelineWindowParams, MessageResponse, Error>()\nexport const getTimelineWindowMessagesFx = matrixDomain\n    .effect<void, Message[], Error>()\nexport const loadTimelineWindowFx = matrixDomain\n    .effect<LoadTimelineWindowParams, MessageResponse, Error>()\nexport const paginateTimelineWindowFx = matrixDomain\n    .effect<TimelineWindowPaginationParams, MessageResponse, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport { MappedRoom, MessageEvent } from \"./types\"\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n} from \"./types\"\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: event.getContent(),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: event.getContent(),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { forward } from \"effector\"\nimport matrix, { RoomMember } from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    getRoomTimelineFx,\n    loginByTokenFx,\n    stopClientFx,\n    initTimelineWindowFx,\n    getTimelineWindowMessagesFx,\n    paginateTimelineWindowFx,\n    searchRoomMessagesFx,\n    loadTimelineWindowFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx\n} from \"./effects\"\nimport { onCachedState, onInitialSync, onSync, roomMessage } from \"./events\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst PaginationFail = createCustomError(\"PaginationFail\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\n\ngetLoggedUserFx.use(() => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    return {\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\ngetRoomTimelineFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (room) {\n        return room.timeline\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n    }\n    return []\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nlet timelineWindow: matrix.TimelineWindow | undefined\nlet timelineWindowRoom: matrix.Room | undefined\ninitTimelineWindowFx\n    .use(async ({ roomId, initialEventId, initialWindowSize }) => {\n        const cl = client()\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const timelineSet = room.getUnfilteredTimelineSet()\n        timelineWindow = new matrix.TimelineWindow(cl, timelineSet)\n        await timelineWindow.load(initialEventId, initialWindowSize)\n        const windowEvents = timelineWindow.getEvents()\n        const isLive = !timelineWindow.canPaginate(\"f\")\n        timelineWindowRoom = room\n        const messages = windowEvents\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        return {\n            messages,\n            isLive,\n            eventsRetrieved: true\n        }\n    })\nloadTimelineWindowFx.use(async ({ initialEventId, initialWindowSize }) => {\n    if (!timelineWindow || !timelineWindowRoom) {\n        throw new TimelineWindowUndefined()\n    }\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const isLive = !timelineWindow.canPaginate(\"f\")\n    const messages =  timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    return {\n        messages,\n        isLive,\n        eventsRetrieved: true\n    }\n})\ngetTimelineWindowMessagesFx.use(() => {\n    if (!timelineWindow) return []\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n})\n\npaginateTimelineWindowFx.use(async ({\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow || !timelineWindowRoom) {\n        throw new TimelineWindowUndefined()\n    }\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    const eventsRetrieved: boolean = await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const isLive = !timelineWindow.canPaginate(\"f\")\n    const messages =  timelineWindow.getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n        \n    return {\n        messages,\n        isLive,\n        eventsRetrieved\n    }\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n"],"names":["matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","getRoomTimelineFx","initTimelineWindowFx","getTimelineWindowMessagesFx","loadTimelineWindowFx","paginateTimelineWindowFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","roomMessage","event","onInitialSync","onCachedState","onSync","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","checkIsDirect","roomId","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","toMessage","originalEventId","undefined","getId","content","sender","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","room","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","getMappedRooms","getRooms","map","timelineWindow","timelineWindowRoom","use","cl","loggedUserId","getUserId","user","getUser","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","from","done","initialSyncLimit","to","params","login","async","store","startup","startClient","term","getRoom","membersCache","search","body","search_categories","room_events","search_term","keys","filter","rooms","results","result","MatrixEvent","senderId","getSender","getMember","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","timeline","getType","reduce","toStartOfTimeline","removed","data","eventType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","initialEventId","initialWindowSize","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","windowEvents","isLive","canPaginate","messages","eventsRetrieved","direction","size","makeRequest","requestLimit","dir","EventTimeline","FORWARDS","BACKWARDS","paginate","roomMembersCount","getJoinedMemberCount","toRoomInfo","ms","throttle","source","timeout","batchEvents","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","opts"],"mappings":"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"}