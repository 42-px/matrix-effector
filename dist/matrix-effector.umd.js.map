{"version":3,"file":"matrix-effector.umd.js","sources":["../src/types/content.ts","../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    DeleteNotificationsRuleEnabledParams,\n    EditMessagePayload,\n    EventPermissions,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedRoomMember,\n    MappedUser,\n    Message,\n    MessageEvent,\n    NotificationRulesResult,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams,\n    StartClientParams,\n    UploadContentParams,\n    UploadContentResult,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const checkEventPermissionsFx = matrixDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = matrixDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = matrixDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\nexport const getNotificationRulesFx = matrixDomain\n    .effect<void,NotificationRulesResult,Error>()\nexport const setNotificationRuleActionFx = matrixDomain\n    .effect<SetNotificationsRuleParams,void,Error>()\nexport const setNotificationRuleEnabledFx = matrixDomain\n    .effect<SetNotificationsRuleEnabledParams,void,Error>()\nexport const deleteNotificationRuleFx = matrixDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoomMembers = matrixDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const onRoomInitialized = matrixDomain.event<void>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\nexport const onUploadProgress = matrixDomain.event<UploadProgress>()\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n","import { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse,\n    PaginateRoomFxParams,\n    UpdateMessagesFxParams\n} from \"./types\"\n\nexport const updateMessages = matrixDomain.event<void>()\nexport const getRoomMembers = matrixDomain.event<void>()\nexport const onRoomMemberUpdate = matrixDomain.event<RoomMember>()\nexport const onRoomUserUpdate = matrixDomain.event<User>()\n\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\nexport const updateMessagesFx = matrixDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = matrixDomain\n    .effect<string, MappedRoomMember[], Error>()\n","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedRoomMember,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: {\n            avatarUrl: user.avatarUrl,\n            userId : user.userId,\n            currentlyActive :  user.currentlyActive,\n            displayName :  user.displayName,\n            lastActiveAgo :  user.lastActiveAgo,\n            lastPresenceTs :  user.lastPresenceTs,\n            presence: user.presence as any,\n        },\n        userId: roomMember.userId,\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, {\n    RoomMember,\n    TimelineWindow,\n    EventStatus,\n    User,\n} from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward,\n    onRoomInitialized,\n    checkEventPermissionsFx,\n    uploadContentFx,\n    onUploadProgress,\n    $currentRoomMembers,\n    getUrlPreviewFx,\n    getNotificationRulesFx,\n    setNotificationRuleEnabledFx,\n    setNotificationRuleActionFx,\n    deleteNotificationRuleFx,\n} from \"./public\"\nimport {\n    paginateRoomFx,\n    loadRoomFx,\n    initRoomFx,\n    updateMessagesFx,\n    updateMessages,\n    getRoomMembers,\n    getRoomMembersFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate\n} from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n    UploadContentResult,\n    NotificationRulesResult,\n    SetNotificationsRuleParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\nimport { debounce } from \"patronum\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst UserNotFound = createCustomError(\"UserNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nconst UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n\nfunction getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\n\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\n\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    let avatarUrl = user.avatarUrl\n    let displayName = user.displayName\n    if (!user?.avatarUrl || !user?.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        avatarUrl = profileInfo.avatar_url as string\n        displayName = profileInfo.displayname as string\n    }\n    return {\n        avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    \n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\n\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error('Error while setNotificationRuleAction.Fx')\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error('Getting push rules...')\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error('Error while setNotificationRuleEnabled')\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})"],"names":["MsgType","matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","$currentRoomId","store","$currentRoomMembers","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","onInitialSync","onCachedState","onSync","initRoom","onRoomInitialized","loadRoom","paginateForward","paginateBackward","onUploadProgress","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","checkIsDirect","roomId","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","updateMessages","getRoomMembers","onRoomMemberUpdate","onRoomUserUpdate","initRoomFx","loadRoomFx","paginateRoomFx","updateMessagesFx","getRoomMembersFx","getMappedContent","toMessage","originalEventId","undefined","getId","content","sender","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","room","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","UserNotFound","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","UserNotLoggedIn","getMessages","timelineWindow","getEvents","filter","getType","reduce","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","$loadFilter","combine","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","_","doneData","reset","setMessages","guard","sample","done","currentRoomId","result","messages","isLive","value","canPaginateBackward","canPaginateForward","target","getRoomMembersDebounced","debounce","timeout","getMappedRooms","getRooms","map","clock","member","currentRoomMembers","user","find","userId","from","pending","to","fn","initialEventId","initialWindowSize","loadAdditionalDataDirection","use","async","cl","loggedUserId","getUserId","getUser","avatarUrl","displayName","profileInfo","getProfileInfo","avatar_url","displayname","currentlyActive","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","startup","startClient","term","orderBy","getRoom","membersCache","search","body","search_categories","room_events","search_term","keys","rooms","order_by","results","MatrixEvent","senderId","getSender","getMember","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","e","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","makeRequest","requestLimit","dir","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","mxEvent","canRedact","currentState","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","members","roomMember","membership","powerLevel","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","getPushRules","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","ms","throttle","batchEvents","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp","opts"],"mappings":"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"}