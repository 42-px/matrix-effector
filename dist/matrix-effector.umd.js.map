{"version":3,"file":"matrix-effector.umd.js","sources":["../src/room/types.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/types/index.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    'public' = \"public\",\r\n    'private' = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n","import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams\r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\nimport { CreateClientParams, AuthData } from \"./types\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    User,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === \"join\") ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    presence: \"online\" | \"offline\" | \"unavailable\"\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n","import {\r\n    batchEvents\r\n} from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport {\r\n    roomMessage\r\n} from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n}\r\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview\r\n} from \"./types\"\r\nimport {\r\n    messagesDomain\r\n} from \"./domain\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const paginationDomain = root.domain(\"pagination\")\r\n","import { paginationDomain } from \"./domain\"\r\nimport { PaginateParams } from \"./types\"\r\n\r\nexport const $paginateForwardPending = paginationDomain.store(false)\r\nexport const $paginateBackwardPending = paginationDomain.store(false)\r\nexport const $canPaginateBackward = paginationDomain.store(true)\r\nexport const $canPaginateForward = paginationDomain.store(true)\r\n\r\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\r\nexport const onPaginateForwardDone = paginationDomain.event<void>()\r\nexport const paginateForward = paginationDomain.event<PaginateParams>()\r\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType\r\n} from \"./types\"\r\n\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = ():string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId(),\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n    const lastMessage = mergedMessageEvents.length ?\r\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\r\n    const isDirect = checkIsDirect(room.roomId)\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\r\n    }\r\n}\r\n","import {\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport { mergeMessageEvents } from \"./mappers\"\r\nimport { client } from \"./matrix-client\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow) {\r\n    return timelineWindow\r\n        .getEvents()\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (roomId: string): Promise<void> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            \"m.room.create\",\r\n        )[0].getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n    await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate\r\n} from \"@/room\"\r\nimport {\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx\r\n} from \"./public\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = room.currentState\r\n            .getStateEvents(\r\n                \"m.room.create\"\r\n            )[0]?.getContent<StateEventsContent>()?.isDirect\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    }: MatrixLoginPayload = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const { store } = client()\r\n    if (store) await store.startup()\r\n    await client().startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { combine } from \"effector\"\r\nimport { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { RoomWithActivity } from \"@/types\"\r\nimport {\r\n    InitRoomParams,\r\n    LoadRoomFxParams,\r\n    MappedRoomMember,\r\n    MessageResponse, RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport { $currentRoomId, $timelineWindow } from \"./public\"\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomMembersFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport {\r\n    getMessages,\r\n    setDirectRoom\r\n} from \"@/utils\"\r\nimport {\r\n    ClientNotInitialized,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotFound\r\n} from \"@/errors\"\r\nimport {\r\n    $loadFilter,\r\n    getRoomByIdFx,\r\n    getRoomMembersFx,\r\n    initRoomFx,\r\n    loadRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    getRoomMembers,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\n\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getRoomByIdFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getRoomByIdFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetRoomMembersFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return Object.values(room.currentState.members)\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const membersCache: { [id: string]: RoomMember } = {}\r\n    const searchResponse = await client().search({\r\n        body: {\r\n            search_categories: {\r\n                room_events: {\r\n                    search_term: term,\r\n                    keys: [\"content.body\"],\r\n                    filter: {\r\n                        rooms: [roomId],\r\n                    },\r\n                    order_by: orderBy,\r\n                },\r\n            },\r\n        },\r\n    })\r\n    return searchResponse\r\n        .search_categories\r\n        .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n            const event = new MatrixEvent(result)\r\n            const senderId = event.getSender()\r\n            if (membersCache[senderId] === undefined) {\r\n                membersCache[senderId] = room.getMember(senderId) as RoomMember\r\n            }\r\n            event.sender = membersCache[senderId]\r\n            return toMessage(event)\r\n        })\r\n})\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    await client().invite(roomId, userId)\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach } from \"effector\"\r\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\r\nimport { paginationDomain } from \"./domain\"\r\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\r\n\r\nexport const paginateRoomFx = paginationDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n","import { guard, sample } from \"effector\"\r\nimport { $currentRoomId, MessageResponse } from \"@/room\"\r\nimport { paginateRoomFx } from \"@/room-pagination/private\"\r\nimport { loadRoomFx } from \"@/room/private\"\r\nimport { UpdateMessagesFxParams } from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n","import {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $timelineWindow\r\n} from \"@/room\"\r\nimport { paginateForwardFx } from \"@/room-pagination/private\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    updateMessages,\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        updateMessages,\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n     await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: undefined })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n","import { combine, forward, guard } from \"effector\"\r\nimport matrix, { Direction } from \"matrix-js-sdk\"\r\nimport {\r\n    $currentRoomId,\r\n    $loadRoomFxPending,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { $loadFilter } from \"@/room/private\"\r\nimport { setMessages } from \"@/room-messages/private\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx\r\n} from \"./private\"\r\nimport {\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward\r\n} from \"./public\"\r\nimport { TimelineWindowUndefined } from \"@/errors\"\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n      && !backwardPaginationPending\r\n      && !forwardPaginationPending\r\n      && !roomLoading\r\n)\r\n\r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n\r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n\r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n\r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","MsgType","MatrixMembershipType","clientStore","messagesDomain","$messages","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","messageBatchInterval","callbacksStore","createClient","options","ms","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","DIRECT_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","getIsDirectRoomsIds","directRooms","getAccountData","Object","values","flatMap","room","checkIsDirect","roomId","includes","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","getType","reduce","lastMessage","isDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","setDirectRoom","currentState","getStateEvents","creator","prevData","prevRoomsId","setAccountData","getMappedRooms","getRooms","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","$loadFilter","getRoomByIdFx","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","sample","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","_cl$getRoom","is_direct","creation_content","reason","setRoomName","joinRoom","leave","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","guard","currentRoomId","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}