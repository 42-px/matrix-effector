{"version":3,"file":"matrix-effector.umd.js","sources":["../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room/types.ts","../src/room-messages/domain.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/types/content.ts","../src/matrix-client.ts","../src/constants.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/errors.ts","../src/room/init.ts","../src/mappers.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts","../src/utils.ts"],"sourcesContent":["import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport { MappedRoom, MappedUser } from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    LoginPayload,\r\n    StartClientParams\r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\nimport { CreateClientParams, AuthData } from \"./types\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\nexport const $requiredPowerLevelForKick = roomDomain.store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain.store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain.store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain.store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain.store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain.store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\r\nimport { RoomMember, MappedUser, Message } from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    public = \"public\",\r\n    private = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","import {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\n\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, void, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, void, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const paginationDomain = root.domain(\"pagination\")\r\n","import { paginationDomain } from \"./domain\"\r\nimport { PaginateParams } from \"./types\"\r\n\r\nexport const $paginateForwardPending = paginationDomain.store(false)\r\nexport const $paginateBackwardPending = paginationDomain.store(false)\r\nexport const $canPaginateBackward = paginationDomain.store(true)\r\nexport const $canPaginateForward = paginationDomain.store(true)\r\n\r\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\r\nexport const onPaginateForwardDone = paginationDomain.event<void>()\r\nexport const paginateForward = paginationDomain.event<PaginateParams>()\r\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport { createClientOptions, EventListener } from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: createClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n}\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import { combine } from \"effector\"\r\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    LoadRoomFxParams,\r\n    MappedRoomMember,\r\n    MessageResponse, RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport { $currentRoomId, $timelineWindow } from \"./public\"\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomMembersFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach } from \"effector\"\r\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\r\nimport { paginationDomain } from \"./domain\"\r\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\r\n\r\nexport const paginateRoomFx = paginationDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n","import { guard, sample } from \"effector\"\r\nimport { $currentRoomId, MessageResponse } from \"@/room\"\r\nimport { paginateRoomFx } from \"@/room-pagination/private\"\r\nimport { loadRoomFx } from \"@/room/private\"\r\nimport { UpdateMessagesFxParams } from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n","import { forward } from \"effector\"\r\nimport { EventType, User } from \"matrix-js-sdk\"\r\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\r\nimport { MatrixEvent, Room, RoomMember, LoginPayload } from \"@/types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx\r\n} from \"./public\"\r\nimport { AuthData } from \"./types\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport { updateMessages } from \"@/room-messages/private\"\r\nimport { roomMessage } from \"@/room-messages\"\r\nimport { directRoomCreated, roomCreated } from \"@/room\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId() as string)\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = (room.currentState\r\n            .getStateEvents(\r\n                \"m.room.create\" as EventType, \r\n                undefined as any\r\n            ) as any)[0]?.getContent()?.isDirect\r\n\r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    }: LoginPayload = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use(() => client().logout())\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const { store } = client()\r\n    if (store) await store.startup()\r\n    await client().startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\n","import matrix, { Room, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport { attach, forward, guard, sample } from \"effector\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { MatrixEvent, RoomMember } from \"@/types\"\r\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    $loadFilter,\r\n    getRoomMembers,\r\n    getRoomMembersFx,\r\n    initRoomFx,\r\n    loadRoomFx,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    updatePowerLevelFx, updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    onRoomLoaded,\r\n    createRoomFx,\r\n    getAllUsersFx,\r\n    inviteUserFx,\r\n    kickUserRoomFx,\r\n    renameRoomFx,\r\n    joinRoomFx,\r\n    createDirectRoomFx,\r\n    clearCurrentRoomState,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForRedact,\r\n    $requiredPowerLevelForDefaultState,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n} from \"./public\"\r\nimport { LoadRoomFxParams, Visibility } from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotFound\r\n} from \"@/errors\"\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = (\r\n        room.currentState\r\n            .getStateEvents(\"m.room.power_levels\", \"\") as MatrixEvent[])[0]\r\n        .getContent() as any\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetRoomMembersFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return Object.values(room.currentState.members)\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    await timelineWindow.load(initialEventId, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const maxHistory = 99\r\n    return rooms.map((room) => toRoomWithActivity(room, maxHistory))\r\n})\r\n\r\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const membersCache: { [id: string]: RoomMember } = {}\r\n    const searchResponse = await client().search({\r\n        body: {\r\n            search_categories: {\r\n                room_events: {\r\n                    search_term: term,\r\n                    keys: [\"content.body\"],\r\n                    filter: {\r\n                        rooms: [roomId],\r\n                    },\r\n                    order_by: orderBy,\r\n                },\r\n            },\r\n        },\r\n    })\r\n    return searchResponse\r\n        .search_categories\r\n        .room_events.results.map(({ result }) => {\r\n            const event = new MatrixEvent(result)\r\n            const senderId = event.getSender()\r\n            if (membersCache[senderId] === undefined) {\r\n                membersCache[senderId] = room.getMember(senderId)\r\n            }\r\n            event.sender = membersCache[senderId]\r\n            return toMessage(event)\r\n        })\r\n})\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    const { room_id } = await client().createRoom(options)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    await client().invite(roomId, userId)\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room), 99)\r\n})\r\n","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\r\nimport { checkIsDirect, client } from \"@/index\"\r\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    Room,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n} from \"./types\"\r\n\r\nfunction getMappedContent(event: MatrixEvent): MessageContent {\r\n    const matrixContent = event.getContent() as MessageContent\r\n    return {...matrixContent}\r\n}\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId(),\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership()\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory: number\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n    const lastMessage = mergedMessageEvents.length ?\r\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\r\n    const isDirect = checkIsDirect(room.roomId)\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\r\n    }\r\n}\r\n","import { attach, forward, guard, sample } from \"effector\"\r\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\r\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\r\nimport { paginateForwardFx } from \"@/room-pagination/private\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx\r\n} from \"./public\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport {\r\n    RoomNotFound,\r\n    EventNotFound,\r\n    ClientNotInitialized,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        updateMessages,\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nsendMessageFx.use(({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => client().sendMessage(roomId, content, txnId))\r\neditMessageFx.use(({\r\n    roomId, eventId, body, txnId,\r\n}) => client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n","import { combine, forward, guard } from \"effector\"\r\nimport matrix from \"matrix-js-sdk\"\r\nimport {\r\n    $currentRoomId,\r\n    $loadRoomFxPending,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { $loadFilter } from \"@/room/private\"\r\nimport { setMessages } from \"@/room-messages/private\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx\r\n} from \"./private\"\r\nimport {\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    onPaginateForwardDone\r\n} from \"./public\"\r\nimport { TimelineWindowUndefined } from \"@/errors\"\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n      && !backwardPaginationPending\r\n      && !forwardPaginationPending\r\n      && !roomLoading\r\n)\r\n\r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n\r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n\r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n\r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport { mergeMessageEvents } from \"./mappers\"\r\nimport { client } from \"./matrix-client\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow) {\r\n    return timelineWindow\r\n        .getEvents()\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null =>\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\nexport const getIsDirectRoomsIds = ():string[] => {\r\n    const cl = client()\r\n    const directRooms = (cl.getAccountData(\r\n        DIRECT_EVENT as EventType) as MatrixEvent\r\n    )?.getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width !== undefined ? width : null,\r\n        height !== undefined ? height : null,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\r\n    )\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = (roomId: string): Promise<void> => {\r\n    const cl = client()\r\n    const { creator } = (cl.getRoom(roomId)?.currentState\r\n        .getStateEvents(\r\n            \"m.room.create\" as EventType,\r\n            undefined as any\r\n        ) as any )[0]?.getContent()\r\n    const prevData = (cl.getAccountData(\r\n        DIRECT_EVENT as EventType\r\n    ) as MatrixEvent)?.getContent()\r\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\r\n        ...prevData,\r\n        [creator]: [roomId]\r\n    })\r\n}\r\n"],"names":["root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","Visibility","Preset","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","MsgType","clientStore","messageBatchInterval","callbacksStore","createClient","options","ms","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","DIRECT_EVENT","$loadFilter","roomId","timelineWindow","Boolean","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","filter","getMappedRooms","getRooms","map","toMappedRoom","from","initialSyncLimit","to","room","toStartOfTimeline","removed","data","eventType","getType","liveEvent","toMessage","cl","user","getMember","getUserId","membership","currentState","getStateEvents","getContent","isDirect","state","prevState","rooms","e","member","use","login","async","response","fetch","baseUrl","method","body","JSON","stringify","type","token","user_id","access_token","device_id","well_known","json","userId","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","toMappedUser","avatarUrl","displayName","profileInfo","getProfileInfo","avatar_url","displayname","createClientParams","startClientParams","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","timeout","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","getRoom","powerLevelsContent","events_default","state_default","Object","values","members","roomMember","name","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","getMessages","length","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","isLive","canPaginateBackward","toRoomWithActivity","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","order_by","results","MatrixEvent","senderId","getSender","sender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","room_id","createRoom","findRoomId","getIsDirectRoomsIds","is_direct","private","creation_content","creator","setDirectRoom","reason","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","content","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","isRedacted","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","getMappedContent","originalEventId","relation","getRelation","getId","originServerTs","getDate","edited","redacted","isRedaction","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","makeRequest","requestLimit","dir","currentlyActive","lastActiveAgo","lastPresenceTs","presence","maxHistory","matrixRoom","events","getLiveTimeline","getEvents","unreadCount","i","hasUserReadEvent","mergedMessageEvents","includes","reduce","lastMessage","checkIsDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","directRooms","getAccountData","flatMap","prevData","setAccountData","[object Object]","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"orBAEO,MAAMA,EAAOC,eAAa,QCApBC,EAAYF,EAAKG,OAAO,OCSxBC,EAAgBF,EAAUG,QAC1BC,EAAgBJ,EAAUG,QAC1BE,EAASL,EAAUG,QAInBG,EAAoBN,EAC5BO,SACQC,EAAiBR,EACzBO,SACQE,EAAcT,EAAUO,SACxBG,EAAgBV,EACxBO,SACQI,EAAkBX,EAC1BO,SACQK,EAAeZ,EAAUO,SACzBM,EAAWb,EAAUO,SACrBO,EAAiBd,EACzBO,SACQQ,EAAkBf,EAC1BO,SC7BQS,EAAqBlB,EAAKG,OAAO,gBCMjCgB,EAAyBD,EACjCT,SACQW,EAA8BF,EACtCT,SACQY,EAA+BH,EACvCT,SACQa,EAA2BJ,EACnCT,SCbQc,EAAavB,EAAKG,OAAO,QC4BzBqB,EAAUD,EAAWE,MAAsB,MAC3CC,EAAqBH,EAAWE,OAAe,GAC/CE,EAAsBJ,EAC9BE,MAAiC,MACzBG,EAAiBL,EACzBE,MAAyC,MACjCI,EAAwBN,EAAWlB,QACnCyB,EAAkBP,EAAWE,MAA6B,MAC1DM,EAAgBR,EAAWE,MAAc,GACzCO,EAA6BT,EAAWE,MAdd,IAe1BQ,EAA+BV,EAAWE,MAjBd,IAkB5BS,EAA4BX,EAAWE,MAjBd,IAkBzBU,EAAsCZ,EAAWE,MAhBT,GAiBxCW,EAA+Bb,EAAWE,MAfd,IAgB5BY,EAAqCd,EAAWE,MAjBT,IAmBvCa,EAAWC,UACpBR,EAAeC,GACf,CAACQ,EAAGC,IAAMD,GAAKC,IAENC,EAAaH,UACtBR,EAAeE,GACf,CAACO,EAAGC,IAAMD,GAAKC,IAENE,EAAUJ,UACnBR,EAAeG,GACf,CAACM,EAAGC,IAAMD,GAAKC,IAENG,EAAuBL,UAChCR,EAAeI,GACf,CAACK,EAAGC,IAAMD,GAAKC,IAENI,EAAaN,UACtBR,EAAeK,GACf,CAACI,EAAGC,IAAMD,GAAKC,IAENK,EAAsBP,UAC/BR,EAAeM,GACf,CAACG,EAAGC,IAAMD,GAAKC,IAGNM,EAAWxB,EAAWlB,QACtB2C,EAAqBzB,EAAWlB,QAChC4C,EAAoB1B,EAAWlB,QAC/B6C,EAAsB3B,EAAWlB,QACjC8C,EAAe5B,EAAWlB,QAC1B+C,EAAW7B,EAAWlB,QACtBgD,GAAiB9B,EAAWlB,QAC5BiD,GAAkB/B,EAAWlB,QAC7BkD,GAAoBhC,EAAWlB,QAC/BmD,GAAcjC,EAAWlB,QAEzBoD,GAAuBlC,EAC/Bd,SACQiD,GAA2BnC,EACnCd,SACQkD,GAAgBpC,EACxBd,SACQmD,GAAgBrC,EACxBd,SACQoD,GAAetC,EACvBd,SACQqD,GAAqBvC,EAC7Bd,SACQsD,GAAexC,EAAWd,SAC1BuD,GAAiBzC,EAAWd,SAC5BwD,GAAe1C,EAAWd,SAC1ByD,GAAa3C,EACrBd,SC3CL,IAAY0D,GAKAC,IALAD,GAAAA,eAAAA,kCAERA,sBAGQC,GAAAA,WAAAA,wDAERA,8BACAA,4BC7DG,MAAMC,GAAiBrE,EAAKG,OAAO,YCa7BmE,GAAYD,GAAe5C,MAAiB,IAE5C8C,GAAcF,GAAehE,QAC7BmE,GAAoBH,GAAehE,QACnCoE,GAAmBJ,GAAehE,QAElCqE,GAAgBL,GACxB5D,SACQkE,GAAgBN,GACxB5D,SACQmE,GAAkBP,GAC1B5D,SACQoE,GAAoBR,GAC5B5D,SACQqE,GAA0BT,GAClC5D,SACQsE,GAAkBV,GAC1B5D,SACQuE,GAAkBX,GAC1B5D,SChCQwE,GAAmBjF,EAAKG,OAAO,cCC/B+E,GAA0BD,GAAiBxD,OAAM,GACjD0D,GAA2BF,GAAiBxD,OAAM,GAClD2D,GAAuBH,GAAiBxD,OAAM,GAC9C4D,GAAsBJ,GAAiBxD,OAAM,GAE7C6D,GAAyBL,GAAiB5E,QAC1CkF,GAAwBN,GAAiB5E,QACzCmF,GAAkBP,GAAiB5E,QACnCoF,GAAmBR,GAAiB5E,QCXjD,IAAYqF,GCKZ,IAAIC,IDLQD,GAAAA,YAAAA,+BAEVA,kCACAA,mBACAA,iBACAA,mBACAA,qBACAA,iBACAA,mBACAA,yBCHF,IAAIE,GAAuB,IAC3B,MAAMC,GAAkC,GAE3BC,GAAe,EACvBC,QAAAA,EAASH,qBAAsBI,MAEhCC,UACWC,IAAPF,IAAkBJ,GAAuBI,GAC7CL,GAAcQ,UAAOL,aAAaC,GAClCF,GAAeO,SAAQ,EAAEC,EAAWC,MAChCX,GAAYY,GAAGF,EAAWC,OAGrBE,GAAS,IAAoBb,GAE7Bc,GAAiBC,IAC1Bb,GAAec,QAAQD,IAGdE,GAAyB,IAC3BC,cAAYtC,GAAaqB,IAGvBK,GAAgB,KACrBN,KACAA,GAAYmB,qBACZnB,GAAc,OChCToB,GAAqB,iBACrBC,GAAuB,mBAGvBC,GAAe,WCOfC,GAAc3E,UACvBX,EACAE,GACA,CAACqF,EAAQC,IAAmBC,QAAQF,IAAWE,QAAQD,KAG9CE,GAAmB/F,EAAWlB,QAC9BkH,GAAqBhG,EAAWlB,QAChCmH,GAAiBjG,EAAWlB,QAE5BoH,GAAalG,EACrBd,SACQiH,GAAanG,EACrBd,SACQkH,GAAmBpG,EAC3Bd,SACQmH,GAAqBrG,EAC7Bd,SACQoH,GAAoCtG,EAC5Cd,SCxBQqH,GAAiB7C,GACzBxE,SAEQsH,GAAqBC,SAAO,CACrCC,OAAQ,CAACrG,EAAgBE,GACzBrB,OAAQqH,GACRI,UAAW,CAACC,GAAyBhB,EAAQC,OACzCD,OAAQA,EACRC,eAAgBA,EAChBgB,UAAW,cACRD,MAIEE,GAAoBL,SAAO,CACpCC,OAAQ,CAACrG,EAAgBE,GACzBrB,OAAQqH,GACRI,UAAW,CAACC,GAAyBhB,EAAQC,OACzCD,OAAQA,EACRC,eAAgBA,EAChBgB,UAAW,aACRD,MCpBEG,GAAiBjE,GAAehE,QAEhCkI,GAAmBlE,GAC3B5D,SAGQ+H,GAAcC,QAAM,CAC7BR,OAAQS,SACJ9G,EACA,CAAC8F,GAAWiB,KAAMb,GAAea,KAAMJ,GAAiBI,OACxD,CACIC,GAEIT,QAAUhB,OAAAA,GACV0B,OAAAA,OAEJD,cAAAA,EACAzB,OAAAA,KACG0B,MAGXC,OAAQ,EAAGF,cAAAA,EAAezB,OAAAA,KAAayB,IAAkBzB,ICa7D,SAAS4B,KACL,OAAOvC,KAASwC,WAAWC,IAAIC,cAN3B,CACJC,KAAM3I,EAAkBmI,KAAKM,KAAI,MAASG,iBAAkB,OAC5DC,GAAIzI,IAOR6F,GAAc,CACV,CACI,gBACA,CACIpG,EACAiJ,EACAC,EACAC,EACAC,KAEA,MAAMC,EAAYrJ,EAAMsJ,UACpBD,IAAc3C,IACX2C,IAAc1C,KAEZuC,GAAqBE,EAAKG,WAC3BrF,GAAYsF,GAAUxJ,MAItC,CAAC,OAASiJ,YACN,MAAMQ,EAAKtD,KACLuD,EAAOT,EAAKU,UAAUF,EAAGG,aAC/B,GAAIF,GAA4B,WAApBA,EAAKG,WAAyB,4BAExBZ,EAAKa,aAClBC,eACG,qBACAlE,GACM,yBAAImE,mCAAcC,UAG5B/G,GAAkB+F,GAElB9F,GAAY8F,KAGpB,CAAC,wBAAyB,IAAMhB,MAChC,CAAC,OAAQ,CAACiC,EAAOC,KACb,GAAc,aAAVD,EAKJ,GAAc,YAAVA,GAAqC,aAAdC,EAK3B,GAAc,YAAVD,GAAqC,YAAdC,OAA3B,CACI,MAAMC,EAAQ1B,KACdxI,EAAOkK,OAPX,CACI,MAAMA,EAAQ1B,KACd3I,EAAcqK,OAPlB,CACI,MAAMA,EAAQ1B,KACdzI,EAAcmK,MActB,CACI,oBACA,CAACC,EAAGH,EAAOI,IAAuBpD,GAAmBoD,IAEzD,CACI,sBACA,CAACD,EAAGH,EAAOI,IAAuBpD,GAAmBoD,IAEzD,CACI,wBACA,CAACD,EAAGC,IAAuBpD,GAAmBoD,IAElD,CACI,kBACA,CAACD,EAAGC,IAAuBpD,GAAmBoD,IAElD,CACI,wBACA,CAACD,EAAGC,IAAuBpD,GAAmBoD,IAElD,CACI,oBACA,CAACD,EAAGC,IAAuBpD,GAAmBoD,IAElD,CACI,iBACA,CAACD,EAAGX,IAAezC,GAAiByC,IAExC,CACI,gBACA,CAACW,EAAGX,IAAezC,GAAiByC,IAExC,CACI,mBACA,CAACW,EAAGX,IAAezC,GAAiByC,MAI5CvJ,EAAkBoK,KAAKzC,GAAW3B,KAASqE,MJvIV,mBIuImC1C,KAEpEzH,EAAekK,KAAIE,MAAO3C,IACtB,MAAM4C,QAAiBC,MACnB,GAAG7C,EAAO8C,kCACV,CACIC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACC,KJ7IJ,gBI6I0BC,MAAOpD,EAAOoD,WAG5DC,QACFA,EAAOC,aACPA,EAAYC,UACZA,EAASC,WACTA,SACoBZ,EAASa,OACjC,MAAO,CACHC,OAAQL,EACRM,YAAaL,EACbM,SAAUL,EACVM,UAAWL,MAInBhL,EAAYiK,KAAIE,UACZ,MAAMrJ,MAAEA,GAAU+E,KAClB,GAAI/E,EAAO,OAAOA,EAAMwK,aAG5BrL,EAAcgK,KAAKzC,GAAW3B,KAAS0F,YAAY/D,KAEnDpH,EAAS6J,KAAI,IAAMpE,KAAS2F,WAE5BrL,EAAa8J,KAAI,IAAMpE,KAAS4F,eAEhCvL,EAAgB+J,KAAIE,UAChB,MAAMhB,EAAKtD,KACX,IAAKsD,EAAI,OAAO,KAChB,MAAMuC,EAAevC,EAAGG,YACxB,IAAKoC,EAAc,OAAO,KAC1B,MAAMtC,EAAOD,EAAGwC,QAAQD,GACxB,IAAKtC,EAAM,OAAO,KAClB,MAAMwC,EAAaC,GAAazC,GAGhC,IAAKwC,EAAWE,YAAcF,EAAWG,YAAa,CAClD,MAAMC,QAAoB7C,EAAG8C,eAAeP,GAC5CE,EAAWE,UAAYE,EAAYE,WACnCN,EAAWG,YAAcC,EAAYG,YAEzC,OAAOP,KAGXvL,EAAe4J,KAAIE,OAEXiC,mBAAAA,EACAC,kBAAAA,MAGJlH,GAAaiH,GACb,MAAMtL,MAAEA,GAAU+E,KACd/E,SAAaA,EAAMwK,gBACjBzF,KAAS0F,YAAYc,MAG/B/L,EAAgB2J,KAAIE,gBAChB,MAAMhB,EAAKtD,KACNsD,UACCA,EAAGqC,yBACHrC,EAAGrI,4BAAOwL,iBAChBnD,EAAGsC,aACHnG,SCvMJ9E,EAAuByJ,KAAI,IAChBpE,KAAS0G,iBAGpB9L,EAA4BwJ,KAAIE,MAAOqC,IACnC,UACU3G,KAAS4G,mBACXD,EAAQE,MACRF,EAAQG,KACRH,EAAQI,OAGRJ,EAAQK,SAEd,MAAOC,GAGL,MAFAC,QAAQC,MAAM,4CACdD,QAAQC,MAAMF,GACRA,MAIdpM,EAA6BuJ,KAAIE,MAAOqC,IACpC,IACIO,QAAQC,MAAM,yBACd,MAAMC,QAAcpH,KAAS0G,eAC7BQ,QAAQC,MAAMC,EAAMC,OAAOvE,YACrB9C,KAASsH,mBACXX,EAAQE,MACRF,EAAQG,KACRH,EAAQI,OACRJ,EAAQY,SAEd,MAAON,GACLC,QAAQC,MAAM,0CACdD,QAAQC,MAAMF,OAItBnM,EAAyBsJ,KAAIE,MAAMqC,UACzB3G,KAASwH,eACXb,EAAQE,MACRF,EAAQG,KACRH,EAAQI,WCjDT,MAAMU,GAAgBC,oBAAkB,iBAClCC,GAAeD,oBAAkB,gBACjCE,GAAuBF,oBAAkB,wBACzCG,GACXH,oBAAkB,2BACPI,GAAeJ,oBAAkB,gBACjCK,GAAkBL,oBAAkB,mBC8D3CM,GAAmBxG,SAAO,CAAEvH,OAAQiH,KACpC+G,GAAoBzG,SAAO,CAAEvH,OAAQiH,KACrCgH,GAAoB1G,SAAO,CAAEvH,OAAQiH,KAErCiH,GAA0BC,WAAS,CACrC3G,OAAQT,GACRqH,QAAS,MAGbjN,EACK2E,GAAGxD,GAAU,CAAC+L,GAAK3H,OAAAA,KAAaA,IAChC4H,MAAMlN,GACXC,EACKyE,GAAGkB,GAAWuH,UAAU,CAACF,EAAG1H,IAAmBA,IAC/C2H,MAAMnN,GACXD,EACK4E,GAAGoB,GAAiBqH,UAAU,CAACF,EAAGG,IAAUA,IAC5CF,MAAMnN,GACXG,EACKwE,GAAGqB,GAAmBoH,UAAU,CAACF,EAAGI,IAAeA,IACnDH,MAAMnN,GACXI,EACKuE,GAAGsB,GAAkCmH,UAClC,CAACF,EAAGK,IAAgBA,EAAYC,OACnCL,MAAMnN,GACXM,EACKqE,GAAGsB,GAAkCmH,UAClC,CAACF,EAAGK,IAAgBA,EAAYE,MACnCN,MAAMnN,GACXK,EACKsE,GAAGsB,GAAkCmH,UAClC,CAACF,EAAGK,IAAgBA,EAAYG,SACnCP,MAAMnN,GACXO,EACKoE,GAAGsB,GAAkCmH,UAClC,CAACF,EAAGK,IAAgBA,EAAYI,gBACnCR,MAAMnN,GACXQ,EACKmE,GAAGsB,GAAkCmH,UAClC,CAACF,EAAGK,IAAgBA,EAAYK,SACnCT,MAAMnN,GACXS,EACKkE,GAAGsB,GAAkCmH,UAClC,CAACF,EAAGK,IAAgBA,EAAYM,eACnCV,MAAMnN,aAEH,CACJuH,KAAMzB,GAAWgI,QACjBrG,GAAI3H,cAEA,CACJyH,KAAMpG,EACNsG,GAAI5B,eAEA,CACJ0B,KAAMqF,GAAiB7F,KACvBU,GAAIrG,cAEA,CACJmG,KAAMT,SAAO,CACTT,OAAQnG,EACR6N,MAAOlI,GAAWkB,KAElBiH,GAAI,SAERvG,GAAIpG,cAEA,CACJkG,KAAMsF,GAAkB9F,KACxBU,GAAInG,cAEA,CACJiG,KAAMuF,GAAkB/F,KACxBU,GAAIlG,YAGF,CACF8E,OAAQrG,EACRkH,OAAS3B,GAAWE,QAAQF,GAC5B0I,OAAQrI,aAEN,CACFmI,MAAOrI,GACPW,OAAQtG,EACRmH,OAAQ,CAACgH,EAAoB/F,IAAS1C,QAClCyI,MAAAA,SAAAA,EAAoBC,MAAOpF,GACvBA,EAAOkB,SAAW9B,EAAK8B,UAE/BgE,OAAQrI,aAEN,CACFmI,MAAOpI,GACPU,OAAQrG,EACRkH,OAAQ,CAAC3B,EAAQwD,IAAWxD,IAAWwD,EAAOxD,OAC9C0I,OAAQrI,aAEN,CACFS,OAAQrG,EACR+N,MAAOhB,GACP7F,OAAQzB,QACRwI,OAAQlI,aAEN,CACFM,OAAQS,SACJ,CAAC9G,EAAgBE,GACjBsB,GACA,EACI+D,EACAC,IAEA4I,eAAAA,EACAC,kBAAAA,EACAC,4BAAAA,EAA8B,gBAE9B/I,OAAQA,EACRC,eAAgBA,EAChB4I,eAAAA,EACAC,kBAAAA,EACAC,4BAAAA,MAGRpH,OAAQ5B,GACR2I,OAAQnB,aAEN,CACFzG,OAAQS,SACJ,CAAC9G,EAAgBE,GACjBwB,IACA,EACI6D,EACAC,IAEA4I,eAAAA,EACAC,kBAAAA,OAEA9I,OAAQA,EACRC,eAAgBA,EAChB4I,eAAAA,EACAC,kBAAAA,EACAC,4BAA6B,eAGrCpH,OAAQ5B,GACR2I,OAAQpB,aAEN,CACFxG,OAAQS,SACJ,CAAC9G,EAAgBE,GACjBuB,IACA,EACI8D,EACAC,OAEAD,OAAQA,EACRC,eAAgBA,EAChB8I,4BAA6B,eAGrCpH,OAAQ5B,GACR2I,OAAQrB,aAGN,CACFmB,MAAO/N,EACPkH,OAAQzB,QACRwI,OAAQ,CAACjI,GAAoBC,MAGjCD,GAAmBgD,KAAKzD,IACpB,MAAM2C,EAAKtD,KACL8C,EAAOQ,EAAGqG,QAAQhJ,GAClB0E,EAAS/B,EAAGG,YAClB,IAAK4B,EAAQ,MAAM,IAAIyC,GACvB,MAAMvE,EAAOT,EAAKU,UAAU6B,GAC5B,IAAK9B,EAAM,MAAM,IAAIuE,GACrB,OAAOvE,EAAKmF,cAGhBrH,GAAkC+C,KAAKzD,oBACnC,MAEMiJ,EAFK5J,KACK2J,QAAQhJ,GAEfgD,aACAC,eAAe,sBAAuB,IAAsB,GAChEC,aACL,MAAO,CACH+E,eAAMgB,EAAmBhB,oBfvOM,GewO/BC,cAAKe,EAAmBf,mBfzOM,Ge0O9BC,iBAAQc,EAAmBd,sBf3OM,Ge4OjCC,wBAAea,EAAmBC,8BfzOW,Ee2O7CZ,uBAAcW,EAAmBE,6Bf1OW,Ge4O5Cd,iBAAQY,EAAmBZ,sBf3OM,Oe+OzC7H,GAAiBiD,KAAKzD,IAClB,MAAMmC,EAAO9C,KAAS2J,QAAQhJ,GAC9B,IAAKmC,EAAM,MAAM,IAAI6E,GACrB,OAAOoC,OAAOC,OAAOlH,EAAKa,aAAasG,SAClCxH,KAAK0B,IACF,MAAMZ,EAAOvD,KAAS8F,QAAQ3B,EAAOkB,QACrC,IAAK9B,EAAM,MAAM,IAAIuE,GACrB,gBClLRoC,EACA3G,GAEA,MAAO,CACHG,WAAYwG,EAAWxG,WACvByG,KAAMD,EAAWC,KACjBzB,WAAYwB,EAAWxB,WACvB0B,eAAgBF,EAAWE,eAC3BC,eAAgBH,EAAWG,eAC3B1J,OAAQuJ,EAAWvJ,OACnB2J,OAAQJ,EAAWI,OACnB/G,KAAMyC,GAAazC,GACnB8B,OAAQ6E,EAAW7E,QDsKRkF,CAAmBpG,EAAQZ,SAI9CpG,GAAciH,KAAKzD,IACf,MAAMmC,EAAO9C,KAAS2J,QAAQhJ,GAC9B,IAAKmC,EAAM,MAAM,IAAI6E,GACrB,gBC5MuB7E,GACvB,MAAO,CACH0H,iBAAkB1H,EAAK2H,wBD0MpBC,CAAW5H,MAGtB7B,GAAWmD,KAAIE,OAAS3D,OAAAA,MACpB,MAAM2C,EAAKtD,KACL8C,EAAO9C,KAAS2J,QAAQhJ,GAC9B,IAAKmC,EAAM,MAAM,IAAI6E,GACrB,MAAMgD,EAAc7H,EAAK8H,2BACzB,OAAO,IAAIjL,UAAOkL,eAAevH,EAAIqH,MAGzCzJ,GAAWkD,KAAIE,OACX1D,eAAAA,EACA4I,eAAAA,EACAC,kBAAAA,EACAC,4BAAAA,MAEA,IAAK9I,EAAgB,MAAM,IAAIiH,SACzBjH,EAAekK,KAAKtB,EAAgBC,GAC1C,MAAMsB,EAAqBnK,EAAeoK,YAAY,KACtD,IAAIC,EAAWC,GAAYtK,GAE3B,GAAI6I,GAAqBwB,EAASE,OAAS1B,EAAmB,CAC1D,IAAI2B,EACJ,MAAMC,EAAO5B,EAAoBwB,EAASE,OAEtCC,EADgC,aAAhC1B,QACwB9I,EACnB0K,SAAS3L,UAAO4L,cAAcC,UAAWH,SAEtBzK,EACnB0K,SAAS3L,UAAO4L,cAAcE,SAAUJ,GAE7CD,IACAH,EAAWC,GAAYtK,IAG/B,MAAO,CACHqK,SAAAA,EACAS,QAASX,EACTA,mBAAAA,EACAY,oBAAqB/K,EAAeoK,YAAY,SAIxD9N,GAAyBkH,KAAKH,IAE1B,IADWjE,KACF,MAAM,IAAI4H,GAEnB,OAAO3D,EAAMxB,KAAKK,GAAS8I,GAAmB9I,EAD3B,SAIvB7F,GAAqBmH,KAAIE,OAASuH,KAAAA,EAAMlL,OAAAA,EAAQmL,QAAAA,EAAU,WACtD,MAAMhJ,EAAO9C,KAAS2J,QAAQhJ,GAC9B,IAAKmC,EAAM,MAAM,IAAI6E,GACrB,MAAMoE,EAA6C,GAenD,aAd6B/L,KAASgM,OAAO,CACzCrH,KAAM,CACFsH,kBAAmB,CACfC,YAAa,CACTC,YAAaN,EACbO,KAAM,CAAC,gBACP9J,OAAQ,CACJ2B,MAAO,CAACtD,IAEZ0L,SAAUP,QAMrBG,kBACAC,YAAYI,QAAQ7J,KAAI,EAAGJ,OAAAA,MACxB,MAAMxI,EAAQ,IAAI0S,cAAYlK,GACxBmK,EAAW3S,EAAM4S,YAKvB,YAJ+B/M,IAA3BqM,EAAaS,KACbT,EAAaS,GAAY1J,EAAKU,UAAUgJ,IAE5C3S,EAAM6S,OAASX,EAAaS,GACrBnJ,GAAUxJ,SAI7BuD,GAAcgH,KAAI,IAAMpE,KAAS2M,WAAWlK,IAAIuD,MAEhD3I,GAAa+G,KAAIE,OACb6F,KAAAA,EACArB,OAAAA,EACA8D,WAAAA,EACAC,aAAAA,EAAe,GACfC,OAAAA,MAEA,MAAMvN,EAAU,CACZ4K,KAAAA,EACArB,OAAAA,EACA8D,WAAAA,EACAG,cAAeF,EAAapK,KAAKsB,QAC1BA,EACHiJ,UAAWjJ,EAAMkJ,SACjBA,cAAUvN,MAEdoN,OAAAA,IAGEI,QAAEA,SAAkBlN,KAASmN,WAAW5N,GAE9C,MAAO,CAAEoB,OAAQuM,MAGrB5P,GAAmB8G,KAAKE,OAAQf,KAAAA,EAAMuJ,OAAAA,EAAQD,aAAAA,EAAe,OACzD,MAAMvJ,EAAKtD,KAELoN,EADWC,KACW9D,MACvB5I,2BAAW2C,EAAGqG,QAAQhJ,yBAASgD,aAAasG,QAAQ1G,EAAK8B,WAE9D,GAAI+H,EAAY,MAAO,CAAEzM,OAAQyM,GAEjC,MAAM7N,EAAU,CACZ+N,WAAW,EACXxE,OAAQ,CAACvF,EAAK8B,QACduH,WAAYjP,aAAW4P,QACvBR,cAAeF,EAAapK,KAAKsB,QAC1BA,EACHiJ,UAAWjJ,EAAMkJ,SACjBA,cAAUvN,MAEdoN,OAAAA,EACAU,iBAAkB,CACd1J,UAAU,EACV2J,QAASnK,EAAGG,eAGdyJ,QAAEA,SAAkB5J,EAAG6J,WAAW5N,GAGxC,aAFMmO,GAAcR,GAEb,CAAEvM,OAAQuM,MAGrB3P,GAAa6G,KAAKE,OAAQe,OAAAA,EAAQ1E,OAAAA,YACxBX,KAAS8I,OAAOnI,EAAQ0E,MAGlC7H,GAAe4G,KAAKE,OAAS3D,OAAAA,EAAQ0E,OAAAA,EAAQsI,OAAAA,YACnC3N,KAAS4I,KAAKjI,EAAQ0E,EAAQsI,MAGxClQ,GAAa2G,KAAKE,OAAQ3D,OAAAA,EAAQwJ,KAAAA,YACxBnK,KAAS4N,YAAYjN,EAAQwJ,MAGvCzM,GAAW0G,KAAKE,OAAQ3D,OAAAA,EAAQmD,SAAAA,GAAW,MACvC,MAAMR,EAAKtD,KACL8C,QAAaQ,EAAGuK,SAASlN,GAI/B,OAHImD,SACM4J,GAAc/M,GAEjBiL,GAAmBlJ,GAAaI,GAAO,OExZlD,MAAMgL,GAAmB1N,KAEnB2N,GAAoBvM,SAAO,CAC7BvH,OAAQ4H,GACRH,UAAW,EAAGuJ,SAAAA,OACVI,KAAMJ,EAASE,WAIvBrN,GACKiC,GAAGiC,IAAa,CAACsG,GAAK2C,SAAAA,KAAeA,IACrC1C,MAAMnN,GACXJ,EACK+E,GAAGiC,IAAa,CAACsG,GAAKoD,OAAAA,KAAaA,IACnCnD,MAAMnN,aAEH,CACJuH,KAAMT,SACFpE,GACAiQ,GAAkB5L,MAClB,CAACmG,GAAK3G,OAAAA,KAAaA,EAAOsJ,WAE9BpI,GAAI7E,eAGA,CACJ2E,KAAMmL,GAAiBrL,KAAKwI,KAAgBA,SAAAA,MAC5CpI,GAAIkL,aAEF,CACFtM,OAAQS,SACJ,CAAC9G,EAAgBE,GACjBwG,IACA,EAAEnB,EAAQC,OACNA,eAAgBA,EAChBD,OAAQA,MAGhB2B,OAAQhH,EAAgBmH,KAAI7B,GAAkBC,QAAQD,KACtDyI,OAAQtH,KAGZ7D,GAAckG,KAAI,EACdzD,OAAAA,EACAqN,QAAAA,EACAC,MAAAA,KACEjO,KAASkO,YAAYvN,EAAQqN,EAASC,KAC5C9P,GAAciG,KAAI,EACdzD,OAAAA,EAAQwN,QAAAA,EAASxJ,KAAAA,EAAMsJ,MAAAA,KACrBjO,KAASkO,YACXvN,EACA,CACIyN,gBAAiB,CACbC,QAAS,SAAU1J,KAAAA,GAEvB2J,eAAgB,CACZC,SAAU,YACVC,SAAUL,GAEdE,QAAW,SACX1J,KAAQ,IAEZsJ,KAEJ7P,GAAgBgG,KAAIE,OAChB3D,OAAAA,EAAQwN,QAAAA,EAASR,OAAAA,MAEjB,MAAMpO,EAAUoO,EAAS,CAAEA,OAAAA,QAAWjO,EAEtC,MAAO,CACHyO,eAFcnO,KAASyO,YAAY9N,EAAQwN,OAASzO,EAAWH,IAElDiP,aAGrBnQ,GAAkB+F,KAAI,EAAGzD,OAAAA,EAAQwN,QAAAA,MAC7B,MAAMrL,EAAO9C,KAAS2J,QAAQhJ,GAC9B,IAAKmC,EAAM,MAAM,IAAI6E,GACrB,MAAM+G,EAAU5L,EAAK6L,cAAcR,GACnC,IAAKO,EAAS,MAAM,IAAIjH,GAExB,OAAOzH,KAAS4O,mBAAmBjO,EAAQwN,EAASO,MAExDnQ,GAAgB6F,KAAI,EAChByK,KAAAA,EACA1E,KAAAA,EACA2E,gBAAAA,EACAC,eAAAA,EACAC,YAAAA,EACAlK,KAAAA,MAEA,MACMmK,EADKjP,KACQkP,cAAcL,EAAM,CACnC1E,KAAAA,EACA2E,gBAAAA,EACAhK,KAAAA,EACAiK,eAAAA,EACAC,YAAAA,EACAG,gBAAiB,EAAGC,OAAAA,EAAQC,MAAAA,MAKxBpR,GAAiB,CAAE4Q,KAAAA,EAAMO,OAAAA,EAAQC,MAAAA,OAGnChN,EAA8B,CAAE4M,QAAAA,GAEtC,OADIA,EAAQK,QAAOjN,EAAOiN,MAAQL,EAAQK,OACnCjN,KAGX7D,GAAgB4F,KAAI,EAAEmL,IAAAA,EAAKC,GAAAA,EAAInH,QAAAA,EAAU,OAC9B,IAAIoH,SAASC,IAChB1P,KAAS2P,cAAcJ,EAAKC,GACvBI,KAAKF,GACLG,OAAM,IAAKH,EAAQ,CAACI,SAAUP,MACnCQ,YAAW,KACPL,EAAQ,CAACI,SAAUP,MACpBlH,QAiBX/J,GAAwB8F,KAAI,EAAG+J,QAAAA,EAASxN,OAAAA,MACpC,MAAM2C,EAAKtD,KACX,IAAKsD,EAAI,MAAM,IAAIsE,GACnB,MAAM9E,EAAOQ,EAAGqG,QAAQhJ,GACxB,IAAKmC,EAAM,MAAM,IAAI6E,GACrB,MAAMqI,EAAUlN,EAAK6L,cAAcR,GACnC,IAAK6B,EAAS,MAAM,IAAIvI,GACxB,MAAMpC,EAAS/B,EAAGG,YAClB,IAAK4B,EAAQ,MAAM,IAAI0C,GAMvB,MAAO,CACHkI,UANcnN,EAAKa,aAClBuM,yBAAyBF,EAAS3K,IAE3B,sBADJ2K,EAAQ7M,UAKZgN,QA7BR,SAAwBH,GACpB,GAAIA,EAAQI,SAAWC,cAAYC,WACT,mBAAtBN,EAAQ7M,WACR6M,EAAQO,aAER,OAAO,EAEX,MAAMvC,EAAUgC,EAAQQ,sBAClBnC,QAACA,GAAWL,EAClB,OAAoB,WAAZK,GAAoC,YAAZA,IAC5BxN,QAAQmN,EAAQrJ,OAAiC,iBAAjBqJ,EAAQrJ,MACxCqL,EAAQvD,cAAgBzM,KAASyD,YAerBgN,CAAeT,OAMnCjO,GAAiBqC,KAAI,EAAGxD,eAAAA,MACpB,MAAMmK,EAAqBnK,EAAeoK,YAAY,KACtD,MAAO,CACHC,SAAUC,GAAYtK,GACtB8K,QAASX,EACTA,mBAAoBA,EACpBY,oBAAqB/K,EAAeoK,YAAY,SC/JxD,MAAM0F,GAAkB3U,UACpB2E,GACA/B,GACAD,GACAxD,GACA,CACIyV,EACAC,EACAC,EACAC,IACCH,IACCC,IACAC,IACAC,IFxBV,SAASC,GAAiBlX,GAEtB,MAAO,IADeA,EAAMgK,uBAuBhBR,GACZxJ,EACAmX,SAEA,MAAMC,EAAWpX,EAAMqX,cACvB,MAAO,CACHF,qBAAqCtR,IAApBsR,EACbA,EACAnX,EAAMsX,QACVnD,QAAS+C,GAAiBlX,GAC1B6S,OAAQ7S,EAAM6S,OACd0E,eAAgBvX,EAAMwX,UACtBC,OAA4C,yBAAnCL,wBAA6B,UACtCM,SAAU1X,EAAM0W,cAAgB1W,EAAM2X,wBAI9B9O,GAAaI,GACzB,MAAO,CACHnC,OAAQmC,EAAKnC,OACbwJ,KAAMrH,EAAKqH,KACXsH,QAAS3O,EAAK2O,QACdC,aAAc5O,EAAK6O,4BAIXC,GACZC,EACAhY,GAEA,OAAIA,EAAMiY,WAAW,cAAgBjY,EAAM2X,eAG3CK,EAAI1R,KAAKkD,GAAUxJ,IAFRgY,EE5BflT,GACKoB,GAAGwB,GAAmB2H,SAAS,CAACZ,EAAGG,IAAUA,IAC7CF,MAAMnN,GACXsD,GACKqB,GAAG8B,GAAkBqH,SAAS,CAACZ,EAAGG,IAAUA,IAC5CF,MAAMnN,GACXwD,GACKmB,GAAGiC,IAAa,CAACsG,GAAKqD,oBAAAA,KAA0BA,IAChDpD,MAAM,CAAC3L,EAAUxB,IACtByD,GACKkB,GAAGiC,IAAa,CAACsG,GAAKyC,mBAAAA,KAAyBA,IAC/CxC,MAAM,CAAC3L,EAAUxB,cAEd,CACJuH,KAAMpB,GAAmBY,KACzBU,GAAI/D,eAGA,CACJ6D,KAAMd,GAAkBM,KACxBU,GAAI9D,aAGF,CACF0C,OAAQxC,GACRqD,OAAQoO,GACRrH,OAAQ9H,aAEN,CACFE,OAAQzC,GACRsD,OAAQoO,GACRrH,OAAQxH,KAGZP,GAAe8C,KAAIE,OACf1D,eAAAA,EACAgB,UAAAA,EACAyJ,KAAAA,EACA0G,YAAAA,EACAC,aAAAA,MAEA,IAAKpR,EAAgB,MAAM,IAAIiH,GAC/B,MAAMoK,EAAoB,YAAdrQ,EACRjC,UAAO4L,cAAcE,SACrB9L,UAAO4L,cAAcC,gBACnB5K,EACD0K,SAAS2G,EAAK5G,EAAM0G,EAAaC,GACtC,MAAMjH,EAAqBnK,EAAeoK,YAAY,KAEtD,MAAO,CACHC,SAFaC,GAAYtK,GAGzB8K,QAASX,EACTA,mBAAoBA,EACpBY,oBAAqB/K,EAAeoK,YAAY,SFbjD,MAAMhF,GAAgBzC,KAErB0C,UAAW1C,EAAK0C,UAChBZ,OAAQ9B,EAAK8B,OACb6M,gBAAiB3O,EAAK2O,gBACtBhM,YAAa3C,EAAK2C,YAClBiM,cAAe5O,EAAK4O,cACpBC,eAAgB7O,EAAK6O,eACrBC,SAAU9O,EAAK8O,oBAqBPzG,GACZ9I,EACAwP,SAEA,MAAMhP,EAAKtD,KACLuS,EAAajP,EAAGqG,QAAQ7G,EAAKnC,QACnC,IAAK4R,EAAY,MAAM,IAAI5K,GAC3B,MAAM6K,EAASD,EAAWE,kBAAkBC,YAC5C,IAAIC,EAAc,EAClB,IAAK,IAAIC,EAAIJ,EAAOrH,OAAS,EAAGyH,GAAK,GAC7BA,IAAMJ,EAAOrH,OAASmH,EADUM,IAAK,CAEzC,MAAM/Y,EAAQ2Y,EAAOI,GAGrB,GAFmBL,EACdM,iBAAiBvP,EAAGG,YAAuB5J,EAAMsX,SAElD,MAEJwB,GAAe,EAEnB,MAAMG,EAAsBN,EACvBlQ,QAAQzI,GAAU,CAAC0G,GAAoBC,IACnCuS,SAASlZ,EAAMsJ,aACnB6P,OAAOpB,GAAoB,IAC1BqB,EAAcH,EAAoB3H,OACpC2H,EAAoBA,EAAoB3H,OAAS,QAAKzL,EACpDoE,EAAWoP,GAAcpQ,EAAKnC,QAC9BwS,EAASrP,EACTyO,EAAW/O,UAAU+O,EAAWa,iBAChC,KAEN,MAAO,IACAtQ,EACH6P,YAAAA,EACAM,YAAAA,EACAnP,SAAAA,EACAuP,aAAcF,MAAAA,SAAAA,EAAQ9N,OAGtBiO,SAAUH,EACJtS,kBAAQsS,EAAO5P,2BAAM2O,sBACrBxS,EACN6T,eAAiBhB,EAAmBiB,mCG3I5BtI,GAAYtK,GACxB,OAAOA,EACF8R,YACApQ,QAAQzI,GAAU,CAAC0G,GAAoBC,IACnCuS,SAASlZ,EAAMsJ,aACnB6P,OAAOpB,GAAoB,UAgDvBvE,GAAsB,WAC/B,MACMoG,YADKzT,KACa0T,eACpBjT,0BACDoD,aACH,OAAO4P,GAAe1J,OAAOC,OAAOyJ,GAAaE,SAAS7Q,GAASA,KAkB1DoQ,GAAiBvS,GAC1B0M,KAAsB0F,SAASpS,GAYtB+M,GAAiB/M,cAC1B,MAAM2C,EAAKtD,MACLyN,QAAEA,wBAAanK,EAAGqG,QAAQhJ,yBAASgD,aACpCC,eACG,qBACAlE,IACO,yBAAImE,aACb+P,YAAYtQ,EAAGoQ,eACjBjT,0BACeoD,aACnB,OAAOP,EAAGuQ,eAAepT,GAA2B,IAC7CmT,EACHE,CAACrG,GAAU,CAAC9M,00BnB3FkB,+BADG,6BAEF,+BAGE,2CAFY,yCACD,8KJbdnB,GAClCuU,WAAS,CAAEtS,OAAQ1H,EAAQsO,QAAS7I,mSuB0BF,EAClCmB,OAAAA,EACA0E,OAAAA,EACA2O,MAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAC,aAAAA,GAAe,MAEf,MAAMrR,EAAO9C,KAAS2J,QAAQhJ,GAC9B,IAAKmC,EACD,OAAO,KAEX,MAAMsR,EAActR,EAAKU,UAAU6B,GACnC,OAAK+O,EAGEA,EAAYC,aACfrU,KAASsU,mBACTN,EACAC,EACAC,EACAC,GACA,GARO,yDAjCmB,EAC9BzH,OAAAA,EACAsH,MAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAC,aAAAA,GAAe,EACfI,iBAAAA,GAAmB,KAEnB7H,GAAUA,EAAO2H,aACX3H,EAAO2H,aACLrU,KAASsU,mBACTN,EACAC,EACAC,EACAC,EACAI,GAEF,4BAuD0B,MAE5BC,YAAa,GAAGxU,KAASsU,6CACzBG,QAAS,CACLC,cAAgB,UAAU1U,KAAS2U,oRAvBnB,EACxBC,OAAAA,EACAZ,MAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAK,iBAAAA,KAEAvU,KAAS6U,aACLD,OACUlV,IAAVsU,EAAsBA,EAAQ,UACnBtU,IAAXuU,EAAuBA,EAAS,UACfvU,IAAjBwU,EAA6BA,EAAe,aACvBxU,IAArB6U,EAAiCA,EAAmB"}