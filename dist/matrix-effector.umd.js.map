{"version":3,"file":"matrix-effector.umd.js","sources":["../src/room/types.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/types/index.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    \"public\" = \"public\",\r\n    \"private\" = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n\r\nexport type SendTypingParams = {\r\n    roomId: string\r\n    isTyping: boolean\r\n  }\r\n","import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams,\r\n    CreateClientParams, \r\n    AuthData \r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    RoomMember,\r\n    User\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams,\r\n    LoadRoomFxParams,\r\n    MessageResponse,\r\n    SendTypingParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $typingMembers = roomDomain\r\n    .store<{[key in string]: RoomMember[]}>({})\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === \"join\") ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const clearTypingMember = roomDomain.event<void>()\r\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const findDirectRoomByUserIdFx = roomDomain\r\n    .effect<string, MappedRoom, Error>()\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const sendTypingFx = roomDomain\r\n    .effect<SendTypingParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    presence: \"online\" | \"offline\" | \"unavailable\"\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n    seen?: boolean\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n}\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview,\r\n    PaginateParams,\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\r\nexport const onPaginateForwardDone = messagesDomain.event<void>()\r\nexport const paginateForward = messagesDomain.event<PaginateParams>()\r\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\r\n\r\nexport const $paginateForwardPending = messagesDomain.store(false)\r\nexport const $paginateBackwardPending = messagesDomain.store(false)\r\nexport const $canPaginateBackward = messagesDomain.store(true)\r\nexport const $canPaginateForward = messagesDomain.store(true)\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType\r\n} from \"./types\"\r\nimport { StateEventsContent } from \"./app/types\"\r\n\r\nexport const toMessageSeen = (\r\n    message: Message,\r\n    myUserId: string,\r\n    room: Room\r\n): Message => {\r\n    message.seen = room.getJoinedMembers().some((member) => {\r\n        if (member.userId === myUserId) return false\r\n        return room\r\n            .hasUserReadEvent(member.userId, message.originalEventId)\r\n    })\r\n    return message\r\n}\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = (): string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId(),\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    const isDirect = Boolean(matrixRoom.currentState\r\n        .getStateEvents(\r\n            \"m.room.create\",\r\n            \"\"\r\n        )?.getContent<StateEventsContent>()?.isDirect)\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n\r\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\r\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\r\n\r\n    if (lastMessage) {\r\n        const myUserId = cl.getUserId()\r\n        if (lastMessage.sender.userId !== myUserId) {\r\n            lastMessage.seen = matrixRoom\r\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \r\n        } else {\r\n            lastMessage = toMessageSeen(\r\n                lastMessage,\r\n                myUserId,\r\n                matrixRoom\r\n            )\r\n        }\r\n    }\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\r\n    }\r\n}\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client } from \"./matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport {\r\n    mergeMessageEvents,\r\n    toMessageSeen\r\n} from \"./mappers\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams,\r\n    Message,\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\r\n    const messages = timelineWindow.getEvents()\r\n        .filter((event) => (\r\n            [\r\n                ROOM_MESSAGE_EVENT,\r\n                ROOM_REDACTION_EVENT\r\n            ].includes(event.getType())))\r\n        .reduce(mergeMessageEvents, [])\r\n    const cl = client()\r\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const myMessages = []\r\n    const otherMessages = []\r\n    const myUserId = cl.getUserId()\r\n    let findFirstSeenOtherMessage = false\r\n    let findFirstSeenMyMessage = false\r\n    for (let i = messages.length - 1; i >= 0; i--) {\r\n        if (messages[i].sender.userId === myUserId) {\r\n            myMessages.push(messages[i])\r\n        } else {\r\n            otherMessages.push(messages[i])\r\n        }\r\n    }\r\n    myMessages.forEach((message) => {\r\n        if (findFirstSeenMyMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message = toMessageSeen(message, myUserId, room)\r\n            findFirstSeenMyMessage = Boolean(message.seen)\r\n        }\r\n    })\r\n    otherMessages.forEach((message) => {\r\n        if (findFirstSeenOtherMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message.seen = room\r\n                .hasUserReadEvent(myUserId, message.originalEventId)\r\n            findFirstSeenOtherMessage = message.seen\r\n        }\r\n    })\r\n    return messages\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (\r\n    roomId: string,\r\n    companion?: string\r\n): Promise<{}> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            \"m.room.create\",\r\n        )[0].getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n\r\n    if(companion) {\r\n        return await cl.setAccountData(DIRECT_EVENT, {\r\n            ...prevData,\r\n            [companion]: [roomId]\r\n        })\r\n        \r\n    }\r\n    return await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    toggleTypingUser\r\n} from \"@/room\"\r\nimport { UserNotFound } from \"@/errors\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = Boolean(room.currentState\r\n            .getStateEvents(\r\n                \"m.room.create\",\r\n                \"\"\r\n            )?.getContent<StateEventsContent>()?.isDirect)\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            updateMessages()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => toggleTypingUser(member)\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    } = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const { store } = client()\r\n    if (store) await store.startup()\r\n    await client().startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    MappedRoomMember,\r\n    RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const getRoomMembersFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { DIRECT_EVENT } from \"@/constants\"\r\nimport { \r\n    ClientNotInitialized,\r\n    RoomNotFound, \r\n    TimelineWindowUndefined,\r\n    UserNotFound \r\n} from \"@/errors\"\r\nimport { getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    getRoomMembersFx,\r\n    initRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx,\r\n    $loadFilter,\r\n    loadRoomFx,\r\n    findDirectRoomByUserIdFx,\r\n    $typingMembers,\r\n    clearTypingMember,\r\n    toggleTypingUser,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    sendTypingFx\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\n\r\nconst TYPING_SERVER_TIMEOUT = 5000\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst getCurrentRoomFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n$typingMembers\r\n    .on(toggleTypingUser, (members, member) => {\r\n        if(member.typing) {\r\n            if (members[member.roomId]) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...members[member.roomId], member] \r\n                }\r\n            } \r\n            return {\r\n                ...members,\r\n                [member.roomId]: [member] \r\n            }\r\n        } \r\n        if (members[member.roomId]) {\r\n            if (members[member.roomId].length > 1) {\r\n                const filteredUsers = members[member.roomId]\r\n                    .filter(({userId}) => userId !== member.userId)\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...filteredUsers] \r\n                }\r\n            }\r\n            delete members[member.roomId]\r\n            return {\r\n                ...members, \r\n            }\r\n        }\r\n    })\r\n    .reset(clearTypingMember)\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getCurrentRoomFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetRoomMembersFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return Object.values(room.currentState.members)\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n        const room = client().getRoom(roomId)\r\n        if (!room) throw new RoomNotFound()\r\n        const membersCache: { [id: string]: RoomMember } = {}\r\n        const searchResponse = await client().search({\r\n            body: {\r\n                search_categories: {\r\n                    room_events: {\r\n                        search_term: term,\r\n                        keys: [\"content.body\"],\r\n                        filter: {\r\n                            rooms: [roomId],\r\n                        },\r\n                        order_by: orderBy,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n        return searchResponse\r\n            .search_categories\r\n            .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n                const event = new MatrixEvent(result)\r\n                const senderId = event.getSender()\r\n                if (membersCache[senderId] === undefined) {\r\n                    membersCache[senderId] = room\r\n                        .getMember(senderId) as RoomMember\r\n                }\r\n                event.sender = membersCache[senderId]\r\n                return toMessage(event)\r\n            })\r\n    })\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id, user.userId)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    await client().invite(roomId, userId)\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n\r\nfindDirectRoomByUserIdFx.use((userId) => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\r\n    const roomId = directRooms[userId] && directRooms[userId][0]\r\n    if(!roomId) throw new RoomNotFound()\r\n    const room = cl.getRoom(roomId)\r\n    if(!room) throw new RoomNotFound()\r\n    return toMappedRoom(room)\r\n})\r\n\r\nsendTypingFx.use(async ({ roomId, isTyping }) => {\r\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach, guard, sample} from \"effector\"\r\nimport {\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    loadRoomFx,\r\n    MessageResponse\r\n} from \"@/room\"\r\nimport {\r\n    UpdateMessagesFxParams,\r\n    PaginateParams,\r\n    PaginateRoomFxParams\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const paginateRoomFx = messagesDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n","import {\r\n    attach,\r\n    combine,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport matrix, {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    debounce,\r\n    throttle\r\n} from \"patronum\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $loadFilter,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx,\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    updateMessages\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst THROTTLE_MESSAGE_TIME = 800\r\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n          && !backwardPaginationPending\r\n          && !forwardPaginationPending\r\n          && !roomLoading\r\n)\r\n    \r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n    \r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n    \r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n    \r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\n\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        throttle({\r\n            source: updateMessages,\r\n            timeout: THROTTLE_MESSAGE_TIME\r\n        }),\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nsample({\r\n    clock: debounce({\r\n        source: sendMessageFx.done,\r\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\r\n    }),\r\n    fn: ({ params, result }) => ({\r\n        roomId: params.roomId,\r\n        eventId: result.event_id\r\n    }),\r\n    target: readAllMessagesFx\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n    await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n    \r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","MsgType","MatrixMembershipType","clientStore","messagesDomain","$messages","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","DIRECT_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","isDirect","currentState","getStateEvents","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","getMappedRooms","getRooms","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","initRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","sample","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","Object","values","roomMember","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","guard","currentRoomId","roomMessageBatch","loadNewMessagesFx","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}