{"version":3,"file":"matrix-effector.umd.js","sources":["../src/types/content.ts","../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    DeleteNotificationsRuleEnabledParams,\n    EditMessagePayload,\n    EventPermissions,\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedRoomMember,\n    MappedUser,\n    Message,\n    MessageEvent,\n    NotificationRulesResult,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams,\n    StartClientParams,\n    UploadContentParams,\n    UploadContentResult,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const checkEventPermissionsFx = matrixDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = matrixDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = matrixDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\nexport const getNotificationRulesFx = matrixDomain\n    .effect<void,NotificationRulesResult,Error>()\nexport const setNotificationRuleActionFx = matrixDomain\n    .effect<SetNotificationsRuleParams,void,Error>()\nexport const setNotificationRuleEnabledFx = matrixDomain\n    .effect<SetNotificationsRuleEnabledParams,void,Error>()\nexport const deleteNotificationRuleFx = matrixDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoomMembers = matrixDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<Message>()\nexport const newMessagesLoaded = matrixDomain.event<Message[]>()\nexport const onPaginateBackwardDone = matrixDomain.event<void>()\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const onRoomInitialized = matrixDomain.event<void>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const loadRoomMessage = matrixDomain.event<GoToMessageParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\nexport const onUploadProgress = matrixDomain.event<UploadProgress>()\nexport const toLiveTimeline = matrixDomain.event<void>()\nexport const liveTimelineLoaded = matrixDomain.event<void>()\nexport const loadRoomMessageDone = matrixDomain.event<void>()\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./public\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption & {\n        messageBatchInterval?: number\n    }\n): void => {\n    if (typeof opts === \"string\") {\n        options = opts\n        return\n    }\n    const { messageBatchInterval: ms, ...restOpts} = opts\n    options = restOpts\n    if (ms !== undefined) messageBatchInterval = ms\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n","import { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse,\n    PaginateRoomFxParams,\n    UpdateMessagesFxParams\n} from \"./types\"\n\nexport const updateMessages = matrixDomain.event<void>()\nexport const getRoomMembers = matrixDomain.event<void>()\nexport const onRoomMemberUpdate = matrixDomain.event<RoomMember>()\nexport const onRoomUserUpdate = matrixDomain.event<User>()\n\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\nexport const updateMessagesFx = matrixDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = matrixDomain\n    .effect<string, MappedRoomMember[], Error>()\n","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedRoomMember,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: {\n            avatarUrl: user.avatarUrl,\n            userId : user.userId,\n            currentlyActive :  user.currentlyActive,\n            displayName :  user.displayName,\n            lastActiveAgo :  user.lastActiveAgo,\n            lastPresenceTs :  user.lastPresenceTs,\n            presence: user.presence as any,\n        },\n        userId: roomMember.userId,\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, {\n    RoomMember,\n    TimelineWindow,\n    EventStatus,\n    User,\n} from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward,\n    onRoomInitialized,\n    checkEventPermissionsFx,\n    uploadContentFx,\n    onUploadProgress,\n    $currentRoomMembers,\n    getUrlPreviewFx,\n    getNotificationRulesFx,\n    setNotificationRuleEnabledFx,\n    setNotificationRuleActionFx,\n    deleteNotificationRuleFx,\n    newMessagesLoaded,\n    toLiveTimeline,\n    liveTimelineLoaded,\n    onPaginateBackwardDone,\n    loadRoomMessage,\n    loadRoomMessageDone,\n} from \"./public\"\nimport {\n    paginateRoomFx,\n    loadRoomFx,\n    initRoomFx,\n    updateMessagesFx,\n    updateMessages,\n    getRoomMembers,\n    getRoomMembersFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n} from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMessage,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, createRoomMessageBatch, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n    UploadContentResult,\n    NotificationRulesResult,\n    SetNotificationsRuleParams,\n    Message,\n    GoToMessageParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\nimport { debounce } from \"patronum\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst UserNotFound = createCustomError(\"UserNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nconst UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n\nfunction getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\nconst toLiveTimelineFx = attach({\n    effect: loadRoomFx,\n})\nconst loadRoomMessageFx = attach({\n    effect: loadRoomFx,\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\n\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\n\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    let avatarUrl = user.avatarUrl\n    let displayName = user.displayName\n    if (!user?.avatarUrl || !user?.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        avatarUrl = profileInfo.avatar_url as string\n        displayName = profileInfo.displayname as string\n    }\n    return {\n        avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    \n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\n\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n"],"names":["MsgType","matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","$currentRoomId","store","$currentRoomMembers","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","newMessagesLoaded","onPaginateBackwardDone","onInitialSync","onCachedState","onSync","initRoom","onRoomInitialized","loadRoom","loadRoomMessage","paginateForward","paginateBackward","onUploadProgress","toLiveTimeline","liveTimelineLoaded","loadRoomMessageDone","clientStore","options","messageBatchInterval","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","checkIsDirect","roomId","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","updateMessages","getRoomMembers","onRoomMemberUpdate","onRoomUserUpdate","initRoomFx","loadRoomFx","paginateRoomFx","updateMessagesFx","getRoomMembersFx","getMappedContent","toMessage","originalEventId","undefined","getId","content","sender","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","room","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","UserNotFound","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","UserNotLoggedIn","getMessages","timelineWindow","getEvents","filter","getType","reduce","roomMessageBatch","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","loadNewMessagesFx","messages","size","length","toLiveTimelineFx","loadRoomMessageFx","from","sample","done","_","to","map","$loadFilter","combine","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","doneData","reset","setMessages","guard","currentRoomId","result","isLive","value","canPaginateBackward","canPaginateForward","target","getRoomMembersDebounced","debounce","timeout","getMappedRooms","getRooms","clock","member","currentRoomMembers","user","find","userId","pending","fn","initialEventId","initialWindowSize","loadAdditionalDataDirection","use","async","cl","loggedUserId","getUserId","getUser","avatarUrl","displayName","profileInfo","getProfileInfo","avatar_url","displayname","currentlyActive","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","startup","startClient","term","orderBy","getRoom","membersCache","search","body","search_categories","room_events","search_term","keys","rooms","order_by","results","MatrixEvent","senderId","getSender","getMember","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","liveEvent","state","prevState","e","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","unreadCount","i","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","eventsRetrieved","paginate","EventTimeline","BACKWARDS","FORWARDS","makeRequest","requestLimit","dir","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","mxEvent","canRedact","currentState","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","file","includeFilename","onlyContentUri","rawResponse","type","promise","uploadContent","progressHandler","loaded","total","abort","members","roomMember","membership","powerLevel","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","ms","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp","opts","restOpts"],"mappings":"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"}