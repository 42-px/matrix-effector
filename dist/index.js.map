{"version":3,"file":"index.js","sources":["../src/types/content.ts","../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    DeleteNotificationsRuleEnabledParams,\n    EditMessagePayload,\n    EventPermissions,\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedRoomMember,\n    MappedUser,\n    Message,\n    MessageEvent,\n    NotificationRulesResult,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams,\n    StartClientParams,\n    UploadContentParams,\n    UploadContentResult,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const checkEventPermissionsFx = matrixDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = matrixDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = matrixDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\nexport const getNotificationRulesFx = matrixDomain\n    .effect<void,NotificationRulesResult,Error>()\nexport const setNotificationRuleActionFx = matrixDomain\n    .effect<SetNotificationsRuleParams,void,Error>()\nexport const setNotificationRuleEnabledFx = matrixDomain\n    .effect<SetNotificationsRuleEnabledParams,void,Error>()\nexport const deleteNotificationRuleFx = matrixDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\nexport const logoutFx = matrixDomain\n    .effect<void,void,Error>()\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoomMembers = matrixDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<Message>()\nexport const newMessagesLoaded = matrixDomain.event<Message[]>()\nexport const onPaginateBackwardDone = matrixDomain.event<void>()\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const onRoomInitialized = matrixDomain.event<void>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const loadRoomMessage = matrixDomain.event<GoToMessageParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\nexport const onUploadProgress = matrixDomain.event<UploadProgress>()\nexport const toLiveTimeline = matrixDomain.event<void>()\nexport const liveTimelineLoaded = matrixDomain.event<void>()\nexport const loadRoomMessageDone = matrixDomain.event<void>()\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./public\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\nexport const createClient = (): void => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        createClient()\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption & {\n        messageBatchInterval?: number\n    }\n): void => {\n    if (typeof opts === \"string\") {\n        options = opts\n        return\n    }\n    const { messageBatchInterval: ms, ...restOpts} = opts\n    options = restOpts\n    if (ms !== undefined) messageBatchInterval = ms\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n","import { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse,\n    PaginateRoomFxParams,\n    UpdateMessagesFxParams\n} from \"./types\"\n\nexport const updateMessages = matrixDomain.event<void>()\nexport const getRoomMembers = matrixDomain.event<void>()\nexport const onRoomMemberUpdate = matrixDomain.event<RoomMember>()\nexport const onRoomUserUpdate = matrixDomain.event<User>()\n\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\nexport const updateMessagesFx = matrixDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = matrixDomain\n    .effect<string, MappedRoomMember[], Error>()\n","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedRoomMember,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: {\n            avatarUrl: user.avatarUrl,\n            userId : user.userId,\n            currentlyActive :  user.currentlyActive,\n            displayName :  user.displayName,\n            lastActiveAgo :  user.lastActiveAgo,\n            lastPresenceTs :  user.lastPresenceTs,\n            presence: user.presence as any,\n        },\n        userId: roomMember.userId,\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, {\n    RoomMember,\n    TimelineWindow,\n    EventStatus,\n    User,\n} from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward,\n    onRoomInitialized,\n    checkEventPermissionsFx,\n    uploadContentFx,\n    onUploadProgress,\n    $currentRoomMembers,\n    getUrlPreviewFx,\n    getNotificationRulesFx,\n    setNotificationRuleEnabledFx,\n    setNotificationRuleActionFx,\n    deleteNotificationRuleFx,\n    newMessagesLoaded,\n    toLiveTimeline,\n    liveTimelineLoaded,\n    onPaginateBackwardDone,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    logoutFx\n} from \"./public\"\nimport {\n    paginateRoomFx,\n    loadRoomFx,\n    initRoomFx,\n    updateMessagesFx,\n    updateMessages,\n    getRoomMembers,\n    getRoomMembersFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n} from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMessage,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, createRoomMessageBatch, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n    UploadContentResult,\n    NotificationRulesResult,\n    SetNotificationsRuleParams,\n    Message,\n    GoToMessageParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\nimport { debounce } from \"patronum\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst UserNotFound = createCustomError(\"UserNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nconst UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n\nfunction getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\nconst toLiveTimelineFx = attach({\n    effect: loadRoomFx,\n})\nconst loadRoomMessageFx = attach({\n    effect: loadRoomFx,\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\n\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\n\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    let avatarUrl = user.avatarUrl\n    let displayName = user.displayName\n    if (!user?.avatarUrl || !user?.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        avatarUrl = profileInfo.avatar_url as string\n        displayName = profileInfo.displayname as string\n    }\n    return {\n        avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    \n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\n\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n\nlogoutFx.use(() => client().logout())\n"],"names":["MsgType","matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","logoutFx","$currentRoomId","store","$currentRoomMembers","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","newMessagesLoaded","onPaginateBackwardDone","onInitialSync","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","initRoom","onRoomInitialized","loadRoom","loadRoomMessage","paginateForward","paginateBackward","onUploadProgress","toLiveTimeline","liveTimelineLoaded","loadRoomMessageDone","clientStore","options","messageBatchInterval","callbacksStore","createClient","removeAllListeners","matrix","forEach","eventName","cb","on","client","prependClientParams","opts","restOpts","undefined","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","getSenderAvatarUrl","sender","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","roomId","userId","room","getRoom","otherMember","getMember","mxcUrlToHttp","mxcUrl","checkIsDirect","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","updateMessages","getRoomMembers","onRoomMemberUpdate","onRoomUserUpdate","initRoomFx","loadRoomFx","paginateRoomFx","updateMessagesFx","getRoomMembersFx","getMappedContent","toMessage","originalEventId","relation","getRelation","getId","content","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","mergeMessageEvents","acc","isRelation","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","UserNotFound","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","UserNotLoggedIn","getMessages","timelineWindow","getEvents","filter","getType","reduce","roomMessageBatch","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","loadNewMessagesFx","messages","size","length","toLiveTimelineFx","loadRoomMessageFx","forward","from","sample","done","_","to","map","$loadFilter","combine","Boolean","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","doneData","reset","setMessages","guard","currentRoomId","result","isLive","value","canPaginateBackward","canPaginateForward","target","getRoomMembersDebounced","debounce","getMappedRooms","getRooms","clock","member","currentRoomMembers","user","find","pending","fn","initialEventId","initialWindowSize","loadAdditionalDataDirection","use","async","cl","loggedUserId","getUserId","getUser","avatarUrl","displayName","profileInfo","getProfileInfo","avatar_url","displayname","currentlyActive","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","startup","startClient","term","orderBy","membersCache","search","body","search_categories","room_events","search_term","keys","rooms","order_by","results","MatrixEvent","senderId","getSender","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","liveEvent","state","prevState","e","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","unreadCount","i","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","eventsRetrieved","paginate","EventTimeline","BACKWARDS","FORWARDS","makeRequest","requestLimit","dir","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","mxEvent","canRedact","currentState","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","file","includeFilename","onlyContentUri","rawResponse","type","promise","uploadContent","progressHandler","loaded","total","abort","members","roomMember","membership","powerLevel","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","logout"],"mappings":"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"}