{"version":3,"file":"index.js","sources":["../src/root.ts","../src/types/content.ts","../src/types/index.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport enum ParsedMessageNodeTypes {\r\n  String = \"string\",\r\n  Link = \"link\",\r\n  Mention = \"mention\",\r\n}\r\n\r\nexport type ParsedMessageNode= {\r\n  type: ParsedMessageNodeTypes\r\n  content: string\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    EventType,\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent, ParsedMessageNode } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport enum Presence {\r\n    online = \"online\",\r\n    offline = \"offline\", \r\n    unavailable = \"unavailable\",\r\n} \r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    presence: Presence\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n    seen?: boolean\r\n    parsedBody?: ParsedMessageNode[]\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n    powerlevels: RoomPowerLevelsContent\r\n    myPowerLevel: number\r\n    canKick: boolean\r\n    canBan: boolean\r\n    canInvite: boolean\r\n    canSendEvents: {\r\n        canChangeRoomAvatar: boolean\r\n        canChangeHistoryVisivility: boolean\r\n        canChangeRoomName: boolean\r\n        canChangeRoomPowerLevels: boolean\r\n        canChangeCanonicalAlias: boolean\r\n        canChangeRoomEncryption: boolean\r\n        canChangeRoomTobstone: boolean\r\n        canChangeRoomServerAcl: boolean\r\n    }\r\n    canRedact: boolean\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n\r\ntype EventPowerLevels = {\r\n    [EventType.RoomCanonicalAlias]: number\r\n    [EventType.RoomAvatar]: number\r\n    [EventType.RoomEncryption]: number\r\n    [EventType.RoomHistoryVisibility]: number\r\n    [EventType.RoomName]: number\r\n    [EventType.RoomPowerLevels]: number\r\n    [EventType.RoomServerAcl]: number\r\n    [EventType.RoomTombstone]: number\r\n}\r\n\r\nexport type RoomPowerLevelsContent = {\r\n    ban: number\r\n    events: EventPowerLevels\r\n    users: {\r\n        [key in string]: number \r\n    }\r\n    redact: number\r\n    kick: number\r\n    invite: number\r\n    state_default: number\r\n    users_default: number\r\n    events_default: number\r\n}\r\n\r\nexport enum UserRole {\r\n    admin = \"Admin\",\r\n    moderator = \"Moderator\"\r\n}\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams,\r\n    CreateClientParams, \r\n    AuthData \r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message,\r\n    UserRole\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n  role?: UserRole\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    \"public\" = \"public\",\r\n    \"private\" = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type InviteUsersParams = {\r\n    roomId: string\r\n    usersIds: string[]\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n\r\nexport type SendTypingParams = {\r\n    roomId: string\r\n    isTyping: boolean\r\n  }\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    RoomMember,\r\n    User\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixMembershipType,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams,\r\n    LoadRoomFxParams,\r\n    MessageResponse,\r\n    SendTypingParams,\r\n    InviteUsersParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $typingMembers = roomDomain\r\n    .store<{[key in string]: RoomMember[]}>({})\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.join) ?? []\r\n    )\r\nexport const $currentRoomInvitedMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.invite\r\n        ) ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const clearTypingMember = roomDomain.event<void>()\r\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const findDirectRoomByUserIdFx = roomDomain\r\n    .effect<string, MappedRoom, Error>()\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const sendTypingFx = roomDomain\r\n    .effect<SendTypingParams, void, Error>()\r\nexport const getMembersByRoomIdFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n}\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview,\r\n    PaginateParams,\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\nexport const $currentRoomUnreadMessageCount = messagesDomain\r\n    .store<number | null>(null)\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\r\nexport const onPaginateForwardDone = messagesDomain.event<void>()\r\nexport const paginateForward = messagesDomain.event<PaginateParams>()\r\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\r\n\r\nexport const $paginateForwardPending = messagesDomain.store(false)\r\nexport const $paginateBackwardPending = messagesDomain.store(false)\r\nexport const $canPaginateBackward = messagesDomain.store(true)\r\nexport const $canPaginateForward = messagesDomain.store(true)\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const d = root.domain(\"profile\")\r\n","import { d } from \"./domain\"\r\n\r\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\r\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\r\n\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\nexport const CantInviteUsers = \r\n  createCustomError(\"CantInviteUsers\")\r\nexport const NotEnoughPermissions = \r\n  createCustomError(\"NotEnoughPermissions\")\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room,\r\n    EventType,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { StateEventsContent } from \"./app/types\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType,\r\n    RoomPowerLevelsContent,\r\n    UserRole,\r\n    MsgType,\r\n    ParsedMessageNodeTypes,\r\n    ParsedMessageNode\r\n} from \"./types\"\r\n// regexp implements the rfc3986 standard + custom url\r\n// eslint-disable-next-line max-len\r\nconst LINK_REG_EXP = /(^| )(?:[a-zA-Z][a-zA-Z0-9+-\\.]*:(?:(?:\\/\\/(?:[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:]*@)?(?:\\[(?:(?:(?:[0-9A-Fa-f]{1,4}:){6}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|::(?:[0-9A-Fa-f]{1,4}:){5}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::)|v[0-9A-Fa-f]+\\.[a-zA-Z0-9-\\._~!\\$&'\\(\\)\\*\\+,;=:]+)\\]|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=]{0,255})(?::[0-9]*)?(?:\\/[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*)|\\/(?:[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]+(?:\\/[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*)?|[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]+(?:\\/[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*))(?:\\?[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@\\/\\?]*(?=#|$))?(?:#[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@\\/\\?]*)?|(^| )([\\w]{0,}\\.[\\w]{0,}\\.|[\\w]{0,}\\.)(ru|com|me)\\S{0,}/gm\r\nconst MENTION_REG_EXP = /( |^)@\\S{0,}/gm\r\n\r\nexport const toMessageSeen = (\r\n    message: Message,\r\n    myUserId: string,\r\n    room: Room\r\n): Message => {\r\n    message.seen = room.getJoinedMembers().some((member) => {\r\n        if (member.userId === myUserId) return false\r\n        return room\r\n            .hasUserReadEvent(member.userId, message.originalEventId)\r\n    })\r\n    return message\r\n}\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = (): string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId() as string,\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nconst mapRegExpMatchAll = (\r\n    regExp: RegExp, type: ParsedMessageNodeTypes, message: string\r\n): {\r\n    index: number\r\n    content: string\r\n    type: ParsedMessageNodeTypes\r\n}[] =>  [...message.matchAll(regExp)].map((el) => {\r\n    return {\r\n        index: el.index ?? 0,\r\n        type: type,\r\n        content: el[0]\r\n    }\r\n})\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    const content = getMappedContent(event)\r\n    const message = content.body\r\n    const parsedBody: ParsedMessageNode[] = []\r\n    if (content.msgtype === MsgType.Text) {\r\n        const findContent = [\r\n            ...mapRegExpMatchAll(\r\n                MENTION_REG_EXP, ParsedMessageNodeTypes.Mention, message\r\n            ),\r\n            ...mapRegExpMatchAll(\r\n                LINK_REG_EXP, ParsedMessageNodeTypes.Link, message\r\n            ),\r\n        ].sort((a, b) => a.index - b.index)\r\n        if (!findContent.length) {\r\n            parsedBody.push({\r\n                type: ParsedMessageNodeTypes.String,\r\n                content: message\r\n            })\r\n        } else {\r\n            let prevIndex = 0\r\n            findContent.forEach((element) => {\r\n                const prevText = message.substring(prevIndex, element.index)\r\n                // Добавляем текст который находится между предыдущим и текущим элементом, если он есть\r\n                if (prevText.trim()) {\r\n                    parsedBody.push({\r\n                        type: ParsedMessageNodeTypes.String,\r\n                        content: prevText\r\n                    })\r\n                }\r\n                parsedBody.push({\r\n                    type: element.type,\r\n                    content: element.content.trim()\r\n                })\r\n                \r\n                prevIndex = element.index + element.content.length\r\n            })\r\n        }\r\n    }\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content,\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n        parsedBody,\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    let role = undefined\r\n    if (roomMember.powerLevel === 100) {\r\n        role = UserRole.admin\r\n    } else if (roomMember.powerLevel === 50) {\r\n        role = UserRole.moderator\r\n    }\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n        role,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    const powerLevelsContent = matrixRoom.currentState\r\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\r\n        .getContent<RoomPowerLevelsContent>()\r\n\r\n    const isDirect = Boolean(matrixRoom.currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate, \r\n            \"\"\r\n        )?.getContent<StateEventsContent>()?.isDirect)\r\n\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n\r\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\r\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\r\n    const myUserId = cl.getUserId()\r\n\r\n    if (lastMessage) {\r\n        if (lastMessage.sender.userId !== myUserId) {\r\n            lastMessage.seen = matrixRoom\r\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \r\n        } else {\r\n            lastMessage = toMessageSeen(\r\n                lastMessage,\r\n                myUserId,\r\n                matrixRoom\r\n            )\r\n        }\r\n    }\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \r\n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\r\n        powerlevels: powerLevelsContent,\r\n        myPowerLevel,\r\n        canBan: myPowerLevel >= powerLevelsContent.ban,\r\n        canKick: myPowerLevel >= powerLevelsContent.kick,\r\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\r\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\r\n        canSendEvents: {\r\n            canChangeHistoryVisivility: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomHistoryVisibility]\r\n            ),\r\n            canChangeRoomAvatar: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\r\n            ),\r\n            canChangeRoomName: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\r\n            ),\r\n            canChangeRoomPowerLevels: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomPowerLevels]\r\n            ),\r\n            canChangeCanonicalAlias: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomCanonicalAlias]\r\n            ),\r\n            canChangeRoomEncryption: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomEncryption]\r\n            ),\r\n            canChangeRoomServerAcl: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomServerAcl]\r\n            ),\r\n            canChangeRoomTobstone: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomTombstone]\r\n            )\r\n        }\r\n    }\r\n}\r\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client } from \"./matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport {\r\n    mergeMessageEvents,\r\n    toMessageSeen\r\n} from \"./mappers\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams,\r\n    Message,\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\r\n    const messages = timelineWindow.getEvents()\r\n        .filter((event) => (\r\n            [\r\n                ROOM_MESSAGE_EVENT,\r\n                ROOM_REDACTION_EVENT\r\n            ].includes(event.getType())))\r\n        .reduce(mergeMessageEvents, [])\r\n    const cl = client()\r\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\r\n    const room = cl.getRoom(roomId as string)\r\n    if (!room) throw new RoomNotFound()\r\n    const myMessages = []\r\n    const otherMessages = []\r\n    const myUserId = cl.getUserId()\r\n    let findFirstSeenOtherMessage = false\r\n    let findFirstSeenMyMessage = false\r\n    for (let i = messages.length - 1; i >= 0; i--) {\r\n        if (messages[i].sender.userId === myUserId) {\r\n            myMessages.push(messages[i])\r\n        } else {\r\n            otherMessages.push(messages[i])\r\n        }\r\n    }\r\n    myMessages.forEach((message) => {\r\n        if (findFirstSeenMyMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message = toMessageSeen(message, myUserId, room)\r\n            findFirstSeenMyMessage = Boolean(message.seen)\r\n        }\r\n    })\r\n    otherMessages.forEach((message) => {\r\n        if (findFirstSeenOtherMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message.seen = room\r\n                .hasUserReadEvent(myUserId, message.originalEventId)\r\n            findFirstSeenOtherMessage = message.seen\r\n        }\r\n    })\r\n    return messages\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (\r\n    roomId: string,\r\n    companion?: string\r\n): Promise<{}> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        ).getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n\r\n    if(companion) {\r\n        return await cl.setAccountData(DIRECT_EVENT, {\r\n            ...prevData,\r\n            [companion]: [roomId]\r\n        })\r\n        \r\n    }\r\n    return await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    EventType,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    toggleTypingUser\r\n} from \"@/room\"\r\nimport { UserNotFound } from \"@/errors\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = Boolean(room.currentState\r\n            .getStateEvents(\r\n                EventType.RoomCreate,\r\n                \"\"\r\n            )?.getContent<StateEventsContent>()?.isDirect)\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            updateMessages()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => {\r\n            onRoomMemberUpdate(member)\r\n            toggleTypingUser(member)\r\n        }\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    } = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const { store } = client()\r\n    if (store) await store.startup()\r\n    await client().startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { client } from \"../matrix-client\"\r\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\r\n\r\nupdateDisplayNameFx.use(async (newDisplayName) => {\r\n    await client().setDisplayName(newDisplayName)\r\n})\r\n\r\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\r\n    await client().setAvatarUrl(newAvatarUrl)\r\n})\r\n\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    EventType,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { DIRECT_EVENT } from \"@/constants\"\r\nimport { \r\n    CantInviteUsers,\r\n    ClientNotInitialized,\r\n    NotEnoughPermissions,\r\n    RoomNotFound, \r\n    TimelineWindowUndefined,\r\n    UserNotFound \r\n} from \"@/errors\"\r\nimport { getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    initRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx,\r\n    $loadFilter,\r\n    loadRoomFx,\r\n    findDirectRoomByUserIdFx,\r\n    $typingMembers,\r\n    clearTypingMember,\r\n    toggleTypingUser,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    sendTypingFx,\r\n    getMembersByRoomIdFx,\r\n    inviteUsersFx\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\n\r\nconst TYPING_SERVER_TIMEOUT = 5000\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst getRoomMembersFx = attach({\r\n    effect: getMembersByRoomIdFx\r\n})\r\n\r\nconst getCurrentRoomFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n$typingMembers\r\n    .on(toggleTypingUser, (members, member) => {\r\n        if(member.typing) {\r\n            if (members[member.roomId]) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...members[member.roomId], member] \r\n                }\r\n            } \r\n            return {\r\n                ...members,\r\n                [member.roomId]: [member] \r\n            }\r\n        } \r\n        if (members[member.roomId]) {\r\n            if (members[member.roomId].length > 1) {\r\n                const filteredUsers = members[member.roomId]\r\n                    .filter(({userId}) => userId !== member.userId)\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...filteredUsers] \r\n                }\r\n            }\r\n            delete members[member.roomId]\r\n            return {\r\n                ...members, \r\n            }\r\n        }\r\n    })\r\n    .reset(clearTypingMember)\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getCurrentRoomFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetMembersByRoomIdFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return room.getMembers()\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n        const room = client().getRoom(roomId)\r\n        if (!room) throw new RoomNotFound()\r\n        const membersCache: { [id: string]: RoomMember } = {}\r\n        const searchResponse = await client().search({\r\n            body: {\r\n                search_categories: {\r\n                    room_events: {\r\n                        search_term: term,\r\n                        keys: [\"content.body\"],\r\n                        filter: {\r\n                            rooms: [roomId],\r\n                        },\r\n                        order_by: orderBy,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n        return searchResponse\r\n            .search_categories\r\n            .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n                const event = new MatrixEvent(result)\r\n                const senderId = event.getSender()\r\n                if (membersCache[senderId] === undefined) {\r\n                    membersCache[senderId] = room\r\n                        .getMember(senderId) as RoomMember\r\n                }\r\n                event.sender = membersCache[senderId]\r\n                return toMessage(event)\r\n            })\r\n    })\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id, user.userId)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    try {\r\n        await client().invite(roomId, userId)\r\n    } catch (e: any) {\r\n        if (e.httpStatus === 403) {\r\n            throw new NotEnoughPermissions(\r\n                \"Not enough permissions to invite users\"\r\n            )\r\n        }\r\n    }\r\n})\r\n\r\ninviteUsersFx.use( async ({usersIds, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    for (const id of usersIds) {\r\n        try {\r\n            await client().invite(roomId, id)\r\n        } catch (e: any) {\r\n            if (e.httpStatus === 403) {\r\n                throw new NotEnoughPermissions()\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n\r\nfindDirectRoomByUserIdFx.use((userId) => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\r\n    const roomId = directRooms[userId] && directRooms[userId][0]\r\n    if(!roomId) throw new RoomNotFound()\r\n    const room = cl.getRoom(roomId)\r\n    if(!room) throw new RoomNotFound()\r\n    return toMappedRoom(room)\r\n})\r\n\r\nsendTypingFx.use(async ({ roomId, isTyping }) => {\r\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach, guard, sample} from \"effector\"\r\nimport {\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    loadRoomFx,\r\n    MessageResponse\r\n} from \"@/room\"\r\nimport {\r\n    UpdateMessagesFxParams,\r\n    PaginateParams,\r\n    PaginateRoomFxParams\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const paginateRoomFx = messagesDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n\r\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\r\n    .effect<string, number, Error>()\r\n","import {\r\n    attach,\r\n    combine,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport matrix, {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    debounce,\r\n    throttle\r\n} from \"patronum\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $loadFilter,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx,\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx,\r\n    updateCurrentRoomUnreadMessageCountFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    updateMessages,\r\n    $currentRoomUnreadMessageCount,\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst THROTTLE_MESSAGE_TIME = 800\r\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n\r\n$currentRoomUnreadMessageCount\r\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\r\n    .reset($currentRoomId)\r\n\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n          && !backwardPaginationPending\r\n          && !forwardPaginationPending\r\n          && !roomLoading\r\n)\r\n    \r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n    \r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n    \r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n    \r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\n\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        throttle({\r\n            source: updateMessages,\r\n            timeout: THROTTLE_MESSAGE_TIME\r\n        }),\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nguard({\r\n    clock: $messages.updates,\r\n    source: $currentRoomId,\r\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\r\n    target: updateCurrentRoomUnreadMessageCountFx\r\n})\r\n\r\nsample({\r\n    clock: debounce({\r\n        source: sendMessageFx.done,\r\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\r\n    }),\r\n    fn: ({ params, result }) => ({\r\n        roomId: params.roomId,\r\n        eventId: result.event_id\r\n    }),\r\n    target: readAllMessagesFx\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n    await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n    \r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\n\r\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const count = matrixRoom.getUnreadNotificationCount()\r\n    return count ?? 0\r\n})\r\n"],"names":["MsgType","ParsedMessageNodeTypes","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","clientStore","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","LINK_REG_EXP","MENTION_REG_EXP","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","mapRegExpMatchAll","regExp","type","_toConsumableArray","matchAll","el","index","content","toMessage","relation","getRelation","getContent","getMappedContent","body","parsedBody","msgtype","Text","findContent","Mention","Link","sort","a","b","length","prevIndex","element","prevText","substring","trim","String","getId","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","JSON","stringify","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","_client$getRoom$curre","_client$getRoom$curre2","_context6","httpStatus","usersIds","_client$getRoom$curre3","_client$getRoom$curre4","id","_context7","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","updates","eventId","event_id","txnId","sendMessage","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount"],"mappings":"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"}