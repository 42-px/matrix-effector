{"version":3,"file":"index.js","sources":["../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { combine } from \"effector\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedUser,\n    Message,\n    MessageEvent,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    StartClientParams\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\n\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $eventsRetrieved = matrixDomain.store<boolean | null>(null)\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\n\n\nexport const $canLoad = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const $canPaginate = combine(\n    $canLoad,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n  && !backwardPaginationPending\n  && !forwardPaginationPending\n  && !roomLoading\n)\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { matrixDomain } from \"./domain\"\nimport {\n    LoadRoomFxParams,\n    MessageResponse,\n    PaginateRoomFxParams\n} from \"./types\"\n\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n} from \"./types\"\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: event.getContent(),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: event.getContent(),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, forward, guard, sample } from \"effector\"\nimport matrix, { RoomMember, TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoomFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $canLoad,\n    $canPaginate,\n    $currentRoomId,\n    $eventsRetrieved,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending\n} from \"./public\"\nimport { paginateRoomFx, loadRoomFx } from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\nconst onRoomReset = $currentRoomId.updates\n    .filterMap(id => id === null ? true : undefined)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId.updates)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result: { messages, isLive, eventsRetrieved }\n            }) => ({\n            currentRoomId,\n            roomId,\n            messages,\n            isLive,\n            eventsRetrieved,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId.updates)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset(onRoomReset)\n$eventsRetrieved\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset(onRoomReset)\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize\n        })\n    ),\n    filter: $canLoad,\n    target: loadRoomFx\n})\nguard({\n    source: paginateBackward,\n    filter: $canPaginate,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $canPaginate,\n    target: paginateForwardFx\n})\n\ngetLoggedUserFx.use(() => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    return {\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const isLive = !timelineWindow.canPaginate(\"f\")\n    let messages = timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        const size = messages.length - initialWindowSize\n        const eventsRetrieved: boolean = await timelineWindow\n            .paginate(matrix.EventTimeline.BACKWARDS, size)\n        if (eventsRetrieved) {\n            messages = timelineWindow\n                .getEvents()\n                .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                    .includes(event.getType()))\n                .reduce(mergeMessageEvents, [])\n        }\n    }\n    return {\n        messages,\n        isLive,\n        eventsRetrieved: true\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    const eventsRetrieved: boolean = await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const isLive = !timelineWindow.canPaginate(\"f\")\n    const messages =  timelineWindow.getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    return {\n        messages,\n        isLive,\n        eventsRetrieved\n    }\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n"],"names":["matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","initRoomFx","$currentRoomId","store","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$eventsRetrieved","roomMessage","event","createRoomMessageBatch","ms","batchEvents","onInitialSync","onCachedState","onSync","createOnSyncThrottled","throttle","source","timeout","initRoom","loadRoom","paginateForward","paginateBackward","$canLoad","combine","roomId","timelineWindow","Boolean","$canPaginate","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","prependClientParams","opts","onClientEvent","callbacks","push","getSenderAvatarUrl","sender","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","userId","room","getRoom","otherMember","getMember","checkIsDirect","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","loadRoomFx","paginateRoomFx","toMessage","originalEventId","undefined","getId","content","originServerTs","getDate","edited","replacingEventId","redacted","isRedacted","toMappedRoom","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","onRoomReset","updates","filterMap","id","_","doneData","reset","setMessages","guard","sample","done","currentRoomId","result","messages","isLive","eventsRetrieved","filter","getMappedRooms","getRooms","map","forward","from","pending","to","initialEventId","initialWindowSize","target","use","cl","loggedUserId","getUserId","user","getUser","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","async","startup","startClient","term","membersCache","search","body","search_categories","room_events","search_term","keys","rooms","results","MatrixEvent","senderId","getSender","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","getType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","reduce","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","size","paginate","EventTimeline","BACKWARDS","makeRequest","requestLimit","dir","FORWARDS","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow"],"mappings":"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"}