{"version":3,"file":"index.js","sources":["../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    EventPermissions,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedUser,\n    Message,\n    MessageEvent,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    StartClientParams\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const checkEventPermissionsFx = matrixDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\n\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const onRoomInitialized = matrixDomain.event<void>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    PaginateRoomFxParams,\n    UpdateMessagesFxParams\n} from \"./types\"\n\nexport const updateMessages = matrixDomain.event<void>()\n\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\nexport const updateMessagesFx = matrixDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n} from \"./types\"\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const content: any = {}\n    const matrixContent: any = event.getContent()\n    if (matrixContent.body) content.body = matrixContent.body\n    if (matrixContent.msgtype) content.msgtype = matrixContent.body\n    if (matrixContent[\"m.relates_to\"]) {\n        content[\"m.relates_to\"] = {...matrixContent[\"m.relates_to\"]}\n    }\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content,\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const content: any = {}\n    const matrixContent: any = event.getContent()\n    if (matrixContent.body) content.body = matrixContent.body\n    if (matrixContent.msgtype) content.msgtype = matrixContent.body\n    if (matrixContent[\"m.relates_to\"]) {\n        content[\"m.relates_to\"] = {...matrixContent[\"m.relates_to\"]}\n    }\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: content,\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, {\n    RoomMember,\n    TimelineWindow,\n    EventStatus,\n    EventType,\n} from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward,\n    onRoomInitialized,\n    checkEventPermissionsFx\n} from \"./public\"\nimport {\n    paginateRoomFx,\n    loadRoomFx,\n    initRoomFx,\n    updateMessagesFx,\n    updateMessages\n} from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nconst UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n\nfunction getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({ timelineWindow, roomId })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(() => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    return {\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\n"],"names":["matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","checkEventPermissionsFx","$currentRoomId","store","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","createRoomMessageBatch","ms","batchEvents","onInitialSync","onCachedState","onSync","createOnSyncThrottled","throttle","source","timeout","initRoom","onRoomInitialized","loadRoom","paginateForward","paginateBackward","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","prependClientParams","opts","onClientEvent","callbacks","push","getSenderAvatarUrl","sender","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","roomId","userId","room","getRoom","otherMember","getMember","checkIsDirect","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","updateMessages","initRoomFx","loadRoomFx","paginateRoomFx","updateMessagesFx","toMessage","originalEventId","content","matrixContent","body","msgtype","undefined","getId","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","UserNotLoggedIn","getMessages","timelineWindow","getEvents","filter","getType","reduce","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","$loadFilter","combine","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","_","doneData","reset","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","map","messages","isLive","canPaginateBackward","canPaginateForward","forward","from","pending","to","clock","fn","target","initialEventId","initialWindowSize","loadAdditionalDataDirection","use","cl","loggedUserId","getUserId","user","getUser","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","async","startup","startClient","term","membersCache","search","search_categories","room_events","search_term","keys","rooms","results","MatrixEvent","senderId","getSender","txnId","sendMessage","eventId","m.new_content","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","makeRequest","requestLimit","dir","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","mxEvent","canRedact","currentState","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent"],"mappings":"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"}