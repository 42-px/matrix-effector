{"version":3,"file":"index.js","sources":["../src/root.ts","../src/room/types.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/types/index.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    \"public\" = \"public\",\r\n    \"private\" = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n\r\nexport type SendTypingParams = {\r\n    roomId: string\r\n    isTyping: boolean\r\n  }\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams,\r\n    CreateClientParams, \r\n    AuthData \r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    RoomMember,\r\n    User\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams,\r\n    LoadRoomFxParams,\r\n    MessageResponse,\r\n    SendTypingParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $typingMembers = roomDomain\r\n    .store<{[key in string]: RoomMember[]}>({})\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === \"join\") ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const clearTypingMember = roomDomain.event<void>()\r\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const findDirectRoomByUserIdFx = roomDomain\r\n    .effect<string, MappedRoom, Error>()\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const sendTypingFx = roomDomain\r\n    .effect<SendTypingParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    presence: \"online\" | \"offline\" | \"unavailable\"\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n    seen?: boolean\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n}\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview,\r\n    PaginateParams,\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\r\nexport const onPaginateForwardDone = messagesDomain.event<void>()\r\nexport const paginateForward = messagesDomain.event<PaginateParams>()\r\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\r\n\r\nexport const $paginateForwardPending = messagesDomain.store(false)\r\nexport const $paginateBackwardPending = messagesDomain.store(false)\r\nexport const $canPaginateBackward = messagesDomain.store(true)\r\nexport const $canPaginateForward = messagesDomain.store(true)\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType\r\n} from \"./types\"\r\nimport { StateEventsContent } from \"./app/types\"\r\n\r\nexport const toMessageSeen = (\r\n    message: Message,\r\n    myUserId: string,\r\n    room: Room\r\n): Message => {\r\n    message.seen = room.getJoinedMembers().some((member) => {\r\n        if (member.userId === myUserId) return false\r\n        return room\r\n            .hasUserReadEvent(member.userId, message.originalEventId)\r\n    })\r\n    return message\r\n}\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = (): string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId(),\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    const isDirect = Boolean(matrixRoom.currentState\r\n        .getStateEvents(\r\n            \"m.room.create\",\r\n            \"\"\r\n        )?.getContent<StateEventsContent>()?.isDirect)\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n\r\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\r\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\r\n\r\n    if (lastMessage) {\r\n        const myUserId = cl.getUserId()\r\n        if (lastMessage.sender.userId !== myUserId) {\r\n            lastMessage.seen = matrixRoom\r\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \r\n        } else {\r\n            lastMessage = toMessageSeen(\r\n                lastMessage,\r\n                myUserId,\r\n                matrixRoom\r\n            )\r\n        }\r\n    }\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\r\n    }\r\n}\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client } from \"./matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport {\r\n    mergeMessageEvents,\r\n    toMessageSeen\r\n} from \"./mappers\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams,\r\n    Message,\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\r\n    const messages = timelineWindow.getEvents()\r\n        .filter((event) => (\r\n            [\r\n                ROOM_MESSAGE_EVENT,\r\n                ROOM_REDACTION_EVENT\r\n            ].includes(event.getType())))\r\n        .reduce(mergeMessageEvents, [])\r\n    const cl = client()\r\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const myMessages = []\r\n    const otherMessages = []\r\n    const myUserId = cl.getUserId()\r\n    let findFirstSeenOtherMessage = false\r\n    let findFirstSeenMyMessage = false\r\n    for (let i = messages.length - 1; i >= 0; i--) {\r\n        if (messages[i].sender.userId === myUserId) {\r\n            myMessages.push(messages[i])\r\n        } else {\r\n            otherMessages.push(messages[i])\r\n        }\r\n    }\r\n    myMessages.forEach((message) => {\r\n        if (findFirstSeenMyMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message = toMessageSeen(message, myUserId, room)\r\n            findFirstSeenMyMessage = Boolean(message.seen)\r\n        }\r\n    })\r\n    otherMessages.forEach((message) => {\r\n        if (findFirstSeenOtherMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message.seen = room\r\n                .hasUserReadEvent(myUserId, message.originalEventId)\r\n            findFirstSeenOtherMessage = message.seen\r\n        }\r\n    })\r\n    return messages\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (\r\n    roomId: string,\r\n    companion?: string\r\n): Promise<{}> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            \"m.room.create\",\r\n        )[0].getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n\r\n    if(companion) {\r\n        return await cl.setAccountData(DIRECT_EVENT, {\r\n            ...prevData,\r\n            [companion]: [roomId]\r\n        })\r\n        \r\n    }\r\n    return await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    toggleTypingUser\r\n} from \"@/room\"\r\nimport { UserNotFound } from \"@/errors\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = Boolean(room.currentState\r\n            .getStateEvents(\r\n                \"m.room.create\",\r\n                \"\"\r\n            )?.getContent<StateEventsContent>()?.isDirect)\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            updateMessages()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => toggleTypingUser(member)\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    } = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const { store } = client()\r\n    if (store) await store.startup()\r\n    await client().startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    MappedRoomMember,\r\n    RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const getRoomMembersFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { DIRECT_EVENT } from \"@/constants\"\r\nimport { \r\n    ClientNotInitialized,\r\n    RoomNotFound, \r\n    TimelineWindowUndefined,\r\n    UserNotFound \r\n} from \"@/errors\"\r\nimport { getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    getRoomMembersFx,\r\n    initRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx,\r\n    $loadFilter,\r\n    loadRoomFx,\r\n    findDirectRoomByUserIdFx,\r\n    $typingMembers,\r\n    clearTypingMember,\r\n    toggleTypingUser,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    sendTypingFx\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\n\r\nconst TYPING_SERVER_TIMEOUT = 5000\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst getCurrentRoomFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n$typingMembers\r\n    .on(toggleTypingUser, (members, member) => {\r\n        if(member.typing) {\r\n            if (members[member.roomId]) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...members[member.roomId], member] \r\n                }\r\n            } \r\n            return {\r\n                ...members,\r\n                [member.roomId]: [member] \r\n            }\r\n        } \r\n        if (members[member.roomId]) {\r\n            if (members[member.roomId].length > 1) {\r\n                const filteredUsers = members[member.roomId]\r\n                    .filter(({userId}) => userId !== member.userId)\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...filteredUsers] \r\n                }\r\n            }\r\n            delete members[member.roomId]\r\n            return {\r\n                ...members, \r\n            }\r\n        }\r\n    })\r\n    .reset(clearTypingMember)\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getCurrentRoomFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetRoomMembersFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return Object.values(room.currentState.members)\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n        const room = client().getRoom(roomId)\r\n        if (!room) throw new RoomNotFound()\r\n        const membersCache: { [id: string]: RoomMember } = {}\r\n        const searchResponse = await client().search({\r\n            body: {\r\n                search_categories: {\r\n                    room_events: {\r\n                        search_term: term,\r\n                        keys: [\"content.body\"],\r\n                        filter: {\r\n                            rooms: [roomId],\r\n                        },\r\n                        order_by: orderBy,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n        return searchResponse\r\n            .search_categories\r\n            .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n                const event = new MatrixEvent(result)\r\n                const senderId = event.getSender()\r\n                if (membersCache[senderId] === undefined) {\r\n                    membersCache[senderId] = room\r\n                        .getMember(senderId) as RoomMember\r\n                }\r\n                event.sender = membersCache[senderId]\r\n                return toMessage(event)\r\n            })\r\n    })\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id, user.userId)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    await client().invite(roomId, userId)\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n\r\nfindDirectRoomByUserIdFx.use((userId) => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\r\n    const roomId = directRooms[userId] && directRooms[userId][0]\r\n    if(!roomId) throw new RoomNotFound()\r\n    const room = cl.getRoom(roomId)\r\n    if(!room) throw new RoomNotFound()\r\n    return toMappedRoom(room)\r\n})\r\n\r\nsendTypingFx.use(async ({ roomId, isTyping }) => {\r\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach, guard, sample} from \"effector\"\r\nimport {\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    loadRoomFx,\r\n    MessageResponse\r\n} from \"@/room\"\r\nimport {\r\n    UpdateMessagesFxParams,\r\n    PaginateParams,\r\n    PaginateRoomFxParams\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const paginateRoomFx = messagesDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n","import {\r\n    attach,\r\n    combine,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport matrix, {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    debounce,\r\n    throttle\r\n} from \"patronum\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $loadFilter,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx,\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    updateMessages\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst THROTTLE_MESSAGE_TIME = 800\r\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n          && !backwardPaginationPending\r\n          && !forwardPaginationPending\r\n          && !roomLoading\r\n)\r\n    \r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n    \r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n    \r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n    \r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\n\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        throttle({\r\n            source: updateMessages,\r\n            timeout: THROTTLE_MESSAGE_TIME\r\n        }),\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nsample({\r\n    clock: debounce({\r\n        source: sendMessageFx.done,\r\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\r\n    }),\r\n    fn: ({ params, result }) => ({\r\n        roomId: params.roomId,\r\n        eventId: result.event_id\r\n    }),\r\n    target: readAllMessagesFx\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n    await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n    \r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","MsgType","MatrixMembershipType","clientStore","messagesDomain","$messages","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","isDirect","currentState","getStateEvents","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","initRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","Object","values","roomMember","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","roomMessageBatch","loadNewMessagesFx","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir"],"mappings":"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"}