{"version":3,"file":"index.js","sources":["../src/types/content.ts","../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    EventPermissions,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedUser,\n    Message,\n    MessageEvent,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    StartClientParams,\n    UploadContentParams,\n    UploadProgress,\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const checkEventPermissionsFx = matrixDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = matrixDomain\n    .effect<UploadContentParams, string, Error>()\n\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const onRoomInitialized = matrixDomain.event<void>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\nexport const onUploadProgress = matrixDomain.event<UploadProgress>()\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    PaginateRoomFxParams,\n    UpdateMessagesFxParams\n} from \"./types\"\n\nexport const updateMessages = matrixDomain.event<void>()\n\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\nexport const updateMessagesFx = matrixDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MsgType,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    if (!matrixContent.body) return {}\n    const content: any = {\n        body: matrixContent.body,\n        msgtype: matrixContent.msgtype\n    }\n    if (matrixContent.msgtype === MsgType.BadEncrypted) return content\n    if (matrixContent[\"m.relates_to\"]) {\n        content[\"m.relates_to\"] = {...matrixContent[\"m.relates_to\"]}\n    }\n    if (matrixContent.msgtype === MsgType.Text ||\n        matrixContent.msgtype === MsgType.Emote ||\n        matrixContent.msgtype === MsgType.Notice\n    ) {\n        if (matrixContent.format) content.format = matrixContent.format\n        if (matrixContent.formatted_body) {\n            content.formatted_body = matrixContent.formatted_body\n        }\n        return content\n    }\n    if (matrixContent.msgtype === MsgType.Location) {\n        if (matrixContent.geo_uri) content.geo_uri = matrixContent.geo_uri\n        if (matrixContent.info) content.info = matrixContent.info\n        return content\n    }\n    if (matrixContent.file) content.file = matrixContent.file\n    if (matrixContent.url) content.url = matrixContent.url\n    if (matrixContent.info) content.info = {...matrixContent.info}\n    return content\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, {\n    RoomMember,\n    TimelineWindow,\n    EventStatus,\n} from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward,\n    onRoomInitialized,\n    checkEventPermissionsFx,\n    uploadContentFx,\n    onUploadProgress,\n} from \"./public\"\nimport {\n    paginateRoomFx,\n    loadRoomFx,\n    initRoomFx,\n    updateMessagesFx,\n    updateMessages\n} from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nconst UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n\nfunction getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(() => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    return {\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\n\nuploadContentFx.use(async ({\n    file,\n    name,\n    includeFilename,\n    type,\n}) => {\n    const cl = client()\n    const contentUri = await cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri: true,\n        rawResponse: false,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any)\n    return contentUri\n})\n"],"names":["MsgType","matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","checkEventPermissionsFx","uploadContentFx","$currentRoomId","store","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","createRoomMessageBatch","ms","batchEvents","onInitialSync","onCachedState","onSync","createOnSyncThrottled","throttle","source","timeout","initRoom","onRoomInitialized","loadRoom","paginateForward","paginateBackward","onUploadProgress","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","prependClientParams","opts","onClientEvent","callbacks","push","getSenderAvatarUrl","sender","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","roomId","userId","room","getRoom","otherMember","getMember","mxcUrlToHttp","mxcUrl","undefined","checkIsDirect","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","updateMessages","initRoomFx","loadRoomFx","paginateRoomFx","updateMessagesFx","getMappedContent","matrixContent","body","content","msgtype","BadEncrypted","Text","Emote","Notice","format","formatted_body","Location","geo_uri","info","file","url","toMessage","originalEventId","getId","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","UserNotLoggedIn","getMessages","timelineWindow","getEvents","filter","getType","reduce","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","$loadFilter","combine","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","_","doneData","reset","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","map","messages","isLive","canPaginateBackward","canPaginateForward","forward","from","pending","to","clock","fn","target","initialEventId","initialWindowSize","loadAdditionalDataDirection","use","cl","loggedUserId","getUserId","user","getUser","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","async","startup","startClient","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","rooms","order_by","results","MatrixEvent","senderId","getSender","txnId","sendMessage","eventId","m.new_content","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","makeRequest","requestLimit","dir","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","mxEvent","canRedact","currentState","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","includeFilename","uploadContent","onlyContentUri","rawResponse","progressHandler","loaded","total"],"mappings":"wXAAYA,GAAZ,SAAYA,GACVA,kBACAA,iCACAA,kBACAA,gBACAA,kBACAA,oBACAA,gBACAA,kBACAA,wBATF,CAAYA,IAAAA,OCEL,MAAMC,EAAeC,EAAa,UC4B5BC,EAAoBF,EAC5BG,SACQC,EAAiBJ,EACzBG,SACQE,EAAcL,EAAaG,SAC3BG,EAAgBN,EACxBG,SACQI,EAAeP,EAAaG,SAC5BK,EAAuBR,EAC/BG,SACQM,EAAgBT,EACxBG,SACQO,EAAgBV,EACxBG,SACQQ,EAAkBX,EAC1BG,SACQS,EAAoBZ,EAC5BG,SACQU,EAA2Bb,EACnCG,SACQW,EAAgBd,EACxBG,SACQY,EAAkBf,EAC1BG,SACQa,EAA0BhB,EAClCG,SACQc,EAAkBjB,EAC1BG,SAGQe,EAAiBlB,EACzBmB,MAAyC,MACjCC,EAAkBpB,EAAamB,MAA6B,MAC5DE,EAAYrB,EAAamB,MAAiB,IAC1CG,EAAqBtB,EAAamB,OAAM,GACxCI,EAA0BvB,EAAamB,OAAM,GAC7CK,EAA2BxB,EAAamB,OAAM,GAC9CM,EAAUzB,EAAamB,MAAsB,MAC7CO,EAAuB1B,EAAamB,OAAM,GAC1CQ,EAAsB3B,EAAamB,OAAM,GAEzCS,EAAc5B,EAAa6B,QAC3BC,EAA0BC,GACnCC,EAAYJ,EAAaG,GAChBE,EAAgBjC,EAAa6B,QAC7BK,EAAgBlC,EAAa6B,QAC7BM,EAASnC,EAAa6B,QACtBO,EAAyBL,GAClCM,EAAS,CAAEC,OAAQH,EAAQI,QAASR,IAC3BS,EAAWxC,EAAa6B,QACxBY,EAAoBzC,EAAa6B,QACjCa,EAAW1C,EAAa6B,QACxBc,EAAkB3C,EAAa6B,QAC/Be,EAAmB5C,EAAa6B,QAChCgB,EAAmB7C,EAAa6B,QCjF7C,IAAIiB,EACAC,EACJ,MAAMC,EAAkC,GAC3BC,EAAS,KACbH,IACDA,EAAcI,EAAOC,aAAaJ,GAClCC,EAAeI,SAAQ,EAAEC,EAAWC,MAChCR,EAAYS,GAAGF,EAAWC,OAG3BR,GAEEU,GACTC,IAEAV,EAAUU,GAGDC,GAAiBC,IAC1BX,EAAeY,QAAQD,ICddE,GAAqB,EAC9BC,OAAAA,EACAC,MAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAC,aAAAA,GAAe,EACfC,iBAAAA,GAAmB,KAEnBL,GAAUA,EAAOM,aACXN,EAAOM,aACLnB,IAASoB,mBACTN,EACAC,EACAC,EACAC,EACAC,GAEF,KAEGG,GAAyB,EAClCC,OAAAA,EACAC,OAAAA,EACAT,MAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAC,aAAAA,GAAe,MAEf,MAAMO,EAAOxB,IAASyB,QAAQH,GAC9B,IAAKE,EACD,OAAO,KAEX,MAAME,EAAcF,EAAKG,UAAUJ,GACnC,OAAKG,EAGEA,EAAYP,aACfnB,IAASoB,mBACTN,EACAC,EACAC,EACAC,GACA,GARO,MAYFW,GAAe,EACxBC,OAAAA,EACAf,MAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAE,iBAAAA,KAEAlB,IAAS4B,aACLC,OACUC,IAAVhB,EAAsBA,EAAQ,UACnBgB,IAAXf,EAAuBA,EAAS,UACfe,IAAjBd,EAA6BA,EAAe,aACvBc,IAArBZ,EAAiCA,EAAmB,MAG/Ca,GAAiBT,IAG1B,MAAMU,EAAchC,IAASiC,eAAe,YACtCC,EAAeF,EACfG,OAAOC,OAAOJ,EAAYK,cAC1B,GACN,IAAIC,EAA2B,GAC/B,IAAK,MAAMC,KAAkBL,EACzBI,EAAiB,IAAIA,KAAmBC,GAE5C,QAAID,EAAeE,SAASlB,ICrEnBmB,GAAiB1F,EAAa6B,QAE9B8D,GAAa3F,EACrBG,SACQyF,GAAa5F,EACrBG,SACQ0F,GAAiB7F,EACzBG,SACQ2F,GAAmB9F,EAC3BG,SCRL,SAAS4F,GAAiBlE,GACtB,MAAMmE,EAAgBnE,EAAMyD,aAC5B,IAAKU,EAAcC,KAAM,MAAO,GAChC,MAAMC,EAAe,CACjBD,KAAMD,EAAcC,KACpBE,QAASH,EAAcG,SAE3B,OAAIH,EAAcG,UAAYpG,EAAQqG,aAAqBF,GACvDF,EAAc,kBACdE,EAAQ,gBAAkB,IAAIF,EAAc,kBAE5CA,EAAcG,UAAYpG,EAAQsG,MAClCL,EAAcG,UAAYpG,EAAQuG,OAClCN,EAAcG,UAAYpG,EAAQwG,QAE9BP,EAAcQ,SAAQN,EAAQM,OAASR,EAAcQ,QACrDR,EAAcS,iBACdP,EAAQO,eAAiBT,EAAcS,gBAEpCP,GAEPF,EAAcG,UAAYpG,EAAQ2G,UAC9BV,EAAcW,UAAST,EAAQS,QAAUX,EAAcW,SACvDX,EAAcY,OAAMV,EAAQU,KAAOZ,EAAcY,MAC9CV,IAEPF,EAAca,OAAMX,EAAQW,KAAOb,EAAca,MACjDb,EAAcc,MAAKZ,EAAQY,IAAMd,EAAcc,KAC/Cd,EAAcY,OAAMV,EAAQU,KAAO,IAAIZ,EAAcY,OAClDV,aAsBKa,GACZlF,EACAmF,GAEA,MAAO,CACHA,qBAAqCjC,IAApBiC,EACbA,EACAnF,EAAMoF,QACVf,QAASH,GAAiBlE,GAC1BiC,OAAQjC,EAAMiC,OACdoD,eAAgBrF,EAAMsF,UACtBC,OAAQC,QAAQxF,EAAMyF,oBACtBC,SAAU1F,EAAM2F,uBAIRC,GAAahD,GACzB,MAAO,CACHF,OAAQE,EAAKF,OACbmD,KAAMjD,EAAKiD,KACXC,QAASlD,EAAKkD,kBAINC,GACZC,EACAhG,GAEA,OAAIA,EAAMiG,WAAW,cAAgBjG,EAAMkG,eAG3CF,EAAIjE,KAAKmD,GAAUlF,IAFRgG,EC3FR,MAAMG,GAAqB,iBACrBC,GAAuB,mBCwE9BC,GAAeC,EAAkB,gBACjCC,GAA0BD,EAAkB,2BAC5CE,GAAgBF,EAAkB,iBAClCG,GAAuBH,EAAkB,wBACzCI,GAAkBJ,EAAkB,mBAE1C,SAASK,GAAYC,GACjB,OAAOA,EACFC,YACAC,QAAQ9G,GAAU,CAACmG,GAAoBC,IACnCxC,SAAS5D,EAAM+G,aACnBC,OAAOjB,GAAoB,IAGpC,MAAMkB,GAAqBC,EAAO,CAC9BzG,OAAQ,CAACpB,EAAgBE,GACzBjB,OAAQ0F,GACRmD,UAAW,CAACC,GAAyB1E,EAAQkE,OACzClE,OAAQA,EACRkE,eAAgBA,EAChBS,UAAW,cACRD,MAILE,GAAoBJ,EAAO,CAC7BzG,OAAQ,CAACpB,EAAgBE,GACzBjB,OAAQ0F,GACRmD,UAAW,CAACC,GAAyB1E,EAAQkE,OACzClE,OAAQA,EACRkE,eAAgBA,EAChBS,UAAW,aACRD,MAILG,GAAcC,EAChBnI,EACAE,GACA,CAACmD,EAAQkE,IAAmBpB,QAAQ9C,IAAW8C,QAAQoB,KAErDa,GAAkBD,EACpBD,GACA5H,EACAD,EACAD,GACA,CACIiI,EACAC,EACAC,EACAC,IACCH,IACCC,IACAC,IACAC,IAGVxI,EAAeqC,GAAGf,GAAU,CAACmH,GAAKpF,OAAAA,KAAaA,IAC/CnD,EACKmC,GAAGoC,GAAWiE,UAAU,CAACD,EAAGlB,IAAmBA,IAC/CoB,MAAM3I,GAEX,MAAM4I,GAAcC,EAAM,CACtBzH,OAAQ0H,EACJ9I,EACA,CAAC0E,GAAWqE,KAAMpE,GAAeoE,KAAMnE,GAAiBmE,OACxD,CACIC,GAEIjB,QAAU1E,OAAAA,GACV4F,OAAAA,OAEJD,cAAAA,EACA3F,OAAAA,KACG4F,MAGXxB,OAAQ,EAAGuB,cAAAA,EAAe3F,OAAAA,KAAa2F,IAAkB3F,IA2K7D,SAAS6F,KACL,OAAOnH,IAASoH,WAAWC,IAAI7C,IA1KnCpG,EACKkC,GAAGuG,IAAa,CAACH,GAAKY,SAAAA,KAAeA,IACrCV,MAAM3I,GACXO,EACK8B,GAAGuG,IAAa,CAACH,GAAKa,OAAAA,KAAaA,IACnCX,MAAM3I,GACXQ,EACK6B,GAAGuG,IAAa,CAACH,GAAKc,oBAAAA,KAA0BA,IAChDZ,MAAM,CAACnH,EAAUxB,IACtBS,EACK4B,GAAGuG,IAAa,CAACH,GAAKe,mBAAAA,KAAyBA,IAC/Cb,MAAM,CAACnH,EAAUxB,IACtByJ,EAAQ,CACJC,KAAMhF,GAAWiF,QACjBC,GAAIxJ,IAERqJ,EAAQ,CACJC,KAAMzB,GAAkB0B,QACxBC,GAAIvJ,IAERoJ,EAAQ,CACJC,KAAM9B,GAAmB+B,QACzBC,GAAItJ,IAERmJ,EAAQ,CACJC,KAAMZ,EAAO,CACT1H,OAAQlB,EACR2J,MAAOpF,GAAWsE,KAElBe,GAAI,SAERF,GAAIrI,IAERsH,EAAM,CACFzH,OAAQ0H,EACJ,CAAC9I,EAAgBE,GACjBsE,IACA,EAAEnB,EAAQkE,OACNA,eAAgBA,EAChBlE,OAAQA,MAGhBoE,OAAQvH,EAAgBkJ,KAAI7B,GAAkBpB,QAAQoB,KACtDwC,OAAQnF,KAEZiE,EAAM,CACFzH,OAAQ0H,EACJ,CAAC9I,EAAgBE,GACjBsB,GACA,EACI6B,EACAkE,IAEAyC,eAAAA,EACAC,kBAAAA,EACAC,4BAAAA,EAA8B,gBAE9B7G,OAAQA,EACRkE,eAAgBA,EAChByC,eAAAA,EACAC,kBAAAA,EACAC,4BAAAA,MAGRzC,OAAQS,GACR6B,OAAQrF,KAEZmE,EAAM,CACFzH,OAAQM,EACR+F,OAAQW,GACR2B,OAAQnC,KAEZiB,EAAM,CACFzH,OAAQK,EACRgG,OAAQW,GACR2B,OAAQ9B,KAEZwB,EAAQ,CACJC,KAAMpI,EACNsI,GAAInF,KAER5E,EAAgBsK,KAAI,KAChB,MAAMC,EAAKrI,IACX,IAAKqI,EAAI,OAAO,KAChB,MAAMC,EAAeD,EAAGE,YACxB,IAAKD,EAAc,OAAO,KAC1B,MAAME,EAAOH,EAAGI,QAAQH,GACxB,OAAKE,EACE,CACHjH,OAAQiH,EAAKjH,OACbmH,gBAAiBF,EAAKE,gBACtBC,YAAaH,EAAKG,YAClBC,cAAeJ,EAAKI,cACpBC,eAAgBL,EAAKK,eACrBC,SAAUN,EAAKM,UAPD,QAUtBpB,EAAQ,CACJC,KAAM1K,EAAkB+J,KAAKK,KAAI,MAAS0B,iBAAkB,OAC5DlB,GAAIxK,IAERJ,EAAkBmL,KAAKpC,GAAWhG,IAASgJ,MD3PV,mBC2PmChD,KACpE7I,EAAeiL,KAAKpC,GAAWhG,IAASgJ,MD3PV,gBC2PgChD,KAC9D5I,EAAYgL,KAAIa,UACZ,MAAM/K,MAAEA,GAAU8B,IAClB,GAAI9B,EAAO,OAAOA,EAAMgL,aAE5B7L,EAAc+K,KAAKpC,GAAWhG,IAASmJ,YAAYnD,KACnDzI,EAAqB6K,KAAIa,OAASG,KAAAA,EAAM9H,OAAAA,EAAQ+H,QAAAA,EAAU,WACtD,MAAM7H,EAAOxB,IAASyB,QAAQH,GAC9B,IAAKE,EAAM,MAAM,IAAIyD,GACrB,MAAMqE,EAA6C,GAenD,aAd6BtJ,IAASuJ,OAAO,CACzCvG,KAAM,CACFwG,kBAAmB,CACfC,YAAa,CACTC,YAAaN,EACbO,KAAM,CAAC,gBACPjE,OAAQ,CACJkE,MAAO,CAACtI,IAEZuI,SAAUR,QAMrBG,kBACAC,YAAYK,QAAQzC,KAAI,EAAGH,OAAAA,MACxB,MAAMtI,EAAQ,IAAImL,EAAY7C,GACxB8C,EAAWpL,EAAMqL,YAKvB,YAJ+BnI,IAA3BwH,EAAaU,KACbV,EAAaU,GAAYxI,EAAKG,UAAUqI,IAE5CpL,EAAMiC,OAASyI,EAAaU,GACrBlG,GAAUlF,SAG7BpB,EAAc4K,KAAI,EACd9G,OAAAA,EACA2B,QAAAA,EACAiH,MAAAA,KACElK,IAASmK,YAAY7I,EAAQ2B,EAASiH,KAC5CzM,EAAc2K,KAAI,EACd9G,OAAAA,EAAQ8I,QAAAA,EAASpH,KAAAA,EAAMkH,MAAAA,KACrBlK,IAASmK,YACX7I,EACA,CACI+I,gBAAiB,CACbnH,QAAS,SAAUF,KAAAA,GAEvBsH,eAAgB,CACZC,SAAU,YACVC,SAAUJ,GAEdlH,QAAW,SACXF,KAAQ,IAEZkH,KAEJxM,EAAgB0K,KAAIa,OAChB3H,OAAAA,EAAQ8I,QAAAA,EAASK,OAAAA,MAEjB,MAAM3K,EAAU2K,EAAS,CAAEA,OAAAA,QAAW3I,EAEtC,MAAO,CACHsI,eAFcpK,IAAS0K,YAAYpJ,EAAQ8I,OAAStI,EAAWhC,IAElD0K,aAMrB/J,GAAc,CACV,CACI,gBACA,CACI7B,EACA4C,EACAmJ,EACAC,EACAC,KAEA,MAAMC,EAAYlM,EAAM+G,UACpBmF,IAAc/F,IACX+F,IAAc9F,KAEZ2F,GAAqBE,EAAKE,WAC3BpM,WFxSWC,GAC3B,MAAMoM,EAAwB,CAC1BZ,QAASxL,EAAMoF,QAEff,QAASH,GAAiBlE,GAC1BqF,eAAgBrF,EAAMsF,UACtB5C,OAAQ1C,EAAMqM,YACdpK,OAAQjC,EAAMiC,OACdqK,KAAMtM,EAAM+G,UACZwF,UAAWvM,EAAMkG,cACjBR,SAAU1F,EAAM2F,aAChB6G,QAAShH,QAAQxF,EAAMiG,eAK3B,OAHIjG,EAAMyM,kBACNL,EAAQM,eAAiB1M,EAAM2M,mBAE5BP,EEwRqBQ,CAAe5M,MAI3C,CAAC,wBAAyB,IAAM6D,MAChC,CAAC,OAAQ,CAACgJ,EAAOC,KACb,GAAc,aAAVD,EAKJ,GAAc,YAAVA,GAAqC,aAAdC,EAK3B,GAAc,YAAVD,GAAqC,YAAdC,OAA3B,CACI,MAAM9B,EAAQzC,KACdjI,EAAO0K,OAPX,CACI,MAAMA,EAAQzC,KACdnI,EAAc4K,OAPlB,CACI,MAAMA,EAAQzC,KACdlI,EAAc2K,QAe1BjM,EAAkByK,KAAI,EAAG9G,OAAAA,EAAQ8I,QAAAA,MAC7B,MAAM5I,EAAOxB,IAASyB,QAAQH,GAC9B,IAAKE,EAAM,MAAM,IAAIyD,GACrB,MAAM0G,EAAUnK,EAAKoK,cAAcxB,GACnC,IAAKuB,EAAS,MAAM,IAAIvG,GAExB,OAAOpF,IAAS6L,mBAAmBvK,EAAQ8I,EAASuB,MAExD/N,EAAyBwK,KAAKwB,IAC1B,MAAMvB,EAAKrI,IACX,IAAKqI,EAAI,MAAM,IAAIhD,GAEnB,OAAOuE,EAAMvC,KAAK7F,UACd,MAAMsK,EAAazD,EAAG5G,QAAQD,EAAKF,QACnC,IAAKwK,EAAY,MAAM,IAAI7G,GAC3B,MAAM8G,EAASD,EAAWE,kBAAkBvG,YAC5C,IAAIwG,EAAc,EAClB,IAAK,IAAIC,EAAIH,EAAOI,OAAS,EAAGD,GAAK,GAC7BA,IAAMH,EAAOI,OAPN,GAMyBD,IAAK,CAEzC,MAAMtN,EAAQmN,EAAOG,GAGrB,GAFmBJ,EACdM,iBAAiB/D,EAAGE,YAAuB3J,EAAMoF,SAElD,MAEJiI,GAAe,EAEnB,MAAMI,EAAsBN,EACvBrG,QAAQ9G,GAAU,CAACmG,GAAoBC,IACnCxC,SAAS5D,EAAM+G,aACnBC,OAAOjB,GAAoB,IAC1B2H,EAAcD,EAAoBF,OACpCE,EAAoBA,EAAoBF,OAAS,QAAKrK,EACpDyK,EAAWxK,GAAc+J,EAAWxK,QACpCkL,EAASD,EACTT,EAAWnK,UAAUmK,EAAWW,iBAChC,KAEN,MAAO,IACAjL,EACHyK,YAAAA,EACAK,YAAAA,EACAC,SAAAA,EACAG,aAAcF,MAAAA,SAAAA,EAAQjL,OAGtBoL,SAAUH,EACJpI,kBAAQoI,EAAOhE,2BAAME,sBACrB5G,EACN8K,eAAiBd,EAAmBe,gCAIhDvP,EAAa8K,KAAI,IAAMpI,IAAS8M,eAChCnK,GAAWyF,KAAIa,OACXzD,eAAAA,EACAyC,eAAAA,EACAC,kBAAAA,EACAC,4BAAAA,MAEA,IAAK3C,EAAgB,MAAM,IAAIL,SACzBK,EAAeuH,KAAK9E,EAAgBC,GAC1C,MAAMT,EAAqBjC,EAAewH,YAAY,KACtD,IAAI1F,EAAW/B,GAAYC,GAE3B,GAAI0C,GAAqBZ,EAAS6E,OAASjE,EAAmB,CAC1D,IAAI+E,EACJ,MAAMC,EAAOhF,EAAoBZ,EAAS6E,OAEtCc,EADgC,aAAhC9E,QACwB3C,EACnB2H,SAASlN,EAAOmN,cAAcC,UAAWH,SAEtB1H,EACnB2H,SAASlN,EAAOmN,cAAcE,SAAUJ,GAE7CD,IACA3F,EAAW/B,GAAYC,IAG/B,MAAO,CACH8B,SAAAA,EACAC,QAASE,EACTA,mBAAAA,EACAD,oBAAqBhC,EAAewH,YAAY,SAIxDpK,GAAewF,KAAIa,OACfzD,eAAAA,EACAS,UAAAA,EACAiH,KAAAA,EACAK,YAAAA,EACAC,aAAAA,MAEA,IAAKhI,EAAgB,MAAM,IAAIL,GAC/B,MAAMsI,EAAoB,YAAdxH,EACRhG,EAAOmN,cAAcE,SACrBrN,EAAOmN,cAAcC,gBACnB7H,EACD2H,SAASM,EAAKP,EAAMK,EAAaC,GACtC,MAAM/F,EAAqBjC,EAAewH,YAAY,KAEtD,MAAO,CACH1F,SAFa/B,GAAYC,GAGzB+B,QAASE,EACTA,mBAAoBA,EACpBD,oBAAqBhC,EAAewH,YAAY,SAGxDnK,GAAiBuF,KAAI,EAAG5C,eAAAA,MACpB,MAAMiC,EAAqBjC,EAAewH,YAAY,KACtD,MAAO,CACH1F,SAAU/B,GAAYC,GACtB+B,QAASE,EACTA,mBAAoBA,EACpBD,oBAAqBhC,EAAewH,YAAY,SAGxDnP,EAAcuK,KAAK9G,IACf,MAAME,EAAOxB,IAASyB,QAAQH,GAC9B,IAAKE,EAAM,MAAM,IAAIyD,GACrB,gBFlYuBzD,GACvB,MAAO,CACHkM,iBAAkBlM,EAAKmM,wBEgYpBC,CAAWpM,MAGtBkB,GAAW0F,KAAIa,OAAS3H,OAAAA,MACpB,MAAM+G,EAAKrI,IACLwB,EAAOxB,IAASyB,QAAQH,GAC9B,IAAKE,EAAM,MAAM,IAAIyD,GACrB,MAAM4I,EAAcrM,EAAKsM,2BACzB,OAAO,IAAI7N,EAAO8N,eAAe1F,EAAIwF,MAezC9P,EAAwBqK,KAAI,EAAGgC,QAAAA,EAAS9I,OAAAA,MACpC,MAAM+G,EAAKrI,IACX,IAAKqI,EAAI,MAAM,IAAIhD,GACnB,MAAM7D,EAAO6G,EAAG5G,QAAQH,GACxB,IAAKE,EAAM,MAAM,IAAIyD,GACrB,MAAM+I,EAAUxM,EAAKoK,cAAcxB,GACnC,IAAK4D,EAAS,MAAM,IAAI5I,GACxB,MAAM7D,EAAS8G,EAAGE,YAClB,IAAKhH,EAAQ,MAAM,IAAI+D,GAMvB,MAAO,CACH2I,UANczM,EAAK0M,aAClBC,yBAAyBH,EAASzM,IAE3B,sBADJyM,EAAQrI,UAKZyI,QA7BR,SAAwBJ,GACpB,GAAIA,EAAQK,SAAWC,EAAYC,WACT,mBAAtBP,EAAQrI,WACRqI,EAAQzJ,aAER,OAAO,EAEX,MAAMtB,EAAU+K,EAAQQ,sBAClBtL,QAACA,GAAWD,EAClB,OAAoB,WAAZC,GAAoC,YAAZA,IAC5BkB,QAAQnB,EAAQD,OAAiC,iBAAjBC,EAAQD,MACxCgL,EAAQ/D,cAAgBjK,IAASuI,YAerBkG,CAAeT,OAOnChQ,EAAgBoK,KAAIa,OAChBrF,KAAAA,EACAa,KAAAA,EACAiK,gBAAAA,EACAxD,KAAAA,MAEA,MAAM7C,EAAKrI,IAeX,aAdyBqI,EAAGsG,cAAc/K,EAAM,CAC5Ca,KAAAA,EACAiK,gBAAAA,EACAxD,KAAAA,EACA0D,gBAAgB,EAChBC,aAAa,EACbC,gBAAiB,EAAGC,OAAAA,EAAQC,MAAAA,MAKxBpP,EAAiB,CAAEgE,KAAAA,EAAMmL,OAAAA,EAAQC,MAAAA"}