{"version":3,"file":"index.js","sources":["../src/root.ts","../src/types/content.ts","../src/types/index.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/idbHelper.ts","../src/verification/public.ts","../src/create-verification-method/domain.ts","../src/create-verification-method/public.ts","../src/cryptoCallbacks.ts","../src/reset-cross-signing/domain.ts","../src/reset-cross-signing/public.ts","../src/interactive-auth/domain.ts","../src/interactive-auth/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/private.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/reducers.ts","../src/verification/init.ts","../src/reset-cross-signing/init.ts","../src/create-verification-method/init.ts","../src/interactive-auth/private.ts","../src/interactive-auth/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n\nexport enum SecureBackupSetupMethod {\n    Key = \"key\",\n    Passphrase = \"passphrase\",\n}\n\nexport enum RecoveryKeyOrPassphraseEnum {\n    RecoveryKey = \"RecoveryKey\",\n    Passphrase = \"Passphrase\"\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n\nexport const getUserDevicesInfoFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore.stopPeeking()\n        // TODO Не чистить сторы, если userId нового юзера совпадает со старым юзером\n        clientStore.clearStores()\n        clientStore.crypto.stop()\n        clientStore.crypto.cryptoStore.deleteAllData()\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { \n    VerificationRequest, \n    IVerificationChannel, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: number\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n\nexport type InputToKeyParams = {\n  passphrase?: string\n  recoveryKey?: string\n}\n\nexport type CheckKeyInfo = {\n  keyInfo: ISecretStorageKeyInfo\n}\n\nexport type ValidatePassphraseFxParams = CheckKeyInfo & { passphrase: string }\nexport type ValidateRecoveryKeyFxParams = CheckKeyInfo & { input: string }","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\nimport { RenameDeviceParams, SessionInfo } from \"./types\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\nexport const $mySessionsInfo = d.store<SessionInfo[] | null>(null)\nexport const getMySessionsFx = d.effect<void, SessionInfo[], Error>()\nexport const clearMySessionsInfo = d.event<void>()\n\nexport const logoutSessionsById = d.event<SessionInfo[\"device_id\"][]>()\n\nexport const renameDeviceFx = d.effect<RenameDeviceParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const verificationDomain = root.domain(\"verificationDomain\")\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { createApi } from \"effector\"\nimport { verificationDomain } from \"./domain\"\nimport {\n    MyVerificationRequest,\n    StartVerificationDeviceParams,\n    CheckKeyInfo,\n    InputToKeyParams,\n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\n// Emodji SAS Verification\n\nexport const $isWaitingAnotherUser = verificationDomain\n    .store<boolean>(false)\n\nexport const {\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser\n} = createApi(\n    $isWaitingAnotherUser,\n    {\n        setWaitingAnotherUser: () => true,\n        resetWaitingAnotherUser: () => false\n    }\n)\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startThisDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n\n\n// Recovery Key\n\nexport const onNeedRecoveryKeyOrPassphrase = verificationDomain\n    .event<void>()\n\nexport const startRecoveryKeyOrPassphraseVerification = verificationDomain\n    .event<void>()\n\nexport const setCheckKeyInfo = verificationDomain\n    .event<CheckKeyInfo>()\n\nexport const validateRecoveryKey = verificationDomain.event<string>()\n\nexport const onRecoveryKeyOrPassphraseSuccess = verificationDomain.event<void>()\n\nexport const onValidRecoveryKey = verificationDomain.event<void>()\nexport const onInvalidRecoveryKey = verificationDomain.event<Error>()\n\n// passphrasse verification \n\nexport const $hasPassphrase = verificationDomain.store<boolean>(false)\nexport const onHasPassphrase = verificationDomain.event<boolean>()\n\nexport const validatePassphrase = verificationDomain.event<string>()\nexport const onValidPassphrase = verificationDomain.event<void>()\nexport const onInvalidPassphrase = verificationDomain.event<Error>()\n\n// others\nexport const $canVerify = verificationDomain.store<boolean>(false)\n\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkThisDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\nexport const onUsersProfileUpdate = verificationDomain\n    .event<UserId[]>()\n\nexport const onResolveSecretStorageKey = verificationDomain\n    .event<InputToKeyParams>()\n\nexport const onRejectSecretStorageKey = verificationDomain\n    .event<void>()\n\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"createVerificationMethod\")\n","import { IRecoveryKey } from \"matrix-js-sdk\"\n\nimport { SecureBackupSetupMethod } from \"@/types\"\n\nimport { d } from \"./domain\"\n\nexport const createRecoveryKeyAndPassPhraseFx = d\n    .effect<string | undefined, IRecoveryKey, Error>()\n\nexport const getSecureBackupSetupMethodsFx = d\n    .effect<void, SecureBackupSetupMethod[], Error>()\n\nexport const onNeedCreateRecoveryMethod = d.event<void>()\n\nexport const lossAllRecoveryKeyMethod = d.event<void>()\n\nexport const cancelCreateNewMethod = d.event<void>()\nexport const onNewRecoveryMethodCreated = d.event<void>()\n\nexport const bootstrapSecretStorageFx = d.effect<IRecoveryKey, void, Error>()\n\nexport const resetAllRecoveryKeyMethodsFx = d.effect<void,void, Error>()\n","import {\n    decodeRecoveryKey,\n    deriveKey,\n    DeviceTrustLevel,\n    encodeBase64,\n    encodeUnpaddedBase64,\n    ICryptoCallbacks,\n    ISecretStorageKeyInfo,\n    MatrixClient\n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\nimport {\n    InputToKeyParams,\n    onHasPassphrase,\n    setCheckKeyInfo,\n    onNeedRecoveryKeyOrPassphrase,\n    onRecoveryKeyOrPassphraseSuccess,\n    onRejectSecretStorageKey,\n} from \"@/verification\"\nimport { onResolveSecretStorageKey } from \"./verification\"\nimport { \n    cancelCreateNewMethod, \n    onNeedCreateRecoveryMethod,\n    onNewRecoveryMethodCreated\n} from \"@/create-verification-method\"\n\nlet secretStorageBeingAccessed = false\nlet secretStorageKeys: Record<string, Uint8Array> = {}\nlet secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\ntype CreatePromiseResult<T> = {\n    promise: Promise<T>\n    resolve: (params: T) => void\n    reject: (params: any) => void\n}\n\nfunction createPromise<T>(): CreatePromiseResult<T> {\n    let resolve = (params: T) => { return }\n    let reject = (params: any) => { return }\n    const promise = new Promise<T>((res, rej) => {\n        resolve = res\n        reject = rej\n    })\n    return {promise, resolve, reject}\n}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction setCachingAllowed(newVal: boolean): void {\n    secretStorageBeingAccessed = newVal\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    secretStorageKeys[keyId] = key\n    secretStorageKeyInfo[keyId] = keyInfo\n}\n\nexport async function promptForBackupPassphrase(): Promise<Uint8Array> {\n    const key = new Uint8Array()\n\n    console.log(\"promptForBackupPassphrase\")\n    // const success = await finished;\n    // if (!success) throw new Error(\"Key backup prompt cancelled\");\n\n    return key\n}\n\nexport async function accessSecretStorage(\n    func = async () => { return },\n    forceReset = false\n): Promise<any> {\n    const cl = client()\n    setCachingAllowed(true)\n    try {\n        if (!(await cl.hasSecretStorageKey()) || forceReset) {\n            const {promise, reject, resolve} = createPromise<void>()\n            onNeedCreateRecoveryMethod()\n            const createdSub = onNewRecoveryMethodCreated.watch(() => {\n                resolve()\n            })\n            const cancelSub = cancelCreateNewMethod.watch(() => {\n                reject(\"Cancel create new Method\")\n            })\n            promise.finally(() => {\n                cancelSub()\n                createdSub()\n            })\n            await promise\n        } else {\n            await cl.bootstrapCrossSigning({})\n            await cl.bootstrapSecretStorage({\n                getKeyBackupPassphrase: promptForBackupPassphrase,\n            })\n    \n            const keyId = Object.keys(secretStorageKeys)[0]\n            if (keyId) {\n                let dehydrationKeyInfo = {}\n                if (\n                    secretStorageKeyInfo[keyId]\n                    && secretStorageKeyInfo[keyId].passphrase\n                ) {\n                    dehydrationKeyInfo = {\n                        passphrase: secretStorageKeyInfo[keyId].passphrase\n                    }\n                }\n                console.log(\"Setting dehydration key\")\n                await cl\n                    .setDehydrationKey(\n                        secretStorageKeys[keyId],\n                        dehydrationKeyInfo,\n                        \"Backup device\"\n                    )\n            } else if (!keyId) {\n                console.warn(\"Not setting dehydration key: no SSSS key found\")\n            } else {\n                console.log(\"Not setting dehydration key: feature disabled\")\n            }\n    \n        }\n        // `return await` needed here to ensure `finally` block runs after the\n        // inner operation completes.\n        return await func()\n    } catch (e) {\n        // SecurityCustomisations.catchAccessSecretStorageError?.(e)\n        console.error(e)\n        // Re-throw so that higher level logic can abort as needed\n        throw e\n    } finally {\n        // Clear secret storage key cache now that work is complete\n        setCachingAllowed(false)\n        if (!isCachingAllowed()) {\n            secretStorageKeys = {}\n            secretStorageKeyInfo = {}\n        }\n    }\n}\n\n\nexport function makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (params: InputToKeyParams) => Promise<Uint8Array> {\n    return async (params) => {\n        if (params.passphrase) {\n            return deriveKey(\n                params.passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else if (params.recoveryKey) {\n            return decodeRecoveryKey(params.recoveryKey)\n        }\n        throw new Error(\"Invalid recoveryKey or passphrase\")\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cl = client()\n    let keyId = await cl.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if (!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    } \n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        [keyId, keyInfo] = keyInfoEntries[0]\n    }\n\n    // Check the in-memory cache\n    if (secretStorageKeys[keyId] && isCachingAllowed()) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (await cl.checkSecretStorageKey(dehydrationCache.key, keyInfo)) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n    const {promise, resolve, reject} = createPromise<InputToKeyParams>()\n    const resolveWatcher = onResolveSecretStorageKey.watch(resolve)\n    const rejectWatcher = onRejectSecretStorageKey.watch(reject)\n\n    promise.finally(() => {\n        resolveWatcher.unsubscribe()\n        rejectWatcher.unsubscribe()\n    })\n    \n    onNeedRecoveryKeyOrPassphrase()\n    onHasPassphrase(Boolean(keyInfo.passphrase))\n    setCheckKeyInfo({ keyInfo })\n\n    const input = await promise\n\n    const key = await inputToKey(input)\n\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    onRecoveryKeyOrPassphraseSuccess()\n    return [keyId, key]\n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\" })\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if (key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        let data\n        try {\n            data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n        } catch (e) {\n            console.log(\"idbLoad for pickleKey failed\", e)\n        }\n        if (!data) {\n            return null\n        }\n        if (!data.encrypted || !data.iv || !data.cryptoKey) {\n            console.log(\"Badly formatted pickle key\")\n            return null\n        }\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        try {\n            const key = await crypto.subtle.decrypt(\n                { name: \"AES-GCM\", iv: data.iv, additionalData },\n                data.cryptoKey,\n                data.encrypted,\n            )\n            return encodeUnpaddedBase64(key)\n        } catch (e) {\n            console.log(\"Error decrypting pickle key\")\n            return null\n        }\n    }\n\nexport const CreatePickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        const crypto = window.crypto\n        const randomArray = new Uint8Array(32)\n        crypto.getRandomValues(randomArray)\n        const cryptoKey = await crypto.subtle.generateKey(\n            { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n        )\n        const iv = new Uint8Array(32)\n        crypto.getRandomValues(iv)\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        const encrypted = await crypto.subtle.encrypt(\n            { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n        )\n\n        try {\n            await IdbSave(\n                \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n            )\n        } catch (e) {\n            return null\n        }\n        return encodeUnpaddedBase64(randomArray)\n    }\n\nexport async function tryToUnlockSecretStorageWithDehydrationKey(\n    client: MatrixClient,\n): Promise<void> {\n    const key = dehydrationCache.key\n    let restoringBackup = false\n    if (key && (await client.isSecretStorageReady())) {\n        setCachingAllowed(true)\n        try {\n            await client.checkOwnCrossSigningTrust()\n    \n            // we also need to set a new dehydrated device to replace the\n            // device we rehydrated\n            let dehydrationKeyInfo = {}\n            if (\n                dehydrationCache.keyInfo \n                && dehydrationCache.keyInfo.passphrase\n            ) {\n                dehydrationKeyInfo = { \n                    passphrase: dehydrationCache.keyInfo.passphrase }\n            }\n            await client\n                .setDehydrationKey(key, dehydrationKeyInfo, \"Backup device\")\n    \n            // and restore from backup\n            const backupInfo = await client.getKeyBackupVersion()\n            if (backupInfo) {\n                restoringBackup = true\n                // don't await, because this can take a long time\n                client.restoreKeyBackupWithSecretStorage(backupInfo)\n                    .finally(() => {\n                        secretStorageBeingAccessed = false\n                        if (!isCachingAllowed()) {\n                            secretStorageKeys = {}\n                            secretStorageKeyInfo = {}\n                        }\n                    })\n            }\n        } finally {\n            dehydrationCache = {}\n            // the secret storage cache is needed for restoring from backup, so\n            // don't clear it yet if we're restoring from backup\n            if (!restoringBackup) {\n                setCachingAllowed(false)\n                if (!isCachingAllowed()) {\n                    secretStorageKeys = {}\n                    secretStorageKeyInfo = {}\n                }\n            }\n        }\n    }\n}\n    \n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"resetCrossSigning\")\n","import { d } from \"./domain\"\nimport { ConfirmResetCrossSigningFxResult } from \"./types\"\n\nexport const confirmResetCrossSigningFx = d\n    .effect<void, ConfirmResetCrossSigningFxResult, Error>()\n\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"interactiveAuth\")\n","import { IAuthData } from \"matrix-js-sdk\"\n\nimport { d } from \"./domain\"\nimport { OnInteractiveAuthStateUpdateResult } from \"./types\"\n\nexport const createInteractiveAuthFx = d\n    .effect<(auth: IAuthData) => Promise<IAuthData>, void, Error>()\n\nexport const submitAuthDict = d.event<string>()\n\nexport const onNeedUserPassword = d.event<void>()\nexport const onUserPasswordError = d.event<string>()\nexport const onUserPasswordSuccess = d.event<void>()\n\nexport const onInteractiveAuthBusyChange = d.event<boolean>()\nexport const onInteractiveAuthStateUpdate = d\n    .event<OnInteractiveAuthStateUpdateResult>()\n\nexport const cancelInteractiveAuth = d.event<void>()\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\nexport const InvalidBackupInfo = createCustomError(\"InvalidBackupInfo\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n\nexport const E2EE_WK_KEY = \"io.element.e2ee\"\nexport const E2EE_WK_KEY_DEPRECATED = \"im.vector.riot.e2ee\"","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n\nexport const $isCryptoEnabled = cryptoDomain.store<boolean | null>(null)\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n    UserTrustLevel,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport {\n    checkBackupKeyFx,\n    initCryptoFx,\n    onCrossSigningKeyChange,\n} from \"@/crypto\"\nimport {\n    onVerificationRequest,\n    MyVerificationRequest,\n    onUpdateDeviceList,\n    onUsersProfileUpdate,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { DeviceInfo } from \"matrix-js-sdk/lib/crypto/deviceinfo\"\nimport { IdbDelete } from \"@/idbHelper\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Session.logged_out\", (args) => {\n        console.log(\"Session.logged_out\", args)\n    }],\n    // @TODO Реализовать. Этот эвент приходит когда логаут происходит из другой сессии.\n    // cli.on(HttpApiEvent.SessionLoggedOut, function (errObj) {\n    //     if (Lifecycle.isLoggingOut()) return;\n\n    //     // A modal might have been open when we were logged out by the server\n    //     Modal.closeCurrentModal('Session.logged_out');\n\n    //     if (errObj.httpStatus === 401 && errObj.data && errObj.data['soft_logout']) {\n    //         logger.warn(\"Soft logout issued by server - avoiding data deletion\");\n    //         Lifecycle.softLogout();\n    //         return;\n    //     }\n\n    //     Modal.createDialog(ErrorDialog, {\n    //         title: _t('Signed Out'),\n    //         description: _t('For security, this session has been signed out. Please sign in again.'),\n    //     });\n\n    //     dis.dispatch({\n    //         action: 'logout',\n    //     });\n    // });\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            const cl = client()\n            const deviceId = cl.getDeviceId()\n            const userId = cl.getUserId()\n            const isVerified = cl\n                .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n            if (isVerified || request.isSelfVerification) {\n                request.id = Date.now()\n                onVerificationRequest(request)\n            }\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n            onUsersProfileUpdate(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", (userIds: string[]) => {\n        onUpdateDeviceList(userIds)\n        onUsersProfileUpdate(userIds)\n    }],\n    [\"deviceVerificationChanged\", (\n        userId: string,\n        deviceId: string,\n        deviceInfo: DeviceInfo\n    ) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }],\n    [\"userTrustStatusChanged\", (userId: string, newStatus: UserTrustLevel) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }]\n])\n\nloginByPasswordFx.use(async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        {\n            method: \"POST\",\n            body: JSON.stringify({ type: LOGIN_BY_TOKEN, token: params.token })\n        }\n    )\n    const {\n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return {\n        userId: user_id,\n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.downloadKeys([cl.getUserId() ?? createClientParams.options.userId])\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await IdbDelete(\"pickleKey\", [cl.getUserId(), cl.getDeviceId()])\n    await IdbDelete(\"account\", \"mx_access_token\")\n    cl.stopClient()\n    await cl.logout()\n    destroyClient()\n})\n\ngetProfileInfoFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { d } from \"./domain\"\nimport { SessionInfo } from \"./types\"\n\nexport const logoutSessionsByIdFx = d\n    .effect<SessionInfo[\"device_id\"][], void, Error>()\n","import { client } from \"@/matrix-client\"\nimport { forward, guard } from \"effector\"\nimport { IAuthData } from \"matrix-js-sdk\"\n\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\nimport { onUpdateDeviceList } from \"@/verification\"\n\nimport { logoutSessionsByIdFx } from \"./private\"\nimport { \n    updateDisplayNameFx, \n    updateAvatarUrlFx, \n    getMySessionsFx,\n    $mySessionsInfo,\n    clearMySessionsInfo,\n    logoutSessionsById,\n    renameDeviceFx,\n} from \"./public\"\n\n$mySessionsInfo\n    .on(getMySessionsFx.doneData, (_, sessionsInfo) => sessionsInfo)\n    .reset([getMySessionsFx.fail, clearMySessionsInfo])\n\nforward({\n    from: logoutSessionsById,\n    to: logoutSessionsByIdFx\n})\n\nguard({\n    clock: onUpdateDeviceList,\n    filter: $mySessionsInfo.map((sessions) => Boolean(sessions)),\n    target: getMySessionsFx,\n})\n  \n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\ngetMySessionsFx.use(async () => {\n    const cl = client()\n    const {devices} = await cl.getDevices()\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\n    const myDeviceId = cl.getDeviceId()\n    return devices.map((device) => {\n        const deviceInfo = cl.getStoredDevice(cl.getUserId(), device.device_id)\n        let isVerified = false\n        // @TODO В devices может прийти такой девайс, по которому мы не можем получить инфу\n        // и getStoredDevice отдает null\n        if (deviceInfo) {\n            isVerified = crossSigningInfo.checkDeviceTrust(\n                crossSigningInfo,\n                deviceInfo,\n                false,\n                true,\n            ).isCrossSigningVerified()\n        }\n\n        return {\n            ...device,\n            isVerified,\n            isCurrentSession: device.device_id === myDeviceId \n        }\n    })\n})\n\nlogoutSessionsByIdFx.use(async (sessionsId) => {\n    const cl = client()\n    const callback = async (auth: IAuthData) => {\n        await cl.deleteMultipleDevices(sessionsId, auth)\n        return auth\n    }\n    await createInteractiveAuthFx(callback)\n    await callback\n})\n\nrenameDeviceFx.use(async ({deviceId, newDisplayName}) => {\n    await client().setDeviceDetails(deviceId, {\n        display_name: newDisplayName,\n    })\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx,\n    getUserDevicesInfoFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoom,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    \n    }),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoomMessage,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: toLiveTimeline,\n        fn: ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members, true)\n        await cl.downloadKeysForUsers(members, {})\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n\ngetUserDevicesInfoFx.use(async (userId) => {\n    const cl = client()\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const setEnableCrypto = cryptoDomain.event<boolean>()\n","import { client } from \"@/matrix-client\"\nimport { forward } from \"effector\"\nimport { checkThisDeviceVerificationFx } from \"@/verification\"\nimport { destroyClientFx } from \"@/app\"\nimport { \n    crossSigningChangeFx, \n    setEnableCrypto\n} from \"./private\"\nimport { \n    $isCryptoEnabled,\n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    onCrossSigningKeyChange, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\n$isCryptoEnabled\n    .on(setEnableCrypto, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncheckBackupKeyFx.use(() => {\n    return client().getKeyBackupEnabled()\n})\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) {\n        setEnableCrypto(false)\n        return\n    }\n\n    await cl.initCrypto()\n    setEnableCrypto(true)\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n    checkThisDeviceVerificationFx()\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n    checkThisDeviceVerificationFx()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams, \n    CheckKeyInfo,\n    ValidatePassphraseFxParams,\n    ValidateRecoveryKeyFxParams,\n} from \"./types\"\n\n// Emodji SAS Verification\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n// Recovery key\n\nexport const restoreKeyBackupFx = verificationDomain\n    .effect<void, void, Error>()\n\nexport const $checkKeyInfo = verificationDomain\n    .store<CheckKeyInfo | null>(null)\n\nexport const validateRecoveryKeyFx = verificationDomain\n    .effect<ValidateRecoveryKeyFxParams, boolean, Error>()\n\n// others\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const validatePassphraseFx = verificationDomain\n    .effect<ValidatePassphraseFxParams, boolean, Error>()\n\nexport const checkCanVerifyFx = verificationDomain\n    .effect<void, boolean, Error>()\n","import { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport {\n    onCancelVerificationEvent, \n    startSASFx, \n    updateVerificationPhase,\n    cancelVerificationEventFx, \n} from \"./private\"\nimport {\n    onUsersProfileUpdate, \n    setCurrentVerificationEvent \n} from \"./public\"\nimport { \n    MyVerificationRequest,\n    OnVerificationRequestFxParams, \n    Phase\n} from \"./types\"\n\n\nexport const onVerificationRequestFxReducer = async (\n    {\n        request, \n        currentRequest\n    }: OnVerificationRequestFxParams): Promise<MyVerificationRequest> => {\n    const onChange = () => {\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n            return\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            onUsersProfileUpdate([request.otherUserId])\n            return\n        }\n\n        if (request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n            return\n        }\n\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n            return\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const excludePhaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested\n    ]\n    if (!currentRequest && !excludePhaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n        && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n\n    return request\n}\n","import { forward, sample, guard, attach } from \"effector\"\nimport { client } from \"@/matrix-client\"\n\nimport { createDirectRoomFx } from \"@/room\"\nimport { MappedUser } from \"@/types\"\nimport { createClientFx, destroyClientFx } from \"@/app\"\nimport { InvalidBackupInfo } from \"@/errors\"\n\nimport {\n    updateVerificationPhase,\n    onCancelVerificationEvent,\n    confirmSASVerificationFx,\n    onVerificationRequestFx,\n    startSASFx,\n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n    restoreKeyBackupFx,\n    cancelVerificationEventFx,\n    validateRecoveryKeyFx,\n    $checkKeyInfo,\n    validatePassphraseFx,\n    checkCanVerifyFx,\n} from \"./private\"\nimport {\n    onHasPassphrase,\n    $currentVerificationEvent,\n    $deviceIsVerified,\n    $verificationEvents,\n    checkThisDeviceVerificationFx,\n    confirmSASVerification,\n    startThisDeviceVerificationFx,\n    onVerificationRequest,\n    setCurrentVerificationEvent,\n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests,\n    startRecoveryKeyOrPassphraseVerification,\n    $hasPassphrase,\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser,\n    setCheckKeyInfo,\n    validateRecoveryKey,\n    onValidRecoveryKey,\n    onInvalidRecoveryKey,\n    onRejectSecretStorageKey,\n    validatePassphrase,\n    onInvalidPassphrase,\n    onValidPassphrase,\n    $canVerify,\n} from \"./public\"\nimport { \n    MyVerificationRequest, \n    ValidatePassphraseFxParams, \n    ValidateRecoveryKeyFxParams \n} from \"./types\"\nimport { onVerificationRequestFxReducer } from \"./reducers\"\nimport { accessSecretStorage, makeInputToKey } from \"../cryptoCallbacks\"\n    \n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n    .reset(destroyClientFx)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n    .reset(destroyClientFx)\n// When copying an object, proto properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n    .reset(destroyClientFx)\n\n$hasPassphrase\n    .on(onHasPassphrase, (_, val) => val)\n    .reset(destroyClientFx)\n\n$checkKeyInfo\n    .on(setCheckKeyInfo, (_, val) => val)\n    .reset([destroyClientFx, onRejectSecretStorageKey])\n\n$canVerify\n    .on(checkCanVerifyFx.doneData, (_, canVerify) => canVerify)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: checkThisDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkThisDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx\n})\n\nforward({\n    from: [\n        startVerificationUserFx,\n        startVerificationDeviceFx,\n        confirmSASVerification,\n        startSASFx,\n        startThisDeviceVerificationFx\n    ],\n    to: setWaitingAnotherUser\n})\n\nforward({\n    from: [\n        onCancelVerificationEvent,\n        $currentVerificationEvent.updates\n    ],\n    to: resetWaitingAnotherUser\n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData,\n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nforward({\n    from: startRecoveryKeyOrPassphraseVerification,\n    to: restoreKeyBackupFx\n})\n\nforward({\n    from: validateRecoveryKeyFx.doneData,\n    to: onValidRecoveryKey\n})\n\nforward({\n    from: validateRecoveryKeyFx.failData,\n    to: onInvalidRecoveryKey,\n})\n\nforward({\n    from: validatePassphraseFx.doneData,\n    to: onValidPassphrase\n})\n\nforward({\n    from: validatePassphraseFx.failData,\n    to: onInvalidPassphrase,\n})\n\nforward({\n    from: [createClientFx.doneData, $deviceIsVerified.updates],\n    to: checkCanVerifyFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(onVerificationRequestFxReducer)\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    await (currentRequest.verifier as any).sasEvent.confirm()\n})\n\ncheckThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = Date.now()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n\ncheckCanVerifyFx.use(async () => {\n    const cl = client()\n    const cryptoEnabled = cl.isCryptoEnabled()\n    const homeserverSupportsCrossSigning = await cl\n        .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n\n    const canVerify = cryptoEnabled\n        && homeserverSupportsCrossSigning\n        && isVerified\n    return canVerify\n})\n\nrestoreKeyBackupFx.use(async () => {\n    const cl = client()\n    accessSecretStorage(async () => {\n        const backupInfo = await cl.getKeyBackupVersion()\n        await cl.checkOwnCrossSigningTrust()\n\n        if (!backupInfo) throw new InvalidBackupInfo(\"backupInfo is null\")\n        await cl.restoreKeyBackupWithSecretStorage(backupInfo)\n    })\n})\n\nguard({\n    source: sample({\n        clock: validateRecoveryKey,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, input) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            input\n        }),\n    }),\n    filter: (params): params is ValidateRecoveryKeyFxParams => Boolean(\n        params.keyInfo\n    ),\n    target: validateRecoveryKeyFx,\n})\n\nguard({\n    source: sample({\n        clock: validatePassphrase,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, passphrase) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            passphrase,\n        }),\n    }),\n    filter: (params): params is ValidatePassphraseFxParams => Boolean(\n        params.keyInfo\n    ),\n    target: validatePassphraseFx,\n})\n\nvalidateRecoveryKeyFx.use(async ({ input, keyInfo }) => {\n    const cl = client()\n    const decodedKey = cl.keyBackupKeyFromRecoveryKey(input)\n    const isValid = await cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n    if (!isValid) throw new Error(\"Invalid recovery Key\")\n    return isValid\n})\n\nvalidatePassphraseFx.use( async ({keyInfo, passphrase}) => {\n    const cl = client()\n    const makeInput = makeInputToKey(keyInfo)\n    const decodedKey = await makeInput({passphrase})\n    const isValid = await cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n    if (!isValid) throw new Error(\"Invalid passphrase\")\n    return isValid\n})\n\n","import { IAuthData } from \"matrix-js-sdk\"\n\nimport { client } from \"@/matrix-client\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\n\nimport { confirmResetCrossSigningFx } from \"./public\"\nimport { ConfirmResetCrossSigningFxResult } from \"./types\"\n\nconfirmResetCrossSigningFx.use(async () => {\n    const cl = client()\n    const promise = new Promise<\n        ConfirmResetCrossSigningFxResult\n    >((res, rej) => {\n        cl.bootstrapCrossSigning({\n            authUploadDeviceSigningKeys: async (makeRequest) => {\n                const requestCallback = (\n                    auth: IAuthData, \n                ): Promise<IAuthData> => {\n                    return makeRequest(auth)\n                }\n                await createInteractiveAuthFx(requestCallback)\n            },\n\n            setupNewCrossSigning: true,\n        }).then(() => {\n            res({\n                result: true\n            })\n        })\n    })\n    return promise\n})\n","import { forward } from \"effector\"\nimport { IAuthData } from \"matrix-js-sdk\"\n\nimport { client } from \"@/matrix-client\"\nimport { SecureBackupSetupMethod } from \"@/types\"\nimport { accessSecretStorage } from \"@/cryptoCallbacks\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\nimport { \n    E2EE_WK_KEY, \n    E2EE_WK_KEY_DEPRECATED\n} from \"@/constants\"\n\nimport { \n    bootstrapSecretStorageFx,\n    createRecoveryKeyAndPassPhraseFx,\n    getSecureBackupSetupMethodsFx,\n    lossAllRecoveryKeyMethod, \n    onNewRecoveryMethodCreated, \n    resetAllRecoveryKeyMethodsFx\n} from \"./public\"\n\nforward({\n    from: lossAllRecoveryKeyMethod,\n    to: resetAllRecoveryKeyMethodsFx\n})\n\nforward({\n    from: bootstrapSecretStorageFx.doneData,\n    to: onNewRecoveryMethodCreated,\n})\n\nresetAllRecoveryKeyMethodsFx.use(async () => {\n    // Force reset secret storage (which resets the key backup)\n    await accessSecretStorage(async () => {\n        const cl = client()\n        await cl.bootstrapCrossSigning({\n            authUploadDeviceSigningKeys: async (makeRequest) => {\n                const requestCallback = (\n                    auth: IAuthData, \n                ): Promise<IAuthData> => {\n                    return makeRequest(auth)\n                }\n                await createInteractiveAuthFx(requestCallback)\n            },\n            setupNewCrossSigning: true,\n        })\n    }, true)\n})\n\nbootstrapSecretStorageFx.use(async (key) => {\n    const cl = client()\n    await cl.bootstrapSecretStorage({\n        createSecretStorageKey: async () => key,\n        setupNewKeyBackup: true,\n        setupNewSecretStorage: true,\n    })\n})\n\ncreateRecoveryKeyAndPassPhraseFx.use(async (password) => {\n    const cl = client()\n    const key = await cl.createRecoveryKeyFromPassphrase(password)\n    if (!key) throw new Error(\"createRecovery Error\")\n    return key\n})\n\ngetSecureBackupSetupMethodsFx.use(() => {\n    const clientWellKnown = client().getClientWellKnown()\n    let wellKnown = null\n    if (clientWellKnown && clientWellKnown[E2EE_WK_KEY]) {\n        wellKnown = clientWellKnown[E2EE_WK_KEY]\n    }\n    if (clientWellKnown && clientWellKnown[E2EE_WK_KEY_DEPRECATED]) {\n        wellKnown = clientWellKnown[E2EE_WK_KEY_DEPRECATED]\n    }\n    if (\n        !wellKnown ||\n        !wellKnown[\"secure_backup_setup_methods\"] ||\n        !wellKnown[\"secure_backup_setup_methods\"].length ||\n        !(\n            wellKnown[\"secure_backup_setup_methods\"]\n                .includes(SecureBackupSetupMethod.Key) ||\n            wellKnown[\"secure_backup_setup_methods\"]\n                .includes(SecureBackupSetupMethod.Passphrase)\n        )\n    ) {\n        return [\n            SecureBackupSetupMethod.Key,\n            SecureBackupSetupMethod.Passphrase,\n        ]\n    }\n    return wellKnown[\"secure_backup_setup_methods\"]\n})\n","import { InteractiveAuth } from \"matrix-js-sdk\"\n\nimport { d } from \"./domain\"\nimport { SubmitAuthDictFxParams } from \"./types\"\n\nexport const $interactiveAuthInstance = d.store<InteractiveAuth | null>(null)\n\nexport const setInteractiveAuth = d.event<InteractiveAuth>()\nexport const submitAuthDictFx = d\n    .effect<SubmitAuthDictFxParams, void, Error>()","import { sample } from \"effector\"\nimport { InteractiveAuth } from \"matrix-js-sdk\"\n\nimport { LOGIN_BY_PASSWORD } from \"@/constants\"\nimport { client } from \"@/matrix-client\"\n\nimport { \n    $interactiveAuthInstance, \n    setInteractiveAuth, \n    submitAuthDictFx \n} from \"./private\"\nimport { \n    cancelInteractiveAuth,\n    createInteractiveAuthFx, \n    onInteractiveAuthBusyChange,\n    onInteractiveAuthStateUpdate,\n    onNeedUserPassword,\n    onUserPasswordError,\n    onUserPasswordSuccess,\n    submitAuthDict\n} from \"./public\"\n\n$interactiveAuthInstance\n    .on(setInteractiveAuth, (_, auth) => auth)\n    .reset([onUserPasswordSuccess, cancelInteractiveAuth])\n\nsample({\n    clock: submitAuthDict,\n    source: $interactiveAuthInstance,\n    filter: (\n        isInstance: InteractiveAuth | null,\n    ): isInstance is InteractiveAuth => Boolean(isInstance),\n    fn: (auth, pass) => ({\n        password: pass,\n        interactiveAuth: auth\n    }),\n    target: submitAuthDictFx\n})\n\nsample({\n    source: onInteractiveAuthStateUpdate,\n    filter: ({status}) => status.errcode === \"M_FORBIDDEN\",\n    fn: ({status}) => status.error as string,\n    target: onUserPasswordError,\n})\n\ncreateInteractiveAuthFx.use(async (requestCallback) => {\n    const cl = client()\n\n    const interactiveAuth = new InteractiveAuth({\n        doRequest: requestCallback,\n        busyChanged: onInteractiveAuthBusyChange,\n        stateUpdated: (nextStage, status) => {\n            onInteractiveAuthStateUpdate({\n                nextStage, status\n            })\n        },\n        matrixClient: cl,\n        // нам это не нужно \n        requestEmailToken: undefined as any\n    })\n    setInteractiveAuth(interactiveAuth)\n    onNeedUserPassword()\n\n    return new Promise<void>(async (resolve, reject) => {\n        const unSub = cancelInteractiveAuth.watch(() => {\n            unSub()\n            reject()\n        })\n        await interactiveAuth.attemptAuth()\n        unSub()\n        onUserPasswordSuccess()\n        resolve()\n    })\n})\n\nsubmitAuthDictFx.use(async ({password, interactiveAuth}) => {\n    const cl = client()\n    await interactiveAuth.submitAuthDict(\n        {\n            \"type\": LOGIN_BY_PASSWORD,\n            \"user\": cl.getUserId(),\n            \"identifier\": {\n                \"type\": \"m.id.user\",\n                \"user\": cl.getUserId()\n            },\n            \"password\": password\n        }\n    )\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","SecureBackupSetupMethod","RecoveryKeyOrPassphraseEnum","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","getUserDevicesInfoFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","$mySessionsInfo","getMySessionsFx","clearMySessionsInfo","logoutSessionsById","renameDeviceFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","stopPeeking","clearStores","crypto","stop","cryptoStore","deleteAllData","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","indexedDB","verificationDomain","$isWaitingAnotherUser","createApi","setWaitingAnotherUser","resetWaitingAnotherUser","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","startVerificationDevice","startThisDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","onNeedRecoveryKeyOrPassphrase","startRecoveryKeyOrPassphraseVerification","setCheckKeyInfo","validateRecoveryKey","onRecoveryKeyOrPassphraseSuccess","onValidRecoveryKey","onInvalidRecoveryKey","$hasPassphrase","onHasPassphrase","validatePassphrase","onValidPassphrase","onInvalidPassphrase","$canVerify","$deviceIsVerified","onUpdateDeviceList","checkThisDeviceVerificationFx","onUsersProfileUpdate","onResolveSecretStorageKey","onRejectSecretStorageKey","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","IdbDelete","createRecoveryKeyAndPassPhraseFx","getSecureBackupSetupMethodsFx","onNeedCreateRecoveryMethod","lossAllRecoveryKeyMethod","cancelCreateNewMethod","onNewRecoveryMethodCreated","bootstrapSecretStorageFx","resetAllRecoveryKeyMethodsFx","secretStorageBeingAccessed","secretStorageKeys","secretStorageKeyInfo","dehydrationCache","createPromise","params","promise","res","rej","isCachingAllowed","setCachingAllowed","newVal","cacheSecretStorageKey","keyId","keyInfo","promptForBackupPassphrase","Uint8Array","console","log","accessSecretStorage","func","forceReset","cl","hasSecretStorageKey","createdSub","watch","cancelSub","bootstrapCrossSigning","bootstrapSecretStorage","getKeyBackupPassphrase","Object","keys","dehydrationKeyInfo","passphrase","setDehydrationKey","warn","error","makeInputToKey","deriveKey","salt","iterations","recoveryKey","decodeRecoveryKey","keyInfos","getDefaultSecretStorageKeyId","keyInfoEntries","entries","length","checkSecretStorageKey","inputToKey","resolveWatcher","rejectWatcher","unsubscribe","input","getDehydrationKey","userId","deviceId","requestId","name","deviceTrust","getUserId","isVerified","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","i","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","tryToUnlockSecretStorageWithDehydrationKey","restoringBackup","isSecretStorageReady","checkOwnCrossSigningTrust","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","confirmResetCrossSigningFx","createInteractiveAuthFx","submitAuthDict","onNeedUserPassword","onUserPasswordError","onUserPasswordSuccess","onInteractiveAuthBusyChange","onInteractiveAuthStateUpdate","cancelInteractiveAuth","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","InvalidBackupInfo","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","isReadUpTo","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","$isCryptoEnabled","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","args","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","getDeviceId","checkDeviceTrust","isSelfVerification","id","Date","now","userIds","initialFetch","deviceInfo","newStatus","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","downloadKeys","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","rules","global","setPushRuleEnabled","enabled","deletePushRule","logoutSessionsByIdFx","doneData","_","sessionsInfo","reset","fail","guard","clock","sessions","target","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","getDevices","devices","crossSigningInfo","getStoredCrossSigningForUser","myDeviceId","device","getStoredDevice","isCurrentSession","sessionsId","callback","auth","deleteMultipleDevices","setDeviceDetails","display_name","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","fn","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeysForUsers","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","isMe","getStoredDevicesForUser","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","crossSigningChangeFx","setEnableCrypto","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","cancelVerificationEventFx","restoreKeyBackupFx","$checkKeyInfo","validateRecoveryKeyFx","updateDeviceVerification","validatePassphraseFx","checkCanVerifyFx","onVerificationRequestFxReducer","currentRequest","onChange","cancelled","off","VerificationRequestEvent","Change","cancellationCode","phase","Done","otherUserId","Ready","Started","verifier","sasEvent","excludePhaseArray","Cancelled","Requested","requests","req","currentReq","canceledReq","val","canVerify","failData","accept","beginKeyVerification","once","verify","cancel","confirm","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","cryptoEnabled","homeserverSupportsCrossSigning","checkKeyInfo","decodedKey","keyBackupKeyFromRecoveryKey","isValid","makeInput","authUploadDeviceSigningKeys","requestCallback","setupNewCrossSigning","createSecretStorageKey","setupNewKeyBackup","setupNewSecretStorage","password","createRecoveryKeyFromPassphrase","clientWellKnown","getClientWellKnown","Key","Passphrase","$interactiveAuthInstance","setInteractiveAuth","submitAuthDictFx","isInstance","pass","interactiveAuth","errcode","InteractiveAuth","doRequest","busyChanged","stateUpdated","nextStage","matrixClient","requestEmailToken","unSub","attemptAuth"],"mappings":"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"}