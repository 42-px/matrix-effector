{"version":3,"file":"index.js","sources":["../src/types/content.ts","../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    DeleteNotificationsRuleEnabledParams,\n    EditMessagePayload,\n    EventPermissions,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedRoomMember,\n    MappedUser,\n    Message,\n    MessageEvent,\n    NotificationRulesResult,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams,\n    StartClientParams,\n    UploadContentParams,\n    UploadContentResult,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const checkEventPermissionsFx = matrixDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = matrixDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = matrixDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\nexport const getNotificationRulesFx = matrixDomain\n    .effect<void,NotificationRulesResult,Error>()\nexport const setNotificationRuleActionFx = matrixDomain\n    .effect<SetNotificationsRuleParams,void,Error>()\nexport const setNotificationRuleEnabledFx = matrixDomain\n    .effect<SetNotificationsRuleEnabledParams,void,Error>()\nexport const deleteNotificationRuleFx = matrixDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoomMembers = matrixDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<Message>()\nexport const newMessagesLoaded = matrixDomain.event<Message[]>()\nexport const onPaginateBackwardDone = matrixDomain.event<void>()\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const onRoomInitialized = matrixDomain.event<void>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\nexport const onUploadProgress = matrixDomain.event<UploadProgress>()\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./public\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption & {\n        messageBatchInterval?: number\n    }\n): void => {\n    if (typeof opts === \"string\") {\n        options = opts\n        return\n    }\n    const { messageBatchInterval: ms, ...restOpts} = opts\n    options = restOpts\n    if (ms !== undefined) messageBatchInterval = ms\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n","import { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse,\n    PaginateRoomFxParams,\n    UpdateMessagesFxParams\n} from \"./types\"\n\nexport const updateMessages = matrixDomain.event<void>()\nexport const getRoomMembers = matrixDomain.event<void>()\nexport const onRoomMemberUpdate = matrixDomain.event<RoomMember>()\nexport const onRoomUserUpdate = matrixDomain.event<User>()\n\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\nexport const updateMessagesFx = matrixDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = matrixDomain\n    .effect<string, MappedRoomMember[], Error>()\n","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedRoomMember,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: {\n            avatarUrl: user.avatarUrl,\n            userId : user.userId,\n            currentlyActive :  user.currentlyActive,\n            displayName :  user.displayName,\n            lastActiveAgo :  user.lastActiveAgo,\n            lastPresenceTs :  user.lastPresenceTs,\n            presence: user.presence as any,\n        },\n        userId: roomMember.userId,\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, {\n    RoomMember,\n    TimelineWindow,\n    EventStatus,\n    User,\n} from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward,\n    onRoomInitialized,\n    checkEventPermissionsFx,\n    uploadContentFx,\n    onUploadProgress,\n    $currentRoomMembers,\n    getUrlPreviewFx,\n    getNotificationRulesFx,\n    setNotificationRuleEnabledFx,\n    setNotificationRuleActionFx,\n    deleteNotificationRuleFx,\n    newMessagesLoaded,\n} from \"./public\"\nimport {\n    paginateRoomFx,\n    loadRoomFx,\n    initRoomFx,\n    updateMessagesFx,\n    updateMessages,\n    getRoomMembers,\n    getRoomMembersFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n} from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMessage,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, createRoomMessageBatch, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n    UploadContentResult,\n    NotificationRulesResult,\n    SetNotificationsRuleParams,\n    Message,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\nimport { debounce } from \"patronum\"\nimport { onPaginateBackwardDone } from \".\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst UserNotFound = createCustomError(\"UserNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nconst UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n\nfunction getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\n\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\n\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    let avatarUrl = user.avatarUrl\n    let displayName = user.displayName\n    if (!user?.avatarUrl || !user?.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        avatarUrl = profileInfo.avatar_url as string\n        displayName = profileInfo.displayname as string\n    }\n    return {\n        avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    \n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\n\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n"],"names":["MsgType","matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","$currentRoomId","store","$currentRoomMembers","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","newMessagesLoaded","onPaginateBackwardDone","onInitialSync","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","initRoom","onRoomInitialized","loadRoom","paginateForward","paginateBackward","onUploadProgress","clientStore","options","messageBatchInterval","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","prependClientParams","opts","restOpts","undefined","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","getSenderAvatarUrl","sender","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","roomId","userId","room","getRoom","otherMember","getMember","mxcUrlToHttp","mxcUrl","checkIsDirect","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","updateMessages","getRoomMembers","onRoomMemberUpdate","onRoomUserUpdate","initRoomFx","loadRoomFx","paginateRoomFx","updateMessagesFx","getRoomMembersFx","getMappedContent","toMessage","originalEventId","getId","content","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","UserNotFound","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","UserNotLoggedIn","getMessages","timelineWindow","getEvents","filter","getType","reduce","roomMessageBatch","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","loadNewMessagesFx","messages","size","length","forward","from","sample","done","_","to","map","$loadFilter","combine","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","doneData","reset","setMessages","guard","currentRoomId","result","isLive","value","canPaginateBackward","canPaginateForward","target","getRoomMembersDebounced","debounce","getMappedRooms","getRooms","clock","member","currentRoomMembers","user","find","pending","fn","initialEventId","initialWindowSize","loadAdditionalDataDirection","use","async","cl","loggedUserId","getUserId","getUser","avatarUrl","displayName","profileInfo","getProfileInfo","avatar_url","displayname","currentlyActive","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","startup","startClient","term","orderBy","membersCache","search","body","search_categories","room_events","search_term","keys","rooms","order_by","results","MatrixEvent","senderId","getSender","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","liveEvent","state","prevState","e","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","unreadCount","i","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","eventsRetrieved","paginate","EventTimeline","BACKWARDS","FORWARDS","makeRequest","requestLimit","dir","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","mxEvent","canRedact","currentState","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","file","includeFilename","onlyContentUri","rawResponse","type","promise","uploadContent","progressHandler","loaded","total","abort","members","roomMember","membership","powerLevel","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule"],"mappings":"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"}