{"version":3,"file":"index.js","sources":["../src/root.ts","../src/room/types.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/types/index.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    presence: \"online\" | \"offline\" | \"unavailable\"\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    isRead?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\nexport const throttleUpdateMessage = throttle({\n    source: updateMessages,\n    timeout: 800\n})\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType\n} from \"./types\"\n\nexport const checkIsReadMyMessage = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): boolean  => room.getJoinedMembers().some((member) => {\n    if (member.userId === myUserId) return false\n    return room\n        .hasUserReadEvent(member.userId, message.originalEventId)\n})\n\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const isDirect = matrixRoom.currentState\n        .getStateEvents(\n            \"m.room.create\",\n            \"\"\n        )?.getContent()?.isDirect\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    const lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n\n    if (lastMessage) {\n        const myUserId = cl.getUserId()\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.isRead = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage.isRead = checkIsReadMyMessage(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    checkIsReadMyMessage,\n    mergeMessageEvents\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const lastReadEvent = room.getAccountData(\"m.fully.read\")?.getContent()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstReadOtherMessage = false\n\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstReadOtherMessage) {\n            message.isRead = true\n        } else {\n            message.isRead = checkIsReadMyMessage(message, myUserId, room)\n            findFirstReadOtherMessage = message.isRead\n        }\n    })\n    otherMessages.forEach((message) => {\n        message.isRead = message.originalEventId === lastReadEvent?.event_id\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const { creator } = cl.getRoom(roomId).currentState\n        .getStateEvents(\n            \"m.room.create\",\n        )[0].getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = room.currentState\n            .getStateEvents(\n                \"m.room.create\"\n            )[0]?.getContent<StateEventsContent>()?.isDirect\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => toggleTypingUser(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    MappedRoomMember,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    ClientNotInitialized,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    getRoomMembersFx,\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport { debounce } from \"patronum\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    throttleUpdateMessage,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nexport const debounceReadSelfMessage = debounce({\n    source: sendMessageFx.done,\n    timeout: 500,\n})\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttleUpdateMessage,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsample({\n    clock: debounceReadSelfMessage,\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","MsgType","MatrixMembershipType","clientStore","messagesDomain","$messages","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","throttleUpdateMessage","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","checkIsReadMyMessage","message","myUserId","room","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","isDirect","currentState","getStateEvents","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","isRead","DMUser","getMember","guessDMUserId","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","messages","reduce","getRoomId","lastReadEvent","getAccountData","_room$getAccountData","myMessages","otherMessages","findFirstReadOtherMessage","event_id","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","prevRoomsId","setAccountData","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","initRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","Object","values","roomMember","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","debounceReadSelfMessage","roomMessageBatch","loadNewMessagesFx","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","eventId","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir"],"mappings":"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"}