{"version":3,"file":"index.js","sources":["../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/types/content.ts","../src/matrix-client.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/errors.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport { MappedRoom, MappedUser } from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    StartClientParams\n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import { TimelineWindow, User, Room } from \"matrix-js-sdk\"\nimport {\n    MappedRoom,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams\n} from \"./types\"\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\n\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\n\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, User[], Error>()\nexport const createRoomFx = roomDomain.effect<CreateRoomParams, string, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, Promise<void>, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, Promise<void>, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, Promise<void>, Error>()\nexport const joinRoomFx = roomDomain.effect<string, Promise<Room>, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const paginationDomain = root.domain(\"pagination\")\n","import { paginationDomain } from \"./domain\"\nimport { PaginateParams } from \"./types\"\n\nexport const $paginateForwardPending = paginationDomain.store(false)\nexport const $paginateBackwardPending = paginationDomain.store(false)\nexport const $canPaginateBackward = paginationDomain.store(true)\nexport const $canPaginateForward = paginationDomain.store(true)\n\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\nexport const paginateForward = paginationDomain.event<PaginateParams>()\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\nexport const createClient = (): void => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        createClient()\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption & {\n        messageBatchInterval?: number\n    }\n): void => {\n    if (typeof opts === \"string\") {\n        options = opts\n        return\n    }\n    const { messageBatchInterval: ms, ...restOpts} = opts\n    options = restOpts\n    if (ms !== undefined) messageBatchInterval = ms\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: {\n            avatarUrl: user.avatarUrl,\n            userId : user.userId,\n            currentlyActive :  user.currentlyActive,\n            displayName :  user.displayName,\n            lastActiveAgo :  user.lastActiveAgo,\n            lastPresenceTs :  user.lastPresenceTs,\n            presence: user.presence as any,\n        },\n        userId: roomMember.userId,\n    }\n}\n","import { MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n","import { combine } from \"effector\"\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\nimport { $currentRoomId, $timelineWindow } from \"./public\"\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\nimport { paginationDomain } from \"./domain\"\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\n\nexport const paginateRoomFx = paginationDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n","import { guard, sample } from \"effector\"\nimport { $currentRoomId, MessageResponse } from \"@/room\"\nimport { paginateRoomFx } from \"@/room-pagination/private\"\nimport { loadRoomFx } from \"@/room/private\"\nimport { UpdateMessagesFxParams } from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const updateMessages = messagesDomain.event<void>()\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import { forward } from \"effector\"\nimport { User } from \"matrix-js-sdk\"\nimport { toMappedRoom, toMessage } from \"@/mappers\"\nimport { client, onClientEvent } from \"@/matrix-client\"\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\nimport { MatrixEvent, Room, RoomMember } from \"@/types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx\n} from \"./public\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport { updateMessages } from \"@/room-messages/private\"\nimport { roomMessage } from \"@/room-messages\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(() => client().logout())\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    let avatarUrl = user.avatarUrl\n    let displayName = user.displayName\n    if (!user?.avatarUrl || !user?.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        avatarUrl = profileInfo.avatar_url as string\n        displayName = profileInfo.displayname as string\n    }\n    return {\n        avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any\n    }\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import matrix, { TimelineWindow } from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport { attach, forward, guard, sample } from \"effector\"\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"@/constants\"\nimport {\n    mergeMessageEvents,\n    toMappedRoomMember,\n    toMessage,\n    toRoomInfo\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { MatrixEvent, RoomMember } from \"@/types\"\nimport { checkIsDirect, getMessages } from \"@/utils\"\nimport {\n    $loadFilter,\n    getRoomMembers,\n    getRoomMembersFx,\n    initRoomFx,\n    loadRoomFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate\n} from \"./private\"\nimport {\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $timelineWindow,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    createRoomFx, \n    getAllUsersFx, \n    inviteUserFx, \n    kickUserRoomFx,\n    renameRoomFx,\n    joinRoomFx\n} from \"./public\"\nimport { LoadRoomFxParams } from \"./types\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            myMembership: matrixRoom.getMyMembership(),\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\n\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\n\ngetAllUsersFx.use(() => client().getUsers())\n\ncreateRoomFx.use(async ( {name, isDirect, invite, visibility} ) => {\n   const { room_id } = await client().createRoom({\n    name, \n    is_direct: isDirect, \n    invite,\n    visibility,\n   } as any )\n   return room_id\n})\n\ninviteUserFx.use(({userId, roomId}) => {\n    return client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use(({ roomId, userId, reason }) => {\n    return client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use(({roomId, name}) => {\n    return client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use((roomId) => {\n    return client().joinRoom(roomId)\n})","import { attach, forward, guard, sample } from \"effector\"\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\nimport { paginateForwardFx } from \"@/room-pagination/private\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx\n} from \"./public\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport {\n    RoomNotFound,\n    EventNotFound,\n    ClientNotInitialized,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n","import { combine, forward, guard } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    $currentRoomId,\n    $loadRoomFxPending,\n    loadRoom\n} from \"@/room\"\nimport { $loadFilter } from \"@/room/private\"\nimport { setMessages } from \"@/room-messages/private\"\nimport { getMessages } from \"@/utils\"\nimport {\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    paginateBackward,\n    paginateForward,\n} from \"./public\"\nimport { TimelineWindowUndefined } from \"@/errors\"\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n"],"names":["root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$timelineWindow","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","loadRoom","toLiveTimeline","loadRoomMessage","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","paginateForward","paginateBackward","MsgType","clientStore","options","messageBatchInterval","callbacksStore","createClient","removeAllListeners","matrix","forEach","eventName","cb","on","client","prependClientParams","opts","restOpts","undefined","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","mergeMessageEvents","acc","isRelation","getMessages","timelineWindow","getEvents","filter","includes","getType","reduce","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","userId","getRoom","otherMember","getMember","mxcUrlToHttp","mxcUrl","checkIsDirect","directEvent","getAccountData","aDirectRooms","Object","values","summaryDirects","accountDirects","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","$loadFilter","combine","Boolean","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoomFx","loadRoomFx","getRoomMembersFx","paginateRoomFx","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","map","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","state","prevState","rooms","e","member","user","use","login","async","startup","startClient","logout","stopClient","cl","loggedUserId","getUserId","getUser","avatarUrl","displayName","profileInfo","getProfileInfo","avatar_url","displayname","currentlyActive","lastActiveAgo","lastPresenceTs","presence","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","toLiveTimelineFx","loadRoomMessageFx","getRoomMembersDebounced","debounce","_","doneData","reset","value","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","currentState","members","roomMember","membership","powerLevel","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","length","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","isLive","canPaginateBackward","matrixRoom","events","getLiveTimeline","unreadCount","i","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","myMembership","getMyMembership","isOnline","lastActivityTS","getLastActiveTimestamp","term","orderBy","membersCache","search","body","search_categories","room_events","search_term","keys","order_by","results","MatrixEvent","senderId","getSender","getUsers","invite","visibility","room_id","createRoom","is_direct","reason","kick","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","type","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir"],"mappings":"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"}