<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
{"version":3,"file":"index.js","sources":["../src/root.ts","../src/room/types.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/types/index.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    Room,\n    User,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport { combine } from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    presence: \"online\" | \"offline\" | \"unavailable\"\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType\n} from \"./types\"\n\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (roomId: string): Promise<void> => {\n    const cl = client()\n    const { creator } = cl.getRoom(roomId).currentState\n        .getStateEvents(\n            \"m.room.create\",\n        )[0].getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n    await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate\n} from \"@/room\"\nimport { MatrixLoginPayload} from \"@/types\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx\n} from \"./public\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = room.currentState\n            .getStateEvents(\n                \"m.room.create\"\n            )[0]?.getContent<StateEventsContent>()?.isDirect\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    }: MatrixLoginPayload = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { RoomWithActivity } from \"@/types\"\nimport {\n    InitRoomParams,\n    MappedRoomMember,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport {\n    getMessages,\n    setDirectRoom\n} from \"@/utils\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\nimport {\n    getRoomByIdFx,\n    getRoomMembersFx,\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    getRoomMembers,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getRoomByIdFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getRoomByIdFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { guard, sample } from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    updateMessages,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: undefined })\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","MsgType","MatrixMembershipType","clientStore","messagesDomain","$messages","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","getIsDirectRoomsIds","directRooms","getAccountData","Object","values","flatMap","room","checkIsDirect","includes","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","getType","reduce","lastMessage","isDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","currentState","getStateEvents","creator","prevData","prevRoomsId","setAccountData","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","getRoomByIdFx","initRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","_cl$getRoom","is_direct","creation_content","reason","setRoomName","joinRoom","leave","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","roomMessageBatch","loadNewMessagesFx","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir"],"mappings":"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"}
=======
{"version":3,"file":"index.js","sources":["../src/root.ts","../src/room/types.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { TimelineWindow, RoomMember } from \"matrix-js-sdk\"\nimport { MappedUser, Message } from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    public = \"public\",\n    private = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport { LoginPayload } from \"matrix-js-sdk\";\nimport { MappedRoom, MappedUser } from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams\n} from \"./types\"\nimport { appDomain } from \"./domain\"\nimport { CreateClientParams, AuthData } from \"./types\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport { createClientOptions, EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: createClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n","import {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const paginationDomain = root.domain(\"pagination\")\n","import { paginationDomain } from \"./domain\"\nimport { PaginateParams } from \"./types\"\n\nexport const $paginateForwardPending = paginationDomain.store(false)\nexport const $paginateBackwardPending = paginationDomain.store(false)\nexport const $canPaginateBackward = paginationDomain.store(true)\nexport const $canPaginateForward = paginationDomain.store(true)\n\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\nexport const onPaginateForwardDone = paginationDomain.event<void>()\nexport const paginateForward = paginationDomain.event<PaginateParams>()\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import { MatrixEvent, RoomMember, User, Room } from \"matrix-js-sdk\"\nimport { checkIsDirect, client } from \"@/index\"\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.getSender(),\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership()\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = (cl.getAccountData(\n        DIRECT_EVENT as EventType) as MatrixEvent\n    )?.getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = (roomId: string): Promise<void> => {\n    const cl = client()\n    const { creator } = (cl.getRoom(roomId)?.currentState\n        .getStateEvents(\n            \"m.room.create\" as EventType,\n            undefined as any\n        ) as any )[0]?.getContent()\n    const prevData = (cl.getAccountData(\n        DIRECT_EVENT as EventType\n    ) as MatrixEvent)?.getContent() as any\n    const prevRoomsId = prevData[creator] ?? []\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { combine } from \"effector\"\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { RoomWithActivity } from \"@/types\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse, RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\nimport { $currentRoomId, $timelineWindow } from \"./public\"\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\n\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\nimport { paginationDomain } from \"./domain\"\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\n\nexport const paginateRoomFx = paginationDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n","import { guard, sample } from \"effector\"\nimport { $currentRoomId, MessageResponse } from \"@/room\"\nimport { paginateRoomFx } from \"@/room-pagination/private\"\nimport { loadRoomFx } from \"@/room/private\"\nimport { UpdateMessagesFxParams } from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const updateMessages = messagesDomain.event<void>()\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import { forward } from \"effector\"\nimport {\n    EventType,\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    LoginPayload,\n} from \"matrix-js-sdk\"\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { AuthData } from \"./types\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport { updateMessages } from \"@/room-messages/private\"\nimport { roomMessage } from \"@/room-messages\"\nimport { directRoomCreated, roomCreated } from \"@/room\"\nimport { UserNotFound } from \"@/errors\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId() as string)\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = (room.currentState\n            .getStateEvents(\n                \"m.room.create\" as EventType, \n                undefined as any\n            ) as any)[0]?.getContent()?.isDirect\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    }: LoginPayload = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(() => client().logout())\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import matrix, {\n    Room,\n    TimelineWindow,\n    MatrixEvent,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport { attach, forward, guard, sample } from \"effector\"\nimport {\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    $loadFilter,\n    getRoomByIdFx,\n    getRoomMembers,\n    getRoomMembersFx,\n    initRoomFx,\n    loadRoomFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $timelineWindow,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    onRoomLoaded,\n    createRoomFx,\n    getAllUsersFx,\n    inviteUserFx,\n    kickUserRoomFx,\n    renameRoomFx,\n    joinRoomFx,\n    createDirectRoomFx,\n    clearCurrentRoomState,\n    $myPowerLevel,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForRedact,\n    $requiredPowerLevelForDefaultState,\n    $currentRoom,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n} from \"./public\"\nimport { LoadRoomFxParams, Visibility } from \"./types\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getRoomByIdFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getRoomByIdFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = (\n        room.currentState\n            .getStateEvents(\"m.room.power_levels\", \"\") as MatrixEvent[])[0]\n        .getContent() as any\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            // TODO: fix me\n            const event = new MatrixEvent(result as any)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n","import { attach, forward, guard, sample } from \"effector\"\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\nimport { paginateForwardFx } from \"@/room-pagination/private\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx\n} from \"./public\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport {\n    RoomNotFound,\n    EventNotFound,\n    ClientNotInitialized,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n","import { combine, forward, guard } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    $currentRoomId,\n    $loadRoomFxPending,\n    loadRoom\n} from \"@/room\"\nimport { $loadFilter } from \"@/room/private\"\nimport { setMessages } from \"@/room-messages/private\"\nimport { getMessages } from \"@/utils\"\nimport {\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    paginateBackward,\n    paginateForward,\n    onPaginateForwardDone\n} from \"./public\"\nimport { TimelineWindowUndefined } from \"@/errors\"\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","MsgType","clientStore","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","messageBatchInterval","callbacksStore","createClient","options","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","getSender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","getIsDirectRoomsIds","directRooms","getAccountData","_cl$getAccountData","Object","values","flatMap","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","creator","_cl$getRoom","currentState","getStateEvents","_cl$getRoom$currentSt2","prevData","_cl$getAccountData2","prevRoomsId","setAccountData","$loadFilter","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","getRoomByIdFx","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","MatrixEvent","senderId","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","is_direct","creation_content","reason","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir"],"mappings":"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"}
>>>>>>> baa0096 (fix toMessage sender type)
=======
{"version":3,"file":"index.js","sources":["../src/root.ts","../src/room/types.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { TimelineWindow, RoomMember } from \"matrix-js-sdk\"\r\nimport { MappedUser, Message } from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    public = \"public\",\r\n    private = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport { LoginPayload } from \"matrix-js-sdk\";\r\nimport { MappedRoom, MappedUser } from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams\r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\nimport { CreateClientParams, AuthData } from \"./types\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === \"join\") ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport { createClientOptions, EventListener } from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: createClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n}\r\n","import {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\n\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, void, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, void, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const paginationDomain = root.domain(\"pagination\")\r\n","import { paginationDomain } from \"./domain\"\r\nimport { PaginateParams } from \"./types\"\r\n\r\nexport const $paginateForwardPending = paginationDomain.store(false)\r\nexport const $paginateBackwardPending = paginationDomain.store(false)\r\nexport const $canPaginateBackward = paginationDomain.store(true)\r\nexport const $canPaginateForward = paginationDomain.store(true)\r\n\r\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\r\nexport const onPaginateForwardDone = paginationDomain.event<void>()\r\nexport const paginateForward = paginationDomain.event<PaginateParams>()\r\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\n","import { MatrixEvent, RoomMember, User, Room } from \"matrix-js-sdk\"\r\nimport { checkIsDirect, client } from \"@/index\"\r\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n} from \"./types\"\r\n\r\nfunction getMappedContent(event: MatrixEvent): MessageContent {\r\n    const matrixContent = event.getContent() as MessageContent\r\n    return {...matrixContent}\r\n}\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId(),\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership()\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n    const lastMessage = mergedMessageEvents.length ?\r\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\r\n    const isDirect = checkIsDirect(room.roomId)\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\r\n    }\r\n}\r\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport { mergeMessageEvents } from \"./mappers\"\r\nimport { client } from \"./matrix-client\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow) {\r\n    return timelineWindow\r\n        .getEvents()\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null =>\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\nexport const getIsDirectRoomsIds = ():string[] => {\r\n    const cl = client()\r\n    const directRooms = (cl.getAccountData(\r\n        DIRECT_EVENT as EventType) as MatrixEvent\r\n    )?.getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width !== undefined ? width : null,\r\n        height !== undefined ? height : null,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\r\n    )\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = (roomId: string): Promise<void> => {\r\n    const cl = client()\r\n    const { creator } = (cl.getRoom(roomId)?.currentState\r\n        .getStateEvents(\r\n            \"m.room.create\" as EventType,\r\n            undefined as any\r\n        ) as any )[0]?.getContent()\r\n    const prevData = (cl.getAccountData(\r\n        DIRECT_EVENT as EventType\r\n    ) as MatrixEvent)?.getContent() as any\r\n    const prevRoomsId = prevData[creator] ?? []\r\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n","import { combine } from \"effector\"\r\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\r\nimport { RoomWithActivity } from \"@/types\"\r\nimport {\r\n    InitRoomParams,\r\n    LoadRoomFxParams,\r\n    MappedRoomMember,\r\n    MessageResponse, RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport { $currentRoomId, $timelineWindow } from \"./public\"\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\n\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomMembersFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach } from \"effector\"\r\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\r\nimport { paginationDomain } from \"./domain\"\r\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\r\n\r\nexport const paginateRoomFx = paginationDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n","import { guard, sample } from \"effector\"\r\nimport { $currentRoomId, MessageResponse } from \"@/room\"\r\nimport { paginateRoomFx } from \"@/room-pagination/private\"\r\nimport { loadRoomFx } from \"@/room/private\"\r\nimport { UpdateMessagesFxParams } from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n","import { forward } from \"effector\"\r\nimport {\r\n    EventType,\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    LoginPayload,\r\n} from \"matrix-js-sdk\"\r\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\nimport { AuthData } from \"./types\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport { updateMessages } from \"@/room-messages/private\"\r\nimport { roomMessage } from \"@/room-messages\"\r\nimport { directRoomCreated, roomCreated } from \"@/room\"\r\nimport { UserNotFound } from \"@/errors\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId() as string)\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = (room.currentState\r\n            .getStateEvents(\r\n                \"m.room.create\" as EventType, \r\n                undefined as any\r\n            ) as any)[0]?.getContent()?.isDirect\r\n\r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    }: LoginPayload = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use(() => client().logout())\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const { store } = client()\r\n    if (store) await store.startup()\r\n    await client().startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import matrix, {\r\n    Room,\r\n    TimelineWindow,\r\n    MatrixEvent,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport { attach, forward, guard, sample } from \"effector\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    $loadFilter,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    getRoomMembersFx,\r\n    initRoomFx,\r\n    loadRoomFx,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    onRoomLoaded,\r\n    createRoomFx,\r\n    getAllUsersFx,\r\n    inviteUserFx,\r\n    kickUserRoomFx,\r\n    renameRoomFx,\r\n    joinRoomFx,\r\n    createDirectRoomFx,\r\n    clearCurrentRoomState,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForRedact,\r\n    $requiredPowerLevelForDefaultState,\r\n    $currentRoom,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n} from \"./public\"\r\nimport { LoadRoomFxParams, Visibility } from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotFound\r\n} from \"@/errors\"\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getRoomByIdFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getRoomByIdFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = (\r\n        room.currentState\r\n            .getStateEvents(\"m.room.power_levels\", \"\") as MatrixEvent[])[0]\r\n        .getContent() as any\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetRoomMembersFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return Object.values(room.currentState.members)\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    await timelineWindow.load(initialEventId, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const membersCache: { [id: string]: RoomMember } = {}\r\n    const searchResponse = await client().search({\r\n        body: {\r\n            search_categories: {\r\n                room_events: {\r\n                    search_term: term,\r\n                    keys: [\"content.body\"],\r\n                    filter: {\r\n                        rooms: [roomId],\r\n                    },\r\n                    order_by: orderBy,\r\n                },\r\n            },\r\n        },\r\n    })\r\n    return searchResponse\r\n        .search_categories\r\n        .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n            const event = new MatrixEvent(result as any)\r\n            const senderId = event.getSender()\r\n            if (membersCache[senderId] === undefined) {\r\n                membersCache[senderId] = room.getMember(senderId)\r\n            }\r\n            event.sender = membersCache[senderId]\r\n            return toMessage(event)\r\n        })\r\n})\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    await client().invite(roomId, userId)\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n","import { attach, forward, guard, sample } from \"effector\"\r\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\r\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\r\nimport { paginateForwardFx } from \"@/room-pagination/private\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx\r\n} from \"./public\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport {\r\n    RoomNotFound,\r\n    EventNotFound,\r\n    ClientNotInitialized,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        updateMessages,\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nsendMessageFx.use(({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => client().sendMessage(roomId, content, txnId))\r\neditMessageFx.use(({\r\n    roomId, eventId, body, txnId,\r\n}) => client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n","import { combine, forward, guard } from \"effector\"\r\nimport matrix from \"matrix-js-sdk\"\r\nimport {\r\n    $currentRoomId,\r\n    $loadRoomFxPending,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { $loadFilter } from \"@/room/private\"\r\nimport { setMessages } from \"@/room-messages/private\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx\r\n} from \"./private\"\r\nimport {\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    onPaginateForwardDone\r\n} from \"./public\"\r\nimport { TimelineWindowUndefined } from \"@/errors\"\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n      && !backwardPaginationPending\r\n      && !forwardPaginationPending\r\n      && !roomLoading\r\n)\r\n\r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n\r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n\r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n\r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","MsgType","clientStore","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","messageBatchInterval","callbacksStore","createClient","options","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","getIsDirectRoomsIds","directRooms","getAccountData","_cl$getAccountData","Object","values","flatMap","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","creator","_cl$getRoom","currentState","getStateEvents","_cl$getRoom$currentSt2","prevData","_cl$getAccountData2","prevRoomsId","setAccountData","$loadFilter","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","getRoomByIdFx","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","is_direct","creation_content","reason","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir"],"mappings":"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"}
>>>>>>> d0011ae (fix sender)
=======
{"version":3,"file":"index.js","sources":["../src/root.ts","../src/room/types.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { TimelineWindow, RoomMember } from \"matrix-js-sdk\"\nimport { MappedUser, Message } from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    public = \"public\",\n    private = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport { LoginPayload } from \"matrix-js-sdk\";\nimport { MappedRoom, MappedUser } from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams\n} from \"./types\"\nimport { appDomain } from \"./domain\"\nimport { CreateClientParams, AuthData } from \"./types\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport { createClientOptions, EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: createClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n","import {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const paginationDomain = root.domain(\"pagination\")\n","import { paginationDomain } from \"./domain\"\nimport { PaginateParams } from \"./types\"\n\nexport const $paginateForwardPending = paginationDomain.store(false)\nexport const $paginateBackwardPending = paginationDomain.store(false)\nexport const $canPaginateBackward = paginationDomain.store(true)\nexport const $canPaginateForward = paginationDomain.store(true)\n\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\nexport const onPaginateForwardDone = paginationDomain.event<void>()\nexport const paginateForward = paginationDomain.event<PaginateParams>()\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import { MatrixEvent, RoomMember, User, Room } from \"matrix-js-sdk\"\nimport { checkIsDirect, client } from \"@/index\"\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership()\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = (cl.getAccountData(\n        DIRECT_EVENT as EventType) as MatrixEvent\n    )?.getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = (\n    roomId: string,\n    interlocutor?: string\n): Promise<void> => {\n    const cl = client()\n    const { creator } = (cl.getRoom(roomId)?.currentState\n        .getStateEvents(\n            \"m.room.create\" as EventType,\n            undefined as any\n        ) as any )[0]?.getContent()\n    const prevData = (cl.getAccountData(\n        DIRECT_EVENT as EventType\n    ) as MatrixEvent)?.getContent() as any\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(interlocutor) {\n        return cl.setAccountData(DIRECT_EVENT as EventType, {\n            ...prevData,\n            [interlocutor]: [roomId]\n        })\n    }\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { combine } from \"effector\"\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { RoomWithActivity } from \"@/types\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse, RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\nimport { $currentRoomId, $timelineWindow } from \"./public\"\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\n\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\nimport { paginationDomain } from \"./domain\"\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\n\nexport const paginateRoomFx = paginationDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n","import { guard, sample } from \"effector\"\nimport { $currentRoomId, MessageResponse } from \"@/room\"\nimport { paginateRoomFx } from \"@/room-pagination/private\"\nimport { loadRoomFx } from \"@/room/private\"\nimport { UpdateMessagesFxParams } from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const updateMessages = messagesDomain.event<void>()\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import { forward } from \"effector\"\nimport {\n    EventType,\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    LoginPayload,\n} from \"matrix-js-sdk\"\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { AuthData } from \"./types\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport { updateMessages } from \"@/room-messages/private\"\nimport { roomMessage } from \"@/room-messages\"\nimport { directRoomCreated, roomCreated } from \"@/room\"\nimport { UserNotFound } from \"@/errors\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId() as string)\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = (room.currentState\n            .getStateEvents(\n                \"m.room.create\" as EventType, \n                undefined as any\n            ) as any)[0]?.getContent()?.isDirect\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    }: LoginPayload = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(() => client().logout())\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import matrix, {\n    Room,\n    TimelineWindow,\n    MatrixEvent,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport { attach, forward, guard, sample } from \"effector\"\nimport {\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { client } from \"@/matrix-client\"\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    $loadFilter,\n    getRoomByIdFx,\n    getRoomMembers,\n    getRoomMembersFx,\n    initRoomFx,\n    loadRoomFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $timelineWindow,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    onRoomLoaded,\n    createRoomFx,\n    getAllUsersFx,\n    inviteUserFx,\n    kickUserRoomFx,\n    renameRoomFx,\n    joinRoomFx,\n    createDirectRoomFx,\n    clearCurrentRoomState,\n    $myPowerLevel,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForRedact,\n    $requiredPowerLevelForDefaultState,\n    $currentRoom,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    findDirectRoomByUserIdFx\n} from \"./public\"\nimport { LoadRoomFxParams, Visibility } from \"./types\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getRoomByIdFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getRoomByIdFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = (\n        room.currentState\n            .getStateEvents(\"m.room.power_levels\", \"\") as MatrixEvent[])[0]\n        .getContent() as any\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            // TODO: fix me\n            const event = new MatrixEvent(result as any)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = (cl.getAccountData(\n        DIRECT_EVENT) as any\n    )?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n","import { attach, forward, guard, sample } from \"effector\"\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\nimport { paginateForwardFx } from \"@/room-pagination/private\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx\n} from \"./public\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport {\n    RoomNotFound,\n    EventNotFound,\n    ClientNotInitialized,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n","import { combine, forward, guard } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    $currentRoomId,\n    $loadRoomFxPending,\n    loadRoom\n} from \"@/room\"\nimport { $loadFilter } from \"@/room/private\"\nimport { setMessages } from \"@/room-messages/private\"\nimport { getMessages } from \"@/utils\"\nimport {\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    paginateBackward,\n    paginateForward,\n    onPaginateForwardDone\n} from \"./public\"\nimport { TimelineWindowUndefined } from \"@/errors\"\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","MsgType","clientStore","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","messageBatchInterval","callbacksStore","createClient","options","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","getIsDirectRoomsIds","directRooms","getAccountData","_cl$getAccountData","Object","values","flatMap","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","interlocutor","creator","_cl$getRoom","currentState","getStateEvents","_cl$getRoom$currentSt2","prevData","_cl$getAccountData2","prevRoomsId","setAccountData","$loadFilter","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","getRoomByIdFx","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","is_direct","creation_content","reason","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir"],"mappings":"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"}
>>>>>>> b139ee8 (add findDirectRoomByUserIdFx and fix setDirectRoom)
