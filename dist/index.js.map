{"version":3,"file":"index.js","sources":["../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room/types.ts","../src/room-messages/domain.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/types/content.ts","../src/matrix-client.ts","../src/constants.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/errors.ts","../src/room/init.ts","../src/mappers.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts","../src/utils.ts"],"sourcesContent":["import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport { MappedRoom, MappedUser } from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    LoginPayload,\r\n    StartClientParams\r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, LoginPayload, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams\r\n} from \"./types\"\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\n    export const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\r\nimport { RoomMember, MappedUser, Message } from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    public = \"public\",\r\n    private = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","import {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\n\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, void, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, void, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const paginationDomain = root.domain(\"pagination\")\r\n","import { paginationDomain } from \"./domain\"\r\nimport { PaginateParams } from \"./types\"\r\n\r\nexport const $paginateForwardPending = paginationDomain.store(false)\r\nexport const $paginateBackwardPending = paginationDomain.store(false)\r\nexport const $canPaginateBackward = paginationDomain.store(true)\r\nexport const $canPaginateForward = paginationDomain.store(true)\r\n\r\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\r\nexport const onPaginateForwardDone = paginationDomain.event<void>()\r\nexport const paginateForward = paginationDomain.event<PaginateParams>()\r\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport { EventListener } from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet options: Parameters<typeof matrix.createClient>[0]\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\nexport const createClient = (): void => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => {\r\n    if (!clientStore) {\r\n        createClient()\r\n    }\r\n    return clientStore\r\n}\r\nexport const prependClientParams = (\r\n    opts: string | CreateClientOption & {\r\n        messageBatchInterval?: number\r\n    }\r\n): void => {\r\n    if (typeof opts === \"string\") {\r\n        options = opts\r\n        return\r\n    }\r\n    const { messageBatchInterval: ms, ...restOpts} = opts\r\n    options = restOpts\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n}\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import { combine } from \"effector\"\r\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    LoadRoomFxParams,\r\n    MappedRoomMember,\r\n    MessageResponse\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport { $currentRoomId, $timelineWindow } from \"./public\"\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomMembersFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach } from \"effector\"\r\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\r\nimport { paginationDomain } from \"./domain\"\r\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\r\n\r\nexport const paginateRoomFx = paginationDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n","import { guard, sample } from \"effector\"\r\nimport { $currentRoomId, MessageResponse } from \"@/room\"\r\nimport { paginateRoomFx } from \"@/room-pagination/private\"\r\nimport { loadRoomFx } from \"@/room/private\"\r\nimport { UpdateMessagesFxParams } from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n","import { forward } from \"effector\"\r\nimport { EventType, User } from \"matrix-js-sdk\"\r\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\r\nimport { client, onClientEvent } from \"@/matrix-client\"\r\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\r\nimport { MatrixEvent, Room, RoomMember } from \"@/types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx\r\n} from \"./public\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport { updateMessages } from \"@/room-messages/private\"\r\nimport { roomMessage } from \"@/room-messages\"\r\nimport { directRoomCreated, roomCreated } from \"@/room\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId() as string)\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = (room.currentState\r\n            .getStateEvents(\r\n                \"m.room.create\" as EventType, \r\n                undefined as any\r\n            ) as any)[0]?.getContent()?.isDirect\r\n\r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use(() => client().logout())\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\n","import matrix, { Room, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport { attach, forward, guard, sample } from \"effector\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { MatrixEvent, RoomMember } from \"@/types\"\r\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    $loadFilter,\r\n    getRoomMembers,\r\n    getRoomMembersFx,\r\n    initRoomFx,\r\n    loadRoomFx,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    updatePowerLevelFx,\r\n} from \"./private\"\r\nimport {\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    onRoomLoaded,\r\n    createRoomFx,\r\n    getAllUsersFx,\r\n    inviteUserFx,\r\n    kickUserRoomFx,\r\n    renameRoomFx,\r\n    joinRoomFx,\r\n    createDirectRoomFx,\r\n    clearCurrentRoomState,\r\n    $myPowerLevel,\r\n} from \"./public\"\r\nimport { LoadRoomFxParams, Visibility } from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotFound\r\n} from \"@/errors\"\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset(clearCurrentRoomState)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: updatePowerLevelFx\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\ngetRoomMembersFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return Object.values(room.currentState.members)\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    await timelineWindow.load(initialEventId, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const maxHistory = 99\r\n    return rooms.map((room) => toRoomWithActivity(room, maxHistory))\r\n})\r\n\r\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const membersCache: { [id: string]: RoomMember } = {}\r\n    const searchResponse = await client().search({\r\n        body: {\r\n            search_categories: {\r\n                room_events: {\r\n                    search_term: term,\r\n                    keys: [\"content.body\"],\r\n                    filter: {\r\n                        rooms: [roomId],\r\n                    },\r\n                    order_by: orderBy,\r\n                },\r\n            },\r\n        },\r\n    })\r\n    return searchResponse\r\n        .search_categories\r\n        .room_events.results.map(({ result }) => {\r\n            const event = new MatrixEvent(result)\r\n            const senderId = event.getSender()\r\n            if (membersCache[senderId] === undefined) {\r\n                membersCache[senderId] = room.getMember(senderId)\r\n            }\r\n            event.sender = membersCache[senderId]\r\n            return toMessage(event)\r\n        })\r\n})\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    const { room_id } = await client().createRoom(options)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    await client().invite(roomId, userId)\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room), 99)\r\n})\r\n","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\r\nimport { checkIsDirect, client } from \"@/index\"\r\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    Room,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n} from \"./types\"\r\n\r\nfunction getMappedContent(event: MatrixEvent): MessageContent {\r\n    const matrixContent = event.getContent() as MessageContent\r\n    return {...matrixContent}\r\n}\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId(),\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership()\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory: number\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n    const lastMessage = mergedMessageEvents.length ?\r\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\r\n    const isDirect = checkIsDirect(room.roomId)\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\r\n    }\r\n}\r\n","import { attach, forward, guard, sample } from \"effector\"\r\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\r\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\r\nimport { paginateForwardFx } from \"@/room-pagination/private\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx\r\n} from \"./public\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport {\r\n    RoomNotFound,\r\n    EventNotFound,\r\n    ClientNotInitialized,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        updateMessages,\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nsendMessageFx.use(({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => client().sendMessage(roomId, content, txnId))\r\neditMessageFx.use(({\r\n    roomId, eventId, body, txnId,\r\n}) => client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n","import { combine, forward, guard } from \"effector\"\r\nimport matrix from \"matrix-js-sdk\"\r\nimport {\r\n    $currentRoomId,\r\n    $loadRoomFxPending,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { $loadFilter } from \"@/room/private\"\r\nimport { setMessages } from \"@/room-messages/private\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx\r\n} from \"./private\"\r\nimport {\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    onPaginateForwardDone\r\n} from \"./public\"\r\nimport { TimelineWindowUndefined } from \"@/errors\"\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n      && !backwardPaginationPending\r\n      && !forwardPaginationPending\r\n      && !roomLoading\r\n)\r\n\r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n\r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n\r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n\r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport { mergeMessageEvents } from \"./mappers\"\r\nimport { client } from \"./matrix-client\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow) {\r\n    return timelineWindow\r\n        .getEvents()\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null =>\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\nexport const getIsDirectRoomsIds = ():string[] => {\r\n    const cl = client()\r\n    const directRooms = (cl.getAccountData(\r\n        DIRECT_EVENT as EventType) as MatrixEvent\r\n    )?.getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width !== undefined ? width : null,\r\n        height !== undefined ? height : null,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\r\n    )\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = (roomId: string): Promise<void> => {\r\n    const cl = client()\r\n    const { creator } = (cl.getRoom(roomId)?.currentState\r\n        .getStateEvents(\r\n            \"m.room.create\" as EventType,\r\n            undefined as any\r\n        ) as any )[0]?.getContent()\r\n    const prevData = (cl.getAccountData(\r\n        DIRECT_EVENT as EventType\r\n    ) as MatrixEvent)?.getContent()\r\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\r\n        ...prevData,\r\n        [creator]: [roomId]\r\n    })\r\n}\r\n"],"names":["root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","clearCurrentRoomState","$timelineWindow","$myPowerLevel","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","Visibility","Preset","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","MsgType","clientStore","options","messageBatchInterval","callbacksStore","createClient","removeAllListeners","matrix","forEach","eventName","cb","on","client","prependClientParams","opts","restOpts","undefined","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","$loadFilter","combine","roomId","timelineWindow","Boolean","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","paginateRoomFx","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","filter","getMappedRooms","getRooms","map","toMappedRoom","forward","from","initialSyncLimit","to","room","toStartOfTimeline","removed","data","eventType","getType","liveEvent","toMessage","cl","user","getMember","getUserId","membership","currentState","getStateEvents","getContent","isDirect","state","prevState","rooms","e","member","use","login","async","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","toMappedUser","avatarUrl","displayName","profileInfo","getProfileInfo","avatar_url","displayname","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","_","reset","doneData","value","powerLevel","pending","clock","fn","target","currentRoomMembers","find","userId","initialEventId","initialWindowSize","loadAdditionalDataDirection","getRoom","Object","values","members","roomMember","name","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","getMessages","length","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","isLive","canPaginateBackward","toRoomWithActivity","term","orderBy","membersCache","search","body","search_categories","room_events","search_term","keys","order_by","results","MatrixEvent","senderId","getSender","sender","getUsers","invite","visibility","initialState","preset","initial_state","state_key","stateKey","room_id","createRoom","findRoomId","getIsDirectRoomsIds","is_direct","private","creation_content","creator","setDirectRoom","reason","kick","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","content","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","type","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","isRedacted","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","getMappedContent","originalEventId","relation","getRelation","getId","originServerTs","getDate","edited","redacted","isRedaction","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","makeRequest","requestLimit","dir","currentlyActive","lastActiveAgo","lastPresenceTs","presence","maxHistory","matrixRoom","events","getLiveTimeline","getEvents","unreadCount","i","hasUserReadEvent","mergedMessageEvents","includes","reduce","lastMessage","checkIsDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","directRooms","getAccountData","flatMap","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","prevData","setAccountData","[object Object]"],"mappings":"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"}