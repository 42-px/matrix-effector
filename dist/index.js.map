{"version":3,"file":"index.js","sources":["../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { combine } from \"effector\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedUser,\n    Message,\n    MessageEvent,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    StartClientParams\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\n\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { matrixDomain } from \"./domain\"\nimport {\n    LoadRoomFxParams,\n    MessageResponse,\n    PaginateRoomFxParams\n} from \"./types\"\n\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n} from \"./types\"\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: event.getContent(),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: event.getContent(),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, { RoomMember, TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoomFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward\n} from \"./public\"\nimport { paginateRoomFx, loadRoomFx } from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(() => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    return {\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        const size = messages.length - initialWindowSize\n        const eventsRetrieved: boolean = await timelineWindow\n            .paginate(matrix.EventTimeline.BACKWARDS, size)\n        if (eventsRetrieved) {\n            messages = timelineWindow\n                .getEvents()\n                .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                    .includes(event.getType()))\n                .reduce(mergeMessageEvents, [])\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages =  timelineWindow.getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n"],"names":["matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","initRoomFx","$currentRoomId","store","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","createRoomMessageBatch","ms","batchEvents","onInitialSync","onCachedState","onSync","createOnSyncThrottled","throttle","source","timeout","initRoom","loadRoom","paginateForward","paginateBackward","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","prependClientParams","opts","onClientEvent","callbacks","push","getSenderAvatarUrl","sender","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","roomId","userId","room","getRoom","otherMember","getMember","checkIsDirect","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","loadRoomFx","paginateRoomFx","toMessage","originalEventId","undefined","getId","content","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","paginateBackwardFx","attach","mapParams","params","timelineWindow","direction","paginateForwardFx","$loadFilter","combine","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","_","doneData","reset","setMessages","guard","sample","done","currentRoomId","result","filter","getMappedRooms","getRooms","map","messages","isLive","canPaginateBackward","canPaginateForward","forward","from","pending","to","initialEventId","initialWindowSize","target","use","cl","loggedUserId","getUserId","user","getUser","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","async","startup","startClient","term","membersCache","search","body","search_categories","room_events","search_term","keys","rooms","results","MatrixEvent","senderId","getSender","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","getType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","reduce","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","size","paginate","EventTimeline","BACKWARDS","makeRequest","requestLimit","dir","FORWARDS","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow"],"mappings":"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"}