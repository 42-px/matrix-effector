{"version":3,"file":"index.js","sources":["../src/root.ts","../src/types/content.ts","../src/types/index.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/idbHelper.ts","../src/verification/public.ts","../src/cryptoCallbacks.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/reducers.ts","../src/verification/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n\nexport const getUserDevicesFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        // TODO Не чистить сторы, если userId нового юзера совпадает со старым юзером\n        // clientStore.clearStores()\n        // clientStore.crypto.cryptoStore.deleteAllData()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { \n    VerificationRequest, \n    IVerificationChannel, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: number\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n\nexport type InputToKeyParams = {\n  passphrase?: string\n  recoveryKey?: string\n}\n\nexport type CheckRecoveryKeyParams = Pick<InputToKeyParams, \"recoveryKey\">\nexport type CheckPassphrase = Pick<InputToKeyParams, \"passphrase\">\n\nexport type CheckRecoveryKeyFxParams = CheckRecoveryKeyParams & {\n  resolveAndReject: SecretStorageKeyResolveAndReject\n}\n\nexport type CheckPassphraseFxParams = CheckPassphrase & {\n  resolveAndReject: SecretStorageKeyResolveAndReject\n}\n\nexport type SavedInputToKeyMethod = (\n  params: InputToKeyParams\n) => Promise<Uint8Array>\n\n\nexport type CheckCanVerifyFxParams = {\n  profileId: string\n}\n\nexport type SecretStorageKeyResolveAndReject = {\n  resolve:(input: InputToKeyParams) => void\n  reject: () => void\n} \n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { createApi } from \"effector\"\nimport { IRecoveryKey, ISecretStorageKeyInfo } from \"matrix-js-sdk/lib\"\nimport { verificationDomain } from \"./domain\"\nimport {\n    CheckCanVerifyFxParams,\n    CheckPassphrase,\n    CheckRecoveryKeyParams,\n    InputToKeyParams,\n    MyVerificationRequest,\n    SavedInputToKeyMethod,\n    SecretStorageKeyResolveAndReject,\n    StartVerificationDeviceParams,\n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\n// Emodji SAS Verification\n\nexport const $isWaitingAnotherUser = verificationDomain\n    .store<boolean>(false)\n\nexport const {\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser\n} = createApi(\n    $isWaitingAnotherUser,\n    {\n        setWaitingAnotherUser: () => true,\n        resetWaitingAnotherUser: () => false\n    }\n)\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startThisDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n\n\n// Recovery Key\nexport const checkRecoveryKey = verificationDomain\n    .event<CheckRecoveryKeyParams>()\n\nexport const createRecoveryKeyFx = verificationDomain\n    .effect<void, IRecoveryKey, Error>()\n\nexport const saveInputToKeyMethod = verificationDomain\n    .event<SavedInputToKeyMethod>()\n\nexport const setSecretStorageKeyResolveAndReject = verificationDomain\n    .event<SecretStorageKeyResolveAndReject>()\n\nexport const startRecoveryKeyOrPassphraseVerification = verificationDomain\n    .event<void>()\n\ntype CheckKeyInfo = {\n    keyInfo: ISecretStorageKeyInfo\n    inputToKey: (params: InputToKeyParams) => Promise<Uint8Array>\n}\n\nexport const $checkKeyInfo = verificationDomain\n    .store<CheckKeyInfo | null>(null)\n\nexport const setCheckKeyInfo = verificationDomain\n    .event<CheckKeyInfo>()\n\nexport const onCheckSecretStorageKey = verificationDomain.event<string>()\n\nexport const checkSecretStorageKeyFx = verificationDomain\n    .effect<CheckKeyInfo & { input: string }, boolean, Error>()\n\n// passpharasse verification \n\nexport const checkPassphrase = verificationDomain\n    .event<CheckPassphrase>()\n\nexport const $hasPassphrase = verificationDomain.store<boolean>(false)\nexport const onHasPassphrase = verificationDomain.event<boolean>()\n\n// others\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkThisDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\nexport const checkCanVerifyFx = verificationDomain\n    .effect<CheckCanVerifyFxParams, boolean, Error>()\n\nexport const onUsersProfileUpdate = verificationDomain\n    .event<UserId[]>()\n","import {\n    decodeRecoveryKey,\n    deriveKey,\n    DeviceTrustLevel,\n    encodeBase64,\n    encodeUnpaddedBase64,\n    ICryptoCallbacks,\n    ISecretStorageKeyInfo\n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\nimport {\n    InputToKeyParams,\n    onHasPassphrase,\n    setCheckKeyInfo,\n    setSecretStorageKeyResolveAndReject,\n} from \"@/verification\"\n\nlet secretStorageBeingAccessed = false\nlet secretStorageKeys: Record<string, Uint8Array> = {}\nlet secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    secretStorageKeys[keyId] = key\n    secretStorageKeyInfo[keyId] = keyInfo\n}\n\nexport async function promptForBackupPassphrase(): Promise<Uint8Array> {\n    const key = new Uint8Array()\n\n    console.log(\"promptForBackupPassphrase\")\n    // const success = await finished;\n    // if (!success) throw new Error(\"Key backup prompt cancelled\");\n\n    return key\n}\n\nexport async function accessSecretStorage(\n    func = async () => { return },\n    forceReset = false\n): Promise<any> {\n    const cl = client()\n    secretStorageBeingAccessed = true\n    try {\n\n        // await cli.bootstrapCrossSigning({\n        //     authUploadDeviceSigningKeys: async (makeRequest) => {\n        //         const { finished } = Modal.createDialog(InteractiveAuthDialog, {\n        //             title: _t(\"Setting up keys\"),\n        //             matrixClient: cli,\n        //             makeRequest,\n        //         })\n        //         const [confirmed] = await finished\n        //         if (!confirmed) {\n        //             throw new Error(\"Cross-signing key upload auth canceled\")\n        //         }\n        //     },\n        // })\n        await cl.bootstrapSecretStorage({\n            getKeyBackupPassphrase: promptForBackupPassphrase,\n        })\n\n        // const keyId = Object.keys(secretStorageKeys)[0]\n        // if (keyId && SettingsStore.getValue(\"feature_dehydration\")) {\n        //     let dehydrationKeyInfo = {}\n        //     if (secretStorageKeyInfo[keyId] && secretStorageKeyInfo[keyId].passphrase) {\n        //         dehydrationKeyInfo = { passphrase: secretStorageKeyInfo[keyId].passphrase }\n        //     }\n        //     console.log(\"Setting dehydration key\")\n        //     await cl.setDehydrationKey(secretStorageKeys[keyId], dehydrationKeyInfo, \"Backup device\")\n        // } else if (!keyId) {\n        //     console.warn(\"Not setting dehydration key: no SSSS key found\")\n        // } else {\n        //     console.log(\"Not setting dehydration key: feature disabled\")\n        // }\n\n        // `return await` needed here to ensure `finally` block runs after the\n        // inner operation completes.\n        return await func()\n    } catch (e) {\n        // SecurityCustomisations.catchAccessSecretStorageError?.(e)\n        console.error(e)\n        // Re-throw so that higher level logic can abort as needed\n        throw e\n    } finally {\n        // Clear secret storage key cache now that work is complete\n        secretStorageBeingAccessed = false\n        if (!isCachingAllowed()) {\n            secretStorageKeys = {}\n            secretStorageKeyInfo = {}\n        }\n    }\n}\n\n\nfunction makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (params: InputToKeyParams) => Promise<Uint8Array> {\n    return async (params) => {\n        console.log(params)\n        if (params.passphrase) {\n            return deriveKey(\n                params.passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else if (params.recoveryKey) {\n            return decodeRecoveryKey(params.recoveryKey)\n        }\n        throw new Error(\"Invalid recoveryKey or passphrase\")\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cl = client()\n    let keyId = await cl.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if (!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    } else {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        if (keyInfoEntries[0]) {\n            keyId = keyInfoEntries[0][0]\n            keyInfo = keyInfoEntries[0][1]\n        }\n    }\n\n    // Check the in-memory cache\n    if (secretStorageKeys[keyId] && isCachingAllowed()) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n    const promise = new Promise<InputToKeyParams>((resolve, reject) => {\n        setSecretStorageKeyResolveAndReject({\n            reject,\n            resolve\n        })\n    })\n\n    onHasPassphrase(Boolean(keyInfo.passphrase))\n    setCheckKeyInfo({ keyInfo, inputToKey: inputToKey })\n\n    const input = await promise\n\n    const key = await inputToKey(input)\n\n    if (dehydrationCache.key) {\n        if (\n            await client().checkSecretStorageKey(dehydrationCache.key, keyInfo)\n        ) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n    cacheSecretStorageKey(keyId, keyInfo, key)\n\n    return [keyId, key]\n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\" })\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if (key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        let data\n        try {\n            data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n        } catch (e) {\n            console.log(\"idbLoad for pickleKey failed\", e)\n        }\n        if (!data) {\n            return null\n        }\n        if (!data.encrypted || !data.iv || !data.cryptoKey) {\n            console.log(\"Badly formatted pickle key\")\n            return null\n        }\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        try {\n            const key = await crypto.subtle.decrypt(\n                { name: \"AES-GCM\", iv: data.iv, additionalData },\n                data.cryptoKey,\n                data.encrypted,\n            )\n            return encodeUnpaddedBase64(key)\n        } catch (e) {\n            console.log(\"Error decrypting pickle key\")\n            return null\n        }\n    }\n\nexport const CreatePickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        const crypto = window.crypto\n        const randomArray = new Uint8Array(32)\n        crypto.getRandomValues(randomArray)\n        const cryptoKey = await crypto.subtle.generateKey(\n            { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n        )\n        const iv = new Uint8Array(32)\n        crypto.getRandomValues(iv)\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        const encrypted = await crypto.subtle.encrypt(\n            { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n        )\n\n        try {\n            await IdbSave(\n                \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n            )\n        } catch (e) {\n            return null\n        }\n        return encodeUnpaddedBase64(randomArray)\n    }\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\nexport const InvalidBackupInfo = createCustomError(\"InvalidBackupInfo\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n\nexport const $isCryptoEnabled = cryptoDomain.store<boolean | null>(null)\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n    UserTrustLevel,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport {\n    checkBackupKeyFx,\n    initCryptoFx,\n    onCrossSigningKeyChange,\n} from \"@/crypto\"\nimport {\n    onVerificationRequest,\n    MyVerificationRequest,\n    onUpdateDeviceList,\n    onUsersProfileUpdate,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { DeviceInfo } from \"matrix-js-sdk/lib/crypto/deviceinfo\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            const cl = client()\n            const deviceId = cl.getDeviceId()\n            const userId = cl.getUserId()\n            const isVerified = cl\n                .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n            if (isVerified || request.isSelfVerification) {\n                request.id = Date.now()\n                onVerificationRequest(request)\n            }\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n            onUsersProfileUpdate(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", (userIds: string[]) => {\n        onUpdateDeviceList(userIds)\n        onUsersProfileUpdate(userIds)\n    }],\n    [\"deviceVerificationChanged\", (\n        userId: string,\n        deviceId: string,\n        deviceInfo: DeviceInfo\n    ) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }],\n    [\"userTrustStatusChanged\", (userId: string, newStatus: UserTrustLevel) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n        console.log(\"userTrustStatusChanged\", client().getCrossSigningId())\n    }]\n])\n\nloginByPasswordFx.use(async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        {\n            method: \"POST\",\n            body: JSON.stringify({ type: LOGIN_BY_TOKEN, token: params.token })\n        }\n    )\n    const {\n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return {\n        userId: user_id,\n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout()\n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx,\n    getUserDevicesFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoom,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    \n    }),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoomMessage,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: toLiveTimeline,\n        fn: ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members, true)\n        await cl.downloadKeysForUsers(members, {})\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n\ngetUserDevicesFx.use(async (userId) => {\n    const cl = client()\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const setEnableCrypto = cryptoDomain.event<boolean>()\n","import { client } from \"@/matrix-client\"\nimport { forward } from \"effector\"\nimport { checkThisDeviceVerificationFx } from \"@/verification\"\nimport { \n    crossSigningChangeFx, \n    setEnableCrypto\n} from \"./private\"\nimport { \n    $isCryptoEnabled,\n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    onCrossSigningKeyChange, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n\n$isCryptoEnabled\n    .on(setEnableCrypto, (_, isEnabled) => isEnabled)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncheckBackupKeyFx.use(() => {\n    return client().getKeyBackupEnabled()\n})\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) {\n        setEnableCrypto(false)\n        return\n    }\n\n    await cl.initCrypto()\n    setEnableCrypto(true)\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n    checkThisDeviceVerificationFx()\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n    checkThisDeviceVerificationFx()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    CheckPassphraseFxParams,\n    CheckRecoveryKeyFxParams,\n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    SavedInputToKeyMethod, \n    SecretStorageKeyResolveAndReject, \n    StartVerificationDeviceParams \n} from \"./types\"\n\n// Emodji SAS Verification\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n// Recovery key\nexport const checkRecoveryKeyFx = verificationDomain\n    .effect<CheckRecoveryKeyFxParams, void, Error>()\n\nexport const $savedInputToKeyMethod = verificationDomain\n    .store<SavedInputToKeyMethod | null>(null)\n\nexport const $secretStorageKeyResolveAndReject = verificationDomain\n    .store<SecretStorageKeyResolveAndReject|null>(null)\n\nexport const restoreKeyBackupFx = verificationDomain\n    .effect<void, void, Error>()\n\n// passpharasse verification \nexport const checkPassphraseFx = verificationDomain\n    .effect<CheckPassphraseFxParams, void, Error>()\n\n// others\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n","import { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport {\n    onCancelVerificationEvent, \n    startSASFx, \n    updateVerificationPhase,\n    cancelVerificationEventFx, \n} from \"./private\"\nimport {\n    onUsersProfileUpdate, \n    setCurrentVerificationEvent \n} from \"./public\"\nimport { \n    MyVerificationRequest,\n    OnVerificationRequestFxParams, \n    Phase\n} from \"./types\"\n\n\nexport const onVerificationRequestFxReducer = async (\n    {\n        request, \n        currentRequest\n    }: OnVerificationRequestFxParams): Promise<MyVerificationRequest> => {\n    const onChange = () => {\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n            return\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            onUsersProfileUpdate([request.otherUserId])\n            return\n        }\n\n        if (request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n            return\n        }\n\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n            return\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const excludePhaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested\n    ]\n    if (!currentRequest && !excludePhaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n        && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n\n    return request\n}\n","import { forward, sample, guard, attach } from \"effector\"\n\nimport { client } from \"@/matrix-client\"\nimport { createDirectRoomFx } from \"@/room\"\nimport { MappedUser } from \"@/types\"\nimport { destroyClientFx } from \"@/app\"\nimport {\n    updateVerificationPhase,\n    onCancelVerificationEvent,\n    confirmSASVerificationFx,\n    onVerificationRequestFx,\n    startSASFx,\n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n    checkRecoveryKeyFx,\n    $savedInputToKeyMethod,\n    $secretStorageKeyResolveAndReject,\n    restoreKeyBackupFx,\n    cancelVerificationEventFx,\n    checkPassphraseFx,\n} from \"./private\"\nimport {\n    onHasPassphrase,\n    $currentVerificationEvent,\n    $deviceIsVerified,\n    $verificationEvents,\n    checkThisDeviceVerificationFx,\n    confirmSASVerification,\n    startThisDeviceVerificationFx,\n    onVerificationRequest,\n    setCurrentVerificationEvent,\n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests,\n    checkCanVerifyFx,\n    createRecoveryKeyFx,\n    checkRecoveryKey,\n    saveInputToKeyMethod,\n    setSecretStorageKeyResolveAndReject,\n    startRecoveryKeyOrPassphraseVerification,\n    checkPassphrase,\n    $hasPassphrase,\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser,\n    checkSecretStorageKeyFx,\n    $checkKeyInfo,\n    setCheckKeyInfo,\n    onCheckSecretStorageKey,\n} from \"./public\"\nimport { MyVerificationRequest } from \"./types\"\nimport { onVerificationRequestFxReducer } from \"./reducers\"\nimport { InvalidBackupInfo } from \"@/errors\"\nimport { accessSecretStorage } from \"../cryptoCallbacks\"\n\n$savedInputToKeyMethod\n    .on(saveInputToKeyMethod, (_, method) => method)\n    .reset(destroyClientFx)\n\n$secretStorageKeyResolveAndReject\n    .on(setSecretStorageKeyResolveAndReject, (_, callbacks) => callbacks)\n    .reset(destroyClientFx)\n\n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n    .reset(destroyClientFx)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n    .reset(destroyClientFx)\n// When copying an object, proto properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n    .reset(destroyClientFx)\n\n$hasPassphrase\n    .on(onHasPassphrase, (_, val) => val)\n    .reset(destroyClientFx)\n\n$checkKeyInfo\n    .on(setCheckKeyInfo, (_, val) => val)\n\nforward({\n    from: checkThisDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkThisDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx\n})\n\nforward({\n    from: [\n        startVerificationUserFx,\n        startVerificationDeviceFx,\n        confirmSASVerification,\n        startSASFx,\n        startThisDeviceVerificationFx\n    ],\n    to: setWaitingAnotherUser\n})\n\nforward({\n    from: [\n        onCancelVerificationEvent,\n        $currentVerificationEvent.updates\n    ],\n    to: resetWaitingAnotherUser\n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData,\n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nforward({\n    from: startRecoveryKeyOrPassphraseVerification,\n    to: restoreKeyBackupFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nsample({\n    clock: checkPassphrase,\n    source: $secretStorageKeyResolveAndReject,\n    filter: (resolveAndReject) => resolveAndReject !== null,\n    fn: (resolveAndReject, { passphrase }) => ({\n        resolveAndReject: resolveAndReject as any,\n        passphrase\n    }),\n    target: checkPassphraseFx\n})\n\nsample({\n    clock: checkRecoveryKey,\n    source: $secretStorageKeyResolveAndReject,\n    filter: (resolveAndReject) => resolveAndReject !== null,\n    fn: (resolveAndReject, { recoveryKey }) => ({\n        resolveAndReject: resolveAndReject as any,\n        recoveryKey\n    }),\n    target: checkRecoveryKeyFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(onVerificationRequestFxReducer)\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    await (currentRequest.verifier as any).sasEvent.confirm()\n})\n\ncheckThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = Date.now()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n\ncheckCanVerifyFx.use(async ({ profileId }) => {\n    const cl = client()\n    const cryptoEnabled = cl.isCryptoEnabled()\n    const homeserverSupportsCrossSigning = await cl\n        .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n\n    const userTrust = cryptoEnabled && cl.checkUserTrust(profileId)\n    const userVerified = cryptoEnabled && userTrust && userTrust\n        .isCrossSigningVerified()\n    const isMe = profileId === cl.getUserId()\n    if (isMe && isVerified) return true\n\n    const canVerify = cryptoEnabled\n        && homeserverSupportsCrossSigning\n        && !userVerified\n        && isVerified\n    return canVerify\n})\n\ncheckRecoveryKeyFx.use(async ({ resolveAndReject, recoveryKey }) => {\n    resolveAndReject.resolve({ recoveryKey })\n})\n\ncheckPassphraseFx.use(async ({ resolveAndReject, passphrase }) => {\n    resolveAndReject.resolve({ passphrase })\n})\n\ncreateRecoveryKeyFx.use(async () => {\n    const cl = client()\n    const key = await cl.createRecoveryKeyFromPassphrase()\n    if (!key) throw new Error(\"createRecovery Error\")\n    return key\n})\n\nrestoreKeyBackupFx.use(async () => {\n    const cl = client()\n    accessSecretStorage(async () => {\n        const backupInfo = await cl.getKeyBackupVersion()\n        await cl.checkOwnCrossSigningTrust()\n\n        if (!backupInfo) throw new InvalidBackupInfo(\"backupInfo is null\")\n        // don't await, because this can take a long times\n        cl.restoreKeyBackupWithSecretStorage(backupInfo)\n    })\n})\n\nguard({\n    source: sample({\n        clock: onCheckSecretStorageKey,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, input) => ({\n            inputToKey: checkKeyInfo?.inputToKey,\n            keyInfo: checkKeyInfo?.keyInfo,\n            input\n        }),\n    }),\n    filter: (params): params is any => Boolean(\n        params.keyInfo && params.inputToKey\n    ),\n    target: checkSecretStorageKeyFx,\n})\n\n\ncheckSecretStorageKeyFx.use(async ({ input, keyInfo, inputToKey }) => {\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: input })\n    return client().checkSecretStorageKey(key, keyInfo)\n})\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nwindow.createRecoveryKeyFx = createRecoveryKeyFx\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","indexedDB","verificationDomain","$isWaitingAnotherUser","createApi","setWaitingAnotherUser","resetWaitingAnotherUser","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","startVerificationDevice","startThisDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","checkRecoveryKey","createRecoveryKeyFx","saveInputToKeyMethod","setSecretStorageKeyResolveAndReject","startRecoveryKeyOrPassphraseVerification","$checkKeyInfo","setCheckKeyInfo","onCheckSecretStorageKey","checkSecretStorageKeyFx","checkPassphrase","$hasPassphrase","onHasPassphrase","$deviceIsVerified","onUpdateDeviceList","checkThisDeviceVerificationFx","checkCanVerifyFx","onUsersProfileUpdate","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","secretStorageBeingAccessed","secretStorageKeys","secretStorageKeyInfo","dehydrationCache","isCachingAllowed","cacheSecretStorageKey","keyId","keyInfo","promptForBackupPassphrase","Uint8Array","console","log","accessSecretStorage","func","cl","bootstrapSecretStorage","getKeyBackupPassphrase","error","makeInputToKey","params","passphrase","deriveKey","salt","iterations","recoveryKey","decodeRecoveryKey","keyInfos","keys","getDefaultSecretStorageKeyId","keyInfoEntries","Object","entries","length","inputToKey","promise","input","checkSecretStorageKey","getDehydrationKey","userId","deviceId","requestId","name","deviceTrust","getUserId","isVerified","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","crypto","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","i","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","InvalidBackupInfo","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","isReadUpTo","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","$isCryptoEnabled","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","args","getDeviceId","checkDeviceTrust","isSelfVerification","id","Date","now","warn","userIds","initialFetch","deviceInfo","newStatus","getCrossSigningId","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeys","downloadKeysForUsers","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","isMe","getStoredDevicesForUser","device","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","crossSigningChangeFx","setEnableCrypto","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","cancelVerificationEventFx","checkRecoveryKeyFx","$savedInputToKeyMethod","$secretStorageKeyResolveAndReject","restoreKeyBackupFx","checkPassphraseFx","updateDeviceVerification","onVerificationRequestFxReducer","currentRequest","onChange","cancelled","off","VerificationRequestEvent","Change","cancellationCode","phase","Done","otherUserId","Ready","Started","verifier","sasEvent","excludePhaseArray","Cancelled","Requested","requests","req","currentReq","canceledReq","val","resolveAndReject","accept","beginKeyVerification","once","verify","cancel","confirm","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","profileId","cryptoEnabled","homeserverSupportsCrossSigning","userTrust","userVerified","canVerify","createRecoveryKeyFromPassphrase","getKeyBackupVersion","backupInfo","checkOwnCrossSigningTrust","restoreKeyBackupWithSecretStorage","checkKeyInfo"],"mappings":"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"}