{"version":3,"file":"index.js","sources":["../src/root.ts","../src/types/content.ts","../src/types/index.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/idbHelper.ts","../src/verification/public.ts","../src/create-verification-method/domain.ts","../src/create-verification-method/public.ts","../src/interactive-auth/domain.ts","../src/interactive-auth/public.ts","../src/cryptoCallbacks.ts","../src/cross-signing/domain.ts","../src/cross-signing/public.ts","../src/key-backup/domain.ts","../src/key-backup/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/private.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/MegolmExportEncryption.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/reducers.ts","../src/verification/init.ts","../src/cross-signing/private.ts","../src/cross-signing/init.ts","../src/create-verification-method/init.ts","../src/interactive-auth/private.ts","../src/interactive-auth/init.ts","../src/key-backup/private.ts","../src/key-backup/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n\nexport enum SecureBackupSetupMethod {\n    Key = \"key\",\n    Passphrase = \"passphrase\",\n}\n\nexport enum RecoveryKeyOrPassphraseEnum {\n    RecoveryKey = \"RecoveryKey\",\n    Passphrase = \"Passphrase\"\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n\nexport const $currentDeviceId = appDomain.store<string | null>(null)\n\nexport const onUpdateKeyBackupStatus = appDomain.event<void>()","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n\nexport const getUserDevicesInfoFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore.stopPeeking()\n        // TODO Не чистить сторы, если userId нового юзера совпадает со старым юзером\n        clientStore.clearStores()\n        clientStore.crypto.stop()\n        clientStore.crypto.cryptoStore.deleteAllData()\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { \n    VerificationRequest, \n    IVerificationChannel, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: number\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n\nexport type InputToKeyParams = {\n  passphrase?: string\n  recoveryKey?: string\n}\n\nexport type CheckKeyInfo = {\n  keyInfo: ISecretStorageKeyInfo\n}\n\nexport type ValidatePassphraseFxParams = CheckKeyInfo & { passphrase: string }\nexport type ValidateRecoveryKeyFxParams = CheckKeyInfo & { input: string }","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\nimport { RenameDeviceParams, SessionInfo } from \"./types\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\nexport const $mySessionsInfo = d.store<SessionInfo[] | null>(null)\nexport const getMySessionsFx = d.effect<void, SessionInfo[], Error>()\nexport const clearMySessionsInfo = d.event<void>()\n\nexport const logoutSessionsById = d.event<SessionInfo[\"device_id\"][]>()\n\nexport const renameDeviceFx = d.effect<RenameDeviceParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const verificationDomain = root.domain(\"verificationDomain\")\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { createApi } from \"effector\"\nimport { verificationDomain } from \"./domain\"\nimport {\n    MyVerificationRequest,\n    StartVerificationDeviceParams,\n    CheckKeyInfo,\n    InputToKeyParams,\n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\n// Emodji SAS Verification\n\nexport const $isWaitingAnotherUser = verificationDomain\n    .store<boolean>(false)\n\nexport const {\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser\n} = createApi(\n    $isWaitingAnotherUser,\n    {\n        setWaitingAnotherUser: () => true,\n        resetWaitingAnotherUser: () => false\n    }\n)\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startThisDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n\n\n// Recovery Key\n\nexport const keyVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\nexport const onNeedRecoveryKeyOrPassphrase = verificationDomain\n    .event<void>()\n\nexport const startRecoveryKeyOrPassphraseVerification = verificationDomain\n    .event<void>()\n\nexport const setCheckKeyInfo = verificationDomain\n    .event<CheckKeyInfo>()\n\nexport const validateRecoveryKey = verificationDomain.event<string>()\n\nexport const onRecoveryKeyOrPassphraseSuccess = verificationDomain.event<void>()\n\nexport const onValidRecoveryKey = verificationDomain.event<void>()\nexport const onInvalidRecoveryKey = verificationDomain.event<Error>()\n\n// passphrasse verification \n\nexport const $hasPassphrase = verificationDomain.store<boolean>(false)\nexport const onHasPassphrase = verificationDomain.event<boolean>()\n\nexport const validatePassphrase = verificationDomain.event<string>()\nexport const onValidPassphrase = verificationDomain.event<void>()\nexport const onInvalidPassphrase = verificationDomain.event<Error>()\n\n// others\nexport const $canVerify = verificationDomain.store<boolean>(false)\n\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkThisDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\nexport const onUsersProfileUpdate = verificationDomain\n    .event<UserId[]>()\n\nexport const onResolveSecretStorageKey = verificationDomain\n    .event<InputToKeyParams>()\n\nexport const onRejectSecretStorageKey = verificationDomain\n    .event<void>()\n\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"createVerificationMethod\")\n","import { IRecoveryKey } from \"matrix-js-sdk\"\n\nimport { SecureBackupSetupMethod } from \"@/types\"\n\nimport { d } from \"./domain\"\n\nexport const createRecoveryKeyAndPassPhraseFx = d\n    .effect<string | undefined, IRecoveryKey, Error>()\n\nexport const getSecureBackupSetupMethodsFx = d\n    .effect<void, SecureBackupSetupMethod[], Error>()\n\nexport const onNeedCreateRecoveryMethod = d.event<void>()\n\nexport const lossAllRecoveryKeyMethod = d.event<void>()\n\nexport const cancelCreateNewMethod = d.event<void>()\nexport const onNewRecoveryMethodCreated = d.event<void>()\n\nexport const bootstrapSecretStorageFx = d.effect<IRecoveryKey, void, Error>()\n\nexport const resetAllRecoveryKeyMethodsFx = d.effect<void,void, Error>()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"interactiveAuth\")\n","import { IAuthData } from \"matrix-js-sdk\"\n\nimport { d } from \"./domain\"\nimport { OnInteractiveAuthStateUpdateResult } from \"./types\"\n\nexport const createInteractiveAuthFx = d\n    .effect<(auth: IAuthData) => Promise<IAuthData>, void, Error>()\n\nexport const submitAuthDict = d.event<string>()\n\nexport const onNeedUserPassword = d.event<void>()\nexport const onUserPasswordError = d.event<string>()\nexport const onUserPasswordSuccess = d.event<void>()\n\nexport const onInteractiveAuthBusyChange = d.event<boolean>()\nexport const onInteractiveAuthStateUpdate = d\n    .event<OnInteractiveAuthStateUpdateResult>()\n\nexport const cancelInteractiveAuth = d.event<void>()\n","import {\n    decodeRecoveryKey,\n    deriveKey,\n    DeviceTrustLevel,\n    encodeBase64,\n    encodeUnpaddedBase64,\n    IAuthData,\n    ICryptoCallbacks,\n    ISecretStorageKeyInfo,\n    MatrixClient\n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\nimport {\n    InputToKeyParams,\n    onHasPassphrase,\n    setCheckKeyInfo,\n    onNeedRecoveryKeyOrPassphrase,\n    onRecoveryKeyOrPassphraseSuccess,\n    onRejectSecretStorageKey,\n} from \"@/verification\"\nimport { onResolveSecretStorageKey } from \"./verification\"\nimport { \n    cancelCreateNewMethod, \n    onNeedCreateRecoveryMethod,\n    onNewRecoveryMethodCreated\n} from \"@/create-verification-method\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\n\nlet secretStorageBeingAccessed = false\nlet secretStorageKeys: Record<string, Uint8Array> = {}\nlet secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\ntype CreatePromiseResult<T> = {\n    promise: Promise<T>\n    resolve: (params: T) => void\n    reject: (params: any) => void\n}\n\nfunction createPromise<T>(): CreatePromiseResult<T> {\n    let resolve = (params: T) => { return }\n    let reject = (params: any) => { return }\n    const promise = new Promise<T>((res, rej) => {\n        resolve = res\n        reject = rej\n    })\n    return {promise, resolve, reject}\n}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction setCachingAllowed(newVal: boolean): void {\n    secretStorageBeingAccessed = newVal\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    secretStorageKeys[keyId] = key\n    secretStorageKeyInfo[keyId] = keyInfo\n}\n\nexport async function promptForBackupPassphrase(): Promise<Uint8Array> {\n    const key = new Uint8Array()\n\n    console.log(\"promptForBackupPassphrase\")\n    // const success = await finished;\n    // if (!success) throw new Error(\"Key backup prompt cancelled\");\n\n    return key\n}\n\nexport async function accessSecretStorage(\n    func = async () => { return },\n    forceReset = false\n): Promise<any> {\n    const cl = client()\n    setCachingAllowed(true)\n    try {\n        if (!(await cl.hasSecretStorageKey()) || forceReset) {\n            const {promise, reject, resolve} = createPromise<void>()\n            onNeedCreateRecoveryMethod()\n            const createdSub = onNewRecoveryMethodCreated.watch(() => {\n                resolve()\n            })\n            const cancelSub = cancelCreateNewMethod.watch(() => {\n                reject(\"Cancel create new Method\")\n            })\n            promise.finally(() => {\n                cancelSub()\n                createdSub()\n            })\n            await promise\n        } else {\n            await cl.bootstrapCrossSigning({\n                authUploadDeviceSigningKeys: async (makeRequest) => {\n                    const requestCallback = (\n                        auth: IAuthData, \n                    ): Promise<IAuthData> => {\n                        return makeRequest(auth)\n                    }\n                    await createInteractiveAuthFx(requestCallback)\n                },\n            })\n            await cl.bootstrapSecretStorage({\n                getKeyBackupPassphrase: promptForBackupPassphrase,\n            })\n    \n            const keyId = Object.keys(secretStorageKeys)[0]\n            if (keyId) {\n                let dehydrationKeyInfo = {}\n                if (\n                    secretStorageKeyInfo[keyId]\n                    && secretStorageKeyInfo[keyId].passphrase\n                ) {\n                    dehydrationKeyInfo = {\n                        passphrase: secretStorageKeyInfo[keyId].passphrase\n                    }\n                }\n                console.log(\"Setting dehydration key\")\n                await cl\n                    .setDehydrationKey(\n                        secretStorageKeys[keyId],\n                        dehydrationKeyInfo,\n                        \"Backup device\"\n                    )\n            } else if (!keyId) {\n                console.warn(\"Not setting dehydration key: no SSSS key found\")\n            } else {\n                console.log(\"Not setting dehydration key: feature disabled\")\n            }\n    \n        }\n        // `return await` needed here to ensure `finally` block runs after the\n        // inner operation completes.\n        return await func()\n    } catch (e) {\n        console.error(e)\n        // Re-throw so that higher level logic can abort as needed\n        throw e\n    } finally {\n        // Clear secret storage key cache now that work is complete\n        setCachingAllowed(false)\n        if (!isCachingAllowed()) {\n            secretStorageKeys = {}\n            secretStorageKeyInfo = {}\n        }\n    }\n}\n\n\nexport function makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (params: InputToKeyParams) => Promise<Uint8Array> {\n    return async (params) => {\n        if (params.passphrase) {\n            return deriveKey(\n                params.passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else if (params.recoveryKey) {\n            return decodeRecoveryKey(params.recoveryKey)\n        }\n        throw new Error(\"Invalid recoveryKey or passphrase\")\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cl = client()\n    let keyId = await cl.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if (!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    } \n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        [keyId, keyInfo] = keyInfoEntries[0]\n    }\n\n    // Check the in-memory cache\n    if (secretStorageKeys[keyId] && isCachingAllowed()) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (await cl.checkSecretStorageKey(dehydrationCache.key, keyInfo)) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n    const {promise, resolve, reject} = createPromise<InputToKeyParams>()\n    const resolveWatcher = onResolveSecretStorageKey.watch(resolve)\n    const rejectWatcher = onRejectSecretStorageKey.watch(reject)\n\n    promise.finally(() => {\n        resolveWatcher.unsubscribe()\n        rejectWatcher.unsubscribe()\n    })\n    \n    onNeedRecoveryKeyOrPassphrase()\n    onHasPassphrase(Boolean(keyInfo.passphrase))\n    setCheckKeyInfo({ keyInfo })\n\n    const input = await promise\n\n    const key = await inputToKey(input)\n\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    onRecoveryKeyOrPassphraseSuccess()\n    return [keyId, key]\n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\" })\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if (key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        let data\n        try {\n            data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n        } catch (e) {\n            console.log(\"idbLoad for pickleKey failed\", e)\n        }\n        if (!data) {\n            return null\n        }\n        if (!data.encrypted || !data.iv || !data.cryptoKey) {\n            console.log(\"Badly formatted pickle key\")\n            return null\n        }\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        try {\n            const key = await crypto.subtle.decrypt(\n                { name: \"AES-GCM\", iv: data.iv, additionalData },\n                data.cryptoKey,\n                data.encrypted,\n            )\n            return encodeUnpaddedBase64(key)\n        } catch (e) {\n            console.log(\"Error decrypting pickle key\")\n            return null\n        }\n    }\n\nexport const CreatePickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        const crypto = window.crypto\n        const randomArray = new Uint8Array(32)\n        crypto.getRandomValues(randomArray)\n        const cryptoKey = await crypto.subtle.generateKey(\n            { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n        )\n        const iv = new Uint8Array(32)\n        crypto.getRandomValues(iv)\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        const encrypted = await crypto.subtle.encrypt(\n            { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n        )\n\n        try {\n            await IdbSave(\n                \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n            )\n        } catch (e) {\n            return null\n        }\n        return encodeUnpaddedBase64(randomArray)\n    }\n\nexport async function tryToUnlockSecretStorageWithDehydrationKey(\n    client: MatrixClient,\n): Promise<void> {\n    const key = dehydrationCache.key\n    let restoringBackup = false\n    if (key && (await client.isSecretStorageReady())) {\n        setCachingAllowed(true)\n        try {\n            await client.checkOwnCrossSigningTrust()\n    \n            // we also need to set a new dehydrated device to replace the\n            // device we rehydrated\n            let dehydrationKeyInfo = {}\n            if (\n                dehydrationCache.keyInfo \n                && dehydrationCache.keyInfo.passphrase\n            ) {\n                dehydrationKeyInfo = { \n                    passphrase: dehydrationCache.keyInfo.passphrase }\n            }\n            await client\n                .setDehydrationKey(key, dehydrationKeyInfo, \"Backup device\")\n    \n            // and restore from backup\n            const backupInfo = await client.getKeyBackupVersion()\n            if (backupInfo) {\n                restoringBackup = true\n                // don't await, because this can take a long time\n                client.restoreKeyBackupWithSecretStorage(backupInfo)\n                    .finally(() => {\n                        secretStorageBeingAccessed = false\n                        if (!isCachingAllowed()) {\n                            secretStorageKeys = {}\n                            secretStorageKeyInfo = {}\n                        }\n                    })\n            }\n        } finally {\n            dehydrationCache = {}\n            // the secret storage cache is needed for restoring from backup, so\n            // don't clear it yet if we're restoring from backup\n            if (!restoringBackup) {\n                setCachingAllowed(false)\n                if (!isCachingAllowed()) {\n                    secretStorageKeys = {}\n                    secretStorageKeyInfo = {}\n                }\n            }\n        }\n    }\n}\n    \n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"resetCrossSigning\")\n","import { d } from \"./domain\"\nimport { ConfirmResetCrossSigningFxResult } from \"./types\"\n\nexport const confirmResetCrossSigningFx = d\n    .effect<void, ConfirmResetCrossSigningFxResult, Error>()\n\nexport const $crossSigningId = d.store<string|null>(null)\n\nexport const onCrossSigningKeyChange = d.event<void>()\nexport const crossSigningChangeFx = d.effect<void, void, Error>()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"key-backup\")\n","import { MatrixError } from \"matrix-js-sdk\"\nimport { IKeyBackupCheck } from \"matrix-js-sdk/lib/crypto/backup\"\nimport { IKeyBackupRestoreResult } from \"matrix-js-sdk/lib/crypto/keybackup\"\n\nimport { d } from \"./domain\"\nimport { DetailedKeyBackupInfo, OnBackupKeyLoadProgress } from \"./types\"\n\nexport const newKeyBackupFx = d.effect<void, void, Error>()\n\nexport const $keyBackupInfo = d.store<IKeyBackupCheck | null>(null)\nexport const getKeyBackupInfoFx = d\n    .effect<void, IKeyBackupCheck, Error>()\n\nexport const $detailedKeyBackupInfo = d\n    .store<DetailedKeyBackupInfo | null>(null)\n\nexport const onBackupKeyLoadProgress = d.event<OnBackupKeyLoadProgress>()\n\nexport const $isKeyBackupEnabled = d.store<boolean | null>(null)\nexport const checkBackupEnabledKeyFx = d.effect<void, boolean | null, Error>() \n\nexport const deleteKeyBackup = d.event<void>()\n\nexport const restoreKeyBackupFx = d\n    .effect<void, IKeyBackupRestoreResult | void, MatrixError>()\n\nexport const resetCryptoStorageFx = d.effect<void, void, Error>()\n\nexport const $sessionsRemaining = d.store<number | null>(null)\nexport const onSessionRemaining = d.event<number>()\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\nexport const InvalidBackupInfo = createCustomError(\"InvalidBackupInfo\")\nexport const VerificationError = createCustomError(\"VerificationError\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n\nexport const E2EE_WK_KEY = \"io.element.e2ee\"\nexport const E2EE_WK_KEY_DEPRECATED = \"im.vector.riot.e2ee\"","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\nimport { \n    ExportE2ERoomsKeysFxParams, \n    importE2ERoomsKeysFxParams\n} from \"./types\"\n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const $isCryptoEnabled = cryptoDomain.store<boolean | null>(null)\n\nexport const $identityKey = cryptoDomain.store<string|null>(null)\n\nexport const exportE2ERoomsKeysFx = cryptoDomain\n    .effect<ExportE2ERoomsKeysFxParams, ArrayBuffer, Error>()\n\nexport const importE2ERoomsKeysFx = cryptoDomain\n    .effect<importE2ERoomsKeysFxParams, void, Error>()\n\nexport const $deviceEd25519Key = cryptoDomain.store<string|null>(null)\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n    UserTrustLevel,\n} from \"matrix-js-sdk\"\nimport { DeviceInfo } from \"matrix-js-sdk/lib/crypto/deviceinfo\"\n\nimport { IdbDelete } from \"@/idbHelper\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport {\n    initCryptoFx,\n} from \"@/crypto\"\nimport {\n    onVerificationRequest,\n    MyVerificationRequest,\n    onUpdateDeviceList,\n    onUsersProfileUpdate,\n} from \"@/verification\"\nimport { onCrossSigningKeyChange } from \"@/cross-signing\"\nimport { UserNotFound } from \"@/errors\"\nimport { onSessionRemaining } from \"@/key-backup\"\n\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n    $currentDeviceId,\n    onUpdateKeyBackupStatus,\n} from \"./public\"\n\n$currentDeviceId\n    .on(createClientFx.done, \n        (_, {params}) => params.createClientParams.options.deviceId)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Session.logged_out\", (args) => {\n        console.log(\"Session.logged_out\", args)\n    }],\n    // @TODO Реализовать. Этот эвент приходит когда логаут происходит из другой сессии.\n    // cli.on(HttpApiEvent.SessionLoggedOut, function (errObj) {\n    //     if (Lifecycle.isLoggingOut()) return;\n\n    //     // A modal might have been open when we were logged out by the server\n    //     Modal.closeCurrentModal('Session.logged_out');\n\n    //     if (errObj.httpStatus === 401 && errObj.data && errObj.data['soft_logout']) {\n    //         logger.warn(\"Soft logout issued by server - avoiding data deletion\");\n    //         Lifecycle.softLogout();\n    //         return;\n    //     }\n\n    //     Modal.createDialog(ErrorDialog, {\n    //         title: _t('Signed Out'),\n    //         description: _t('For security, this session has been signed out. Please sign in again.'),\n    //     });\n\n    //     dis.dispatch({\n    //         action: 'logout',\n    //     });\n    // });\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            const cl = client()\n            const deviceId = cl.getDeviceId()\n            const userId = cl.getUserId()\n            const isVerified = cl\n                .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n            if (isVerified || request.isSelfVerification) {\n                request.id = Date.now()\n                onVerificationRequest(request)\n            }\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\", () => {\n            onUpdateKeyBackupStatus()\n        }\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n            onUsersProfileUpdate(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", (userIds: string[]) => {\n        onUpdateDeviceList(userIds)\n        onUsersProfileUpdate(userIds)\n    }],\n    [\"deviceVerificationChanged\", (\n        userId: string,\n        deviceId: string,\n        deviceInfo: DeviceInfo\n    ) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }],\n    [\"userTrustStatusChanged\", (userId: string, newStatus: UserTrustLevel) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }],\n    [\"crypto.keyBackupSessionsRemaining\", onSessionRemaining]\n])\n\nloginByPasswordFx.use(async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        {\n            method: \"POST\",\n            body: JSON.stringify({ type: LOGIN_BY_TOKEN, token: params.token })\n        }\n    )\n    const {\n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return {\n        userId: user_id,\n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.downloadKeys([cl.getUserId() ?? createClientParams.options.userId])\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await IdbDelete(\"pickleKey\", [cl.getUserId(), cl.getDeviceId()])\n    await IdbDelete(\"account\", \"mx_access_token\")\n    cl.stopClient()\n    await cl.logout()\n    destroyClient()\n})\n\ngetProfileInfoFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { d } from \"./domain\"\nimport { SessionInfo } from \"./types\"\n\nexport const logoutSessionsByIdFx = d\n    .effect<SessionInfo[\"device_id\"][], void, Error>()\n","import { forward, guard } from \"effector\"\nimport { IAuthData } from \"matrix-js-sdk\"\n\nimport { client } from \"@/matrix-client\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\nimport { onUpdateDeviceList } from \"@/verification\"\n\nimport { logoutSessionsByIdFx } from \"./private\"\nimport { \n    updateDisplayNameFx, \n    updateAvatarUrlFx, \n    getMySessionsFx,\n    $mySessionsInfo,\n    clearMySessionsInfo,\n    logoutSessionsById,\n    renameDeviceFx,\n} from \"./public\"\n\n$mySessionsInfo\n    .on(getMySessionsFx.doneData, (_, sessionsInfo) => sessionsInfo)\n    .reset([getMySessionsFx.fail, clearMySessionsInfo])\n\nforward({\n    from: logoutSessionsById,\n    to: logoutSessionsByIdFx\n})\n\nguard({\n    clock: onUpdateDeviceList,\n    filter: $mySessionsInfo.map((sessions) => Boolean(sessions)),\n    target: getMySessionsFx,\n})\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\ngetMySessionsFx.use(async () => {\n    const cl = client()\n    const {devices} = await cl.getDevices()\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\n    const myDeviceId = cl.getDeviceId()\n    return devices.map((device) => {\n        const deviceInfo = cl.getStoredDevice(cl.getUserId(), device.device_id)\n        let isVerified = false\n        // @TODO В devices может прийти такой девайс, по которому мы не можем получить инфу\n        // и getStoredDevice отдает null\n        if (deviceInfo) {\n            isVerified = crossSigningInfo.checkDeviceTrust(\n                crossSigningInfo,\n                deviceInfo,\n                false,\n                true,\n            ).isCrossSigningVerified()\n        }\n\n        return {\n            ...device,\n            isVerified,\n            isCurrentSession: device.device_id === myDeviceId \n        }\n    })\n})\n\nlogoutSessionsByIdFx.use(async (sessionsId) => {\n    const cl = client()\n    const callback = async (auth: IAuthData) => {\n        await cl.deleteMultipleDevices(sessionsId, auth)\n        return auth\n    }\n    await createInteractiveAuthFx(callback)\n    await callback\n})\n\nrenameDeviceFx.use(async ({deviceId, newDisplayName}) => {\n    await client().setDeviceDetails(deviceId, {\n        display_name: newDisplayName,\n    })\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx,\n    getUserDevicesInfoFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoom,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    \n    }),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoomMessage,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: toLiveTimeline,\n        fn: ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members, true)\n        await cl.downloadKeysForUsers(members, {})\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n\ngetUserDevicesInfoFx.use(async (userId) => {\n    const cl = client()\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","// Taken from here\n// https://github.com/matrix-org/matrix-react-sdk/blob/d835721ae1dd005b7c0ba5b4b2448f5396128e1a/src/utils/MegolmExportEncryption.ts\n\nconst subtleCrypto = window?.crypto.subtle\n\n/**\n * Derive the AES and HMAC-SHA-256 keys for the file\n *\n * @param {Unit8Array} salt  salt for pbkdf\n * @param {Number} iterations number of pbkdf iterations\n * @param {String} password  password\n * @return {Promise<[CryptoKey, CryptoKey]>} promise for [aes key, hmac key]\n */\nasync function deriveKeys(\n    salt: Uint8Array, \n    iterations: number, \n    password: string\n): Promise<[CryptoKey, CryptoKey]> {\n    let key\n    try {\n        key = await subtleCrypto.importKey(\n            \"raw\",\n            new TextEncoder().encode(password),\n            { name: \"PBKDF2\" },\n            false,\n            [\"deriveBits\"],\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.importKey failed: ${  e}`)\n    }\n\n    let keybits\n    try {\n        keybits = await subtleCrypto.deriveBits(\n            {\n                name: \"PBKDF2\",\n                salt: salt,\n                iterations: iterations,\n                hash: \"SHA-512\",\n            },\n            key,\n            512,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.deriveBits failed: ${  e}`)\n    }\n\n    const aesKey = keybits.slice(0, 32)\n    const hmacKey = keybits.slice(32)\n\n    const aesProm = subtleCrypto.importKey(\n        \"raw\",\n        aesKey,\n        { name: \"AES-CTR\" },\n        false,\n        [\"encrypt\", \"decrypt\"],\n    ).catch((e) => {\n        throw new Error(`subtleCrypto.importKey failed for AES key: ${  e}`)\n    })\n\n    const hmacProm = subtleCrypto.importKey(\n        \"raw\",\n        hmacKey,\n        {\n            name: \"HMAC\",\n            hash: { name: \"SHA-256\" },\n        },\n        false,\n        [\"sign\", \"verify\"],\n    ).catch((e) => {\n        throw new Error(`subtleCrypto.importKey failed for HMAC key: ${  e}`)\n    })\n\n    return Promise.all([aesProm, hmacProm])\n}\n\nconst HEADER_LINE = \"-----BEGIN MEGOLM SESSION DATA-----\"\nconst TRAILER_LINE = \"-----END MEGOLM SESSION DATA-----\"\n\n/**\n * Encode a typed array of uint8 as base64.\n * @param {Uint8Array} uint8Array The data to encode.\n * @return {string} The base64.\n */\nfunction encodeBase64(uint8Array: Uint8Array): string {\n    // Misinterpt the Uint8Array as Latin-1.\n    // window.btoa expects a unicode string with codepoints in the range 0-255.\n    // @TODO fix me\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const latin1String = String.fromCharCode.apply(null, uint8Array)\n    // Use the builtin base64 encoder.\n    return window.btoa(latin1String)\n}\n\n/**\n * Decode a base64 string to a typed array of uint8.\n * @param {string} base64 The base64 to decode.\n * @return {Uint8Array} The decoded data.\n */\nfunction decodeBase64(base64: string): Uint8Array {\n    // window.atob returns a unicode string with codepoints in the range 0-255.\n    const latin1String = window.atob(base64)\n    // Encode the string as a Uint8Array\n    const uint8Array = new Uint8Array(latin1String.length)\n    for (let i = 0; i < latin1String.length; i++) {\n        uint8Array[i] = latin1String.charCodeAt(i)\n    }\n    return uint8Array\n}\n\n/**\n * ascii-armour a  megolm key file\n *\n * base64s the content, and adds header and trailer lines\n *\n * @param {Uint8Array} data  raw data\n * @return {ArrayBuffer} formatted file\n */\nfunction packMegolmKeyFile(data: Uint8Array): ArrayBuffer {\n    // we split into lines before base64ing, because encodeBase64 doesn't deal\n    // terribly well with large arrays.\n    const LINE_LENGTH = (72 * 4 / 3)\n    const nLines = Math.ceil(data.length / LINE_LENGTH)\n    const lines = new Array(nLines + 3)\n    lines[0] = HEADER_LINE\n    let o = 0\n    let i\n    for (i = 1; i <= nLines; i++) {\n        lines[i] = encodeBase64(data.subarray(o, o+LINE_LENGTH))\n        o += LINE_LENGTH\n    }\n    lines[i++] = TRAILER_LINE\n    lines[i] = \"\"\n    return (new TextEncoder().encode(lines.join(\"\\n\"))).buffer\n}\n\n/**\n * Encrypt a megolm key file\n *\n * @param {String} data\n * @param {String} password\n * @param {Object=} options\n * @param {Number=} options.kdf_rounds Number of iterations to perform of the\n *    key-derivation function.\n * @return {Promise<ArrayBuffer>} promise for encrypted output\n */\nexport async function encryptMegolmKeyFile(\n    data: string,\n    password: string,\n    options?: { kdf_rounds?: number }, // eslint-disable-line camelcase\n): Promise<ArrayBuffer> {\n    options = options || {}\n    const kdfRounds = options.kdf_rounds || 500000\n\n    const salt = new Uint8Array(16)\n    window.crypto.getRandomValues(salt)\n\n    const iv = new Uint8Array(16)\n    window.crypto.getRandomValues(iv)\n\n    // clear bit 63 of the IV to stop us hitting the 64-bit counter boundary\n    // (which would mean we wouldn't be able to decrypt on Android). The loss\n    // of a single bit of iv is a price we have to pay.\n    iv[8] &= 0x7f\n\n    const [aesKey, hmacKey] = await deriveKeys(salt, kdfRounds, password)\n    const encodedData = new TextEncoder().encode(data)\n\n    let ciphertext\n    try {\n        ciphertext = await subtleCrypto.encrypt(\n            {\n                name: \"AES-CTR\",\n                counter: iv,\n                length: 64,\n            },\n            aesKey,\n            encodedData,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.encrypt failed: ${  e}`)\n    }\n\n    const cipherArray = new Uint8Array(ciphertext)\n    const bodyLength = (1+salt.length+iv.length+4+cipherArray.length+32)\n    const resultBuffer = new Uint8Array(bodyLength)\n    let idx = 0\n    resultBuffer[idx++] = 1 // version\n    resultBuffer.set(salt, idx); idx += salt.length\n    resultBuffer.set(iv, idx); idx += iv.length\n    resultBuffer[idx++] = kdfRounds >> 24\n    resultBuffer[idx++] = (kdfRounds >> 16) & 0xff\n    resultBuffer[idx++] = (kdfRounds >> 8) & 0xff\n    resultBuffer[idx++] = kdfRounds & 0xff\n    resultBuffer.set(cipherArray, idx); idx += cipherArray.length\n\n    const toSign = resultBuffer.subarray(0, idx)\n\n    let hmac\n    try {\n        hmac = await subtleCrypto.sign(\n            { name: \"HMAC\" },\n            hmacKey,\n            toSign,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.sign failed: ${  e}`)\n    }\n\n    const hmacArray = new Uint8Array(hmac)\n    resultBuffer.set(hmacArray, idx)\n    return packMegolmKeyFile(resultBuffer)\n}\n\n/**\n * Unbase64 an ascii-armoured megolm key file\n *\n * Strips the header and trailer lines, and unbase64s the content\n *\n * @param {ArrayBuffer} data  input file\n * @return {Uint8Array} unbase64ed content\n */\nfunction unpackMegolmKeyFile(data: ArrayBuffer): Uint8Array {\n    // parse the file as a great big String. This should be safe, because there\n    // should be no non-ASCII characters, and it means that we can do string\n    // comparisons to find the header and footer, and feed it into window.atob.\n    const fileStr = new TextDecoder().decode(new Uint8Array(data))\n\n    // look for the start line\n    let lineStart = 0\n    // eslint-disable-next-line no-constant-condition\n    while (1) {\n        const lineEnd = fileStr.indexOf(\"\\n\", lineStart)\n        if (lineEnd < 0) {\n            throw new Error(\"Header line not found\")\n        }\n        const line = fileStr.slice(lineStart, lineEnd).trim()\n\n        // start the next line after the newline\n        lineStart = lineEnd+1\n\n        if (line === HEADER_LINE) {\n            break\n        }\n    }\n\n    const dataStart = lineStart\n\n    // look for the end line\n    // eslint-disable-next-line no-constant-condition\n    while (1) {\n        const lineEnd = fileStr.indexOf(\"\\n\", lineStart)\n        const line = fileStr\n            .slice(lineStart, lineEnd < 0 ? undefined : lineEnd).trim()\n        if (line === TRAILER_LINE) {\n            break\n        }\n\n        if (lineEnd < 0) {\n            throw new Error(\"Trailer line not found\")\n        }\n\n        // start the next line after the newline\n        lineStart = lineEnd+1\n    }\n\n    const dataEnd = lineStart\n    return decodeBase64(fileStr.slice(dataStart, dataEnd))\n}\n\n\n/**\n * Decrypt a megolm key file\n *\n * @param {ArrayBuffer} data file to decrypt\n * @param {String} password\n * @return {Promise<String>} promise for decrypted output\n *\n *\n */\nexport async function decryptMegolmKeyFile(\n    data: ArrayBuffer, \n    password: string\n): Promise<string> {\n    const body = unpackMegolmKeyFile(data)\n\n    // check we have a version byte\n    if (body.length < 1) {\n        throw new Error(\"Invalid file: too short\")\n    }\n\n    const version = body[0]\n    if (version !== 1) {\n        throw new Error(\"Unsupported version\")\n    }\n\n    const ciphertextLength = body.length-(1+16+16+4+32)\n    if (ciphertextLength < 0) {\n        throw new Error(\"Invalid file: too short\")\n    }\n\n    const salt = body.subarray(1, 1+16)\n    const iv = body.subarray(17, 17+16)\n    const iterations = \n        body[33] << 24 | body[34] << 16 | body[35] << 8 | body[36]\n    const ciphertext = body.subarray(37, 37+ciphertextLength)\n    const hmac = body.subarray(-32)\n\n    const [aesKey, hmacKey] = await deriveKeys(salt, iterations, password)\n    const toVerify = body.subarray(0, -32)\n\n    let isValid\n    try {\n        isValid = await subtleCrypto.verify(\n            { name: \"HMAC\" },\n            hmacKey,\n            hmac,\n            toVerify,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.verify failed: ${  e}`)\n    }\n    if (!isValid) {\n        throw new Error(\n            \"hmac mismatch Authentication check failed: incorrect password?\"\n        )\n    }\n\n    let plaintext\n    try {\n        plaintext = await subtleCrypto.decrypt(\n            {\n                name: \"AES-CTR\",\n                counter: iv,\n                length: 64,\n            },\n            aesKey,\n            ciphertext,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.decrypt failed: ${  e}`)\n    }\n\n    return new TextDecoder().decode(new Uint8Array(plaintext))\n}\n","import { cryptoDomain } from \"./domain\"\n\nexport const setEnableCrypto = cryptoDomain.event<boolean>()\n\nexport const getIdentityKeyFx = cryptoDomain\n    .effect<void, string | null, Error>()\n\nexport const getDeviceEd25519KeyFx = cryptoDomain.effect<void, string, Error>()","import { client } from \"@/matrix-client\"\nimport { forward } from \"effector\"\n\nimport { \n    decryptMegolmKeyFile, \n    encryptMegolmKeyFile\n} from \"@/MegolmExportEncryption\"\nimport { destroyClientFx } from \"@/app\"\n\nimport { \n    setEnableCrypto,\n    getIdentityKeyFx,\n    getDeviceEd25519KeyFx,\n} from \"./private\"\nimport { \n    $identityKey,\n    $isCryptoEnabled,\n    initCryptoFx,\n    exportE2ERoomsKeysFx, \n    importE2ERoomsKeysFx,\n    $deviceEd25519Key,\n} from \"./public\"\n\n$isCryptoEnabled\n    .on(setEnableCrypto, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx.done)\n\n$identityKey\n    .on(getIdentityKeyFx.doneData, (_, key) => key)\n    .reset(destroyClientFx.done)\n\n$deviceEd25519Key\n    .on(getDeviceEd25519KeyFx.doneData, (_, key) => key)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: initCryptoFx.doneData,\n    to: [getDeviceEd25519KeyFx, getIdentityKeyFx]\n})\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) {\n        setEnableCrypto(false)\n        return\n    }\n\n    await cl.initCrypto()\n    setEnableCrypto(true)\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n})\n\ngetIdentityKeyFx.use(() => {\n    const key = client().getDeviceEd25519Key()\n    if (!key) throw new Error(\"crypto is disabled\")\n    return key\n})\n\nexportE2ERoomsKeysFx.use(async ({passphrase}) => {\n    const cl = client()\n    const keys = await cl.exportRoomKeys()\n\n    return encryptMegolmKeyFile(\n        JSON.stringify(keys), passphrase,\n    )\n})\n\nimportE2ERoomsKeysFx.use(async ({arrayBuffer, passphrase}) => {\n    const keys = await decryptMegolmKeyFile(\n        arrayBuffer, passphrase,\n    )\n    const cl = client()\n    cl.importRoomKeys(JSON.parse(keys))\n})\n\ngetDeviceEd25519KeyFx.use(() => {\n    const cl = client()\n    return cl.getDeviceEd25519Key()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams, \n    CheckKeyInfo,\n    ValidatePassphraseFxParams,\n    ValidateRecoveryKeyFxParams,\n} from \"./types\"\n\n// Emodji SAS Verification\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n// Recovery key\n\nexport const $checkKeyInfo = verificationDomain\n    .store<CheckKeyInfo | null>(null)\n\nexport const validateRecoveryKeyFx = verificationDomain\n    .effect<ValidateRecoveryKeyFxParams, boolean, Error>()\n\n// others\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const validatePassphraseFx = verificationDomain\n    .effect<ValidatePassphraseFxParams, boolean, Error>()\n\nexport const checkCanVerifyFx = verificationDomain\n    .effect<void, boolean, Error>()\n","import { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport {\n    onCancelVerificationEvent, \n    startSASFx, \n    updateVerificationPhase,\n    cancelVerificationEventFx, \n} from \"./private\"\nimport {\n    onUsersProfileUpdate, \n    setCurrentVerificationEvent \n} from \"./public\"\nimport { \n    MyVerificationRequest,\n    OnVerificationRequestFxParams, \n    Phase\n} from \"./types\"\n\n\nexport const onVerificationRequestFxReducer = async (\n    {\n        request, \n        currentRequest\n    }: OnVerificationRequestFxParams): Promise<MyVerificationRequest> => {\n    const onChange = () => {\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n            return\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            onUsersProfileUpdate([request.otherUserId])\n            return\n        }\n\n        if (request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n            return\n        }\n\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n            return\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const excludePhaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested\n    ]\n    if (!currentRequest && !excludePhaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n        && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n\n    return request\n}\n","import { forward, sample, guard, attach } from \"effector\"\nimport { client } from \"@/matrix-client\"\n\nimport { createDirectRoomFx } from \"@/room\"\nimport { MappedUser } from \"@/types\"\nimport { createClientFx, destroyClientFx } from \"@/app\"\nimport { InvalidBackupInfo, VerificationError } from \"@/errors\"\nimport { initCryptoFx } from \"@/crypto\"\nimport { crossSigningChangeFx } from \"@/cross-signing\"\n\nimport {\n    updateVerificationPhase,\n    onCancelVerificationEvent,\n    confirmSASVerificationFx,\n    onVerificationRequestFx,\n    startSASFx,\n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n    cancelVerificationEventFx,\n    validateRecoveryKeyFx,\n    $checkKeyInfo,\n    validatePassphraseFx,\n    checkCanVerifyFx,\n} from \"./private\"\nimport {\n    onHasPassphrase,\n    $currentVerificationEvent,\n    $deviceIsVerified,\n    $verificationEvents,\n    checkThisDeviceVerificationFx,\n    confirmSASVerification,\n    startThisDeviceVerificationFx,\n    onVerificationRequest,\n    setCurrentVerificationEvent,\n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests,\n    startRecoveryKeyOrPassphraseVerification,\n    $hasPassphrase,\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser,\n    setCheckKeyInfo,\n    validateRecoveryKey,\n    onValidRecoveryKey,\n    onInvalidRecoveryKey,\n    onRejectSecretStorageKey,\n    validatePassphrase,\n    onInvalidPassphrase,\n    onValidPassphrase,\n    $canVerify,\n    keyVerificationFx,\n} from \"./public\"\nimport { \n    MyVerificationRequest, \n    ValidatePassphraseFxParams, \n    ValidateRecoveryKeyFxParams \n} from \"./types\"\nimport { onVerificationRequestFxReducer } from \"./reducers\"\nimport { accessSecretStorage, makeInputToKey } from \"../cryptoCallbacks\"\n    \n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n    .reset(destroyClientFx.done)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n    .reset(destroyClientFx.done)\n\n// When copying an object, proto properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n    .reset(destroyClientFx.done)\n\n$hasPassphrase\n    .on(onHasPassphrase, (_, val) => val)\n    .reset(destroyClientFx.done)\n\n$checkKeyInfo\n    .on(setCheckKeyInfo, (_, val) => val)\n    .reset([\n        destroyClientFx.done, \n        onRejectSecretStorageKey, \n        keyVerificationFx.finally\n    ])\n\n$canVerify\n    .on(checkCanVerifyFx.doneData, (_, canVerify) => canVerify)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: checkThisDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkThisDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx\n})\n\nforward({\n    from: [\n        startVerificationUserFx,\n        startVerificationDeviceFx,\n        confirmSASVerification,\n        startSASFx,\n        startThisDeviceVerificationFx\n    ],\n    to: setWaitingAnotherUser\n})\n\nforward({\n    from: [\n        onCancelVerificationEvent,\n        $currentVerificationEvent.updates\n    ],\n    to: resetWaitingAnotherUser\n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData,\n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nforward({\n    from: startRecoveryKeyOrPassphraseVerification,\n    to: keyVerificationFx\n})\n\nforward({\n    from: validateRecoveryKeyFx.doneData,\n    to: onValidRecoveryKey\n})\n\nforward({\n    from: validateRecoveryKeyFx.failData,\n    to: onInvalidRecoveryKey,\n})\n\nforward({\n    from: validatePassphraseFx.doneData,\n    to: onValidPassphrase\n})\n\nforward({\n    from: validatePassphraseFx.failData,\n    to: onInvalidPassphrase,\n})\n\nforward({\n    from: [createClientFx.doneData, $deviceIsVerified.updates],\n    to: checkCanVerifyFx\n})\n\nforward({\n    from: [initCryptoFx.done, crossSigningChangeFx.done],\n    to: checkThisDeviceVerificationFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(onVerificationRequestFxReducer)\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    await (currentRequest.verifier as any).sasEvent.confirm()\n})\n\ncheckThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = Date.now()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n\ncheckCanVerifyFx.use(async () => {\n    const cl = client()\n    const cryptoEnabled = cl.isCryptoEnabled()\n    const homeserverSupportsCrossSigning = await cl\n        .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n\n    const canVerify = cryptoEnabled\n        && homeserverSupportsCrossSigning\n        && isVerified\n    return canVerify\n})\n\nkeyVerificationFx.use(async () => {\n    const cl = client()\n    await accessSecretStorage(async () => {\n        const backupInfo = await cl.getKeyBackupVersion()\n        await cl.checkOwnCrossSigningTrust()\n\n        if (!backupInfo) throw new InvalidBackupInfo(\"backupInfo is null\")\n        await cl.restoreKeyBackupWithSecretStorage(backupInfo)\n    })\n\n    if (!cl.getCrossSigningId()) {\n        throw new VerificationError(\"Secret storage access canceled\")\n    }\n})\n\nguard({\n    source: sample({\n        clock: validateRecoveryKey,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, input) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            input\n        }),\n    }),\n    filter: (params): params is ValidateRecoveryKeyFxParams => Boolean(\n        params.keyInfo\n    ),\n    target: validateRecoveryKeyFx,\n})\n\nguard({\n    source: sample({\n        clock: validatePassphrase,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, passphrase) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            passphrase,\n        }),\n    }),\n    filter: (params): params is ValidatePassphraseFxParams => Boolean(\n        params.keyInfo\n    ),\n    target: validatePassphraseFx,\n})\n\nvalidateRecoveryKeyFx.use(async ({ input, keyInfo }) => {\n    const cl = client()\n    const decodedKey = cl.keyBackupKeyFromRecoveryKey(input)\n    const isValid = await cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n    if (!isValid) throw new Error(\"Invalid recovery Key\")\n    return isValid\n})\n\nvalidatePassphraseFx.use( async ({keyInfo, passphrase}) => {\n    const cl = client()\n    const makeInput = makeInputToKey(keyInfo)\n    const decodedKey = await makeInput({passphrase})\n    const isValid = await cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n    if (!isValid) throw new Error(\"Invalid passphrase\")\n    return isValid\n})\n\n","import { d } from \"./domain\"\n\nexport const getCrossSigningIdFx = d.effect<void, string, Error>()\n","import { IAuthData } from \"matrix-js-sdk\"\nimport { forward } from \"effector\"\n\nimport { client } from \"@/matrix-client\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\nimport { destroyClientFx } from \"@/app\"\n\nimport { \n    $crossSigningId, \n    confirmResetCrossSigningFx, \n    crossSigningChangeFx, \n    onCrossSigningKeyChange\n} from \"./public\"\nimport { ConfirmResetCrossSigningFxResult } from \"./types\"\nimport { getCrossSigningIdFx } from \"./private\"\n\n$crossSigningId\n    .on(getCrossSigningIdFx.doneData, (_, id) => id)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n})\n\nconfirmResetCrossSigningFx.use(async () => {\n    const cl = client()\n    const promise = new Promise<\n        ConfirmResetCrossSigningFxResult\n    >((resolve, rej) => {\n        cl.bootstrapCrossSigning({\n            authUploadDeviceSigningKeys: async (makeRequest) => {\n                const requestCallback = (\n                    auth: IAuthData, \n                ): Promise<IAuthData> => {\n                    return makeRequest(auth)\n                }\n                await createInteractiveAuthFx(requestCallback)\n            },\n\n            setupNewCrossSigning: true,\n        }).then(() => {\n            resolve({\n                result: true\n            })\n        })\n    })\n    return promise\n})\n\ngetCrossSigningIdFx.use(() => {\n    const cl = client()\n    return cl.getCrossSigningId()\n})\n","import { forward } from \"effector\"\nimport { IAuthData } from \"matrix-js-sdk\"\n\nimport { client } from \"@/matrix-client\"\nimport { SecureBackupSetupMethod } from \"@/types\"\nimport { accessSecretStorage } from \"@/cryptoCallbacks\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\nimport { \n    E2EE_WK_KEY, \n    E2EE_WK_KEY_DEPRECATED\n} from \"@/constants\"\n\nimport { \n    bootstrapSecretStorageFx,\n    createRecoveryKeyAndPassPhraseFx,\n    getSecureBackupSetupMethodsFx,\n    lossAllRecoveryKeyMethod, \n    onNewRecoveryMethodCreated, \n    resetAllRecoveryKeyMethodsFx\n} from \"./public\"\n\nforward({\n    from: lossAllRecoveryKeyMethod,\n    to: resetAllRecoveryKeyMethodsFx\n})\n\nforward({\n    from: bootstrapSecretStorageFx.doneData,\n    to: onNewRecoveryMethodCreated,\n})\n\nresetAllRecoveryKeyMethodsFx.use(async () => {\n    // Force reset secret storage (which resets the key backup)\n    await accessSecretStorage(async () => {\n        const cl = client()\n        await cl.bootstrapCrossSigning({\n            authUploadDeviceSigningKeys: async (makeRequest) => {\n                const requestCallback = (\n                    auth: IAuthData, \n                ): Promise<IAuthData> => {\n                    return makeRequest(auth)\n                }\n                await createInteractiveAuthFx(requestCallback)\n            },\n            setupNewCrossSigning: true,\n        })\n    }, true)\n})\n\nbootstrapSecretStorageFx.use(async (key) => {\n    const cl = client()\n    await cl.bootstrapSecretStorage({\n        createSecretStorageKey: async () => key,\n        setupNewKeyBackup: true,\n        setupNewSecretStorage: true,\n    })\n})\n\ncreateRecoveryKeyAndPassPhraseFx.use(async (password) => {\n    const cl = client()\n    const key = await cl.createRecoveryKeyFromPassphrase(password)\n    if (!key) throw new Error(\"createRecovery Error\")\n    return key\n})\n\ngetSecureBackupSetupMethodsFx.use(() => {\n    const clientWellKnown = client().getClientWellKnown()\n    let wellKnown = null\n    if (clientWellKnown && clientWellKnown[E2EE_WK_KEY]) {\n        wellKnown = clientWellKnown[E2EE_WK_KEY]\n    }\n    if (clientWellKnown && clientWellKnown[E2EE_WK_KEY_DEPRECATED]) {\n        wellKnown = clientWellKnown[E2EE_WK_KEY_DEPRECATED]\n    }\n    if (\n        !wellKnown ||\n        !wellKnown[\"secure_backup_setup_methods\"] ||\n        !wellKnown[\"secure_backup_setup_methods\"].length ||\n        !(\n            wellKnown[\"secure_backup_setup_methods\"]\n                .includes(SecureBackupSetupMethod.Key) ||\n            wellKnown[\"secure_backup_setup_methods\"]\n                .includes(SecureBackupSetupMethod.Passphrase)\n        )\n    ) {\n        return [\n            SecureBackupSetupMethod.Key,\n            SecureBackupSetupMethod.Passphrase,\n        ]\n    }\n    return wellKnown[\"secure_backup_setup_methods\"]\n})\n","import { InteractiveAuth } from \"matrix-js-sdk\"\n\nimport { d } from \"./domain\"\nimport { SubmitAuthDictFxParams } from \"./types\"\n\nexport const $interactiveAuthInstance = d.store<InteractiveAuth | null>(null)\n\nexport const setInteractiveAuth = d.event<InteractiveAuth>()\nexport const submitAuthDictFx = d\n    .effect<SubmitAuthDictFxParams, void, Error>()","import { sample } from \"effector\"\nimport { InteractiveAuth } from \"matrix-js-sdk\"\n\nimport { LOGIN_BY_PASSWORD } from \"@/constants\"\nimport { client } from \"@/matrix-client\"\n\nimport { \n    $interactiveAuthInstance, \n    setInteractiveAuth, \n    submitAuthDictFx \n} from \"./private\"\nimport { \n    cancelInteractiveAuth,\n    createInteractiveAuthFx, \n    onInteractiveAuthBusyChange,\n    onInteractiveAuthStateUpdate,\n    onNeedUserPassword,\n    onUserPasswordError,\n    onUserPasswordSuccess,\n    submitAuthDict\n} from \"./public\"\n\n$interactiveAuthInstance\n    .on(setInteractiveAuth, (_, auth) => auth)\n    .reset([onUserPasswordSuccess, cancelInteractiveAuth])\n\nsample({\n    clock: submitAuthDict,\n    source: $interactiveAuthInstance,\n    filter: (\n        isInstance: InteractiveAuth | null,\n    ): isInstance is InteractiveAuth => Boolean(isInstance),\n    fn: (auth, pass) => ({\n        password: pass,\n        interactiveAuth: auth\n    }),\n    target: submitAuthDictFx\n})\n\nsample({\n    source: onInteractiveAuthStateUpdate,\n    filter: ({status}) => status.errcode === \"M_FORBIDDEN\",\n    fn: ({status}) => status.error as string,\n    target: onUserPasswordError,\n})\n\ncreateInteractiveAuthFx.use(async (requestCallback) => {\n    const cl = client()\n\n    const interactiveAuth = new InteractiveAuth({\n        doRequest: requestCallback,\n        busyChanged: onInteractiveAuthBusyChange,\n        stateUpdated: (nextStage, status) => {\n            onInteractiveAuthStateUpdate({\n                nextStage, status\n            })\n        },\n        matrixClient: cl,\n        // нам это не нужно \n        requestEmailToken: undefined as any\n    })\n    setInteractiveAuth(interactiveAuth)\n    onNeedUserPassword()\n\n    return new Promise<void>(async (resolve, reject) => {\n        const unSub = cancelInteractiveAuth.watch(() => {\n            unSub()\n            reject()\n        })\n        await interactiveAuth.attemptAuth()\n        unSub()\n        onUserPasswordSuccess()\n        resolve()\n    })\n})\n\nsubmitAuthDictFx.use(async ({password, interactiveAuth}) => {\n    const cl = client()\n    await interactiveAuth.submitAuthDict(\n        {\n            \"type\": LOGIN_BY_PASSWORD,\n            \"user\": cl.getUserId(),\n            \"identifier\": {\n                \"type\": \"m.id.user\",\n                \"user\": cl.getUserId()\n            },\n            \"password\": password\n        }\n    )\n})\n","import { d } from \"./domain\"\nimport { DetailedKeyBackupInfo } from \"./types\"\n\nexport const getDetailedKeyBackupInfoFx = d\n    .effect<void, DetailedKeyBackupInfo, Error>()\n\nexport const deleteKeyBackupFx = d.effect<string, void, Error>()\n","import { forward, sample } from \"effector\"\nimport { IKeyBackupCheck } from \"matrix-js-sdk/lib/crypto/backup\"\n\nimport { client } from \"@/matrix-client\"\nimport { destroyClientFx, onUpdateKeyBackupStatus } from \"@/app\"\nimport { accessSecretStorage } from \"@/cryptoCallbacks\"\nimport { initCryptoFx } from \"@/crypto\"\n\nimport { \n    $detailedKeyBackupInfo, \n    $isKeyBackupEnabled, \n    $keyBackupInfo, \n    $sessionsRemaining, \n    checkBackupEnabledKeyFx, \n    deleteKeyBackup, \n    getKeyBackupInfoFx, \n    newKeyBackupFx,\n    onBackupKeyLoadProgress,\n    onSessionRemaining,\n    resetCryptoStorageFx,\n    restoreKeyBackupFx,\n} from \"./public\"\nimport { \n    deleteKeyBackupFx,\n    getDetailedKeyBackupInfoFx \n} from \"./private\"\n\n$sessionsRemaining\n    .on(onSessionRemaining, (_, remaining) => remaining)\n    .reset(destroyClientFx.done)\n\n$isKeyBackupEnabled\n    .on(checkBackupEnabledKeyFx.doneData, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx.done)\n\n$keyBackupInfo\n    .on(getKeyBackupInfoFx.doneData, (_, info) => info)\n    .reset(destroyClientFx.done)\n\n$detailedKeyBackupInfo\n    .on(getDetailedKeyBackupInfoFx.doneData, (_, detailedInfo) => detailedInfo)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: initCryptoFx.doneData,\n    to: checkBackupEnabledKeyFx,\n})\n\nforward({\n    from: [\n        onUpdateKeyBackupStatus, \n        resetCryptoStorageFx.finally,\n        deleteKeyBackupFx.finally,\n    ],\n    to: [\n        checkBackupEnabledKeyFx, \n        getKeyBackupInfoFx, \n        getDetailedKeyBackupInfoFx\n    ]\n})\n\nsample({\n    clock: deleteKeyBackup,\n    source: $keyBackupInfo,\n    filter: (\n        keyInfo: IKeyBackupCheck | null\n    ): keyInfo is IKeyBackupCheck => Boolean(keyInfo?.backupInfo.version),\n    fn: (keyInfo: IKeyBackupCheck) => keyInfo.backupInfo.version as string,\n    target:  deleteKeyBackupFx,\n})\n\ncheckBackupEnabledKeyFx.use(() => {\n    return client().getKeyBackupEnabled()\n})\n\ngetKeyBackupInfoFx.use(() => {\n    return client().checkKeyBackup()\n})\n\nnewKeyBackupFx.use(async () => {\n    let info: any\n    const cl = client()\n    try {\n        const secureSecretStorage = await cl\n            .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n        if (secureSecretStorage) {\n            await accessSecretStorage(async () => {\n                info = await cl.prepareKeyBackupVersion(\n                    undefined /* random key */,\n                    { secureSecretStorage: true },\n                )\n                info = await cl.createKeyBackupVersion(info)\n            })\n        } else {\n            const keyBackupInfo = await cl.getKeyBackupVersion()\n            if (keyBackupInfo) [\n                info = await cl.createKeyBackupVersion(\n                    keyBackupInfo,\n                )\n            ]\n        }\n\n        await cl.scheduleAllGroupSessionsForBackup()\n\n    } catch (e) {\n        // TODO: If creating a version succeeds, but backup fails, should we\n        // delete the version, disable backup, or do nothing?  If we just\n        // disable without deleting, we'll enable on next app reload since\n        // it is trusted.\n        if (info) {\n            cl.deleteKeyBackupVersion(info.version)\n        }\n    }\n})\n\ngetDetailedKeyBackupInfoFx.use(async () => {\n    const cl = client()\n    const secretStorage = cl.crypto.secretStorage\n\n    const backupKeyStored = !!(await cl.isKeyBackupKeyStored())\n    const backupKeyFromCache = await cl.crypto.getSessionBackupPrivateKey()\n    const backupKeyCached = !!(backupKeyFromCache)\n    const backupKeyWellFormed = backupKeyFromCache instanceof Uint8Array\n    const secretStorageKeyInAccount = await secretStorage.hasKey()\n    const secretStorageReady = await cl.isSecretStorageReady()\n\n    return {\n        backupKeyStored,\n        backupKeyCached,\n        backupKeyWellFormed,\n        secretStorageKeyInAccount,\n        secretStorageReady\n    }\n})\n\ndeleteKeyBackupFx.use((version) => {\n    const cl = client()\n    return cl.deleteKeyBackupVersion(version)\n})\n\nrestoreKeyBackupFx.use(async () => {\n    const cl = client()\n    const backupInfo = await cl.getKeyBackupVersion()\n    const has4S = await cl.hasSecretStorageKey()\n    const backupKeyStored = has4S && (await cl.isKeyBackupKeyStored())\n    if (!backupInfo) return\n    const progressCallback = {\n        progressCallback: (e: any) => {\n            onBackupKeyLoadProgress(e)\n        }\n    }\n    try {\n        const recoverInfo = await cl.restoreKeyBackupWithCache(\n            undefined, /* targetRoomId */\n            undefined, /* targetSessionId */\n            backupInfo,\n            // @TODO fix matrix-types\n            progressCallback,\n        )\n        console.log(\"RestoreKeyBackupDialog: found cached backup key\")\n        return recoverInfo\n    } catch (e) {\n        console.error(e)\n    }\n\n    if (backupKeyStored) {\n        await accessSecretStorage(async () => {\n            await cl.restoreKeyBackupWithSecretStorage(\n                backupInfo, undefined, undefined,\n                // @TODO fix matrix-types\n                progressCallback,\n            )\n        })\n    }\n\n}) \n\nresetCryptoStorageFx.use(async() => {\n    await accessSecretStorage(async () => undefined, /* forceReset = */ true)\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","SecureBackupSetupMethod","RecoveryKeyOrPassphraseEnum","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","$currentDeviceId","store","onUpdateKeyBackupStatus","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","getUserDevicesInfoFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","$mySessionsInfo","getMySessionsFx","clearMySessionsInfo","logoutSessionsById","renameDeviceFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","stopPeeking","clearStores","crypto","stop","cryptoStore","deleteAllData","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","indexedDB","verificationDomain","$isWaitingAnotherUser","createApi","setWaitingAnotherUser","resetWaitingAnotherUser","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","startVerificationDevice","startThisDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","keyVerificationFx","onNeedRecoveryKeyOrPassphrase","startRecoveryKeyOrPassphraseVerification","setCheckKeyInfo","validateRecoveryKey","onRecoveryKeyOrPassphraseSuccess","onValidRecoveryKey","onInvalidRecoveryKey","$hasPassphrase","onHasPassphrase","validatePassphrase","onValidPassphrase","onInvalidPassphrase","$canVerify","$deviceIsVerified","onUpdateDeviceList","checkThisDeviceVerificationFx","onUsersProfileUpdate","onResolveSecretStorageKey","onRejectSecretStorageKey","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","IdbDelete","createRecoveryKeyAndPassPhraseFx","getSecureBackupSetupMethodsFx","onNeedCreateRecoveryMethod","lossAllRecoveryKeyMethod","cancelCreateNewMethod","onNewRecoveryMethodCreated","bootstrapSecretStorageFx","resetAllRecoveryKeyMethodsFx","createInteractiveAuthFx","submitAuthDict","onNeedUserPassword","onUserPasswordError","onUserPasswordSuccess","onInteractiveAuthBusyChange","onInteractiveAuthStateUpdate","cancelInteractiveAuth","secretStorageBeingAccessed","secretStorageKeys","secretStorageKeyInfo","dehydrationCache","createPromise","params","promise","res","rej","isCachingAllowed","setCachingAllowed","newVal","cacheSecretStorageKey","keyId","keyInfo","promptForBackupPassphrase","Uint8Array","console","log","accessSecretStorage","func","forceReset","cl","hasSecretStorageKey","createdSub","watch","cancelSub","bootstrapCrossSigning","authUploadDeviceSigningKeys","makeRequest","requestCallback","auth","bootstrapSecretStorage","getKeyBackupPassphrase","Object","keys","dehydrationKeyInfo","passphrase","setDehydrationKey","warn","error","makeInputToKey","deriveKey","salt","iterations","recoveryKey","decodeRecoveryKey","keyInfos","getDefaultSecretStorageKeyId","keyInfoEntries","entries","length","checkSecretStorageKey","inputToKey","resolveWatcher","rejectWatcher","unsubscribe","input","getDehydrationKey","userId","deviceId","requestId","name","deviceTrust","getUserId","isVerified","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","i","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","tryToUnlockSecretStorageWithDehydrationKey","restoringBackup","isSecretStorageReady","checkOwnCrossSigningTrust","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","confirmResetCrossSigningFx","$crossSigningId","onCrossSigningKeyChange","crossSigningChangeFx","newKeyBackupFx","$keyBackupInfo","getKeyBackupInfoFx","$detailedKeyBackupInfo","onBackupKeyLoadProgress","$isKeyBackupEnabled","checkBackupEnabledKeyFx","deleteKeyBackup","restoreKeyBackupFx","resetCryptoStorageFx","$sessionsRemaining","onSessionRemaining","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","InvalidBackupInfo","VerificationError","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","isReadUpTo","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","cryptoDomain","initCryptoFx","$isCryptoEnabled","$identityKey","exportE2ERoomsKeysFx","importE2ERoomsKeysFx","$deviceEd25519Key","getMappedRooms","getRooms","done","_","createClientParams","reset","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","args","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","getDeviceId","checkDeviceTrust","isSelfVerification","id","Date","now","userIds","initialFetch","deviceInfo","newStatus","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","startClientParams","downloadKeys","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","rules","global","setPushRuleEnabled","enabled","deletePushRule","logoutSessionsByIdFx","doneData","sessionsInfo","fail","guard","clock","sessions","target","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","getDevices","devices","crossSigningInfo","getStoredCrossSigningForUser","myDeviceId","device","getStoredDevice","isCurrentSession","sessionsId","callback","deleteMultipleDevices","setDeviceDetails","display_name","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","fn","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeysForUsers","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","isMe","getStoredDevicesForUser","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","requestLimit","dir","getUnreadNotificationCount","subtleCrypto","_window","deriveKeys","password","importKey","TextEncoder","encode","deriveBits","hash","keybits","aesKey","slice","hmacKey","aesProm","hmacProm","all","HEADER_LINE","packMegolmKeyFile","nLines","Math","ceil","lines","Array","uint8Array","latin1String","o","subarray","String","fromCharCode","apply","btoa","buffer","encryptMegolmKeyFile","kdfRounds","kdf_rounds","encodedData","counter","ciphertext","cipherArray","bodyLength","resultBuffer","idx","set","toSign","sign","hmac","hmacArray","unpackMegolmKeyFile","fileStr","TextDecoder","decode","lineStart","lineEnd","indexOf","line","trim","dataStart","dataEnd","base64","atob","decodeBase64","decryptMegolmKeyFile","ciphertextLength","toVerify","verify","isValid","plaintext","setEnableCrypto","getIdentityKeyFx","getDeviceEd25519KeyFx","isEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","getDeviceEd25519Key","exportRoomKeys","arrayBuffer","importRoomKeys","parse","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","cancelVerificationEventFx","$checkKeyInfo","validateRecoveryKeyFx","updateDeviceVerification","validatePassphraseFx","checkCanVerifyFx","onVerificationRequestFxReducer","currentRequest","onChange","cancelled","off","VerificationRequestEvent","Change","cancellationCode","phase","Done","otherUserId","Ready","Started","verifier","sasEvent","excludePhaseArray","Cancelled","Requested","requests","req","currentReq","canceledReq","val","canVerify","failData","accept","beginKeyVerification","once","cancel","confirm","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","cryptoEnabled","isCryptoEnabled","doesServerSupportUnstableFeature","homeserverSupportsCrossSigning","getCrossSigningId","checkKeyInfo","decodedKey","keyBackupKeyFromRecoveryKey","makeInput","getCrossSigningIdFx","isInitialSyncComplete","setupNewCrossSigning","createSecretStorageKey","setupNewKeyBackup","setupNewSecretStorage","createRecoveryKeyFromPassphrase","clientWellKnown","getClientWellKnown","Key","Passphrase","$interactiveAuthInstance","setInteractiveAuth","submitAuthDictFx","isInstance","pass","interactiveAuth","errcode","InteractiveAuth","doRequest","busyChanged","stateUpdated","nextStage","matrixClient","requestEmailToken","unSub","attemptAuth","getDetailedKeyBackupInfoFx","deleteKeyBackupFx","remaining","info","detailedInfo","version","getKeyBackupEnabled","checkKeyBackup","prepareKeyBackupVersion","secureSecretStorage","createKeyBackupVersion","keyBackupInfo","scheduleAllGroupSessionsForBackup","deleteKeyBackupVersion","secretStorage","isKeyBackupKeyStored","backupKeyStored","backupKeyFromCache","backupKeyCached","backupKeyWellFormed","hasKey","secretStorageKeyInAccount","secretStorageReady","has4S","progressCallback","restoreKeyBackupWithCache","recoverInfo"],"mappings":"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"}