<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
{"version":3,"file":"index.js","sources":["../src/root.ts","../src/types/content.ts","../src/types/index.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { MappedRoomMember } from \"./room/types\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","clientStore","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","id","_context7","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount"],"mappings":"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"}
=======
{"version":3,"file":"index.js","sources":["../src/root.ts","../src/types/content.ts","../src/types/index.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/verification/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    EventType,\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport enum Presence {\r\n    online = \"online\",\r\n    offline = \"offline\", \r\n    unavailable = \"unavailable\",\r\n} \r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    presence: Presence\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n    seen?: boolean\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n    powerlevels: RoomPowerLevelsContent\r\n    myPowerLevel: number\r\n    canKick: boolean\r\n    canBan: boolean\r\n    canInvite: boolean\r\n    canSendEvents: {\r\n        canChangeRoomAvatar: boolean\r\n        canChangeHistoryVisivility: boolean\r\n        canChangeRoomName: boolean\r\n        canChangeRoomPowerLevels: boolean\r\n        canChangeCanonicalAlias: boolean\r\n        canChangeRoomEncryption: boolean\r\n        canChangeRoomTobstone: boolean\r\n        canChangeRoomServerAcl: boolean\r\n    }\r\n    canRedact: boolean\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n\r\ntype EventPowerLevels = {\r\n    [EventType.RoomCanonicalAlias]: number\r\n    [EventType.RoomAvatar]: number\r\n    [EventType.RoomEncryption]: number\r\n    [EventType.RoomHistoryVisibility]: number\r\n    [EventType.RoomName]: number\r\n    [EventType.RoomPowerLevels]: number\r\n    [EventType.RoomServerAcl]: number\r\n    [EventType.RoomTombstone]: number\r\n}\r\n\r\nexport type RoomPowerLevelsContent = {\r\n    ban: number\r\n    events: EventPowerLevels\r\n    users: {\r\n        [key in string]: number \r\n    }\r\n    redact: number\r\n    kick: number\r\n    invite: number\r\n    state_default: number\r\n    users_default: number\r\n    events_default: number\r\n}\r\n\r\nexport enum UserRole {\r\n    admin = \"Admin\",\r\n    moderator = \"Moderator\"\r\n}\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams,\r\n    CreateClientParams, \r\n    AuthData \r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message,\r\n    UserRole\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n  role?: UserRole\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    \"public\" = \"public\",\r\n    \"private\" = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type InviteUsersParams = {\r\n    roomId: string\r\n    usersIds: string[]\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n\r\nexport type SendTypingParams = {\r\n    roomId: string\r\n    isTyping: boolean\r\n  }\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    RoomMember,\r\n    User\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixMembershipType,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams,\r\n    LoadRoomFxParams,\r\n    MessageResponse,\r\n    SendTypingParams,\r\n    InviteUsersParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $typingMembers = roomDomain\r\n    .store<{[key in string]: RoomMember[]}>({})\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.join) ?? []\r\n    )\r\nexport const $currentRoomInvitedMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.invite\r\n        ) ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const clearTypingMember = roomDomain.event<void>()\r\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const findDirectRoomByUserIdFx = roomDomain\r\n    .effect<string, MappedRoom, Error>()\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const sendTypingFx = roomDomain\r\n    .effect<SendTypingParams, void, Error>()\r\nexport const getMembersByRoomIdFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const getRoomMemberFx = roomDomain\r\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        // clientStore.clearStores()\r\n        clientStore = null as any\r\n    }\r\n}\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","import { \n    IVerificationChannel \n} from \"matrix-js-sdk/lib/crypto/verification/request/Channel\"\nimport {\n    VerificationRequest \n} from \"matrix-js-sdk/lib/crypto/verification/request/VerificationRequest\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: string\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview,\r\n    PaginateParams,\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\nexport const $currentRoomUnreadMessageCount = messagesDomain\r\n    .store<number | null>(null)\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\r\nexport const onPaginateForwardDone = messagesDomain.event<void>()\r\nexport const paginateForward = messagesDomain.event<PaginateParams>()\r\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\r\n\r\nexport const $paginateForwardPending = messagesDomain.store(false)\r\nexport const $paginateBackwardPending = messagesDomain.store(false)\r\nexport const $canPaginateBackward = messagesDomain.store(true)\r\nexport const $canPaginateForward = messagesDomain.store(true)\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const d = root.domain(\"profile\")\r\n","import { d } from \"./domain\"\r\n\r\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\r\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\r\n\r\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    SetDeviceVerifiedFx \n} from \"./types\"\n\nexport const setDeviceVerifiedFx = verificationDomain\n    .effect<SetDeviceVerifiedFx, void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\ntype DeviceIsVerifired = boolean\n\nexport const setMyDeviceVerifiedFx = verificationDomain\n    .effect<void, DeviceIsVerifired, Error>()\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const checkDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\nexport const $deviceIsVerifired = verificationDomain\n    .store<DeviceIsVerifired | null>(null)\n\nexport const startMyDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\nexport const CantInviteUsers = \r\n  createCustomError(\"CantInviteUsers\")\r\nexport const NotEnoughPermissions = \r\n  createCustomError(\"NotEnoughPermissions\")\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room,\r\n    EventType\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { StateEventsContent } from \"./app/types\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType,\r\n    RoomPowerLevelsContent,\r\n    UserRole\r\n} from \"./types\"\r\n\r\nexport const toMessageSeen = (\r\n    message: Message,\r\n    myUserId: string,\r\n    room: Room\r\n): Message => {\r\n    message.seen = room.getJoinedMembers().some((member) => {\r\n        if (member.userId === myUserId) return false\r\n        return room\r\n            .hasUserReadEvent(member.userId, message.originalEventId)\r\n    })\r\n    return message\r\n}\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = (): string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId() as string,\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    let role = undefined\r\n    if (roomMember.powerLevel === 100) {\r\n        role = UserRole.admin\r\n    } else if (roomMember.powerLevel === 50) {\r\n        role = UserRole.moderator\r\n    }\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n        role,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    const powerLevelsContent = matrixRoom.currentState\r\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\r\n        .getContent<RoomPowerLevelsContent>()\r\n\r\n    const isDirect = Boolean(matrixRoom.currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate, \r\n            \"\"\r\n        )?.getContent<StateEventsContent>()?.isDirect)\r\n\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n\r\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\r\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\r\n    const myUserId = cl.getUserId()\r\n\r\n    if (lastMessage) {\r\n        if (lastMessage.sender.userId !== myUserId) {\r\n            lastMessage.seen = matrixRoom\r\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \r\n        } else {\r\n            lastMessage = toMessageSeen(\r\n                lastMessage,\r\n                myUserId,\r\n                matrixRoom\r\n            )\r\n        }\r\n    }\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \r\n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\r\n        powerlevels: powerLevelsContent,\r\n        myPowerLevel,\r\n        canBan: myPowerLevel >= powerLevelsContent.ban,\r\n        canKick: myPowerLevel >= powerLevelsContent.kick,\r\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\r\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\r\n        canSendEvents: {\r\n            canChangeHistoryVisivility: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomHistoryVisibility]\r\n            ),\r\n            canChangeRoomAvatar: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\r\n            ),\r\n            canChangeRoomName: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\r\n            ),\r\n            canChangeRoomPowerLevels: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomPowerLevels]\r\n            ),\r\n            canChangeCanonicalAlias: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomCanonicalAlias]\r\n            ),\r\n            canChangeRoomEncryption: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomEncryption]\r\n            ),\r\n            canChangeRoomServerAcl: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomServerAcl]\r\n            ),\r\n            canChangeRoomTobstone: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomTombstone]\r\n            )\r\n        }\r\n    }\r\n}\r\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client } from \"./matrix-client\"\r\nimport { MappedRoomMember } from \"./room/types\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport {\r\n    mergeMessageEvents,\r\n    toMessageSeen\r\n} from \"./mappers\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams,\r\n    Message,\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\r\n    const messages = timelineWindow.getEvents()\r\n        .filter((event) => (\r\n            [\r\n                ROOM_MESSAGE_EVENT,\r\n                ROOM_REDACTION_EVENT\r\n            ].includes(event.getType())))\r\n        .reduce(mergeMessageEvents, [])\r\n    const cl = client()\r\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\r\n    const room = cl.getRoom(roomId as string)\r\n    if (!room) throw new RoomNotFound()\r\n    const myMessages = []\r\n    const otherMessages = []\r\n    const myUserId = cl.getUserId()\r\n    let findFirstSeenOtherMessage = false\r\n    let findFirstSeenMyMessage = false\r\n    for (let i = messages.length - 1; i >= 0; i--) {\r\n        if (messages[i].sender.userId === myUserId) {\r\n            myMessages.push(messages[i])\r\n        } else {\r\n            otherMessages.push(messages[i])\r\n        }\r\n    }\r\n    myMessages.forEach((message) => {\r\n        if (findFirstSeenMyMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message = toMessageSeen(message, myUserId, room)\r\n            findFirstSeenMyMessage = Boolean(message.seen)\r\n        }\r\n    })\r\n    otherMessages.forEach((message) => {\r\n        if (findFirstSeenOtherMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message.seen = room\r\n                .hasUserReadEvent(myUserId, message.originalEventId)\r\n            findFirstSeenOtherMessage = message.seen\r\n        }\r\n    })\r\n    return messages\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (\r\n    roomId: string,\r\n    companion?: string\r\n): Promise<{}> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        ).getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n\r\n    if(companion) {\r\n        return await cl.setAccountData(DIRECT_EVENT, {\r\n            ...prevData,\r\n            [companion]: [roomId]\r\n        })\r\n        \r\n    }\r\n    return await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n\r\nexport const uid = (): string => ( \r\n    `id${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`\r\n)\r\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    EventType,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    toggleTypingUser\r\n} from \"@/room\"\r\nimport { \r\n    initCryptoFx, \r\n} from \"@/crypto\"\r\nimport {\r\n    onVerificationRequest, \r\n    MyVerificationRequest,\r\n    checkDeviceVerificationFx\r\n} from \"@/verification\"\r\nimport { UserNotFound } from \"@/errors\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\nimport { uid } from \"@/utils\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {            \r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = Boolean(room.currentState\r\n            .getStateEvents(\r\n                EventType.RoomCreate,\r\n                \"\"\r\n            )?.getContent<StateEventsContent>()?.isDirect)\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", async (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            await client().uploadKeys()\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            updateMessages()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => {\r\n            onRoomMemberUpdate(member)\r\n            toggleTypingUser(member)\r\n        }\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"crossSigning.keysChanged\",\r\n        (...args) => console.log(\"crossSigning.keysChanged\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequest\",\r\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequestCancellation\",\r\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\r\n    ],\r\n    [\r\n        \"crypto.secrets.requestCancelled\",\r\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\r\n    ],\r\n    [\r\n        \"crypto.suggestKeyRestore\",\r\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request.unknown\",\r\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request\", (\r\n            request: MyVerificationRequest\r\n        ) => {\r\n            request.id = uid()\r\n            onVerificationRequest(request)\r\n        }\r\n    ],\r\n    [\r\n        \"crypto.warning\",\r\n        (...args) => console.log(\"crypto.warning\", args)\r\n    ],\r\n    [\r\n        \"crypto.willUpdateDevices\",\r\n        (userIds: string[], initialFetch?: boolean) => {\r\n            // If we didn't know about *any* devices before (ie. it's fresh login),\r\n            // then they are all pre-existing devices, so ignore this and set the\r\n            // devicesAtStart list to the devices that we see after the fetch.\r\n            if (initialFetch) return\r\n            console.log(\"crypto.willUpdateDevices\", userIds)\r\n            const cl = client()\r\n            const myUserId = cl.getUserId()\r\n            if (userIds.includes(myUserId)) {\r\n                console.log(\r\n                    cl.getStoredDevicesForUser(myUserId).map(d => d.deviceId)\r\n                )\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        \"crypto.devicesUpdated\",\r\n        (userIds: string[]) => {\r\n            const cl = client()\r\n            if (userIds.includes(cl.getUserId())) {\r\n                checkDeviceVerificationFx()\r\n            }\r\n            if (!userIds.includes(cl.getUserId())) return\r\n        }\r\n    ]\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    } = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const cl = client()\r\n    const { store } = cl\r\n    if (store) await store.startup()\r\n    await initCryptoFx()\r\n    await cl.startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { client } from \"../matrix-client\"\r\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\r\n\r\nupdateDisplayNameFx.use(async (newDisplayName) => {\r\n    await client().setDisplayName(newDisplayName)\r\n})\r\n\r\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\r\n    await client().setAvatarUrl(newAvatarUrl)\r\n})\r\n\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    EventType,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { DIRECT_EVENT } from \"@/constants\"\r\nimport { \r\n    CantInviteUsers,\r\n    ClientNotInitialized,\r\n    NotEnoughPermissions,\r\n    RoomNotFound, \r\n    TimelineWindowUndefined,\r\n    UserNotFound \r\n} from \"@/errors\"\r\nimport { getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    initRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx,\r\n    $loadFilter,\r\n    loadRoomFx,\r\n    findDirectRoomByUserIdFx,\r\n    $typingMembers,\r\n    clearTypingMember,\r\n    toggleTypingUser,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    sendTypingFx,\r\n    getMembersByRoomIdFx,\r\n    inviteUsersFx,\r\n    getRoomMemberFx\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\n\r\nconst TYPING_SERVER_TIMEOUT = 5000\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst getRoomMembersFx = attach({\r\n    effect: getMembersByRoomIdFx\r\n})\r\n\r\nconst getCurrentRoomFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n$typingMembers\r\n    .on(toggleTypingUser, (members, member) => {\r\n        if(member.typing) {\r\n            if (members[member.roomId]) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...members[member.roomId], member] \r\n                }\r\n            } \r\n            return {\r\n                ...members,\r\n                [member.roomId]: [member] \r\n            }\r\n        } \r\n        if (members[member.roomId]) {\r\n            if (members[member.roomId].length > 1) {\r\n                const filteredUsers = members[member.roomId]\r\n                    .filter(({userId}) => userId !== member.userId)\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...filteredUsers] \r\n                }\r\n            }\r\n            delete members[member.roomId]\r\n            return {\r\n                ...members, \r\n            }\r\n        }\r\n    })\r\n    .reset(clearTypingMember)\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getCurrentRoomFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetMembersByRoomIdFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return room.getMembers()\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n        const room = client().getRoom(roomId)\r\n        if (!room) throw new RoomNotFound()\r\n        const membersCache: { [id: string]: RoomMember } = {}\r\n        const searchResponse = await client().search({\r\n            body: {\r\n                search_categories: {\r\n                    room_events: {\r\n                        search_term: term,\r\n                        keys: [\"content.body\"],\r\n                        filter: {\r\n                            rooms: [roomId],\r\n                        },\r\n                        order_by: orderBy,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n        return searchResponse\r\n            .search_categories\r\n            .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n                const event = new MatrixEvent(result)\r\n                const senderId = event.getSender()\r\n                if (membersCache[senderId] === undefined) {\r\n                    membersCache[senderId] = room\r\n                        .getMember(senderId) as RoomMember\r\n                }\r\n                event.sender = membersCache[senderId]\r\n                return toMessage(event)\r\n            })\r\n    })\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id, user.userId)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    try {\r\n        await client().invite(roomId, userId)\r\n        await client().sendSharedHistoryKeys(roomId, [userId])\r\n    } catch (e: any) {\r\n        if (e.httpStatus === 403) {\r\n            throw new NotEnoughPermissions(\r\n                \"Not enough permissions to invite users\"\r\n            )\r\n        }\r\n    }\r\n})\r\n\r\ninviteUsersFx.use( async ({usersIds, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    for (const id of usersIds) {\r\n        try {\r\n            await client().invite(roomId, id)\r\n            await client().sendSharedHistoryKeys(roomId, [id])\r\n        } catch (e: any) {\r\n            if (e.httpStatus === 403) {\r\n                throw new NotEnoughPermissions()\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n\r\nfindDirectRoomByUserIdFx.use((userId) => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\r\n    const roomId = directRooms[userId] && directRooms[userId][0]\r\n    if(!roomId) throw new RoomNotFound()\r\n    const room = cl.getRoom(roomId)\r\n    if(!room) throw new RoomNotFound()\r\n    return toMappedRoom(room)\r\n})\r\n\r\nsendTypingFx.use(async ({ roomId, isTyping }) => {\r\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\r\n})\r\n\r\ngetRoomMemberFx.use(({ roomId, userId }) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\r\n    const roomMember = matrixRoom?.getMember(userId)\r\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\r\n    return roomMember\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach, guard, sample} from \"effector\"\r\nimport {\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    loadRoomFx,\r\n    MessageResponse\r\n} from \"@/room\"\r\nimport {\r\n    UpdateMessagesFxParams,\r\n    PaginateParams,\r\n    PaginateRoomFxParams\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const paginateRoomFx = messagesDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n\r\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\r\n    .effect<string, number, Error>()\r\n","import {\r\n    attach,\r\n    combine,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport matrix, {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    debounce,\r\n    throttle\r\n} from \"patronum\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $loadFilter,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx,\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx,\r\n    updateCurrentRoomUnreadMessageCountFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    updateMessages,\r\n    $currentRoomUnreadMessageCount,\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst THROTTLE_MESSAGE_TIME = 800\r\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n\r\n$currentRoomUnreadMessageCount\r\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\r\n    .reset($currentRoomId)\r\n\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n          && !backwardPaginationPending\r\n          && !forwardPaginationPending\r\n          && !roomLoading\r\n)\r\n    \r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n    \r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n    \r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n    \r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\n\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        throttle({\r\n            source: updateMessages,\r\n            timeout: THROTTLE_MESSAGE_TIME\r\n        }),\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nguard({\r\n    clock: $messages.updates,\r\n    source: $currentRoomId,\r\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\r\n    target: updateCurrentRoomUnreadMessageCountFx\r\n})\r\n\r\nsample({\r\n    clock: debounce({\r\n        source: sendMessageFx.done,\r\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\r\n    }),\r\n    fn: ({ params, result }) => ({\r\n        roomId: params.roomId,\r\n        eventId: result.event_id\r\n    }),\r\n    target: readAllMessagesFx\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n    await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n    \r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\n\r\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const count = matrixRoom.getUnreadNotificationCount()\r\n    return count ?? 0\r\n})\r\n","import { client } from \"@/matrix-client\"\nimport { checkDeviceVerificationFx } from \"@/verification\"\nimport { \n    checkBackupKeyFx, \n    initCryptoFx, \n} from \"./public\"\n\ncheckBackupKeyFx.use(async () => client().getKeyBackupEnabled())\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) return\n    await cl.initCrypto()\n    // @TODO Убрать хардкод. Настройка ручной верификации каждой сессии\n    cl.setCryptoTrustCrossSignedDevices(false)\n    // const backupInfo = await cl.getKeyBackupVersion()\n    // if (backupInfo) {\n    // don't await, because this can take a long times\n    // cl.restoreKeyBackupWithSecretStorage(backupInfo).then(console.log)\n    // }\n    checkDeviceVerificationFx()\n})\n\n","import { verificationDomain } from \"./domain\"\nimport { MyVerificationRequest, OnVerificationRequestFxParams } from \"./types\"\n\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n","import { forward, sample, guard } from \"effector\"\nimport { client } from \"@/matrix-client\"\nimport { \n    updateVerificationPhase, \n    cancelVerificationEvent, \n    confirmSASVerificationFx, \n    onVerificationRequestFx, \n    startSASFx, \n    updateDeviceVerification,\n} from \"./private\"\nimport { \n    $currentVerificationEvent, \n    $deviceIsVerifired, \n    $verificationEvents, \n    cancelVerificationEventFx,\n    checkDeviceVerificationFx,\n    confirmSASVerification,\n    startMyDeviceVerificationFx,\n    onVerificationRequest, \n    setCurrentVerificationEvent, \n    setDeviceVerifiedFx, \n    setMyDeviceVerifiedFx, \n    startSASVerification, \n} from \"./public\"\nimport { MyVerificationRequest, Phase } from \"./types\"\nimport { uid } from \"@/utils\"\n\n$deviceIsVerifired\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => [\n        ...requests, req\n    ]))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(cancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n// @TODO When copying an object, access to private properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(cancelVerificationEvent, \n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n\nforward({\n    from: setMyDeviceVerifiedFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: cancelVerificationEvent\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nsetMyDeviceVerifiedFx.use(async () => {\n    const cl = client()\n    const userId = cl.getUserId()\n    const deviceId = cl.getDeviceId()\n    await cl.setDeviceKnown(userId, deviceId, true)\n    await cl.setDeviceVerified(userId, deviceId, true)\n    return true\n})\n\nsetDeviceVerifiedFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    await cl.setDeviceKnown(userId, deviceId, true)\n    await cl.setDeviceVerified(userId, deviceId, true)\n})\n\nonVerificationRequestFx.use(async ({request, currentRequest}) => {\n    const onChange = (e: any) => {\n        if (request.accepting || request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n        }\n\n        if (request.cancelled) {\n            request.off(\"change\", onChange)\n            cancelVerificationEvent(request)\n        } else if (request.phase === Phase.Done) {\n            request.off(\"change\", onChange)\n            setMyDeviceVerifiedFx()\n            cancelVerificationEvent(request)\n        }\n        if (\n            request.phase === Phase.Started \n            && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n        }\n    }\n    request.on(\"change\", onChange)\n    const phaseArray = [Phase.Cancelled, Phase.Done, Phase.Requested]\n    // Восстановление предыдущего реквеста после обновления приложения\n    if (!currentRequest && !phaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n    // При запуски приложения, если девайс не верифицирован, то отправляется запрос на верификацию и мы сразу его принимаем\n    if (request.isSelfVerification) {\n        request.accept()\n    }\n    return request\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", () => {\n        updateVerificationPhase()\n    })\n    verifier.once(\"cancel\", () => cancelVerificationEvent(request))\n\n    try {\n        await verifier.verify()\n    } catch (e) {\n        cancelVerificationEvent(request)\n    }\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    try {\n        await (currentRequest.verifier as any).sasEvent.confirm()\n    } finally {\n        updateVerificationPhase()\n    }\n})\n\ncheckDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    cl.downloadKeys([userId])\n    const device = cl.getStoredDevice(  \n        userId, deviceId\n    )\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\n    const isVerified = crossSigningInfo.checkDeviceTrust(\n        crossSigningInfo,\n        device,\n        false,\n        true,\n    ).isCrossSigningVerified()\n\n    updateDeviceVerification(isVerified)\n})\n\nstartMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = uid()\n    onVerificationRequest(request)\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","verificationDomain","setDeviceVerifiedFx","cancelVerificationEventFx","setMyDeviceVerifiedFx","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","checkDeviceVerificationFx","$deviceIsVerifired","startMyDeviceVerificationFx","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","uid","Date","now","toString","Math","random","substring","cryptoDomain","checkBackupKeyFx","initCryptoFx","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","e","args","console","log","request","id","userIds","initialFetch","getStoredDevicesForUser","deviceId","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","_client$getRoom$curre","_client$getRoom$curre2","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_client$getRoom$curre3","_client$getRoom$curre4","_context7","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","getKeyBackupEnabled","initCrypto","setCryptoTrustCrossSignedDevices","startSASFx","confirmSASVerificationFx","cancelVerificationEvent","updateVerificationPhase","updateDeviceVerification","onVerificationRequestFx","isVerified","requests","req","currentReq","canceledReq","currentRequest","getDeviceId","setDeviceKnown","setDeviceVerified","onChange","accepting","phase","Ready","cancelled","off","Done","Started","verifier","sasEvent","phaseArray","Cancelled","Requested","isSelfVerification","accept","beginKeyVerification","once","verify","cancel","confirm","downloadKeys","device","getStoredDevice","crossSigningInfo","getStoredCrossSigningForUser","checkDeviceTrust","isCrossSigningVerified","requestVerification"],"mappings":"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"}
>>>>>>> 228796a (add request verifie flow)
=======
{"version":3,"file":"index.js","sources":["../src/root.ts","../src/types/content.ts","../src/types/index.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/verification/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    EventType,\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport enum Presence {\r\n    online = \"online\",\r\n    offline = \"offline\", \r\n    unavailable = \"unavailable\",\r\n} \r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    isVerified: boolean\r\n    presence: Presence\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n    seen?: boolean\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n    powerlevels: RoomPowerLevelsContent\r\n    myPowerLevel: number\r\n    canKick: boolean\r\n    canBan: boolean\r\n    canInvite: boolean\r\n    canSendEvents: {\r\n        canChangeRoomAvatar: boolean\r\n        canChangeHistoryVisivility: boolean\r\n        canChangeRoomName: boolean\r\n        canChangeRoomPowerLevels: boolean\r\n        canChangeCanonicalAlias: boolean\r\n        canChangeRoomEncryption: boolean\r\n        canChangeRoomTobstone: boolean\r\n        canChangeRoomServerAcl: boolean\r\n    }\r\n    canRedact: boolean\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n\r\ntype EventPowerLevels = {\r\n    [EventType.RoomCanonicalAlias]: number\r\n    [EventType.RoomAvatar]: number\r\n    [EventType.RoomEncryption]: number\r\n    [EventType.RoomHistoryVisibility]: number\r\n    [EventType.RoomName]: number\r\n    [EventType.RoomPowerLevels]: number\r\n    [EventType.RoomServerAcl]: number\r\n    [EventType.RoomTombstone]: number\r\n}\r\n\r\nexport type RoomPowerLevelsContent = {\r\n    ban: number\r\n    events: EventPowerLevels\r\n    users: {\r\n        [key in string]: number \r\n    }\r\n    redact: number\r\n    kick: number\r\n    invite: number\r\n    state_default: number\r\n    users_default: number\r\n    events_default: number\r\n}\r\n\r\nexport enum UserRole {\r\n    admin = \"Admin\",\r\n    moderator = \"Moderator\"\r\n}\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams,\r\n    CreateClientParams, \r\n    AuthData \r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message,\r\n    UserRole\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n  role?: UserRole\r\n  allDeviceVerified: boolean\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    \"public\" = \"public\",\r\n    \"private\" = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type InviteUsersParams = {\r\n    roomId: string\r\n    usersIds: string[]\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n\r\nexport type SendTypingParams = {\r\n    roomId: string\r\n    isTyping: boolean\r\n  }\r\n\r\nexport type MyDeviceInfo =  {\r\n    verified: boolean\r\n    deviceId: string\r\n    displayName: string | null\r\n}\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    RoomMember,\r\n    User\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixMembershipType,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams,\r\n    LoadRoomFxParams,\r\n    MessageResponse,\r\n    SendTypingParams,\r\n    InviteUsersParams,\r\n    MyDeviceInfo,\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $typingMembers = roomDomain\r\n    .store<{[key in string]: RoomMember[]}>({})\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.join) ?? []\r\n    )\r\nexport const $currentRoomInvitedMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.invite\r\n        ) ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const clearTypingMember = roomDomain.event<void>()\r\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const findDirectRoomByUserIdFx = roomDomain\r\n    .effect<string, MappedRoom, Error>()\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const sendTypingFx = roomDomain\r\n    .effect<SendTypingParams, void, Error>()\r\nexport const getMembersByRoomIdFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const getRoomMemberFx = roomDomain\r\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\r\n\r\nexport const getUserDevicesFx = roomDomain\r\n    .effect<string, MyDeviceInfo[], Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        // clientStore.clearStores()\r\n        clientStore = null as any\r\n    }\r\n}\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","import { \n    IVerificationChannel \n} from \"matrix-js-sdk/lib/crypto/verification/request/Channel\"\nimport {\n    VerificationRequest \n} from \"matrix-js-sdk/lib/crypto/verification/request/VerificationRequest\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: string\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview,\r\n    PaginateParams,\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\nexport const $currentRoomUnreadMessageCount = messagesDomain\r\n    .store<number | null>(null)\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\r\nexport const onPaginateForwardDone = messagesDomain.event<void>()\r\nexport const paginateForward = messagesDomain.event<PaginateParams>()\r\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\r\n\r\nexport const $paginateForwardPending = messagesDomain.store(false)\r\nexport const $paginateBackwardPending = messagesDomain.store(false)\r\nexport const $canPaginateBackward = messagesDomain.store(true)\r\nexport const $canPaginateForward = messagesDomain.store(true)\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const d = root.domain(\"profile\")\r\n","import { d } from \"./domain\"\r\n\r\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\r\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\r\n\r\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    StartVerificationDeviceParams, \n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\n\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkMyDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startMyDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\nexport const CantInviteUsers = \r\n  createCustomError(\"CantInviteUsers\")\r\nexport const NotEnoughPermissions = \r\n  createCustomError(\"NotEnoughPermissions\")\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room,\r\n    EventType\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { StateEventsContent } from \"./app/types\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType,\r\n    RoomPowerLevelsContent,\r\n    UserRole\r\n} from \"./types\"\r\n\r\nexport const toMessageSeen = (\r\n    message: Message,\r\n    myUserId: string,\r\n    room: Room\r\n): Message => {\r\n    message.seen = room.getJoinedMembers().some((member) => {\r\n        if (member.userId === myUserId) return false\r\n        return room\r\n            .hasUserReadEvent(member.userId, message.originalEventId)\r\n    })\r\n    return message\r\n}\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = (): string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId() as string,\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => {\r\n    const cl = client()\r\n    return {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n        isVerified: cl.checkUserTrust(user.userId).isVerified(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    const cl = client()\r\n    const isMe = cl.getUserId() === user.userId\r\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\r\n    const allDeviceVerified = cl.getStoredDevicesForUser(user.userId)\r\n        .some((device) => {\r\n            let verified: boolean\r\n            if (isMe) {\r\n                verified = crossSigningInfo.checkDeviceTrust(\r\n                    crossSigningInfo,\r\n                    device,\r\n                    false,\r\n                    true,\r\n                ).isCrossSigningVerified()\r\n            } else {\r\n                verified = device.isVerified()\r\n            }\r\n            return verified\r\n        })\r\n    let role = undefined\r\n    if (roomMember.powerLevel === 100) {\r\n        role = UserRole.admin\r\n    } else if (roomMember.powerLevel === 50) {\r\n        role = UserRole.moderator\r\n    }\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n        role,\r\n        allDeviceVerified,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    const powerLevelsContent = matrixRoom.currentState\r\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\r\n        .getContent<RoomPowerLevelsContent>()\r\n\r\n    const isDirect = Boolean(matrixRoom.currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate, \r\n            \"\"\r\n        )?.getContent<StateEventsContent>()?.isDirect)\r\n\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n\r\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\r\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\r\n    const myUserId = cl.getUserId()\r\n\r\n    if (lastMessage) {\r\n        if (lastMessage.sender.userId !== myUserId) {\r\n            lastMessage.seen = matrixRoom\r\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \r\n        } else {\r\n            lastMessage = toMessageSeen(\r\n                lastMessage,\r\n                myUserId,\r\n                matrixRoom\r\n            )\r\n        }\r\n    }\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \r\n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\r\n        powerlevels: powerLevelsContent,\r\n        myPowerLevel,\r\n        canBan: myPowerLevel >= powerLevelsContent.ban,\r\n        canKick: myPowerLevel >= powerLevelsContent.kick,\r\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\r\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\r\n        canSendEvents: {\r\n            canChangeHistoryVisivility: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomHistoryVisibility]\r\n            ),\r\n            canChangeRoomAvatar: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\r\n            ),\r\n            canChangeRoomName: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\r\n            ),\r\n            canChangeRoomPowerLevels: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomPowerLevels]\r\n            ),\r\n            canChangeCanonicalAlias: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomCanonicalAlias]\r\n            ),\r\n            canChangeRoomEncryption: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomEncryption]\r\n            ),\r\n            canChangeRoomServerAcl: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomServerAcl]\r\n            ),\r\n            canChangeRoomTobstone: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomTombstone]\r\n            )\r\n        }\r\n    }\r\n}\r\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client } from \"./matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport {\r\n    mergeMessageEvents,\r\n    toMessageSeen\r\n} from \"./mappers\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams,\r\n    Message,\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\r\n    const messages = timelineWindow.getEvents()\r\n        .filter((event) => (\r\n            [\r\n                ROOM_MESSAGE_EVENT,\r\n                ROOM_REDACTION_EVENT\r\n            ].includes(event.getType())))\r\n        .reduce(mergeMessageEvents, [])\r\n    const cl = client()\r\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\r\n    const room = cl.getRoom(roomId as string)\r\n    if (!room) throw new RoomNotFound()\r\n    const myMessages = []\r\n    const otherMessages = []\r\n    const myUserId = cl.getUserId()\r\n    let findFirstSeenOtherMessage = false\r\n    let findFirstSeenMyMessage = false\r\n    for (let i = messages.length - 1; i >= 0; i--) {\r\n        if (messages[i].sender.userId === myUserId) {\r\n            myMessages.push(messages[i])\r\n        } else {\r\n            otherMessages.push(messages[i])\r\n        }\r\n    }\r\n    myMessages.forEach((message) => {\r\n        if (findFirstSeenMyMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message = toMessageSeen(message, myUserId, room)\r\n            findFirstSeenMyMessage = Boolean(message.seen)\r\n        }\r\n    })\r\n    otherMessages.forEach((message) => {\r\n        if (findFirstSeenOtherMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message.seen = room\r\n                .hasUserReadEvent(myUserId, message.originalEventId)\r\n            findFirstSeenOtherMessage = message.seen\r\n        }\r\n    })\r\n    return messages\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (\r\n    roomId: string,\r\n    companion?: string\r\n): Promise<{}> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        ).getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n\r\n    if(companion) {\r\n        return await cl.setAccountData(DIRECT_EVENT, {\r\n            ...prevData,\r\n            [companion]: [roomId]\r\n        })\r\n        \r\n    }\r\n    return await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n\r\nexport const uid = (): string => ( \r\n    `id${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`\r\n)\r\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    EventType,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    toggleTypingUser\r\n} from \"@/room\"\r\nimport { \r\n    initCryptoFx, \r\n} from \"@/crypto\"\r\nimport {\r\n    onVerificationRequest, \r\n    MyVerificationRequest,\r\n    onUpdateDeviceList,\r\n} from \"@/verification\"\r\nimport { UserNotFound } from \"@/errors\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\nimport { uid } from \"@/utils\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {            \r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = Boolean(room.currentState\r\n            .getStateEvents(\r\n                EventType.RoomCreate,\r\n                \"\"\r\n            )?.getContent<StateEventsContent>()?.isDirect)\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", async (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            await client().uploadKeys()\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            updateMessages()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => {\r\n            onRoomMemberUpdate(member)\r\n            toggleTypingUser(member)\r\n        }\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"crossSigning.keysChanged\",\r\n        (...args) => console.log(\"crossSigning.keysChanged\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequest\",\r\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequestCancellation\",\r\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\r\n    ],\r\n    [\r\n        \"crypto.secrets.requestCancelled\",\r\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\r\n    ],\r\n    [\r\n        \"crypto.suggestKeyRestore\",\r\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request.unknown\",\r\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request\", (\r\n            request: MyVerificationRequest\r\n        ) => {\r\n            request.id = uid()\r\n            onVerificationRequest(request)\r\n        }\r\n    ],\r\n    [\r\n        \"crypto.warning\",\r\n        (...args) => console.warn(\"crypto.warning\", args)\r\n    ],\r\n    [\r\n        \"crypto.keyBackupStatus\",\r\n        (enabled) => console.log(\"keyBackupStatus\", enabled)\r\n    ],\r\n    [\r\n        \"crypto.willUpdateDevices\",\r\n        (userIds: string[], initialFetch?: boolean) => {\r\n            // If we didn't know about *any* devices before (ie. it's fresh login),\r\n            // then they are all pre-existing devices, so ignore this and set the\r\n            // devicesAtStart list to the devices that we see after the fetch.\r\n            if (initialFetch) return\r\n            onUpdateDeviceList(userIds)\r\n        }\r\n    ],\r\n    [\"crypto.devicesUpdated\", onUpdateDeviceList],\r\n    [\"deviceVerificationChanged\", onUpdateDeviceList],\r\n    [\"userTrustStatusChanged\", onUpdateDeviceList]\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    } = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const cl = client()\r\n    const { store } = cl\r\n    if (store) await store.startup()\r\n    await initCryptoFx()\r\n    await cl.startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { client } from \"../matrix-client\"\r\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\r\n\r\nupdateDisplayNameFx.use(async (newDisplayName) => {\r\n    await client().setDisplayName(newDisplayName)\r\n})\r\n\r\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\r\n    await client().setAvatarUrl(newAvatarUrl)\r\n})\r\n\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    EventType,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\n\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { DIRECT_EVENT } from \"@/constants\"\r\nimport { \r\n    CantInviteUsers,\r\n    ClientNotInitialized,\r\n    NotEnoughPermissions,\r\n    RoomNotFound, \r\n    TimelineWindowUndefined,\r\n    UserNotFound \r\n} from \"@/errors\"\r\nimport { getMessages, setDirectRoom } from \"@/utils\"\r\nimport { onUpdateDeviceList } from \"@/verification\"\r\n\r\nimport {\r\n    initRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx,\r\n    $loadFilter,\r\n    loadRoomFx,\r\n    findDirectRoomByUserIdFx,\r\n    $typingMembers,\r\n    clearTypingMember,\r\n    toggleTypingUser,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    sendTypingFx,\r\n    getMembersByRoomIdFx,\r\n    inviteUsersFx,\r\n    getRoomMemberFx,\r\n    getUserDevicesFx,\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\n\r\nconst TYPING_SERVER_TIMEOUT = 5000\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst getRoomMembersFx = attach({\r\n    effect: getMembersByRoomIdFx\r\n})\r\n\r\nconst getCurrentRoomFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n$typingMembers\r\n    .on(toggleTypingUser, (members, member) => {\r\n        if(member.typing) {\r\n            if (members[member.roomId]) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...members[member.roomId], member] \r\n                }\r\n            } \r\n            return {\r\n                ...members,\r\n                [member.roomId]: [member] \r\n            }\r\n        } \r\n        if (members[member.roomId]) {\r\n            if (members[member.roomId].length > 1) {\r\n                const filteredUsers = members[member.roomId]\r\n                    .filter(({userId}) => userId !== member.userId)\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...filteredUsers] \r\n                }\r\n            }\r\n            delete members[member.roomId]\r\n            return {\r\n                ...members, \r\n            }\r\n        }\r\n    })\r\n    .reset(clearTypingMember)\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getCurrentRoomFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetMembersByRoomIdFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return room.getMembers()\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n        const room = client().getRoom(roomId)\r\n        if (!room) throw new RoomNotFound()\r\n        const membersCache: { [id: string]: RoomMember } = {}\r\n        const searchResponse = await client().search({\r\n            body: {\r\n                search_categories: {\r\n                    room_events: {\r\n                        search_term: term,\r\n                        keys: [\"content.body\"],\r\n                        filter: {\r\n                            rooms: [roomId],\r\n                        },\r\n                        order_by: orderBy,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n        return searchResponse\r\n            .search_categories\r\n            .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n                const event = new MatrixEvent(result)\r\n                const senderId = event.getSender()\r\n                if (membersCache[senderId] === undefined) {\r\n                    membersCache[senderId] = room\r\n                        .getMember(senderId) as RoomMember\r\n                }\r\n                event.sender = membersCache[senderId]\r\n                return toMessage(event)\r\n            })\r\n    })\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id, user.userId)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    try {\r\n        await client().invite(roomId, userId)\r\n        await client().sendSharedHistoryKeys(roomId, [userId])\r\n    } catch (e: any) {\r\n        if (e.httpStatus === 403) {\r\n            throw new NotEnoughPermissions(\r\n                \"Not enough permissions to invite users\"\r\n            )\r\n        }\r\n    }\r\n})\r\n\r\ninviteUsersFx.use( async ({usersIds, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    for (const id of usersIds) {\r\n        try {\r\n            await client().invite(roomId, id)\r\n            await client().sendSharedHistoryKeys(roomId, [id])\r\n        } catch (e: any) {\r\n            if (e.httpStatus === 403) {\r\n                throw new NotEnoughPermissions()\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n\r\nfindDirectRoomByUserIdFx.use((userId) => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\r\n    const roomId = directRooms[userId] && directRooms[userId][0]\r\n    if(!roomId) throw new RoomNotFound()\r\n    const room = cl.getRoom(roomId)\r\n    if(!room) throw new RoomNotFound()\r\n    return toMappedRoom(room)\r\n})\r\n\r\nsendTypingFx.use(async ({ roomId, isTyping }) => {\r\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\r\n})\r\n\r\ngetRoomMemberFx.use(({ roomId, userId }) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\r\n    const roomMember = matrixRoom?.getMember(userId)\r\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\r\n    return roomMember\r\n})\r\n\r\ngetUserDevicesFx.use((id) => {\r\n    const cl = client()\r\n    const isMe = cl.getUserId() === id\r\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\r\n    return cl.getStoredDevicesForUser(id).map((device) => {\r\n        let verified: boolean\r\n        if (isMe) {\r\n            verified = crossSigningInfo.checkDeviceTrust(\r\n                crossSigningInfo,\r\n                device,\r\n                false,\r\n                true,\r\n            ).isCrossSigningVerified()\r\n        } else {\r\n            verified = device.isVerified()\r\n        }\r\n        return {\r\n            deviceId: device.deviceId,\r\n            displayName: device.getDisplayName(),\r\n            verified,\r\n        }\r\n    })\r\n\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach, guard, sample} from \"effector\"\r\nimport {\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    loadRoomFx,\r\n    MessageResponse\r\n} from \"@/room\"\r\nimport {\r\n    UpdateMessagesFxParams,\r\n    PaginateParams,\r\n    PaginateRoomFxParams\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const paginateRoomFx = messagesDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n\r\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\r\n    .effect<string, number, Error>()\r\n","import {\r\n    attach,\r\n    combine,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport matrix, {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    debounce,\r\n    throttle\r\n} from \"patronum\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $loadFilter,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx,\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx,\r\n    updateCurrentRoomUnreadMessageCountFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    updateMessages,\r\n    $currentRoomUnreadMessageCount,\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst THROTTLE_MESSAGE_TIME = 800\r\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n\r\n$currentRoomUnreadMessageCount\r\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\r\n    .reset($currentRoomId)\r\n\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n          && !backwardPaginationPending\r\n          && !forwardPaginationPending\r\n          && !roomLoading\r\n)\r\n    \r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n    \r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n    \r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n    \r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\n\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        throttle({\r\n            source: updateMessages,\r\n            timeout: THROTTLE_MESSAGE_TIME\r\n        }),\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nguard({\r\n    clock: $messages.updates,\r\n    source: $currentRoomId,\r\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\r\n    target: updateCurrentRoomUnreadMessageCountFx\r\n})\r\n\r\nsample({\r\n    clock: debounce({\r\n        source: sendMessageFx.done,\r\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\r\n    }),\r\n    fn: ({ params, result }) => ({\r\n        roomId: params.roomId,\r\n        eventId: result.event_id\r\n    }),\r\n    target: readAllMessagesFx\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n    await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n    \r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\n\r\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const count = matrixRoom.getUnreadNotificationCount()\r\n    return count ?? 0\r\n})\r\n","import { client } from \"@/matrix-client\"\nimport { checkMyDeviceVerificationFx } from \"@/verification\"\nimport { \n    checkBackupKeyFx, \n    initCryptoFx, \n} from \"./public\"\n\ncheckBackupKeyFx.use(async () => client().getKeyBackupEnabled())\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) return\n    await cl.initCrypto()\n    // @TODO Убрать хардкод. Настройка ручной верификации каждой сессии\n    cl.setCryptoTrustCrossSignedDevices(false)\n    // const backupInfo = await cl.getKeyBackupVersion()\n    // if (backupInfo) {\n    // don't await, because this can take a long times\n    // cl.restoreKeyBackupWithSecretStorage(backupInfo).then(console.log)\n    // }\n    checkMyDeviceVerificationFx()\n})\n\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams \n} from \"./types\"\n\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\n","import { forward, sample, guard } from \"effector\"\nimport { client } from \"@/matrix-client\"\n\nimport { uid } from \"@/utils\"\n\nimport { \n    updateVerificationPhase, \n    onCancelVerificationEvent,\n    confirmSASVerificationFx, \n    onVerificationRequestFx, \n    startSASFx, \n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n} from \"./private\"\nimport { \n    $currentVerificationEvent, \n    $deviceIsVerified, \n    $verificationEvents, \n    cancelVerificationEventFx,\n    checkMyDeviceVerificationFx,\n    confirmSASVerification,\n    startMyDeviceVerificationFx,\n    onVerificationRequest, \n    setCurrentVerificationEvent, \n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel, \n} from \"./public\"\nimport { MyVerificationRequest, Phase } from \"./types\"\n\n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => [\n        ...requests, req\n    ]))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n// @TODO When copying an object, access to private properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n\nforward({\n    from: checkMyDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkMyDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx \n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData, \n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(async ({request, currentRequest}) => {\n    const onChange = (e: any) => {\n        if (request.accepting || request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n        }\n\n        if (request.cancelled) {\n            request.off(\"change\", onChange)\n            onCancelVerificationEvent(request)\n        }\n        if (request.phase === Phase.Done) {\n            request.off(\"change\", onChange)\n            onCancelVerificationEvent(request)\n        }\n        if (\n            request.phase === Phase.Started \n            && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n        }\n    }\n    request.on(\"change\", onChange)\n    request.on(\"error\", console.error)\n    const phaseArray = [Phase.Cancelled, Phase.Done, Phase.Requested]\n    // Восстановление предыдущего реквеста после обновления приложения\n    if (!currentRequest && !phaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n    // При запуски приложения, если девайс не верифицирован, то отправляется запрос на верификацию и мы сразу его принимаем\n    if (request.isSelfVerification) {\n        request.accept()\n    }\n    return request\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", () => {\n        updateVerificationPhase()\n    })\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n\n    try {\n        await verifier.verify()\n    } catch (e) {\n        onCancelVerificationEvent(request)\n    }\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    try {\n        await (currentRequest.verifier as any).sasEvent.confirm()\n    } finally {\n        updateVerificationPhase()\n    }\n})\n\ncheckMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    cl.downloadKeys([userId])\n    const device = cl.getStoredDevice(  \n        userId, deviceId\n    )\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\n    const isVerified = crossSigningInfo.checkDeviceTrust(\n        crossSigningInfo,\n        device,\n        false,\n        true,\n    ).isCrossSigningVerified()\n\n    return isVerified\n})\n\nstartMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = uid()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({userId, deviceId}) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","verificationDomain","$currentVerificationEvent","setCurrentVerificationEvent","cancelVerificationEventFx","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","$deviceIsVerified","onUpdateDeviceList","checkMyDeviceVerificationFx","startVerificationDevice","startMyDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","cl","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","isVerified","checkUserTrust","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","uid","Date","now","toString","Math","random","substring","cryptoDomain","checkBackupKeyFx","initCryptoFx","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","e","args","console","log","request","id","warn","enabled","userIds","initialFetch","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","error","rules","global","setPushRuleEnabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","isMe","crossSigningInfo","getStoredCrossSigningForUser","allDeviceVerified","getStoredDevicesForUser","device","checkDeviceTrust","isCrossSigningVerified","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","_client$getRoom$curre","_client$getRoom$curre2","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_client$getRoom$curre3","_client$getRoom$curre4","_context7","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","getKeyBackupEnabled","initCrypto","setCryptoTrustCrossSignedDevices","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","updateDeviceVerification","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","requests","req","currentReq","canceledReq","currentRequest","onChange","accepting","phase","Ready","cancelled","off","Done","Started","verifier","sasEvent","phaseArray","Cancelled","Requested","isSelfVerification","accept","beginKeyVerification","once","verify","cancel","confirm","getDeviceId","downloadKeys","getStoredDevice","requestVerification"],"mappings":"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"}
>>>>>>> d906366 (WIP)
=======
{"version":3,"file":"index.js","sources":["../src/root.ts","../src/types/content.ts","../src/types/index.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/verification/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/idbHelper.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/crypto/cryptoCallbacks.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getUserDevicesFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        // clientStore.clearStores()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { VerificationRequest, IVerificationChannel } from \"matrix-js-sdk\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: string\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    StartVerificationDeviceParams, \n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\n\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkMyDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startMyDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n\nexport const uid = (): string => ( \n    `id${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`\n)\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n","import { \n    decodeRecoveryKey, \n    deriveKey, \n    DeviceTrustLevel, \n    encodeBase64, \n    encodeUnpaddedBase64, \n    ICryptoCallbacks, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\n\nconst secretStorageBeingAccessed = false\nconst secretStorageKeys: Record<string, Uint8Array> = {}\nconst secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    if (isCachingAllowed()) {\n        secretStorageKeys[keyId] = key\n        secretStorageKeyInfo[keyId] = keyInfo\n    }\n}\n\nfunction makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (\n  keyParams: { passphrase: string; recoveryKey: string }\n) => Promise<Uint8Array> {\n    return async ({ passphrase, recoveryKey }) => {\n        if (passphrase) {\n            return deriveKey(\n                passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else {\n            return decodeRecoveryKey(recoveryKey)\n        }\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cli = client()\n    let keyId = await cli.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if(!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    }\n    console.log(\"keyid\", keyInfos[keyId])\n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        if(keyInfoEntries[0]) {\n            keyId = keyInfoEntries[0][0]\n            keyInfo = keyInfoEntries[0][1]\n        }\n    }\n\n    // Check the in-memory cache\n    if (isCachingAllowed() && secretStorageKeys[keyId]) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (\n            await client().checkSecretStorageKey(dehydrationCache.key, keyInfo)\n        ) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n\n    const recoveryKey = await client().createRecoveryKeyFromPassphrase(\"----\")\n    const key = await inputToKey(\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        {passphrase: \"\", recoveryKey: recoveryKey?.keyInfo?.pubkey}\n    )\n    // console.log(recoveryKey);\n    // const key = recoveryKey.keyInfo?.key;\n\n    console.log(\"GOT IT\", key, keyId)\n    // Save to cache to avoid future prompts in the current session\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    if(keyId && key) {\n        return [keyId, key]\n    }\n        \n    return [\"\", new Uint8Array()]\n    \n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\"})\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if(key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey = \n  async (userId: string, deviceId: string): Promise<string | null> => {\n      if (!window.crypto || !window.crypto.subtle) {\n          return null\n      }\n      let data\n      try {\n          data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n      } catch (e) {\n          console.log(\"idbLoad for pickleKey failed\", e)\n      }\n      if (!data) {\n          return null\n      }\n      if (!data.encrypted || !data.iv || !data.cryptoKey) {\n          console.log(\"Badly formatted pickle key\")\n          return null\n      }\n\n      const additionalData = new Uint8Array(userId.length + deviceId.length + 1)\n      for (let i = 0; i < userId.length; i++) {\n          additionalData[i] = userId.charCodeAt(i)\n      }\n      additionalData[userId.length] = 124 // \"|\"\n      for (let i = 0; i < deviceId.length; i++) {\n          additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n      }\n\n      try {\n          const key = await crypto.subtle.decrypt(\n              { name: \"AES-GCM\", iv: data.iv, additionalData }, data.cryptoKey,\n              data.encrypted,\n          )\n          return encodeUnpaddedBase64(key)\n      } catch (e) {\n          console.log(\"Error decrypting pickle key\")\n          return null\n      }\n  }\n\nexport const CreatePickleKey = \n  async (userId: string, deviceId: string): Promise<string | null> => {\n      if (!window.crypto || !window.crypto.subtle) {\n          return null\n      }\n      const crypto = window.crypto\n      const randomArray = new Uint8Array(32)\n      crypto.getRandomValues(randomArray)\n      const cryptoKey = await crypto.subtle.generateKey(\n          { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n      )\n      const iv = new Uint8Array(32)\n      crypto.getRandomValues(iv)\n\n      const additionalData = new Uint8Array(userId.length + deviceId.length + 1)\n      for (let i = 0; i < userId.length; i++) {\n          additionalData[i] = userId.charCodeAt(i)\n      }\n      additionalData[userId.length] = 124 // \"|\"\n      for (let i = 0; i < deviceId.length; i++) {\n          additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n      }\n\n      const encrypted = await crypto.subtle.encrypt(\n          { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n      )\n\n      try {\n          await IdbSave(\n              \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n          )\n      } catch (e) {\n          return null\n      }\n      return encodeUnpaddedBase64(randomArray)\n  }\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport { \n    checkBackupKeyFx,\n    initCryptoFx, onCrossSigningKeyChange, \n} from \"@/crypto\"\nimport {\n    onVerificationRequest, \n    MyVerificationRequest,\n    onUpdateDeviceList,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { uid } from \"@/utils\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {            \n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            request.id = uid()\n            onVerificationRequest(request)\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", onUpdateDeviceList],\n    [\"deviceVerificationChanged\", onUpdateDeviceList],\n    [\"userTrustStatusChanged\", onUpdateDeviceList]\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getUserDevicesFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    const isDirect = room?.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    const isDirect = room?.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetUserDevicesFx.use(async (userId) => {\n    const cl = client()\n    // await cl.downloadKeys([userId], true)\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n","import { client } from \"@/matrix-client\"\nimport { checkMyDeviceVerificationFx } from \"@/verification\"\nimport { forward } from \"effector\"\nimport { crossSigningChangeFx } from \"./private\"\nimport { \n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    onCrossSigningKeyChange, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncheckBackupKeyFx.use(async () => client().getKeyBackupEnabled())\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n    if (!cl.initCrypto) return\n\n    await cl.initCrypto()\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n    const backupInfo = await cl.getKeyBackupVersion()\n    if (backupInfo) {\n    // don't await, because this can take a long times\n        cl.restoreKeyBackupWithSecretStorage(backupInfo).then(console.log)\n    }\n    checkMyDeviceVerificationFx()\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n    checkMyDeviceVerificationFx()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams \n} from \"./types\"\n\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n","import { forward, sample, guard, attach } from \"effector\"\nimport { client } from \"@/matrix-client\"\nimport { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport { MappedUser } from \"@/types\"\nimport { uid } from \"@/utils\"\nimport { createDirectRoomFx } from \"@/room\"\n\nimport { \n    updateVerificationPhase, \n    onCancelVerificationEvent,\n    confirmSASVerificationFx, \n    onVerificationRequestFx, \n    startSASFx, \n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n} from \"./private\"\nimport { \n    $currentVerificationEvent, \n    $deviceIsVerified, \n    $verificationEvents, \n    cancelVerificationEventFx,\n    checkMyDeviceVerificationFx,\n    confirmSASVerification,\n    startMyDeviceVerificationFx,\n    onVerificationRequest, \n    setCurrentVerificationEvent, \n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests, \n} from \"./public\"\nimport { MyVerificationRequest, Phase } from \"./types\"\n\nconst TEN_MINUTES = 36000\n\n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n// @TODO When copying an object, access to private properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n\nforward({\n    from: checkMyDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkMyDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx \n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData, \n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(async ({request, currentRequest}) => {\n    const onChange = () => {\n        console.log(\"request UPDATE\")\n        if (request.accepting || request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n        }\n\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n        }\n\n        if (\n            request.phase === Phase.Started \n            && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const phaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested, \n        Phase.Started\n    ]\n    if (!currentRequest && !phaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        // if (\n        //     request.phase === Phase.Started \n        //   && !(request.verifier as any).sasEvent\n        // ) {\n        //     await startSASFx(request)\n        // }\n    }\n\n    return request\n})\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    try {\n        await (currentRequest.verifier as any).sasEvent.confirm()\n    } finally {\n        updateVerificationPhase()\n    }\n})\n\ncheckMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = uid()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({userId, deviceId}) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","verificationDomain","$currentVerificationEvent","setCurrentVerificationEvent","cancelVerificationEventFx","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","$deviceIsVerified","onUpdateDeviceList","checkMyDeviceVerificationFx","startVerificationDevice","startMyDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","cl","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","isVerified","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","indexedDB","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","uid","Date","now","toString","Math","random","substring","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","dehydrationCache","cacheSecretStorageKey","keyId","keyInfo","makeInputToKey","passphrase","recoveryKey","deriveKey","salt","iterations","decodeRecoveryKey","keyInfos","keys","cli","getDefaultSecretStorageKeyId","Uint8Array","console","log","keyInfoEntries","Object","entries","checkSecretStorageKey","inputToKey","createRecoveryKeyFromPassphrase","_recoveryKey$keyInfo","pubkey","getDehydrationKey","deviceId","requestId","deviceTrust","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","crypto","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","args","id","warn","userIds","initialFetch","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeys","leave","_cl$getAccountData","isTyping","sendTyping","isMe","getStoredDevicesForUser","device","checkDeviceTrust","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","crossSigningChangeFx","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","updateDeviceVerification","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","requests","req","currentReq","canceledReq","currentRequest","onChange","accepting","phase","Ready","cancelled","off","VerificationRequestEvent","Change","cancellationCode","Done","Started","verifier","sasEvent","phaseArray","Cancelled","Requested","accept","beginKeyVerification","once","verify","cancel","confirm","getDeviceId","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM"],"mappings":"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"}
>>>>>>> 021d9ae (WIP)
=======
{"version":3,"file":"index.js","sources":["../src/root.ts","../src/types/content.ts","../src/types/index.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/verification/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/idbHelper.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/crypto/cryptoCallbacks.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getUserDevicesFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        // clientStore.clearStores()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { VerificationRequest, IVerificationChannel } from \"matrix-js-sdk\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: string\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    StartVerificationDeviceParams, \n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\n\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkMyDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startMyDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n\nexport const uid = (): string => ( \n    `id${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`\n)\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n","import { \n    decodeRecoveryKey, \n    deriveKey, \n    DeviceTrustLevel, \n    encodeBase64, \n    encodeUnpaddedBase64, \n    ICryptoCallbacks, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\n\nconst secretStorageBeingAccessed = false\nconst secretStorageKeys: Record<string, Uint8Array> = {}\nconst secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    if (isCachingAllowed()) {\n        secretStorageKeys[keyId] = key\n        secretStorageKeyInfo[keyId] = keyInfo\n    }\n}\n\nfunction makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (\n  keyParams: { passphrase: string; recoveryKey: string }\n) => Promise<Uint8Array> {\n    return async ({ passphrase, recoveryKey }) => {\n        if (passphrase) {\n            return deriveKey(\n                passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else {\n            return decodeRecoveryKey(recoveryKey)\n        }\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cli = client()\n    let keyId = await cli.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if(!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    }\n    console.log(\"keyid\", keyInfos[keyId])\n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        if(keyInfoEntries[0]) {\n            keyId = keyInfoEntries[0][0]\n            keyInfo = keyInfoEntries[0][1]\n        }\n    }\n\n    // Check the in-memory cache\n    if (isCachingAllowed() && secretStorageKeys[keyId]) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (\n            await client().checkSecretStorageKey(dehydrationCache.key, keyInfo)\n        ) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n\n    const recoveryKey = await client().createRecoveryKeyFromPassphrase(\"----\")\n    const key = await inputToKey(\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        {passphrase: \"\", recoveryKey: recoveryKey?.keyInfo?.pubkey}\n    )\n    // console.log(recoveryKey);\n    // const key = recoveryKey.keyInfo?.key;\n\n    console.log(\"GOT IT\", key, keyId)\n    // Save to cache to avoid future prompts in the current session\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    if(keyId && key) {\n        return [keyId, key]\n    }\n        \n    return [\"\", new Uint8Array()]\n    \n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\"})\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if(key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey = \n  async (userId: string, deviceId: string): Promise<string | null> => {\n      if (!window.crypto || !window.crypto.subtle) {\n          return null\n      }\n      let data\n      try {\n          data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n      } catch (e) {\n          console.log(\"idbLoad for pickleKey failed\", e)\n      }\n      if (!data) {\n          return null\n      }\n      if (!data.encrypted || !data.iv || !data.cryptoKey) {\n          console.log(\"Badly formatted pickle key\")\n          return null\n      }\n\n      const additionalData = new Uint8Array(userId.length + deviceId.length + 1)\n      for (let i = 0; i < userId.length; i++) {\n          additionalData[i] = userId.charCodeAt(i)\n      }\n      additionalData[userId.length] = 124 // \"|\"\n      for (let i = 0; i < deviceId.length; i++) {\n          additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n      }\n\n      try {\n          const key = await crypto.subtle.decrypt(\n              { name: \"AES-GCM\", iv: data.iv, additionalData }, data.cryptoKey,\n              data.encrypted,\n          )\n          return encodeUnpaddedBase64(key)\n      } catch (e) {\n          console.log(\"Error decrypting pickle key\")\n          return null\n      }\n  }\n\nexport const CreatePickleKey = \n  async (userId: string, deviceId: string): Promise<string | null> => {\n      if (!window.crypto || !window.crypto.subtle) {\n          return null\n      }\n      const crypto = window.crypto\n      const randomArray = new Uint8Array(32)\n      crypto.getRandomValues(randomArray)\n      const cryptoKey = await crypto.subtle.generateKey(\n          { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n      )\n      const iv = new Uint8Array(32)\n      crypto.getRandomValues(iv)\n\n      const additionalData = new Uint8Array(userId.length + deviceId.length + 1)\n      for (let i = 0; i < userId.length; i++) {\n          additionalData[i] = userId.charCodeAt(i)\n      }\n      additionalData[userId.length] = 124 // \"|\"\n      for (let i = 0; i < deviceId.length; i++) {\n          additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n      }\n\n      const encrypted = await crypto.subtle.encrypt(\n          { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n      )\n\n      try {\n          await IdbSave(\n              \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n          )\n      } catch (e) {\n          return null\n      }\n      return encodeUnpaddedBase64(randomArray)\n  }\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport { \n    checkBackupKeyFx,\n    initCryptoFx, onCrossSigningKeyChange, \n} from \"@/crypto\"\nimport {\n    onVerificationRequest, \n    MyVerificationRequest,\n    onUpdateDeviceList,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { uid } from \"@/utils\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {            \n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            request.id = uid()\n            onVerificationRequest(request)\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", onUpdateDeviceList],\n    [\"deviceVerificationChanged\", onUpdateDeviceList],\n    [\"userTrustStatusChanged\", onUpdateDeviceList]\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getUserDevicesFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    const isDirect = room?.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    const isDirect = room?.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetUserDevicesFx.use(async (userId) => {\n    const cl = client()\n    // await cl.downloadKeys([userId], true)\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n","import { client } from \"@/matrix-client\"\nimport { checkMyDeviceVerificationFx } from \"@/verification\"\nimport { forward } from \"effector\"\nimport { crossSigningChangeFx } from \"./private\"\nimport { \n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    onCrossSigningKeyChange, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncheckBackupKeyFx.use(async () => client().getKeyBackupEnabled())\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n    if (!cl.initCrypto) return\n\n    await cl.initCrypto()\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n    const backupInfo = await cl.getKeyBackupVersion()\n    if (backupInfo) {\n    // don't await, because this can take a long times\n        cl.restoreKeyBackupWithSecretStorage(backupInfo).then(console.log)\n    }\n    checkMyDeviceVerificationFx()\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n    checkMyDeviceVerificationFx()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams \n} from \"./types\"\n\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n","import { forward, sample, guard, attach } from \"effector\"\nimport { VerificationRequestEvent } from \"matrix-js-sdk\"\n\nimport { client } from \"@/matrix-client\"\nimport { uid } from \"@/utils\"\nimport { createDirectRoomFx } from \"@/room\"\nimport { MappedUser } from \"@/types\"\n\nimport { \n    updateVerificationPhase, \n    onCancelVerificationEvent,\n    confirmSASVerificationFx, \n    onVerificationRequestFx, \n    startSASFx, \n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n} from \"./private\"\nimport { \n    $currentVerificationEvent, \n    $deviceIsVerified, \n    $verificationEvents, \n    cancelVerificationEventFx,\n    checkMyDeviceVerificationFx,\n    confirmSASVerification,\n    startMyDeviceVerificationFx,\n    onVerificationRequest, \n    setCurrentVerificationEvent, \n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests, \n} from \"./public\"\nimport { MyVerificationRequest, Phase } from \"./types\"\n\nconst TEN_MINUTES = 10 * 60 * 1000\n\n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n// @TODO When copying an object, access to private properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n\nforward({\n    from: checkMyDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkMyDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx \n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData, \n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(async ({request, currentRequest}) => {\n    const onChange = () => {\n        console.log(\"request UPDATE\")\n        if (request.accepting || request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n        }\n\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n        }\n\n        if (\n            request.phase === Phase.Started \n            && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const phaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested\n    ]\n    if (!currentRequest && !phaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n\n    return request\n})\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    console.log(\"MATRIX_EFFECTOR startSASFx\")\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    console.log(\"MATRIX_EFFECTOR confirmSASVerificationFx\")\n    await (currentRequest.verifier as any).sasEvent.confirm()\n})\n\ncheckMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartMyDeviceVerificationFx.use(async () => {\n    console.log(\"MATRIX_EFFECTOR startMyDeviceVerificationFx\")\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = uid()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({userId, deviceId}) => {\n    console.log(\"MATRIX_EFFECTOR startVerificationDeviceFx\")\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    console.log(\"MATRIX_EFFECTOR startVerificationUserFx\", userId)\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","verificationDomain","$currentVerificationEvent","setCurrentVerificationEvent","cancelVerificationEventFx","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","$deviceIsVerified","onUpdateDeviceList","checkMyDeviceVerificationFx","startVerificationDevice","startMyDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","cl","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","isVerified","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","indexedDB","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","uid","Date","now","toString","Math","random","substring","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","dehydrationCache","cacheSecretStorageKey","keyId","keyInfo","makeInputToKey","passphrase","recoveryKey","deriveKey","salt","iterations","decodeRecoveryKey","keyInfos","keys","cli","getDefaultSecretStorageKeyId","Uint8Array","console","log","keyInfoEntries","Object","entries","checkSecretStorageKey","inputToKey","createRecoveryKeyFromPassphrase","_recoveryKey$keyInfo","pubkey","getDehydrationKey","deviceId","requestId","deviceTrust","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","crypto","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","args","id","warn","userIds","initialFetch","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeys","leave","_cl$getAccountData","isTyping","sendTyping","isMe","getStoredDevicesForUser","device","checkDeviceTrust","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","crossSigningChangeFx","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","updateDeviceVerification","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","requests","req","currentReq","canceledReq","currentRequest","onChange","accepting","phase","Ready","cancelled","off","VerificationRequestEvent","Change","cancellationCode","Done","Started","verifier","sasEvent","phaseArray","Cancelled","Requested","accept","beginKeyVerification","once","verify","cancel","confirm","getDeviceId","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM"],"mappings":"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"}
>>>>>>> 5062bcd (WIP)
