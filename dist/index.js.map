{"version":3,"file":"index.js","sources":["../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room/types.ts","../src/room-messages/domain.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/types/content.ts","../src/matrix-client.ts","../src/constants.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/errors.ts","../src/room/init.ts","../src/mappers.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts","../src/utils.ts"],"sourcesContent":["import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport { MappedRoom, MappedUser } from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    LoginPayload,\r\n    StartClientParams\r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, LoginPayload, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams\r\n} from \"./types\"\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\n\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const newDirectRoom = roomDomain.event<Room>()\r\nexport const newRoom = roomDomain.event<Room>()\r\n\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain.effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain.effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain.effect<{roomId: string, isDirect?: boolean}, RoomWithActivity, Error>()\r\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\r\nimport { RoomMember, MappedUser, Message } from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string;\r\n    invite: string[];\r\n    visibility: Visibility;\r\n    initialState?: InitialState[];\r\n    preset?: Preset;\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser;\r\n    initialState?: InitialState[];\r\n    preset?: Preset;\r\n}\r\n\r\nexport enum Visibility {\r\n    public = \"public\",\r\n    private = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object;\r\n    stateKey: string;\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string;\r\n    userId: string\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string;\r\n    userId: string;\r\n    reason?: string;\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string;\r\n    name: string;\r\n}","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","import {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\n\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, void, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, void, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const paginationDomain = root.domain(\"pagination\")\r\n","import { paginationDomain } from \"./domain\"\r\nimport { PaginateParams } from \"./types\"\r\n\r\nexport const $paginateForwardPending = paginationDomain.store(false)\r\nexport const $paginateBackwardPending = paginationDomain.store(false)\r\nexport const $canPaginateBackward = paginationDomain.store(true)\r\nexport const $canPaginateForward = paginationDomain.store(true)\r\n\r\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\r\nexport const paginateForward = paginationDomain.event<PaginateParams>()\r\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport { EventListener } from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet options: Parameters<typeof matrix.createClient>[0]\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\nexport const createClient = (): void => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => {\r\n    if (!clientStore) {\r\n        createClient()\r\n    }\r\n    return clientStore\r\n}\r\nexport const prependClientParams = (\r\n    opts: string | CreateClientOption & {\r\n        messageBatchInterval?: number\r\n    }\r\n): void => {\r\n    if (typeof opts === \"string\") {\r\n        options = opts\r\n        return\r\n    }\r\n    const { messageBatchInterval: ms, ...restOpts} = opts\r\n    options = restOpts\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n}\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"","import { combine } from \"effector\"\r\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    LoadRoomFxParams,\r\n    MappedRoomMember,\r\n    MessageResponse\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport { $currentRoomId, $timelineWindow } from \"./public\"\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomMembersFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach } from \"effector\"\r\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\r\nimport { paginationDomain } from \"./domain\"\r\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\r\n\r\nexport const paginateRoomFx = paginationDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n","import { guard, sample } from \"effector\"\r\nimport { $currentRoomId, MessageResponse } from \"@/room\"\r\nimport { paginateRoomFx } from \"@/room-pagination/private\"\r\nimport { loadRoomFx } from \"@/room/private\"\r\nimport { UpdateMessagesFxParams } from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n","import { forward } from \"effector\"\r\nimport { EventType, User } from \"matrix-js-sdk\"\r\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\r\nimport { client, onClientEvent } from \"@/matrix-client\"\r\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\r\nimport { MatrixEvent, Room, RoomMember } from \"@/types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx\r\n} from \"./public\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport { updateMessages } from \"@/room-messages/private\"\r\nimport { roomMessage } from \"@/room-messages\"\r\nimport { newDirectRoom, newRoom } from \"@/room\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n        [\"Room\", (room: Room) => {\r\n\r\n            // @ts-ignore\r\n            const isDirect = room.currentState.getStateEvents(\"m.room.create\" as EventType, undefined)[0]?.getContent()?.isDirect\r\n            if (isDirect) {\r\n                newDirectRoom(room)\r\n            } else {\r\n                newRoom(room)\r\n            }\r\n        }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use(() => client().logout())\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser;\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\n","import matrix, { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport { attach, forward, guard, sample } from \"effector\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { MatrixEvent, RoomMember } from \"@/types\"\r\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    $loadFilter,\r\n    getRoomMembers,\r\n    getRoomMembersFx,\r\n    initRoomFx,\r\n    loadRoomFx,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n} from \"./private\"\r\nimport {\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    createRoomFx, \r\n    getAllUsersFx, \r\n    inviteUserFx, \r\n    kickUserRoomFx,\r\n    renameRoomFx,\r\n    joinRoomFx,\r\n    createDirectRoomFx,\r\n} from \"./public\"\r\nimport { LoadRoomFxParams, Visibility } from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotFound\r\n} from \"@/errors\"\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\ngetRoomMembersFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return Object.values(room.currentState.members)\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    await timelineWindow.load(initialEventId, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const maxHistory = 99\r\n    return rooms.map((room) => toRoomWithActivity(room, maxHistory))\r\n})\r\n\r\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const membersCache: { [id: string]: RoomMember } = {}\r\n    const searchResponse = await client().search({\r\n        body: {\r\n            search_categories: {\r\n                room_events: {\r\n                    search_term: term,\r\n                    keys: [\"content.body\"],\r\n                    filter: {\r\n                        rooms: [roomId],\r\n                    },\r\n                    order_by: orderBy,\r\n                },\r\n            },\r\n        },\r\n    })\r\n    return searchResponse\r\n        .search_categories\r\n        .room_events.results.map(({ result }) => {\r\n            const event = new MatrixEvent(result)\r\n            const senderId = event.getSender()\r\n            if (membersCache[senderId] === undefined) {\r\n                membersCache[senderId] = room.getMember(senderId)\r\n            }\r\n            event.sender = membersCache[senderId]\r\n            return toMessage(event)\r\n        })\r\n})\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ( {name, invite, visibility, initialState = [], preset} ) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    const { room_id } = await client().createRoom(options)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find((roomId) => cl.getRoom(roomId)?.currentState.members[user.userId])\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    setDirectRoom(room_id)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    await client().invite(roomId, userId)\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room), 99)\r\n})","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\r\nimport { checkIsDirect, client } from \".\"\r\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    Room,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n} from \"./types\"\r\n\r\nfunction getMappedContent(event: MatrixEvent): MessageContent {\r\n    const matrixContent = event.getContent() as MessageContent\r\n    return {...matrixContent}\r\n}\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId(),\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership()\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(room: MappedRoom, maxHistory: number): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n    const lastMessage = mergedMessageEvents.length ?\r\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\r\n    const isDirect = checkIsDirect(room.roomId)\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\r\n    }\r\n}","import { attach, forward, guard, sample } from \"effector\"\r\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\r\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\r\nimport { paginateForwardFx } from \"@/room-pagination/private\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx\r\n} from \"./public\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport {\r\n    RoomNotFound,\r\n    EventNotFound,\r\n    ClientNotInitialized,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        updateMessages,\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nsendMessageFx.use(({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => client().sendMessage(roomId, content, txnId))\r\neditMessageFx.use(({\r\n    roomId, eventId, body, txnId,\r\n}) => client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n","import { combine, forward, guard } from \"effector\"\r\nimport matrix from \"matrix-js-sdk\"\r\nimport {\r\n    $currentRoomId,\r\n    $loadRoomFxPending,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { $loadFilter } from \"@/room/private\"\r\nimport { setMessages } from \"@/room-messages/private\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx\r\n} from \"./private\"\r\nimport {\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n} from \"./public\"\r\nimport { TimelineWindowUndefined } from \"@/errors\"\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n      && !backwardPaginationPending\r\n      && !forwardPaginationPending\r\n      && !roomLoading\r\n)\r\n\r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n\r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n\r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { DIRECT_EVENT, ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\r\nimport { mergeMessageEvents } from \"./mappers\"\r\nimport { client } from \"./matrix-client\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow) {\r\n    return timelineWindow\r\n        .getEvents()\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null =>\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\nexport const getIsDirectRoomsIds = ():string[] => {\r\n    const cl = client()\r\n    const userDirectRooms = (cl.getAccountData(DIRECT_EVENT as EventType) as MatrixEvent)?.getContent()\r\n    return userDirectRooms && Object.values(userDirectRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width !== undefined ? width : null,\r\n        height !== undefined ? height : null,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\r\n    )\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => getIsDirectRoomsIds().includes(roomId)\r\n\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = (roomId: string) => {\r\n    const cl = client()\r\n    const directRoomsIds = getIsDirectRoomsIds()\r\n    if (!directRoomsIds.includes(roomId)) {\r\n        // @ts-ignore\r\n        const { creator } = cl.getRoom(roomId)?.currentState.getStateEvents('m.room.create' as EventType, undefined)[0]?.getContent()\r\n        const prevData = (cl.getAccountData(DIRECT_EVENT as EventType) as MatrixEvent)?.getContent()\r\n        return cl.setAccountData(DIRECT_EVENT as EventType, {\r\n            ...prevData,\r\n            [creator]: [roomId]\r\n        })\r\n    }\r\n}"],"names":["root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$timelineWindow","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","loadRoom","toLiveTimeline","loadRoomMessage","newDirectRoom","newRoom","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","Visibility","Preset","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","paginateForward","paginateBackward","MsgType","clientStore","options","messageBatchInterval","callbacksStore","createClient","removeAllListeners","matrix","forEach","eventName","cb","on","client","prependClientParams","opts","restOpts","undefined","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","$loadFilter","combine","roomId","timelineWindow","Boolean","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoomFx","loadRoomFx","getRoomMembersFx","paginateRoomFx","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","filter","getMappedRooms","getRooms","map","toMappedRoom","forward","from","initialSyncLimit","to","room","toStartOfTimeline","removed","data","eventType","getType","liveEvent","toMessage","currentState","getStateEvents","getContent","isDirect","state","prevState","rooms","e","member","user","use","login","async","startup","startClient","logout","stopClient","cl","loggedUserId","getUserId","getUser","mappedUser","toMappedUser","avatarUrl","displayName","profileInfo","getProfileInfo","avatar_url","displayname","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","toLiveTimelineFx","loadRoomMessageFx","getRoomMembersDebounced","debounce","_","doneData","reset","value","pending","clock","fn","target","currentRoomMembers","find","userId","initialEventId","initialWindowSize","loadAdditionalDataDirection","getRoom","Object","values","members","roomMember","membership","name","powerLevel","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","getMessages","length","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","isLive","canPaginateBackward","toRoomWithActivity","term","orderBy","membersCache","search","body","search_categories","room_events","search_term","keys","order_by","results","MatrixEvent","senderId","getSender","getMember","sender","getUsers","invite","visibility","initialState","preset","initial_state","state_key","stateKey","room_id","createRoom","findRoomId","getIsDirectRoomsIds","is_direct","private","creation_content","creator","setDirectRoom","reason","kick","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","content","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","type","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","isRedacted","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","getMappedContent","originalEventId","relation","getRelation","getId","originServerTs","getDate","edited","redacted","isRedaction","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","makeRequest","requestLimit","dir","currentlyActive","lastActiveAgo","lastPresenceTs","presence","maxHistory","matrixRoom","events","getLiveTimeline","getEvents","unreadCount","i","hasUserReadEvent","mergedMessageEvents","includes","reduce","lastMessage","checkIsDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","userDirectRooms","getAccountData","flatMap","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","prevData","setAccountData","[object Object]"],"mappings":"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"}