{"version":3,"file":"index.js","sources":["../src/root.ts","../src/room/types.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/types/index.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    'public' = \"public\",\n    'private' = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams\n} from \"./types\"\nimport { appDomain } from \"./domain\"\nimport { CreateClientParams, AuthData } from \"./types\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    presence: \"online\" | \"offline\" | \"unavailable\"\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n","import {\n    batchEvents\n} from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport {\n    roomMessage\n} from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\nimport {\n    messagesDomain\n} from \"./domain\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const paginationDomain = root.domain(\"pagination\")\n","import { paginationDomain } from \"./domain\"\nimport { PaginateParams } from \"./types\"\n\nexport const $paginateForwardPending = paginationDomain.store(false)\nexport const $paginateBackwardPending = paginationDomain.store(false)\nexport const $canPaginateBackward = paginationDomain.store(true)\nexport const $canPaginateForward = paginationDomain.store(true)\n\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\nexport const onPaginateForwardDone = paginationDomain.event<void>()\nexport const paginateForward = paginationDomain.event<PaginateParams>()\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room\n} from \"matrix-js-sdk\"\nimport {\n    checkIsDirect,\n    client,\n    MatrixMembershipType\n} from \"@/index\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent<MessageContent>()\n    return matrixContent\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import {\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (roomId: string): Promise<void> => {\n    const cl = client()\n    const { creator } = (cl.getRoom(roomId).currentState\n        .getStateEvents(\n            \"m.room.create\", undefined as any\n        ) as any)[0]?.getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n    await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { combine } from \"effector\"\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { RoomWithActivity } from \"@/types\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse, RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\nimport { $currentRoomId, $timelineWindow } from \"./public\"\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\n\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\nimport { paginationDomain } from \"./domain\"\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\n\nexport const paginateRoomFx = paginationDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n","import { guard, sample } from \"effector\"\nimport { $currentRoomId, MessageResponse } from \"@/room\"\nimport { paginateRoomFx } from \"@/room-pagination/private\"\nimport { loadRoomFx } from \"@/room/private\"\nimport { UpdateMessagesFxParams } from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const updateMessages = messagesDomain.event<void>()\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n} from \"matrix-js-sdk\"\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport { updateMessages } from \"@/room-messages/private\"\nimport { roomMessage } from \"@/room-messages\"\nimport { directRoomCreated, roomCreated } from \"@/room\"\nimport {\n    MatrixLoginPayload\n} from \"@/types\"\nimport { AuthData } from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx\n} from \"./public\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = (room.currentState\n            .getStateEvents(\n                \"m.room.create\", \n                undefined as any\n            ) as any)[0]?.getContent()?.isDirect\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    }: MatrixLoginPayload = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import matrix, {\n    Direction,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport {\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport {\n    getIsDirectRoomsIds,\n    getMessages,\n    setDirectRoom\n} from \"@/utils\"\nimport {\n    $loadFilter,\n    getRoomByIdFx,\n    getRoomMembers,\n    getRoomMembersFx,\n    initRoomFx,\n    loadRoomFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getRoomByIdFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getRoomByIdFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            // TODO: fix me\n            const event = new MatrixEvent(result as any)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId) as RoomMember\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n","import {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $timelineWindow\n} from \"@/room\"\nimport { paginateForwardFx } from \"@/room-pagination/private\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessages,\n    updateMessagesFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    // Добавился 4 параметр, надо решить, включать его или нет\n    // True to hide the receipt from other users and homeservers. This property is unstable and may change in the future.\n     await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: true })\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n","import { combine, forward, guard } from \"effector\"\nimport matrix, { Direction } from \"matrix-js-sdk\"\nimport {\n    $currentRoomId,\n    $loadRoomFxPending,\n    loadRoom\n} from \"@/room\"\nimport { $loadFilter } from \"@/room/private\"\nimport { setMessages } from \"@/room-messages/private\"\nimport { getMessages } from \"@/utils\"\nimport {\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward\n} from \"./public\"\nimport { TimelineWindowUndefined } from \"@/errors\"\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","MsgType","MatrixMembershipType","clientStore","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","messageBatchInterval","callbacksStore","createClient","options","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","getIsDirectRoomsIds","directRooms","getAccountData","Object","values","flatMap","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","currentState","getStateEvents","_cl$getRoom$currentSt2","creator","prevData","prevRoomsId","setAccountData","$loadFilter","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","getRoomByIdFx","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","_cl$getRoom","is_direct","creation_content","reason","setRoomName","joinRoom","leave","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir"],"mappings":"qsBAEO,IC2DKA,EAKAC,EDhECC,EAAOC,EAAa,QEApBC,EAAYF,EAAKG,OAAO,OCYxBC,EAAgBF,EAAUG,QAC1BC,EAAgBJ,EAAUG,QAC1BE,EAASL,EAAUG,QACnBG,EAAwB,SAACC,UAClCC,EAAS,CAAEC,OAAQJ,EAAQK,QAASH,KAE3BI,EAAoBX,EAC5BY,SACQC,EAAiBb,EACzBY,SACQE,EAAcd,EAAUY,SACxBG,EAAgBf,EACxBY,SACQI,EAAkBhB,EAC1BY,SACQK,EAAejB,EAAUY,SACzBM,EAAWlB,EAAUY,SACrBO,EAAiBnB,EACzBY,SACQQ,EAAkBpB,EAC1BY,SChCQS,EAAqBvB,EAAKG,OAAO,gBCMjCqB,EAAyBD,EACjCT,SACQW,EAA8BF,EACtCT,SACQY,EAA+BH,EACvCT,SACQa,EAA2BJ,EACnCT,SCbQc,EAAa5B,EAAKG,OAAO,QCqBzB0B,EAA4B,GAC5BC,EAAyB,GACzBC,EAA0B,GAC1BC,EAAwC,EACxCC,EAAuC,GACvCC,EAA4B,GAE5BC,EAAUP,EAAWQ,MAAsB,MAC3CC,EAAqBT,EAAWQ,OAAe,GAC/CE,EAAsBV,EAC9BQ,MAAiC,MACzBG,EAAiBX,EACzBQ,MAAyC,MACjCI,EAAeZ,EAAWQ,MAA+B,MACzDK,GAAwBb,EAAWvB,QACnCqC,GAAkBd,EAAWQ,MAA6B,MAC1DO,GAAgBf,EAAWQ,MAAc,GAEzCQ,GAA6BhB,EACrCQ,MAjBkC,IAkB1BS,GAA+BjB,EACvCQ,MArBoC,IAsB5BU,GAA4BlB,EACpCQ,MAtBiC,IAuBzBW,GAAsCnB,EAC9CQ,MAtBgD,GAuBxCY,GAA+BpB,EACvCQ,MAtBoC,IAuB5Ba,GAAqCrB,EAC7CQ,MAzB+C,IA2BvCc,GAA4BZ,EACpCa,KACG,SAACC,0BAAYA,MAAAA,SAAAA,EAASC,QAClB,SAACC,SAAiC,SAAtBA,EAAOC,6BAA0B,MAG5CC,GAAWC,EACpBd,GAAeC,IACf,SAACc,EAAGC,UAAMD,GAAKC,KAENC,GAAaH,EACtBd,GAAeE,IACf,SAACa,EAAGC,UAAMD,GAAKC,KAENE,GAAUJ,EACnBd,GAAeG,IACf,SAACY,EAAGC,UAAMD,GAAKC,KAENG,GAAuBL,EAChCd,GAAeI,IACf,SAACW,EAAGC,UAAMD,GAAKC,KAENI,GAAaN,EACtBd,GAAeK,IACf,SAACU,EAAGC,UAAMD,GAAKC,KAENK,GAAsBP,EAC/Bd,GAAeM,IACf,SAACS,EAAGC,UAAMD,GAAKC,KAGNM,GAAWrC,EAAWvB,QACtB6D,GAAqBtC,EAAWvB,QAChC8D,GAAoBvC,EAAWvB,QAC/B+D,GAAsBxC,EAAWvB,QACjCgE,GAAezC,EAAWvB,QAC1BiE,GAAW1C,EAAWvB,QACtBkE,GAAiB3C,EAAWvB,QAC5BmE,GAAkB5C,EAAWvB,QAC7BoE,GAAoB7C,EAAWvB,QAC/BqE,GAAc9C,EAAWvB,QAEzBsE,GAAuB/C,EAC/Bd,SACQ8D,GAA2BhD,EACnCd,SACQ+D,GAAgBjD,EACxBd,SACQgE,GAAgBlD,EACxBd,SACQiE,GAAenD,EACvBd,SACQkE,GAAqBpD,EAC7Bd,SACQmE,GAAerD,EAAWd,SAC1BoE,GAAiBtD,EAAWd,SAC5BqE,GAAevD,EAAWd,SAC1BsE,GAAaxD,EACrBd,SACQuE,GAAczD,EACtBd,UNrDL,SAAYhB,GACRA,kBACAA,oBAFJ,CAAYA,IAAAA,OAKZ,SAAYC,GACRA,4CACAA,6BACAA,2BAHJ,CAAYA,IAAAA,OOhEL,ICFKuF,GCsDAC,GC1CRC,GHVSC,GAAiBzF,EAAKG,OAAO,YImB7BuF,GAAYD,GAAerD,MAAiB,IAE5CuD,GAAcF,GAAepF,QAC7BuF,GAAoBH,GAAepF,QACnCwF,GAAmBJ,GAAepF,QAElCyF,GAAgBL,GACxB3E,SACQiF,GAAgBN,GACxB3E,SACQkF,GAAkBP,GAC1B3E,SACQmF,GAAoBR,GAC5B3E,SACQoF,GAA0BT,GAClC3E,SACQqF,GAAkBV,GAC1B3E,SACQsF,GAAkBX,GAC1B3E,SCtCQuF,GAAmBrG,EAAKG,OAAO,cCC/BmG,GAA0BD,GAAiBjE,OAAM,GACjDmE,GAA2BF,GAAiBjE,OAAM,GAClDoE,GAAuBH,GAAiBjE,OAAM,GAC9CqE,GAAsBJ,GAAiBjE,OAAM,GAE7CsE,GAAyBL,GAAiBhG,QAC1CsG,GAAwBN,GAAiBhG,QACzCuG,GAAkBP,GAAiBhG,QACnCwG,GAAmBR,GAAiBhG,SLXjD,SAAYiF,GACVA,kBACAA,iCACAA,kBACAA,gBACAA,kBACAA,oBACAA,gBACAA,kBACAA,wBATF,CAAYA,KAAAA,QCsDZ,SAAYC,GACRA,gBACAA,kBACAA,YACAA,cACAA,gBALJ,CAAYA,KAAAA,QCzCZ,IAAIuB,GAAuB,IACrBC,GAAkC,GAE3BC,GAAe,gBACvBC,IAAAA,QAA+BxG,IAAtBqG,qBAEVI,UACWC,IAAP1G,IAAkBqG,GAAuBrG,GAC7C+E,GAAc4B,EAAOJ,aAAaC,GAClCF,GAAeM,SAAQ,yBAAEC,OAAWC,OAChC/B,GAAYgC,GAAGF,EAAWC,OAGrBE,GAAS,kBAAoBjC,IAE7BkC,GAAgB,SAACC,GAC1BZ,GAAea,WAAfb,KAAuBY,KAGdE,GAAyB,kBAC3BC,EAAYnC,GAAamB,KAGvBI,GAAgB,WACrB1B,KACAA,GAAYuC,qBACZvC,GAAc,OIvCTwC,GAAqB,iBACrBC,GAAuB,mBCCvBC,GAAgBC,EAAkB,iBAClCC,GAAeD,EAAkB,gBACjCE,GAAuBF,EAAkB,wBACzCG,GACXH,EAAkB,2BACPI,GAAeJ,EAAkB,gBACjCK,GAAkBL,EAAkB,slBCmBjD,SAASM,GAAiBpI,UACAA,EAAMqI,sBAuBhBC,GACZtI,EACAuI,OAEMC,EAAWxI,EAAMyI,oBAChB,CACHF,qBAAqCzB,IAApByB,EACbA,EACAvI,EAAM0I,QACVC,QAASP,GAAiBpI,GAC1B4I,OAAQ5I,EAAM4I,OACdC,eAAgB7I,EAAM8I,UACtBC,OAA4C,eAAnCP,MAAAA,SAAAA,EAAgB,UACzBQ,SAAUhJ,EAAMiJ,cAAgBjJ,EAAMkJ,wBAI9BC,GAAaC,SAClB,CACHC,OAAQD,EAAKC,OACbC,KAAMF,EAAKE,KACXC,QAASH,EAAKG,QACdC,aAAcJ,EAAKK,4BAIXC,GACZC,EACA3J,UAEIA,EAAM4J,WAAW,cAAgB5J,EAAMkJ,eAG3CS,EAAIpC,KAAKe,GAAUtI,IAFR2J,EAYR,IAAME,GAAe,SAACC,SACzB,CACIC,UAAWD,EAAKC,UAChBC,OAAQF,EAAKE,OACbC,gBAAiBH,EAAKG,gBACtBC,YAAaJ,EAAKI,YAClBC,cAAeL,EAAKK,cACpBC,eAAgBN,EAAKM,eACrBC,SAAUP,EAAKO,oBAqBPC,GACZlB,SACAmB,yDAAa,GAEPC,EAAKpD,KACLqD,EAAaD,EAAGE,QAAQtB,EAAKC,YAC9BoB,EAAY,MAAM,IAAI1C,WACrB4C,EAASF,EAAWG,kBAAkBC,YACxCC,EAAc,EACTC,EAAIJ,EAAOK,OAAS,EAAGD,GAAK,GAC7BA,IAAMJ,EAAOK,OAAST,EADUQ,IAAK,KAEnC/K,EAAQ2K,EAAOI,GACfE,EAAaR,EACdS,iBAAiBV,EAAGW,YAAuBnL,EAAM0I,YAClDuC,QAGJH,GAAe,MAEbM,EAAsBT,EACvB3H,QAAO,SAAChD,SAAU,CAAC2H,GAAoBC,IACnCyD,SAASrL,EAAMsL,cACnBC,OAAO7B,GAAoB,IAC1B8B,EAAcJ,EAAoBJ,OACpCI,EAAoBA,EAAoBJ,OAAS,QAAKlE,EACpD2E,EAAWC,GAActC,EAAKC,QAC9BsC,EAASF,EACThB,EAAWmB,UAAUnB,EAAWoB,iBAChC,qBAGCzC,OACH0B,YAAAA,EACAU,YAAAA,EACAC,SAAAA,EACAK,aAAcH,MAAAA,SAAAA,EAAQ3B,OAGtB+B,SAAUJ,EACJK,kBAAQL,EAAO7B,yBAAPmC,EAAahC,sBACrBnD,EACNoF,eAAiBzB,EAAmB0B,umBCpJ5BC,GAAYC,UACjBA,EACFxB,YACA7H,QAAO,SAAChD,SAAU,CAAC2H,GAAoBC,IACnCyD,SAASrL,EAAMsL,cACnBC,OAAO7B,GAAoB,QAGvB4C,GAAqB,gBAC9B1D,IAAAA,OACA2D,IAAAA,MACAC,IAAAA,OACAC,IAAAA,iBACAC,aAAAA,oBACAC,iBAAAA,uBAEA/D,GAAUA,EAAOgE,aACXhE,EAAOgE,aACTxF,KAASyF,mBACTN,EACAC,EACAC,EACAC,EACAC,GAEE,MAGGG,GAAyB,gBAClCzD,IAAAA,OACAW,IAAAA,OACAuC,IAAAA,MACAC,IAAAA,OACAC,IAAAA,iBACAC,aAAAA,gBAEMtD,EAAOhC,KAASsD,QAAQrB,OACzBD,SACM,SAEL2D,EAAc3D,EAAKwC,UAAU5B,UAC9B+C,EAGEA,EAAYH,aACfxF,KAASyF,mBACTN,EACAC,EACAC,EACAC,GACA,GARO,MAYFM,GAAsB,eAEzBC,EADK7F,KACY8F,eHpEC,YGoE4B7E,oBAC7C4E,GAAeE,OAAOC,OAAOH,GAAaI,SAAQ,SAACjE,UAASA,MAG1DkE,GAAe,gBACxBC,IAAAA,OACAhB,IAAAA,MACAC,IAAAA,OACAC,IAAAA,aACAE,IAAAA,wBAEAvF,KAASkG,aACLC,EACAhB,EACAC,OACiB1F,IAAjB2F,EAA6BA,EAAe,QAC5CE,IAGKjB,GAAgB,SAACrC,UAC1B2D,KAAsB3B,SAAShC,IAGtBmE,GAAuB,iBACxB,CACJC,sBAAgBrG,KAASyF,+CACzBa,QAAS,CACLC,+BAA0BvG,KAASwG,qBAKlCC,8BAAgB,WAAOxE,2FAC1BmB,EAAKpD,iBACUoD,EAAGE,QAAQrB,GAAQyE,aACnCC,eACG,qBAAiBjH,GACX,uBAHOkH,EAGH3F,aAHV4F,IAAAA,QAIFC,EAAW1D,EAAG0C,eH1GI,YG0GyB7E,aAC3C8F,YAAcD,EAASD,kBAAY,YACnCzD,EAAG4D,eH5Ge,oBG6GjBF,WACFD,cAAcE,IAAa9E,wGCtGvBgF,GAAcjL,EACvBlB,EACAG,IACA,SAACgH,EAAQgD,UAAmBL,QAAQ3C,IAAW2C,QAAQK,MAG9CiC,GAAmB/M,EAAWvB,QAC9BuO,GAAqBhN,EAAWvB,QAChCwO,GAAiBjN,EAAWvB,QAE5ByO,GAAgBlN,EACxBd,SACQiO,GAAanN,EACrBd,SACQkO,GAAapN,EACrBd,SACQmO,GAAmBrN,EAC3Bd,SACQoO,GAAqBtN,EAC7Bd,SACQqO,GAAoCvN,EAC5Cd,4kBC3BE,IAAMsO,GAAiB/I,GACzBvF,SAEQuO,GAAqBC,EAAO,CACrC3O,OAAQ,CAAC4B,EAAgBG,IACzB5B,OAAQsO,GACRG,UAAW,SAACC,6BACR9F,YACAgD,oBACA+C,UAAW,YACRD,MAIEE,GAAoBJ,EAAO,CACpC3O,OAAQ,CAAC4B,EAAgBG,IACzB5B,OAAQsO,GACRG,UAAW,SAACC,6BACR9F,YACAgD,oBACA+C,UAAW,WACRD,qOCpBJ,IAAMG,GAAiBlK,GAAepF,QAEhCuP,GAAmBnK,GAC3B3E,SAGQ+O,GAAcC,EAAM,CAC7BnP,OAAQoP,EACJxN,EACA,CAACyM,GAAWgB,KAAMZ,GAAeY,KAAMJ,GAAiBI,OACxD,SACIC,+WAKAA,cAAAA,EACAvG,SAJI8F,OAAU9F,UACVwG,WAOZ7M,OAAQ,qBAAG4M,kBAAevG,UCqB9B,SAASyG,YACE1I,KAAS2I,WAAWjN,IAAIqG,ukBANnC6G,EAAQ,CACJC,KAAMzP,EAAkBmP,KAAK7M,KAAI,iBAAO,CAAEoN,iBAAkB,OAC5DC,GAAIvP,IAORyG,GAAc,CACV,CACI,gBACA,SACIrH,EACAoJ,EACAgH,EACAC,EACAC,OAEMC,EAAYvQ,EAAMsL,UACpBiF,IAAc5I,IACX4I,IAAc3I,KAEZwI,GAAqBE,EAAKE,WAC3BlL,GAAYgD,GAAUtI,MAItC,CAAC,OAAQ,SAACoJ,WACAoB,EAAKpD,KACL0C,EAAOV,EAAKwC,UAAUpB,EAAGW,aAC3BrB,GAA4B,WAApBA,EAAK5G,wBAECkG,EAAK0E,aAClBC,eACG,qBACAjH,GACM,2BAJI2J,EAIApI,iCAJAqI,EAIcjF,UAG5BrH,GAAkBgF,GAElB/E,GAAY+E,MAGpB,CAAC,wBAAyB,kBAAMkG,OAChC,CAAC,OAAQ,SAACqB,EAAOC,MACC,aAAVD,KAKU,YAAVA,GAAqC,aAAdC,KAKb,YAAVD,GAAqC,YAAdC,YACjBC,EAAQf,KACd5P,EAAO2Q,YANDA,EAAQf,KACd/P,EAAc8Q,YANRA,EAAQf,KACd7P,EAAc4Q,MActB,CACI,oBACA,SAACC,EAAGH,EAAO1N,UAAuBsL,GAAmBtL,KAEzD,CACI,sBACA,SAAC6N,EAAGH,EAAO1N,UAAuBsL,GAAmBtL,KAEzD,CACI,wBACA,SAAC6N,EAAG7N,UAAuBsL,GAAmBtL,KAElD,CACI,kBACA,SAAC6N,EAAG7N,UAAuBsL,GAAmBtL,KAElD,CACI,wBACA,SAAC6N,EAAG7N,UAAuBsL,GAAmBtL,KAElD,CACI,oBACA,SAAC6N,EAAG7N,UAAuBsL,GAAmBtL,KAElD,CACI,iBACA,SAAC6N,EAAGhH,UAAewE,GAAiBxE,KAExC,CACI,gBACA,SAACgH,EAAGhH,UAAewE,GAAiBxE,KAExC,CACI,mBACA,SAACgH,EAAGhH,UAAewE,GAAiBxE,OAI5CtJ,EAAkBuQ,+BAAK,WAAO5B,kFACpB/H,KAAS4J,MPhJc,mBOgJW7B,6IAE5CzO,EAAeqQ,+BAAI,WAAO5B,kGACC8B,gBAChB9B,EAAO+B,oCACV,CACIC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACC,KPtJJ,gBOsJ0BC,MAAOrC,EAAOqC,wBAJ5DC,kBAYwBA,EAASC,8BAJnCC,IAAAA,QACAC,IAAAA,aACAC,IAAAA,UACAC,IAAAA,6BAEG,CACH9H,OAAQ2H,EACRI,YAAaH,EACbI,SAAUH,EACVI,UAAWH,uGAInBnR,EAAYoQ,cAAI,yFACM3J,OAAVrF,IAAAA,gDACUA,EAAMmQ,uDAG5BtR,EAAcmQ,KAAI,SAAC5B,UAAW/H,KAAS+K,YAAYhD,MAEnDpO,EAASgQ,cAAK,4FACJ3J,KAASgL,qDAGnBtR,EAAaiQ,KAAI,kBAAM3J,KAASiL,gBAEhCxR,EAAgBkQ,cAAI,6FACVvG,EAAKpD,8CACK,gBACVkL,EAAe9H,EAAGW,qDACE,gBACpBrB,EAAOU,EAAG+H,QAAQD,4CACN,iBACZE,EAAa3I,GAAaC,IAGhBC,WAAcyI,EAAWtI,8CACXM,EAAGiI,eAAeH,WAAtCI,SACNF,EAAWzI,UAAY2I,EAAYC,WACnCH,EAAWtI,YAAcwI,EAAYE,6CAElCJ,gDAGXxR,EAAe+P,+BAAI,4FAEX8B,IAAAA,mBACAC,IAAAA,kBAGJnM,GAAakM,KACKzL,OAAVrF,IAAAA,uCACSA,EAAMmQ,iCACjB9K,KAAS+K,YAAYW,qGAG/B7R,EAAgB8P,cAAI,uFACVvG,EAAKpD,sEAELoD,EAAG4H,0CACH5H,EAAGzI,0BAAHgR,EAAUC,uBAChBxI,EAAG6H,aACHxL,iDClNJ1F,EAAuB4P,KAAI,kBAChB3J,KAAS6L,kBAGpB7R,EAA4B2P,+BAAI,WAAOmC,2FAEzB9L,KAAS+L,mBACXD,EAAQE,MACRF,EAAQG,KACRH,EAAQI,OAGRJ,EAAQK,sEAGZC,QAAQC,MAAM,4CACdD,QAAQC,iIAKhBpS,EAA6B0P,+BAAI,WAAOmC,wFAEhCM,QAAQC,MAAM,kCACMrM,KAAS6L,6BAAvBS,SACNF,QAAQC,MAAMC,EAAMC,OAAOvK,eACrBhC,KAASwM,mBACXV,EAAQE,MACRF,EAAQG,KACRH,EAAQI,OACRJ,EAAQW,kEAGZL,QAAQC,MAAM,0CACdD,QAAQC,6HAIhBnS,EAAyByP,+BAAI,WAAMmC,kFACzB9L,KAAS0M,eACXZ,EAAQE,MACRF,EAAQG,KACRH,EAAQI,0GCyChB,IAAMS,GAAmB9E,EAAO,CAAExO,OAAQkO,KACpCqF,GAAoB/E,EAAO,CAAExO,OAAQkO,KACrCsF,GAAoBhF,EAAO,CAAExO,OAAQkO,KAErCuF,GAA0BC,EAAS,CACrC7T,OAAQkO,GACRjO,QAAS,MAGb2B,EACKiF,GAAGvD,IAAU,SAACwQ,cAAK/K,UACnBgL,MAAMjS,IACXD,EACKgF,GAAGsH,GAAc6F,UAAU,SAACF,EAAGhL,UAASA,KACxCiL,MAAMjS,IACXC,GACK8E,GAAGuH,GAAW4F,UAAU,SAACF,EAAG/H,UAAmBA,KAC/CgI,MAAMnS,GACXD,EACKkF,GAAGyH,GAAiB0F,UAAU,SAACF,EAAGG,UAAUA,KAC5CF,MAAMnS,GACXI,GACK6E,GAAG0H,GAAmByF,UAAU,SAACF,EAAGI,UAAeA,KACnDH,MAAMnS,GACXK,GACK4E,GAAG2H,GAAkCwF,UAClC,SAACF,EAAGK,UAAgBA,EAAYC,QACnCL,MAAMnS,GACXO,GACK0E,GAAG2H,GAAkCwF,UAClC,SAACF,EAAGK,UAAgBA,EAAYE,OACnCN,MAAMnS,GACXM,GACK2E,GAAG2H,GAAkCwF,UAClC,SAACF,EAAGK,UAAgBA,EAAYG,UACnCP,MAAMnS,GACXQ,GACKyE,GAAG2H,GAAkCwF,UAClC,SAACF,EAAGK,UAAgBA,EAAYI,iBACnCR,MAAMnS,GACXS,GACKwE,GAAG2H,GAAkCwF,UAClC,SAACF,EAAGK,UAAgBA,EAAYK,UACnCT,MAAMnS,GACXU,GACKuE,GAAG2H,GAAkCwF,UAClC,SAACF,EAAGK,UAAgBA,EAAYM,gBACnCV,MAAMnS,GAEX8N,EAAQ,CACJC,KAAMtB,GAAWqG,QACjB7E,GAAInO,IAERgO,EAAQ,CACJC,KAAMrM,GACNuM,GAAIzB,KAERsB,EAAQ,CACJC,KAAM8D,GAAiBpE,KACvBQ,GAAItM,KAERmM,EAAQ,CACJC,KAAMP,EAAO,CACTpP,OAAQ+B,GACR4S,MAAOvG,GAAWiB,KAElBuF,GAAI,eAER/E,GAAIrM,KAERkM,EAAQ,CACJC,KAAM+D,GAAkBrE,KACxBQ,GAAIpM,KAERiM,EAAQ,CACJC,KAAMgE,GAAkBtE,KACxBQ,GAAInM,KAGRyL,EAAM,CACFwF,MAAO/S,EACPc,OAAQgJ,QACRmJ,OAAQ1G,KAGZgB,EAAM,CACFnP,OAAQ4B,EACRc,OAAQ,SAACqG,UAAW2C,QAAQ3C,IAC5B8L,OAAQ3G,KAEZiB,EAAM,CACFwF,MAAO3G,GACPhO,OAAQ2B,EACRe,OAAQ,SAACoS,EAAoBtL,UAASkC,QAClCoJ,MAAAA,SAAAA,EAAoBC,MAAM,SAACpS,UACvBA,EAAO+G,SAAWF,EAAKE,YAE/BmL,OAAQ3G,KAEZiB,EAAM,CACFwF,MAAO1G,GACPjO,OAAQ4B,EACRc,OAAQ,SAACqG,EAAQpG,UAAWoG,IAAWpG,EAAOoG,QAC9C8L,OAAQ3G,KAEZiB,EAAM,CACFnP,OAAQ4B,EACR+S,MAAOf,GACPlR,OAAQgJ,QACRmJ,OAAQvG,KAEZa,EAAM,CACFnP,OAAQoP,EACJ,CAACxN,EAAgBG,IACjB4B,IACA,2BACIoF,OACAgD,OAEAiJ,IAAAA,eACAC,IAAAA,sBACAC,kCACqB,CACrBnM,OAAQA,EACRgD,eAAgBA,EAChBiJ,eAAAA,EACAC,kBAAAA,EACAC,uCAN8B,iBAStCxS,OAAQqL,GACR8G,OAAQlB,KAEZxE,EAAM,CACFnP,OAAQoP,EACJ,CAACxN,EAAgBG,IACjB8B,IACA,iCAMyB,CACrBkF,YACAgD,oBACAiJ,iBALAA,eAMAC,oBALAA,kBAMAC,4BAA6B,eAGrCxS,OAAQqL,GACR8G,OAAQnB,KAEZvE,EAAM,CACFnP,OAAQoP,EACJ,CAACxN,EAAgBG,IACjB6B,IACA,+BAGyB,CACrBmF,YACAgD,oBACAmJ,4BAA6B,eAGrCxS,OAAQqL,GACR8G,OAAQpB,KAGZtE,EAAM,CACFwF,MAAO/S,EACPc,OAAQgJ,QACRmJ,OAAQ,CAACtG,GAAoBC,MAGjCD,GAAmBkC,KAAI,SAAC1H,OACdmB,EAAKpD,KACLgC,EAAOoB,EAAGE,QAAQrB,GAClBW,EAASQ,EAAGW,gBACbnB,EAAQ,MAAM,IAAI9B,OACjB4B,EAAOV,EAAKwC,UAAU5B,OACvBF,EAAM,MAAM,IAAI5B,UACd4B,EAAK0K,cAGhB1F,GAAkCiC,KAAI,SAAC1H,mBAG7BoM,EAFKrO,KACKsD,QAAQrB,GACSyE,aAC5BC,eAAe,sBAAuB,IACtC1F,mBAEE,CACHqM,eAAMe,EAAmBf,oBjBtQM,GiBuQ/BC,cAAKc,EAAmBd,mBjBxQM,GiByQ9BC,iBAAQa,EAAmBb,sBjB1QM,GiB2QjCC,wBAAeY,EAAmBC,8BjBxQW,EiB0Q7CX,uBAAcU,EAAmBE,6BjBzQW,GiB2Q5Cb,iBAAQW,EAAmBX,sBjB1QM,OiB8QzClG,GAAiBmC,KAAI,SAAC1H,OACZD,EAAOhC,KAASsD,QAAQrB,OACzBD,EAAM,MAAM,IAAIrB,UACdoF,OAAOC,OAAOhE,EAAK0E,aAAa/K,SAClCD,KAAI,SAACG,OACI6G,EAAO1C,KAASmL,QAAQtP,EAAO+G,YAChCF,EAAM,MAAM,IAAI5B,mBPrM7B0N,EACA9L,SAEO,CACH5G,WAAY0S,EAAW1S,WACvBoG,KAAMsM,EAAWtM,KACjBkL,WAAYoB,EAAWpB,WACvBqB,eAAgBD,EAAWC,eAC3BC,eAAgBF,EAAWE,eAC3BzM,OAAQuM,EAAWvM,OACnB0M,OAAQH,EAAWG,OACnBjM,KAAMD,GAAaC,GACnBE,OAAQ4L,EAAW5L,QO0LRgM,CAAmB/S,EAAQ6G,SAI9CtF,GAAcuM,KAAI,SAAC1H,OACTD,EAAOhC,KAASsD,QAAQrB,OACzBD,EAAM,MAAM,IAAIrB,mBP/NEqB,SAChB,CACH6M,iBAAkB7M,EAAK8M,wBO8NpBC,CAAW/M,MAGtBsF,GAAWqC,+BAAI,4FAAS1H,IAAAA,OACdmB,EAAKpD,KACLgC,EAAOhC,KAASsD,QAAQrB,yBACb,IAAItB,iBACfqO,EAAchN,EAAKiN,6CAClB,IAAItP,EAAOuP,eAAe9L,EAAI4L,sGAGzCzH,GAAWoC,+BAAI,oGACX1E,IAAAA,eACAiJ,IAAAA,eACAC,IAAAA,kBACAC,IAAAA,4BAEKnJ,wBAAsB,IAAIpE,0BAEzBoE,EAAekK,KAAKjB,EAA0BC,aAC9CiB,EAAqBnK,EAAeoK,YAAYC,EAAUC,SAC5DC,EAAWxK,GAAYC,KAEvBkJ,GAAqBqB,EAAS5L,OAASuK,uBAEjCsB,EAAOtB,EAAoBqB,EAAS5L,OACN,aAAhCwK,oCACwBnJ,EACnByK,SAAS/P,EAAOgQ,cAAcC,UAAWH,WAD9CI,kDAGwB5K,EACnByK,SAAS/P,EAAOgQ,cAAcG,SAAUL,WAD7CI,iBAGAA,IACAL,EAAWxK,GAAYC,qCAGxB,CACHuK,SAAAA,EACAO,QAASX,EACTA,mBAAAA,EACAY,oBAAqB/K,EAAeoK,YAAYC,EAAUW,+GAIlE9S,GAAyBwM,KAAI,SAACF,OACfzJ,KACF,MAAM,IAAIY,UACZ6I,EAAM/N,KAAI,SAACsG,UAASkB,GAAmBlB,SAGlD9E,GACKyM,+BAAI,kGAASuG,IAAAA,KAAMjO,IAAAA,WAAQkO,QAAAA,aAAUC,EAAcC,OAC9CrO,EAAOhC,KAASsD,QAAQrB,yBACb,IAAItB,iBACf2P,EAA6C,YACtBtQ,KAASuQ,OAAO,CACzCvG,KAAM,CACFwG,kBAAmB,CACfC,YAAa,CACTC,YAAaR,EACbS,KAAM,CAAC,gBACP/U,OAAQ,CACJ6N,MAAO,CAACxH,IAEZ2O,SAAUT,qBATpBU,2BAcCA,EACFL,kBACAC,YAAYK,QAAQpV,KAAI,gBAAG+M,IAAAA,OAElB7P,EAAQ,IAAImY,EAAYtI,GACxBuI,EAAWpY,EAAMqY,wBACQvR,IAA3B4Q,EAAaU,KACbV,EAAaU,GAAYhP,EAAKwC,UAAUwM,IAE5CpY,EAAM4I,OAAS8O,EAAaU,GACrB9P,GAAUtI,yGAI7ByE,GAAcsM,KAAI,kBAAM3J,KAASkR,WAAWxV,IAAI+G,OAEhDnF,GAAaqM,+BAAI,0GACbzH,IAAAA,KACAsL,IAAAA,OACA2D,IAAAA,eACAC,aAAAA,aAAe,KACfC,IAAAA,OAEM7R,EAAU,CACZ0C,KAAAA,EACAsL,OAAAA,EACA2D,WAAAA,EACAG,cAAeF,EAAa1V,KAAI,SAAC6N,mBAC1BA,OACHgI,UAAWhI,EAAMiI,SACjBA,cAAU9R,OAEd2R,OAAAA,YAIsBrR,KAASyR,WAAWjS,0BAAtCkS,IAAAA,0BAED,CAAEzP,OAAQyP,sGAGrBnU,GAAmBoM,+BAAK,wGAAQjH,IAAAA,KAAM2O,IAAAA,WAAQD,aAAAA,aAAe,KACnDhO,EAAKpD,KACL2R,EAAW/L,OACXgM,EAAaD,EAAS1D,MACxB,SAAChM,0BAAWmB,EAAGE,QAAQrB,uBAAX4P,EAAoBnL,aAAa/K,QAAQ+G,EAAKE,qDAEvC,CAAEX,OAAQ2P,kBAE3BpS,EAAU,CACZsS,WAAW,EACXtE,OAAQ,CAAC9K,EAAKE,QACduO,WAAY9Y,UACZiZ,cAAeF,EAAa1V,KAAI,SAAC6N,mBAC1BA,OACHgI,UAAWhI,EAAMiI,SACjBA,cAAU9R,OAEd2R,OAAAA,EACAU,iBAAkB,CACd1N,UAAU,EACVwC,QAASzD,EAAGW,uBAGMX,EAAGqO,WAAWjS,0BAAhCkS,IAAAA,kBACFjL,GAAciL,oCAEb,CAAEzP,OAAQyP,uGAGrBlU,GAAamM,+BAAK,4FAAQ/G,IAAAA,OAAQX,IAAAA,gBACxBjC,KAASwN,OAAOvL,EAAQW,qGAGlCnF,GAAekM,+BAAK,8FAAS1H,IAAAA,OAAQW,IAAAA,OAAQoP,IAAAA,gBACnChS,KAASsN,KAAKrL,EAAQW,EAAQoP,qGAGxCtU,GAAaiM,+BAAK,4FAAQ1H,IAAAA,OAAQC,IAAAA,cACxBlC,KAASiS,YAAYhQ,EAAQC,qGAGvCvE,GAAWgM,+BAAK,kGAAQ1H,IAAAA,WAAQoC,SAAAA,gBACtBjB,EAAKpD,cACQoD,EAAG8O,SAASjQ,aAAzBD,UACFqC,kCACMoC,GAAcxE,mCAEjBiB,GAAmBnB,GAAaC,uGAG3CqF,GAAcsC,KAAI,SAAC1H,OACToB,EAAarD,KAASsD,QAAQrB,UAC/BoB,EACEH,GAAmBnB,GAAasB,IADf,QAI5BzF,GAAY+L,+BAAK,WAAO1H,kFACdjC,KAASmS,MAAMlQ,qGC3azB,IAAMmQ,GAAmBhS,KAEnBiS,GAAoBxK,EAAO,CAC7BxO,OAAQ4O,GACRH,UAAW,kBAA4C,CACnD2H,OADUD,SACK5L,WAIvB3F,GACK8B,GAAGqI,IAAa,SAAC4E,cAAKwC,YACtBvC,MAAMnS,GACXJ,EACKqF,GAAGqI,IAAa,SAAC4E,cAAK+C,UACtB9C,MAAMnS,GAEX8N,EAAQ,CACJC,KAAMP,EACFrK,GACAoU,GAAkB9J,MAClB,SAACyE,cAAKjF,OAAoByH,YAE9BzG,GAAI5K,KAGRyK,EAAQ,CACJC,KAAMuJ,GAAiB1W,KAAI,SAAC8T,SAAc,CAAEA,SAAAA,MAC5CzG,GAAIsJ,KAERhK,EAAM,CACFnP,OAAQoP,EACJ,CAACxN,EAAgBG,IACjBiN,IACA,yBAAEjG,aAA6B,CAC3BgD,oBACAhD,OAAQA,MAGhBrG,OAAQX,GAAgBS,KAAI,SAAAuJ,UAAkBL,QAAQK,MACtD8I,OAAQ5F,KAGZ9J,GAAcsL,+BAAK,8FACf1H,IAAAA,OACAV,IAAAA,QACA+Q,IAAAA,eACQtS,KAASuS,YAAYtQ,EAAQV,EAAqB+Q,6IAE9DhU,GAAcqL,+BAAK,gGACf1H,IAAAA,OAAQuQ,IAAAA,QAASxI,IAAAA,KAAMsI,IAAAA,eACftS,KAASuS,YACjBtQ,EACA,iBACqB,CACbwQ,QAAS,SAAUzI,KAAAA,kBAEP,CACZ0I,SAAU,YACVC,SAAUH,WAEH,cACH,IAEZF,6IAEJ/T,GAAgBoL,+BAAI,kGAChB1H,IAAAA,OAAQuQ,IAAAA,QAASR,IAAAA,OAEXxS,EAAUwS,EAAS,CAAEA,OAAAA,QAAWtS,WACpBM,KAAS4S,YAAY3Q,EAAQuQ,OAAS9S,EAAWF,iBAA7DqT,2BACC,CACHL,QAASK,EAAIF,6GAGrBnU,GAAkBmL,+BAAI,4FAAS1H,IAAAA,OAAQuQ,IAAAA,QAC7BxQ,EAAOhC,KAASsD,QAAQrB,yBACb,IAAItB,aACfmS,EAAU9Q,EAAK+Q,cAAcP,yBACf,IAAI/R,0BAIjBT,KACFgT,mBAAmB/Q,EAAQuQ,EAASM,EAAS,CAAEG,QAAQ,sGAEhEvU,GAAgBiL,KAAI,gBAChBuJ,IAAAA,KACAhR,IAAAA,KACAiR,IAAAA,gBACAC,IAAAA,eACAC,IAAAA,YACAlJ,IAAAA,KAGMmJ,EADKtT,KACQuT,cAAcL,EAAM,CACnChR,KAAAA,EACAiR,gBAAAA,EACAhJ,KAAAA,EACAiJ,eAAAA,EACAC,YAAAA,EACAG,gBAAiB,gBAAGC,IAAAA,OAAQC,IAAAA,MAKxBtV,GAAiB,CAAE8U,KAAAA,EAAMO,OAAAA,EAAQC,MAAAA,OAGnCjL,EAA8B,CAAE6K,QAAAA,UAClCA,EAAQK,QAAOlL,EAAOkL,MAAQL,EAAQK,OACnClL,KAGX9J,GAAgBgL,KAAI,gBAAEiK,IAAAA,IAAKC,IAAAA,OAAI1a,QAAAA,aAAU,aAC9B,IAAI2a,SAAQ,SAACC,GAChB/T,KAASgU,cAAcJ,EAAKC,GACvBI,KAAKF,UACC,kBAAKA,EAAQ,UAAWH,OACnCM,YAAW,WACPH,EAAQ,UAAWH,MACpBza,SAiBXsF,GAAwBkL,KAAI,gBAAG6I,IAAAA,QAASvQ,IAAAA,OAC9BmB,EAAKpD,SACNoD,EAAI,MAAM,IAAIxC,OACboB,EAAOoB,EAAGE,QAAQrB,OACnBD,EAAM,MAAM,IAAIrB,OACfwT,EAAUnS,EAAK+Q,cAAcP,OAC9B2B,EAAS,MAAM,IAAI1T,OAClBmC,EAASQ,EAAGW,gBACbnB,EAAQ,MAAM,IAAI7B,OACjBqT,EAAYpS,EAAK0E,aAClB2N,yBAAyBF,EAASvR,IAE3B,sBADJuR,EAAQjQ,UAEVoQ,EA1BV,SAAwBH,MAChBA,EAAQI,SAAWC,EAAYC,WACT,mBAAtBN,EAAQjQ,WACRiQ,EAAQtS,oBAED,MAELN,EAAU4S,EAAQO,qBACjBjC,EAAWlR,EAAXkR,eACa,WAAZA,GAAoC,YAAZA,IAC5B7N,QAAQrD,EAAQyI,OAAiC,iBAAjBzI,EAAQyI,MACxCmK,EAAQlD,cAAgBjR,KAAS+D,YAerB4Q,CAAeR,SACxB,CACHC,UAAAA,EACAE,QAAAA,MAGRnM,GAAiBwB,KAAI,gBAAG1E,IAAAA,eACdmK,EAAqBnK,EAAeoK,YAAYC,EAAUC,eACzD,CACHC,SAAUxK,GAAYC,GACtB8K,QAASX,EACTA,mBAAoBA,EACpBY,oBAAqB/K,EAAeoK,YAAYC,EAAUW,cC5LlE,IAAM2E,GAAkB5Y,EACpBiL,GACAnI,GACAD,GACAjE,GACA,SACIia,EACAC,EACAC,EACAC,UACCH,IACCC,IACAC,IACAC,KAGVlW,GACKiB,GAAG6H,GAAmBgG,SAAS,SAACZ,EAAGG,UAAUA,KAC7CF,MAAMnS,GACX+D,GACKkB,GAAGkI,GAAkB2F,SAAS,SAACZ,EAAGG,UAAUA,KAC5CF,MAAMnS,GACXiE,GACKgB,GAAGqI,IAAa,SAAC4E,cAAKgD,uBACtB/C,MAAM,CAACpQ,GAAU/B,IACtBkE,GACKe,GAAGqI,IAAa,SAAC4E,cAAKoC,sBACtBnC,MAAM,CAACpQ,GAAU/B,IAEtB8N,EAAQ,CACJC,KAAMjB,GAAmBW,KACzBQ,GAAI9J,KAGR2J,EAAQ,CACJC,KAAMZ,GAAkBM,KACxBQ,GAAI7J,KAGRmJ,EAAM,CACFnP,OAAQkG,GACRxD,OAAQgZ,GACR7G,OAAQnG,KAEZS,EAAM,CACFnP,OAAQiG,GACRvD,OAAQgZ,GACR7G,OAAQ9F,KAGZN,GAAegC,+BAAI,oGACf1E,IAAAA,eACA+C,IAAAA,UACAyH,IAAAA,KACAwF,IAAAA,YACAC,IAAAA,aAEKjQ,wBAAsB,IAAIpE,iBACzBsU,EAAoB,YAAdnN,EACRrI,EAAOgQ,cAAcG,SACrBnQ,EAAOgQ,cAAcC,mBACnB3K,EACDyK,SAASyF,EAAK1F,EAAMwF,EAAaC,iBAChC9F,EAAqBnK,EAAeoK,YAAYC,EAAUC,SAC1DC,EAAWxK,GAAYC,qBACtB,CACHuK,SAAAA,EACAO,QAASX,EACTA,mBAAoBA,EACpBY,oBAAqB/K,EAAeoK,YAAYC,EAAUW"}