{"version":3,"file":"index.js","sources":["../src/root.ts","../src/types/content.ts","../src/types/index.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/idbHelper.ts","../src/verification/public.ts","../src/cryptoCallbacks.ts","../src/reset-cross-signing/domain.ts","../src/reset-cross-signing/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/reducers.ts","../src/verification/init.ts","../src/reset-cross-signing/private.ts","../src/reset-cross-signing/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n\nexport const getUserDevicesFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore.stopPeeking()\n        // TODO Не чистить сторы, если userId нового юзера совпадает со старым юзером\n        clientStore.clearStores()\n        clientStore.crypto.stop()\n        clientStore.crypto.cryptoStore.deleteAllData()\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { \n    VerificationRequest, \n    IVerificationChannel, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: number\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n\nexport type InputToKeyParams = {\n  passphrase?: string\n  recoveryKey?: string\n}\n\nexport type CheckCanVerifyFxParams = {\n  profileId: string\n}\n\nexport type CheckKeyInfo = {\n  keyInfo: ISecretStorageKeyInfo\n}\n\nexport type ValidatePassphraseFxParams = CheckKeyInfo & { passphrase: string }\nexport type ValidateRecoveryKeyFxParams = CheckKeyInfo & { input: string }","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { createApi } from \"effector\"\nimport { IRecoveryKey } from \"matrix-js-sdk/lib\"\nimport { verificationDomain } from \"./domain\"\nimport {\n    CheckCanVerifyFxParams,\n    MyVerificationRequest,\n    StartVerificationDeviceParams,\n    CheckKeyInfo,\n    InputToKeyParams,\n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\n// Emodji SAS Verification\n\nexport const $isWaitingAnotherUser = verificationDomain\n    .store<boolean>(false)\n\nexport const {\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser\n} = createApi(\n    $isWaitingAnotherUser,\n    {\n        setWaitingAnotherUser: () => true,\n        resetWaitingAnotherUser: () => false\n    }\n)\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startThisDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n\n\n// Recovery Key\n\nexport const createRecoveryKeyAndPassPhraseFx = verificationDomain\n    .effect<string | undefined, IRecoveryKey, Error>()\n\nexport const onNeedRecoveryKeyOrPassphrase = verificationDomain\n    .event<void>()\n\nexport const startRecoveryKeyOrPassphraseVerification = verificationDomain\n    .event<void>()\n\nexport const setCheckKeyInfo = verificationDomain\n    .event<CheckKeyInfo>()\n\nexport const validateRecoveryKey = verificationDomain.event<string>()\n\nexport const onRecoveryKeyOrPassphraseSuccess = verificationDomain.event<void>()\n\nexport const onValidRecoveryKey = verificationDomain.event<void>()\nexport const onInvalidRecoveryKey = verificationDomain.event<Error>()\n\n// passphrasse verification \n\nexport const $hasPassphrase = verificationDomain.store<boolean>(false)\nexport const onHasPassphrase = verificationDomain.event<boolean>()\n\nexport const validatePassphrase = verificationDomain.event<string>()\nexport const onValidPassphrase = verificationDomain.event<void>()\nexport const onInvalidPassphrase = verificationDomain.event<Error>()\n\n// others\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkThisDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\nexport const checkCanVerifyFx = verificationDomain\n    .effect<CheckCanVerifyFxParams, boolean, Error>()\n\nexport const onUsersProfileUpdate = verificationDomain\n    .event<UserId[]>()\n\nexport const onResolveSecretStorageKey = verificationDomain\n    .event<InputToKeyParams>()\n\nexport const onRejectSecretStorageKey = verificationDomain\n    .event<void>()\n\n","import {\n    decodeRecoveryKey,\n    deriveKey,\n    DeviceTrustLevel,\n    encodeBase64,\n    encodeUnpaddedBase64,\n    ICryptoCallbacks,\n    ISecretStorageKeyInfo,\n    MatrixClient\n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\nimport {\n    InputToKeyParams,\n    onHasPassphrase,\n    setCheckKeyInfo,\n    onNeedRecoveryKeyOrPassphrase,\n    onRecoveryKeyOrPassphraseSuccess,\n    onRejectSecretStorageKey,\n} from \"@/verification\"\nimport { onResolveSecretStorageKey } from \"./verification\"\n\nlet secretStorageBeingAccessed = false\nlet secretStorageKeys: Record<string, Uint8Array> = {}\nlet secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction setCachingAllowed(newVal: boolean): void {\n    secretStorageBeingAccessed = newVal\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    secretStorageKeys[keyId] = key\n    secretStorageKeyInfo[keyId] = keyInfo\n}\n\nexport async function promptForBackupPassphrase(): Promise<Uint8Array> {\n    const key = new Uint8Array()\n\n    console.log(\"promptForBackupPassphrase\")\n    // const success = await finished;\n    // if (!success) throw new Error(\"Key backup prompt cancelled\");\n\n    return key\n}\n\nexport async function accessSecretStorage(\n    func = async () => { return },\n    forceReset = false\n): Promise<any> {\n    const cl = client()\n    setCachingAllowed(true)\n    try {\n        if (!(await cl.hasSecretStorageKey()) || forceReset) {\n            // Потребуется для сбросса кросс подписей \n        } else {\n            await cl.bootstrapCrossSigning({})\n            await cl.bootstrapSecretStorage({\n                getKeyBackupPassphrase: promptForBackupPassphrase,\n            })\n    \n            const keyId = Object.keys(secretStorageKeys)[0]\n            if (keyId) {\n                let dehydrationKeyInfo = {}\n                if (\n                    secretStorageKeyInfo[keyId]\n                    && secretStorageKeyInfo[keyId].passphrase\n                ) {\n                    dehydrationKeyInfo = {\n                        passphrase: secretStorageKeyInfo[keyId].passphrase\n                    }\n                }\n                console.log(\"Setting dehydration key\")\n                await cl\n                    .setDehydrationKey(\n                        secretStorageKeys[keyId],\n                        dehydrationKeyInfo,\n                        \"Backup device\"\n                    )\n            } else if (!keyId) {\n                console.warn(\"Not setting dehydration key: no SSSS key found\")\n            } else {\n                console.log(\"Not setting dehydration key: feature disabled\")\n            }\n    \n        }\n        // `return await` needed here to ensure `finally` block runs after the\n        // inner operation completes.\n        return await func()\n    } catch (e) {\n        // SecurityCustomisations.catchAccessSecretStorageError?.(e)\n        console.error(e)\n        // Re-throw so that higher level logic can abort as needed\n        throw e\n    } finally {\n        // Clear secret storage key cache now that work is complete\n        setCachingAllowed(false)\n        if (!isCachingAllowed()) {\n            secretStorageKeys = {}\n            secretStorageKeyInfo = {}\n        }\n    }\n}\n\n\nexport function makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (params: InputToKeyParams) => Promise<Uint8Array> {\n    return async (params) => {\n        if (params.passphrase) {\n            return deriveKey(\n                params.passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else if (params.recoveryKey) {\n            return decodeRecoveryKey(params.recoveryKey)\n        }\n        throw new Error(\"Invalid recoveryKey or passphrase\")\n    }\n}\n\ntype CreatePromiseResult<T> = {\n    promise: Promise<T>\n    resolve: (params: T) => void\n    reject: (params: any) => void\n}\n\nfunction createPromise<T>(): CreatePromiseResult<T> {\n    let resolve = (params: T) => { return }\n    let reject = (params: any) => { return }\n    const promise = new Promise<T>((res, rej) => {\n        resolve = res\n        reject = rej\n    })\n    return {promise, resolve, reject}\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cl = client()\n    let keyId = await cl.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if (!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    } \n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        [keyId, keyInfo] = keyInfoEntries[0]\n    }\n\n    // Check the in-memory cache\n    if (secretStorageKeys[keyId] && isCachingAllowed()) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (await cl.checkSecretStorageKey(dehydrationCache.key, keyInfo)) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n    const {promise, resolve, reject} = createPromise<InputToKeyParams>()\n    const resolveWatcher = onResolveSecretStorageKey.watch(resolve)\n    const rejectWatcher = onRejectSecretStorageKey.watch(reject)\n\n    promise.finally(() => {\n        resolveWatcher.unsubscribe()\n        rejectWatcher.unsubscribe()\n    })\n\n    onNeedRecoveryKeyOrPassphrase()\n    onHasPassphrase(Boolean(keyInfo.passphrase))\n    setCheckKeyInfo({ keyInfo })\n\n    const input = await promise\n\n    const key = await inputToKey(input)\n\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    onRecoveryKeyOrPassphraseSuccess()\n    return [keyId, key]\n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\" })\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if (key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        let data\n        try {\n            data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n        } catch (e) {\n            console.log(\"idbLoad for pickleKey failed\", e)\n        }\n        if (!data) {\n            return null\n        }\n        if (!data.encrypted || !data.iv || !data.cryptoKey) {\n            console.log(\"Badly formatted pickle key\")\n            return null\n        }\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        try {\n            const key = await crypto.subtle.decrypt(\n                { name: \"AES-GCM\", iv: data.iv, additionalData },\n                data.cryptoKey,\n                data.encrypted,\n            )\n            return encodeUnpaddedBase64(key)\n        } catch (e) {\n            console.log(\"Error decrypting pickle key\")\n            return null\n        }\n    }\n\nexport const CreatePickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        const crypto = window.crypto\n        const randomArray = new Uint8Array(32)\n        crypto.getRandomValues(randomArray)\n        const cryptoKey = await crypto.subtle.generateKey(\n            { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n        )\n        const iv = new Uint8Array(32)\n        crypto.getRandomValues(iv)\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        const encrypted = await crypto.subtle.encrypt(\n            { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n        )\n\n        try {\n            await IdbSave(\n                \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n            )\n        } catch (e) {\n            return null\n        }\n        return encodeUnpaddedBase64(randomArray)\n    }\n\nexport async function tryToUnlockSecretStorageWithDehydrationKey(\n    client: MatrixClient,\n): Promise<void> {\n    const key = dehydrationCache.key\n    let restoringBackup = false\n    if (key && (await client.isSecretStorageReady())) {\n        setCachingAllowed(true)\n        try {\n            await client.checkOwnCrossSigningTrust()\n    \n            // we also need to set a new dehydrated device to replace the\n            // device we rehydrated\n            let dehydrationKeyInfo = {}\n            if (\n                dehydrationCache.keyInfo \n                && dehydrationCache.keyInfo.passphrase\n            ) {\n                dehydrationKeyInfo = { \n                    passphrase: dehydrationCache.keyInfo.passphrase }\n            }\n            await client\n                .setDehydrationKey(key, dehydrationKeyInfo, \"Backup device\")\n    \n            // and restore from backup\n            const backupInfo = await client.getKeyBackupVersion()\n            if (backupInfo) {\n                restoringBackup = true\n                // don't await, because this can take a long time\n                client.restoreKeyBackupWithSecretStorage(backupInfo)\n                    .finally(() => {\n                        secretStorageBeingAccessed = false\n                        if (!isCachingAllowed()) {\n                            secretStorageKeys = {}\n                            secretStorageKeyInfo = {}\n                        }\n                    })\n            }\n        } finally {\n            dehydrationCache = {}\n            // the secret storage cache is needed for restoring from backup, so\n            // don't clear it yet if we're restoring from backup\n            if (!restoringBackup) {\n                setCachingAllowed(false)\n                if (!isCachingAllowed()) {\n                    secretStorageKeys = {}\n                    secretStorageKeyInfo = {}\n                }\n            }\n        }\n    }\n}\n    \n","import { createDomain } from \"effector\"\n\nexport const d = createDomain(\"resetCrossSigning\")\n","import { d } from \"./domain\"\nimport { \n    ConfirmResetCrossSigningFxResult, \n    OnInteractiveAuthStateUpdateResult \n} from \"./types\"\n\nexport const confirmResetCrossSigningFx = d\n    .effect<void, ConfirmResetCrossSigningFxResult, Error>()\n\n\nexport const submitAuthDict = d.event<string>()\n\nexport const onNeedUserPassword = d.event<void>()\nexport const onUserPasswordError = d.event<string>()\n\nexport const onInteractiveAuthBusyChange = d.event<boolean>()\nexport const onInteractiveAuthStateUpdate = d\n    .event<OnInteractiveAuthStateUpdateResult>()\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\nexport const InvalidBackupInfo = createCustomError(\"InvalidBackupInfo\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n\nexport const $isCryptoEnabled = cryptoDomain.store<boolean | null>(null)\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n    UserTrustLevel,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport {\n    checkBackupKeyFx,\n    initCryptoFx,\n    onCrossSigningKeyChange,\n} from \"@/crypto\"\nimport {\n    onVerificationRequest,\n    MyVerificationRequest,\n    onUpdateDeviceList,\n    onUsersProfileUpdate,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { DeviceInfo } from \"matrix-js-sdk/lib/crypto/deviceinfo\"\nimport { IdbDelete } from \"@/idbHelper\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Session.logged_out\", (args) => {\n        console.log(\"Session.logged_out\", args)\n    }],\n    // @TODO Реализовать. Этот эвент приходит когда логаут происходит из другой сессии.\n    // cli.on(HttpApiEvent.SessionLoggedOut, function (errObj) {\n    //     if (Lifecycle.isLoggingOut()) return;\n\n    //     // A modal might have been open when we were logged out by the server\n    //     Modal.closeCurrentModal('Session.logged_out');\n\n    //     if (errObj.httpStatus === 401 && errObj.data && errObj.data['soft_logout']) {\n    //         logger.warn(\"Soft logout issued by server - avoiding data deletion\");\n    //         Lifecycle.softLogout();\n    //         return;\n    //     }\n\n    //     Modal.createDialog(ErrorDialog, {\n    //         title: _t('Signed Out'),\n    //         description: _t('For security, this session has been signed out. Please sign in again.'),\n    //     });\n\n    //     dis.dispatch({\n    //         action: 'logout',\n    //     });\n    // });\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            const cl = client()\n            const deviceId = cl.getDeviceId()\n            const userId = cl.getUserId()\n            const isVerified = cl\n                .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n            if (isVerified || request.isSelfVerification) {\n                request.id = Date.now()\n                onVerificationRequest(request)\n            }\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n            onUsersProfileUpdate(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", (userIds: string[]) => {\n        onUpdateDeviceList(userIds)\n        onUsersProfileUpdate(userIds)\n    }],\n    [\"deviceVerificationChanged\", (\n        userId: string,\n        deviceId: string,\n        deviceInfo: DeviceInfo\n    ) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }],\n    [\"userTrustStatusChanged\", (userId: string, newStatus: UserTrustLevel) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }]\n])\n\nloginByPasswordFx.use(async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        {\n            method: \"POST\",\n            body: JSON.stringify({ type: LOGIN_BY_TOKEN, token: params.token })\n        }\n    )\n    const {\n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return {\n        userId: user_id,\n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.downloadKeys([cl.getUserId() ?? createClientParams.options.userId])\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await IdbDelete(\"pickleKey\", [cl.getUserId(), cl.getDeviceId()])\n    await IdbDelete(\"account\", \"mx_access_token\")\n    cl.stopClient()\n    await cl.logout()\n    destroyClient()\n})\n\ngetProfileInfoFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx,\n    getUserDevicesFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoom,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    \n    }),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoomMessage,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: toLiveTimeline,\n        fn: ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members, true)\n        await cl.downloadKeysForUsers(members, {})\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n\ngetUserDevicesFx.use(async (userId) => {\n    const cl = client()\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const setEnableCrypto = cryptoDomain.event<boolean>()\n","import { client } from \"@/matrix-client\"\nimport { forward } from \"effector\"\nimport { checkThisDeviceVerificationFx } from \"@/verification\"\nimport { destroyClientFx } from \"@/app\"\nimport { \n    crossSigningChangeFx, \n    setEnableCrypto\n} from \"./private\"\nimport { \n    $isCryptoEnabled,\n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    onCrossSigningKeyChange, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\n$isCryptoEnabled\n    .on(setEnableCrypto, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncheckBackupKeyFx.use(() => {\n    return client().getKeyBackupEnabled()\n})\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) {\n        setEnableCrypto(false)\n        return\n    }\n\n    await cl.initCrypto()\n    setEnableCrypto(true)\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n    checkThisDeviceVerificationFx()\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n    checkThisDeviceVerificationFx()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams, \n    CheckKeyInfo,\n    ValidatePassphraseFxParams,\n    ValidateRecoveryKeyFxParams,\n} from \"./types\"\n\n// Emodji SAS Verification\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n// Recovery key\n\nexport const restoreKeyBackupFx = verificationDomain\n    .effect<void, void, Error>()\n\nexport const $checkKeyInfo = verificationDomain\n    .store<CheckKeyInfo | null>(null)\n\nexport const validateRecoveryKeyFx = verificationDomain\n    .effect<ValidateRecoveryKeyFxParams, boolean, Error>()\n\n// others\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const validatePassphraseFx = verificationDomain\n    .effect<ValidatePassphraseFxParams, boolean, Error>()\n","import { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport {\n    onCancelVerificationEvent, \n    startSASFx, \n    updateVerificationPhase,\n    cancelVerificationEventFx, \n} from \"./private\"\nimport {\n    onUsersProfileUpdate, \n    setCurrentVerificationEvent \n} from \"./public\"\nimport { \n    MyVerificationRequest,\n    OnVerificationRequestFxParams, \n    Phase\n} from \"./types\"\n\n\nexport const onVerificationRequestFxReducer = async (\n    {\n        request, \n        currentRequest\n    }: OnVerificationRequestFxParams): Promise<MyVerificationRequest> => {\n    const onChange = () => {\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n            return\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            onUsersProfileUpdate([request.otherUserId])\n            return\n        }\n\n        if (request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n            return\n        }\n\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n            return\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const excludePhaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested\n    ]\n    if (!currentRequest && !excludePhaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n        && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n\n    return request\n}\n","import { forward, sample, guard, attach } from \"effector\"\n\nimport { client } from \"@/matrix-client\"\nimport { createDirectRoomFx } from \"@/room\"\nimport { MappedUser } from \"@/types\"\nimport { destroyClientFx } from \"@/app\"\nimport {\n    updateVerificationPhase,\n    onCancelVerificationEvent,\n    confirmSASVerificationFx,\n    onVerificationRequestFx,\n    startSASFx,\n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n    restoreKeyBackupFx,\n    cancelVerificationEventFx,\n    validateRecoveryKeyFx,\n    $checkKeyInfo,\n    validatePassphraseFx,\n} from \"./private\"\nimport {\n    onHasPassphrase,\n    $currentVerificationEvent,\n    $deviceIsVerified,\n    $verificationEvents,\n    checkThisDeviceVerificationFx,\n    confirmSASVerification,\n    startThisDeviceVerificationFx,\n    onVerificationRequest,\n    setCurrentVerificationEvent,\n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests,\n    checkCanVerifyFx,\n    createRecoveryKeyAndPassPhraseFx,\n    startRecoveryKeyOrPassphraseVerification,\n    $hasPassphrase,\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser,\n    setCheckKeyInfo,\n    validateRecoveryKey,\n    onValidRecoveryKey,\n    onInvalidRecoveryKey,\n    onRejectSecretStorageKey,\n    validatePassphrase,\n    onInvalidPassphrase,\n    onValidPassphrase,\n} from \"./public\"\nimport { \n    MyVerificationRequest, \n    ValidatePassphraseFxParams, \n    ValidateRecoveryKeyFxParams \n} from \"./types\"\nimport { onVerificationRequestFxReducer } from \"./reducers\"\nimport { InvalidBackupInfo } from \"@/errors\"\nimport { accessSecretStorage, makeInputToKey } from \"../cryptoCallbacks\"\n    \n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n    .reset(destroyClientFx)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n    .reset(destroyClientFx)\n// When copying an object, proto properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n    .reset(destroyClientFx)\n\n$hasPassphrase\n    .on(onHasPassphrase, (_, val) => val)\n    .reset(destroyClientFx)\n\n$checkKeyInfo\n    .on(setCheckKeyInfo, (_, val) => val)\n    .reset([destroyClientFx, onRejectSecretStorageKey])\n\nforward({\n    from: checkThisDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkThisDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx\n})\n\nforward({\n    from: [\n        startVerificationUserFx,\n        startVerificationDeviceFx,\n        confirmSASVerification,\n        startSASFx,\n        startThisDeviceVerificationFx\n    ],\n    to: setWaitingAnotherUser\n})\n\nforward({\n    from: [\n        onCancelVerificationEvent,\n        $currentVerificationEvent.updates\n    ],\n    to: resetWaitingAnotherUser\n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData,\n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nforward({\n    from: startRecoveryKeyOrPassphraseVerification,\n    to: restoreKeyBackupFx\n})\n\nforward({\n    from: validateRecoveryKeyFx.doneData,\n    to: onValidRecoveryKey\n})\n\nforward({\n    from: validateRecoveryKeyFx.failData,\n    to: onInvalidRecoveryKey,\n})\n\nforward({\n    from: validatePassphraseFx.doneData,\n    to: onValidPassphrase\n})\n\nforward({\n    from: validatePassphraseFx.failData,\n    to: onInvalidPassphrase,\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(onVerificationRequestFxReducer)\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    await (currentRequest.verifier as any).sasEvent.confirm()\n})\n\ncheckThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = Date.now()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n\ncheckCanVerifyFx.use(async ({ profileId }) => {\n    const cl = client()\n    const cryptoEnabled = cl.isCryptoEnabled()\n    const homeserverSupportsCrossSigning = await cl\n        .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n\n    const userTrust = cryptoEnabled && cl.checkUserTrust(profileId)\n    const userVerified = cryptoEnabled && userTrust && userTrust\n        .isCrossSigningVerified()\n    const isMe = profileId === cl.getUserId()\n    if (isMe && isVerified) return true\n\n    const canVerify = cryptoEnabled\n        && homeserverSupportsCrossSigning\n        && !userVerified\n        && isVerified\n    return canVerify\n})\n\ncreateRecoveryKeyAndPassPhraseFx.use(async (password) => {\n    const cl = client()\n    const key = await cl.createRecoveryKeyFromPassphrase(password)\n    if (!key) throw new Error(\"createRecovery Error\")\n    return key\n})\n\nrestoreKeyBackupFx.use(async () => {\n    const cl = client()\n    accessSecretStorage(async () => {\n        const backupInfo = await cl.getKeyBackupVersion()\n        await cl.checkOwnCrossSigningTrust()\n\n        if (!backupInfo) throw new InvalidBackupInfo(\"backupInfo is null\")\n        await cl.restoreKeyBackupWithSecretStorage(backupInfo)\n    })\n})\n\nguard({\n    source: sample({\n        clock: validateRecoveryKey,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, input) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            input\n        }),\n    }),\n    filter: (params): params is ValidateRecoveryKeyFxParams => Boolean(\n        params.keyInfo\n    ),\n    target: validateRecoveryKeyFx,\n})\n\nguard({\n    source: sample({\n        clock: validatePassphrase,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, passphrase) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            passphrase,\n        }),\n    }),\n    filter: (params): params is ValidatePassphraseFxParams => Boolean(\n        params.keyInfo\n    ),\n    target: validatePassphraseFx,\n})\n\nvalidateRecoveryKeyFx.use(async ({ input, keyInfo }) => {\n    const cl = client()\n    const decodedKey = cl.keyBackupKeyFromRecoveryKey(input)\n    const isValid = await cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n    if (!isValid) throw new Error(\"Invalid recovery Key\")\n    return isValid\n})\n\nvalidatePassphraseFx.use( async ({keyInfo, passphrase}) => {\n    const cl = client()\n    const makeInput = makeInputToKey(keyInfo)\n    const decodedKey = await makeInput({passphrase})\n    const isValid = await cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n    if (!isValid) throw new Error(\"Invalid passphrase\")\n    return isValid\n})\n\n","import { InteractiveAuth } from \"matrix-js-sdk\"\nimport { d } from \"./domain\"\nimport { SubmitAuthDictFxParams } from \"./types\"\n\nexport const $interactiveAuthInstance = d.store<InteractiveAuth | null>(null)\n\nexport const setInteractiveAuth = d.event<InteractiveAuth>()\nexport const submitAuthDictFx = d\n    .effect<SubmitAuthDictFxParams, void, Error>()\n","import { IAuthData, InteractiveAuth } from \"matrix-js-sdk\"\nimport { sample } from \"effector\"\n\nimport { client } from \"@/matrix-client\"\nimport { LOGIN_BY_PASSWORD } from \"@/constants\"\n\nimport { \n    confirmResetCrossSigningFx, \n    onInteractiveAuthBusyChange, \n    onInteractiveAuthStateUpdate, \n    onNeedUserPassword,\n    onUserPasswordError,\n    submitAuthDict\n} from \"./public\"\nimport { \n    $interactiveAuthInstance,\n    setInteractiveAuth,\n    submitAuthDictFx\n} from \"./private\"\nimport { ConfirmResetCrossSigningFxResult } from \"./types\"\n\n$interactiveAuthInstance\n    .on(setInteractiveAuth, (_, auth) => auth)\n    .reset(submitAuthDictFx.doneData)\n\nsample({\n    clock: submitAuthDict,\n    source: $interactiveAuthInstance,\n    filter: (\n        isInstance: InteractiveAuth | null,\n    ): isInstance is InteractiveAuth => Boolean(isInstance),\n    fn: (auth, pass) => ({\n        password: pass,\n        interactiveAuth: auth\n    }),\n    target: submitAuthDictFx\n})\n\nsample({\n    source: onInteractiveAuthStateUpdate,\n    filter: ({status}) => status.errcode === \"M_FORBIDDEN\",\n    fn: ({status}) => status.error as string,\n    target: onUserPasswordError,\n})\n\nconfirmResetCrossSigningFx.use(async () => {\n    const cl = client()\n    const promise = new Promise<\n        ConfirmResetCrossSigningFxResult\n    >((res, rej) => {\n        cl.bootstrapCrossSigning({\n            \n            authUploadDeviceSigningKeys: async (makeRequest) => {\n                const requestCallback = (\n                    auth: IAuthData, \n                ): Promise<IAuthData> => {\n                    return makeRequest(auth)\n                }\n                const interactiveAuth = new InteractiveAuth({\n                    doRequest: requestCallback,\n                    busyChanged: onInteractiveAuthBusyChange,\n                    stateUpdated: (nextStage, status) => {\n                        onInteractiveAuthStateUpdate({\n                            nextStage, status\n                        })\n                    },\n                    matrixClient: cl,\n                    // нам это не нужно \n                    requestEmailToken: undefined as any\n                })\n                setInteractiveAuth(interactiveAuth)\n                onNeedUserPassword()\n                await interactiveAuth.attemptAuth()\n            },\n\n            setupNewCrossSigning: true,\n        }).then(() => {\n            res({\n                result: true\n            })\n        })\n    })\n    return promise\n})\n\nsubmitAuthDictFx.use(async ({password, interactiveAuth}) => {\n    const cl = client()\n    await interactiveAuth.submitAuthDict(\n        {\n            \"type\": LOGIN_BY_PASSWORD,\n            \"user\": cl.getUserId(),\n            \"identifier\": {\n                \"type\": \"m.id.user\",\n                \"user\": cl.getUserId()\n            },\n            \"password\": password\n        }\n    )\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","stopPeeking","clearStores","crypto","stop","cryptoStore","deleteAllData","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","indexedDB","verificationDomain","$isWaitingAnotherUser","createApi","setWaitingAnotherUser","resetWaitingAnotherUser","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","startVerificationDevice","startThisDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","createRecoveryKeyAndPassPhraseFx","onNeedRecoveryKeyOrPassphrase","startRecoveryKeyOrPassphraseVerification","setCheckKeyInfo","validateRecoveryKey","onRecoveryKeyOrPassphraseSuccess","onValidRecoveryKey","onInvalidRecoveryKey","$hasPassphrase","onHasPassphrase","validatePassphrase","onValidPassphrase","onInvalidPassphrase","$deviceIsVerified","onUpdateDeviceList","checkThisDeviceVerificationFx","checkCanVerifyFx","onUsersProfileUpdate","onResolveSecretStorageKey","onRejectSecretStorageKey","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","IdbDelete","secretStorageBeingAccessed","secretStorageKeys","secretStorageKeyInfo","dehydrationCache","isCachingAllowed","setCachingAllowed","newVal","cacheSecretStorageKey","keyId","keyInfo","promptForBackupPassphrase","Uint8Array","console","log","accessSecretStorage","func","forceReset","cl","hasSecretStorageKey","bootstrapCrossSigning","bootstrapSecretStorage","getKeyBackupPassphrase","Object","keys","dehydrationKeyInfo","passphrase","setDehydrationKey","warn","error","makeInputToKey","params","deriveKey","salt","iterations","recoveryKey","decodeRecoveryKey","createPromise","promise","res","rej","keyInfos","getDefaultSecretStorageKeyId","keyInfoEntries","entries","length","checkSecretStorageKey","inputToKey","resolveWatcher","watch","rejectWatcher","unsubscribe","input","getDehydrationKey","userId","deviceId","requestId","name","deviceTrust","getUserId","isVerified","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","i","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","tryToUnlockSecretStorageWithDehydrationKey","restoringBackup","isSecretStorageReady","checkOwnCrossSigningTrust","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","confirmResetCrossSigningFx","submitAuthDict","onNeedUserPassword","onUserPasswordError","onInteractiveAuthBusyChange","onInteractiveAuthStateUpdate","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","InvalidBackupInfo","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","isReadUpTo","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","$isCryptoEnabled","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","args","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","getDeviceId","checkDeviceTrust","isSelfVerification","id","Date","now","userIds","initialFetch","deviceInfo","newStatus","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","downloadKeys","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeysForUsers","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","isMe","getStoredDevicesForUser","device","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","crossSigningChangeFx","setEnableCrypto","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","cancelVerificationEventFx","restoreKeyBackupFx","$checkKeyInfo","validateRecoveryKeyFx","updateDeviceVerification","validatePassphraseFx","onVerificationRequestFxReducer","currentRequest","onChange","cancelled","off","VerificationRequestEvent","Change","cancellationCode","phase","Done","otherUserId","Ready","Started","verifier","sasEvent","excludePhaseArray","Cancelled","Requested","requests","req","currentReq","canceledReq","val","failData","accept","beginKeyVerification","once","verify","cancel","confirm","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","profileId","cryptoEnabled","homeserverSupportsCrossSigning","userTrust","userVerified","canVerify","password","createRecoveryKeyFromPassphrase","checkKeyInfo","decodedKey","keyBackupKeyFromRecoveryKey","isValid","makeInput","$interactiveAuthInstance","setInteractiveAuth","submitAuthDictFx","auth","isInstance","pass","interactiveAuth","errcode","authUploadDeviceSigningKeys","InteractiveAuth","doRequest","busyChanged","stateUpdated","nextStage","matrixClient","requestEmailToken","attemptAuth","setupNewCrossSigning"],"mappings":"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"}