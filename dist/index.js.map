{"version":3,"file":"index.js","sources":["../src/root.ts","../src/types/content.ts","../src/types/index.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport enum ParsedMessageNodeTypes {\n  String = \"string\",\n  Link = \"link\",\n  Mention = \"mention\",\n}\n\nexport type ParsedMessageNode= {\n  type: ParsedMessageNodeTypes\n  content: string\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent, ParsedMessageNode } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n    parsedBody?: ParsedMessageNode[]\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType,\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole,\n    MsgType,\n    ParsedMessageNodeTypes,\n    ParsedMessageNode\n} from \"./types\"\n// regexp implements the rfc3986 standard\n// eslint-disable-next-line max-len\nconst LINK_REG_EXP = /(^| )(?:[a-zA-Z][a-zA-Z0-9+-\\.]*:(?:(?:\\/\\/(?:[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:]*@)?(?:\\[(?:(?:(?:[0-9A-Fa-f]{1,4}:){6}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|::(?:[0-9A-Fa-f]{1,4}:){5}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){4}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,1}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){3}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:){2}(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}:(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})?::(?:[0-9A-Fa-f]{1,4}:[0-9A-Fa-f]{1,4}|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))|(?:(?:[0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})?::[0-9A-Fa-f]{1,4}|(?:(?:[0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})?::)|v[0-9A-Fa-f]+\\.[a-zA-Z0-9-\\._~!\\$&'\\(\\)\\*\\+,;=:]+)\\]|(?:(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}(?:0?0?[0-9]|0?[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=]{0,255})(?::[0-9]*)?(?:\\/[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*)|\\/(?:[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]+(?:\\/[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*)?|[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]+(?:\\/[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@]*)*))(?:\\?[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@\\/\\?]*(?=#|$))?(?:#[a-zA-Z0-9-\\._~%0-9A-Fa-f!\\$&'\\(\\)\\*\\+,;=:@\\/\\?]*)?|(^| )([\\w]{0,}\\.[\\w]{0,}\\.|[\\w]{0,}\\.)(ru|com|me)\\S{0,}/gm\nconst MENTION_REG_EXP = /( |^)@\\S{0,}/gm\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nconst mapRegExpMatchAll = (\n    regExp: RegExp, type: ParsedMessageNodeTypes, message: string\n): {\n    index: number\n    content: string\n    type: ParsedMessageNodeTypes\n}[] =>  [...message.matchAll(regExp)].map((el) => {\n    return {\n        index: el.index ?? 0,\n        type: type,\n        content: el[0]\n    }\n})\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    const content = getMappedContent(event)\n    const message = content.body\n    const parsedBody: ParsedMessageNode[] = []\n    if (content.msgtype === MsgType.Text) {\n        const findContent = [\n            ...mapRegExpMatchAll(\n                MENTION_REG_EXP, ParsedMessageNodeTypes.Mention, message\n            ),\n            ...mapRegExpMatchAll(\n                LINK_REG_EXP, ParsedMessageNodeTypes.Link, message\n            ),\n        ].sort((a, b) => a.index - b.index)\n        let prevIndex = 0\n        if (!findContent.length) {\n            parsedBody.push({\n                type: ParsedMessageNodeTypes.String,\n                content: message\n            })\n        } else {\n            findContent.forEach((element) => {\n                const prevText = message.substring(prevIndex, element.index)\n                if (prevText.trim()) {\n                    parsedBody.push({\n                        type: ParsedMessageNodeTypes.String,\n                        content: prevText\n                    })\n                }\n                parsedBody.push({\n                    type: element.type,\n                    content: element.content.trim()\n                })\n                \n                prevIndex = element.index + element.content.length\n            })\n        }\n    }\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content,\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n        parsedBody: parsedBody,\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const { creator } = cl.getRoom(roomId).currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const isDirect = client().getRoom(roomId).currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const isDirect = client().getRoom(roomId).currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n"],"names":["MsgType","ParsedMessageNodeTypes","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","createOnSyncThrottled","ms","throttle","source","timeout","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","DEFAULT_INVITE_POWERLEVEL","DEFAULT_BAN_POWERLEVEL","DEFAULT_KICK_POWERLEVEL","DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL","DEFAULT_SET_DEFAULT_STATE_POWERLEVEL","DEFAULT_REDACT_POWERLEVEL","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","clientStore","messagesDomain","$messages","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","LINK_REG_EXP","MENTION_REG_EXP","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","mapRegExpMatchAll","regExp","type","_toConsumableArray","matchAll","el","index","content","toMessage","relation","getRelation","getContent","getMappedContent","body","parsedBody","msgtype","Text","findContent","Mention","Link","sort","a","b","prevIndex","length","element","prevText","substring","trim","String","getId","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","getSenderAvatarUrl","width","height","resizeMethod","allowDefault","allowDirectLinks","getAvatarUrl","getHomeserverUrl","getRoomMemberAvatarUrl","otherMember","mxcUrlToHttp","mxcUrl","getUploadCredentials","endpointUrl","headers","Authorization","getAccessToken","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","JSON","stringify","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","_client$getRoom$curre","_client$getRoom$curre2","_context6","httpStatus","usersIds","_client$getRoom$curre3","_client$getRoom$curre4","id","_context7","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","roomMessageBatch","loadNewMessagesFx","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","eventId","event_id","txnId","sendMessage","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir"],"mappings":"swBAEO,ICFKA,EAiBAC,ECJAC,EAkDAC,EA6GAC,EF1KCC,EAAOC,EAAa,QGApBC,EAAYF,EAAKG,OAAO,OCaxBC,EAAgBF,EAAUG,QAC1BC,EAAgBJ,EAAUG,QAC1BE,EAASL,EAAUG,QACnBG,EAAwB,SAACC,UAClCC,EAAS,CAAEC,OAAQJ,EAAQK,QAASH,KAE3BI,EAAoBX,EAC5BY,SACQC,EAAiBb,EACzBY,SACQE,EAAcd,EAAUY,SACxBG,EAAgBf,EACxBY,SACQI,EAAkBhB,EAC1BY,SACQK,EAAejB,EAAUY,SACzBM,EAAWlB,EAAUY,SACrBO,EAAiBnB,EACzBY,SACQQ,EAAkBpB,EAC1BY,SACQS,EAAmBrB,EAC3BY,SCnCQU,EAAqBxB,EAAKG,OAAO,gBCMjCsB,EAAyBD,EACjCV,SACQY,EAA8BF,EACtCV,SACQa,EAA+BH,EACvCV,SACQc,EAA2BJ,EACnCV,ULfL,SAAYnB,GACVA,kBACAA,iCACAA,kBACAA,gBACAA,kBACAA,oBACAA,gBACAA,kBACAA,wBATF,CAAYA,IAAAA,OAiBZ,SAAYC,GACVA,kBACAA,cACAA,oBAHF,CAAYA,IAAAA,OCJZ,SAAYC,GACRA,kBACAA,oBACAA,4BAHJ,CAAYA,IAAAA,OAkDZ,SAAYC,GACRA,gBACAA,kBACAA,YACAA,cACAA,gBALJ,CAAYA,IAAAA,OA6GZ,SAAYC,GACRA,gBACAA,wBAFJ,CAAYA,IAAAA,OK1KL,IC6DK8B,EAKAC,EDlECC,EAAa/B,EAAKG,OAAO,QE+BzB6B,EAA4B,GAC5BC,EAAyB,GACzBC,GAA0B,GAC1BC,GAAwC,EACxCC,GAAuC,GACvCC,GAA4B,GAE5BC,GAAUP,EAAWQ,MAAsB,MAC3CC,GAAqBT,EAAWQ,OAAe,GAC/CE,GAAsBV,EAC9BQ,MAAiC,MACzBG,GAAiBX,EACzBQ,MAAyC,MACjCI,GAAeZ,EAAWQ,MAA+B,MACzDK,GAAwBb,EAAW1B,QACnCwC,GAAkBd,EAAWQ,MAA6B,MAC1DO,GAAgBf,EAAWQ,MAAc,GAEzCQ,GAAiBhB,EACzBQ,MAAuC,IAE/BS,GAA6BjB,EACrCQ,MApBkC,IAqB1BU,GAA+BlB,EACvCQ,MAxBoC,IAyB5BW,GAA4BnB,EACpCQ,MAzBiC,IA0BzBY,GAAsCpB,EAC9CQ,MAzBgD,GA0BxCa,GAA+BrB,EACvCQ,MAzBoC,IA0B5Bc,GAAqCtB,EAC7CQ,MA5B+C,IA8BvCe,GAA4Bb,GACpCc,KACG,SAACC,0BAAYA,MAAAA,SAAAA,EAASC,QAClB,SAACC,UAAWA,EAAOC,aAAe7D,EAAqB8D,uBAAS,MAE/DC,GAA6BpB,GACrCc,KACG,SAACC,0BAAYA,MAAAA,SAAAA,EAASC,QAClB,SAACC,UAAWA,EAAOC,aAAe7D,EAAqBgE,yBACtD,MAGAC,GAAWC,EACpBlB,GAAeE,IACf,SAACiB,EAAGC,UAAMD,GAAKC,KAENC,GAAaH,EACtBlB,GAAeG,IACf,SAACgB,EAAGC,UAAMD,GAAKC,KAENE,GAAUJ,EACnBlB,GAAeI,IACf,SAACe,EAAGC,UAAMD,GAAKC,KAENG,GAAuBL,EAChClB,GAAeK,IACf,SAACc,EAAGC,UAAMD,GAAKC,KAENI,GAAaN,EACtBlB,GAAeM,IACf,SAACa,EAAGC,UAAMD,GAAKC,KAENK,GAAsBP,EAC/BlB,GAAeO,IACf,SAACY,EAAGC,UAAMD,GAAKC,KAGNM,GAAcR,EACvBtB,GACAG,IACA,SAAC4B,EAAQC,UAAmBC,QAAQF,IAAWE,QAAQD,MAG9CE,GAAoB7C,EAAW1B,QAC/BwE,GAAmB9C,EAAW1B,QAC9ByE,GAAmB/C,EAAW1B,QAC9B0E,GAAqBhD,EAAW1B,QAChC2E,GAAiBjD,EAAW1B,QAC5B4E,GAAWlD,EAAW1B,QACtB6E,GAAqBnD,EAAW1B,QAChC8E,GAAoBpD,EAAW1B,QAC/B+E,GAAsBrD,EAAW1B,QACjCgF,GAAetD,EAAW1B,QAC1BiF,GAAWvD,EAAW1B,QACtBkF,GAAiBxD,EAAW1B,QAC5BmF,GAAkBzD,EAAW1B,QAC7BoF,GAAoB1D,EAAW1B,QAC/BqF,GAAc3D,EAAW1B,QAEzBsF,GAA2B5D,EACnCjB,SACQ8E,GAAuB7D,EAC/BjB,SACQ+E,GAA2B9D,EACnCjB,SACQgF,GAAgB/D,EACxBjB,SACQiF,GAAgBhE,EACxBjB,SACQkF,GAAejE,EACvBjB,SACQmF,GAAqBlE,EAC7BjB,SACQoF,GAAenE,EAAWjB,SAC1BqF,GAAgBpE,EAAWjB,SAC3BsF,GAAiBrE,EAAWjB,SAC5BuF,GAAetE,EAAWjB,SAC1BwF,GAAavE,EACrBjB,SACQyF,GAAcxE,EACtBjB,SACQ0F,GAAazE,EACrBjB,SACQ2F,GAAgB1E,EACxBjB,SACQ4F,GAAe3E,EACvBjB,SACQ6F,GAAuB5E,EAC/BjB,UD5FL,SAAYe,GACRA,kBACAA,oBAFJ,CAAYA,IAAAA,OAKZ,SAAYC,GACRA,4CACAA,6BACAA,2BAHJ,CAAYA,IAAAA,OElEL,ICMH8E,GDNSC,GAAiB7G,EAAKG,OAAO,YEgB7B2G,GAAYD,GAAetE,MAAiB,IAE5CwE,GAAiBF,GAAexG,QAChC2G,GAAcH,GAAexG,QAC7B4G,GAAoBJ,GAAexG,QACnC6G,GAAmBL,GAAexG,QAClC8G,GAAyBN,GAAexG,QACxC+G,GAAwBP,GAAexG,QACvCgH,GAAkBR,GAAexG,QACjCiH,GAAmBT,GAAexG,QAElCkH,GAA0BV,GAAetE,OAAM,GAC/CiF,GAA2BX,GAAetE,OAAM,GAChDkF,GAAuBZ,GAAetE,OAAM,GAC5CmF,GAAsBb,GAAetE,OAAM,GAE3CoF,GAAgBd,GACxB/F,SACQ8G,GAAgBf,GACxB/F,SACQ+G,GAAkBhB,GAC1B/F,SACQgH,GAAoBjB,GAC5B/F,SACQiH,GAA0BlB,GAClC/F,SACQkH,GAAkBnB,GAC1B/F,SACQmH,GAAkBpB,GAC1B/F,SC7CQoH,GAAIlI,EAAKG,OAAO,WCAhBgI,GAAsBD,GAAEpH,SACxBsH,GAAoBF,GAAEpH,SHM/BuH,GAAuB,IACrBC,GAAkC,GAE3BC,GAAgB,WACrB3B,KACAA,GAAY4B,qBACZ5B,GAAc,OAIT6B,GAAe,gBACvBC,IAAAA,QAA+BjI,IAAtB4H,qBAEVE,UACWI,IAAPlI,IAAkB4H,GAAuB5H,GAC7CmG,GAAcgC,EAAOH,aAAaC,GAClCJ,GAAeO,SAAQ,yBAAEC,OAAWC,OAChCnC,GAAYoC,GAAGF,EAAWC,OAGrBE,GAAS,kBAAoBrC,IAE7BsC,GAAgB,SAACC,GAC1Bb,GAAec,WAAfd,KAAuBa,KAGdE,GAAyB,kBAC3BC,EAAYtC,GAAaqB,KIlCvBkB,GAAgBC,EAAkB,iBAClCC,GAAeD,EAAkB,gBACjCE,GAAuBF,EAAkB,wBACzCG,GACXH,EAAkB,2BACPI,GAAeJ,EAAkB,gBACjCK,GAAkBL,EAAkB,mBACpCM,GACXN,EAAkB,mBACPO,GACXP,EAAkB,wBCZPQ,GAAqB,iBACrBC,GAAuB,slBCgCpC,IAAMC,GAAe,q2EACfC,GAAkB,iBAEXC,GAAgB,SACzBC,EACAC,EACAC,UAEAF,EAAQG,KAAOD,EAAKE,mBAAmBC,MAAK,SAAChH,UACrCA,EAAOiH,SAAWL,GACfC,EACFK,iBAAiBlH,EAAOiH,OAAQN,EAAQQ,oBAE1CR,GAmCLS,GAAoB,SACtBC,EAAgBC,EAA8BX,UAK1CY,EAAIZ,EAAQa,SAASH,IAASxH,KAAI,SAAC4H,eAChC,CACHC,gBAAOD,EAAGC,qBAAS,EACnBJ,KAAMA,EACNK,QAASF,EAAG,iBAIJG,GACZjL,EACAwK,OAEMU,EAAWlL,EAAMmL,cACjBH,EAnDe,SAAChL,UACtBA,EAAMoL,aAkDUC,CAAiBrL,GAC3BgK,EAAUgB,EAAQM,KAClBC,EAAkC,MACpCP,EAAQQ,UAAYlM,EAAQmM,KAAM,KAC5BC,EAAc,YACbjB,GACCX,GAAiBvK,EAAuBoM,QAAS3B,MAElDS,GACCZ,GAActK,EAAuBqM,KAAM5B,KAEjD6B,MAAK,SAACC,EAAGC,UAAMD,EAAEf,MAAQgB,EAAEhB,SACzBiB,EAAY,EACXN,EAAYO,OAMbP,EAAYlD,SAAQ,SAAC0D,OACXC,EAAWnC,EAAQoC,UAAUJ,EAAWE,EAAQnB,OAClDoB,EAASE,QACTd,EAAWxC,KAAK,CACZ4B,KAAMpL,EAAuB+M,OAC7BtB,QAASmB,IAGjBZ,EAAWxC,KAAK,CACZ4B,KAAMuB,EAAQvB,KACdK,QAASkB,EAAQlB,QAAQqB,SAG7BL,EAAYE,EAAQnB,MAAQmB,EAAQlB,QAAQiB,UAlBhDV,EAAWxC,KAAK,CACZ4B,KAAMpL,EAAuB+M,OAC7BtB,QAAShB,UAoBd,CACHQ,qBAAqClC,IAApBkC,EACbA,EACAxK,EAAMuM,QACVvB,QAAAA,EACAwB,OAAQxM,EAAMwM,OACdC,eAAgBzM,EAAM0M,UACtBC,OAA4C,eAAnCzB,MAAAA,SAAAA,EAAgB,UACzB0B,SAAU5M,EAAM6M,cAAgB7M,EAAM8M,cACtCvB,WAAYA,YAIJwB,GAAa7C,SAClB,CACH9F,OAAQ8F,EAAK9F,OACb4I,KAAM9C,EAAK8C,KACXC,QAAS/C,EAAK+C,QACdC,aAAchD,EAAKiD,4BAIXC,GACZC,EACArN,UAEIA,EAAMsN,WAAW,cAAgBtN,EAAM8M,eAG3CO,EAAItE,KAAKkC,GAAUjL,IAFRqN,EAYR,IAAME,GAAe,SAACC,SACzB,CACIC,UAAWD,EAAKC,UAChBnD,OAAQkD,EAAKlD,OACboD,gBAAiBF,EAAKE,gBACtBC,YAAaH,EAAKG,YAClBC,cAAeJ,EAAKI,cACpBC,eAAgBL,EAAKK,eACrBC,SAAUN,EAAKM,oBA4BPC,GACZ7D,eACA8D,yDAAa,GAEPC,EAAKrF,KACLsF,EAAaD,EAAGE,QAAQjE,EAAK9F,YAC9B8J,EAAY,MAAM,IAAI9E,WACrBgF,EAASF,EAAWG,kBAAkBC,YACtCC,EAAqBL,EAAWM,aACjCC,eAAeC,EAAUC,gBAAiB,IAC1CvD,aAECwD,EAAWtK,kBAAQ4J,EAAWM,aAC/BC,eACGC,EAAUG,WACV,4BAHiBC,EAIlB1D,iCAJkB2D,EAIgBH,UAErCI,EAAc,EACTC,EAAIb,EAAOnC,OAAS,EAAGgD,GAAK,GAC7BA,IAAMb,EAAOnC,OAAS+B,EADUiB,IAAK,KAEnCjP,EAAQoO,EAAOa,GACfC,EAAahB,EACd3D,iBAAiB0D,EAAGkB,YAAuBnP,EAAMuM,YAClD2C,QAGJF,GAAe,MAEbI,EAAsBhB,EACvBhL,QAAO,SAACpD,SAAU,CAAC2J,GAAoBC,IACnCyF,SAASrP,EAAMsP,cAElBC,EAAYH,EAAoBA,EAAoBnD,OAAS,GAC/DuD,EAAcD,EAAYtE,GAAUsE,QAAajH,EAC/C2B,EAAWgE,EAAGkB,YAEhBK,IACIA,EAAYhD,OAAOlC,SAAWL,EAC9BuF,EAAYrF,KAAO+D,EACd3D,iBAAiBN,EAAUuF,EAAYhF,iBAE5CgF,EAAczF,GACVyF,EACAvF,EACAiE,QAINuB,EAASb,EACTV,EAAWwB,UAAUxB,EAAWyB,iBAChC,KAGAC,YAAerB,EAAmBsB,MAAM5F,kBAAa,kBAEpDC,OACH8E,YAAAA,EACAQ,YAAAA,EACAZ,SAAAA,EACAkB,aAAcL,MAAAA,SAAAA,EAAQnF,OAGtByF,SAAUN,EACJnL,kBAAQmL,EAAOjC,yBAAPwC,EAAatC,sBACrBpF,EACN2H,eAAiB/B,EAAmBgC,yBACpCC,YAAa5B,EACbqB,aAAAA,EACAQ,OAAQR,GAAgBrB,EAAmB8B,IAC3CC,QAASV,GAAgBrB,EAAmBgC,KAC5CC,UAAWZ,GAAgBrB,EAAmB9K,OAC9CgN,UAAWb,GAAgBrB,EAAmBmC,OAC9CC,cAAe,CACXC,2BACIhB,GAAgBrB,EACXH,OAAOM,EAAUmC,uBAE1BC,oBACIlB,GAAgBrB,EAAmBH,OAAOM,EAAUqC,YAExDC,kBACIpB,GAAgBrB,EAAmBH,OAAOM,EAAUuC,UAExDC,yBACItB,GAAgBrB,EACXH,OAAOM,EAAUC,iBAE1BwC,wBACIvB,GAAgBrB,EACXH,OAAOM,EAAU0C,oBAE1BC,wBACIzB,GAAgBrB,EACXH,OAAOM,EAAU4C,gBAE1BC,uBACI3B,GAAgBrB,EACXH,OAAOM,EAAU8C,eAE1BC,sBACI7B,GAAgBrB,EACXH,OAAOM,EAAUgD,8lBCtStBC,GAAYtN,OAClBuN,EAAWvN,EAAeiK,YAC3BlL,QAAO,SAACpD,SACL,CACI2J,GACAC,IACFyF,SAASrP,EAAMsP,cACpBuC,OAAOzE,GAAoB,IAC1Ba,EAAKrF,KACLxE,EAASC,EAAeiK,YAAY,GAAGwD,YACvC5H,EAAO+D,EAAGE,QAAQ/J,OACnB8F,EAAM,MAAM,IAAId,WACf2I,EAAa,GACbC,EAAgB,GAChB/H,EAAWgE,EAAGkB,YAChB8C,GAA4B,EAC5BC,GAAyB,EACpBjD,EAAI2C,EAAS3F,OAAS,EAAGgD,GAAK,EAAGA,IAClC2C,EAAS3C,GAAGzC,OAAOlC,SAAWL,EAC9B8H,EAAWhJ,KAAK6I,EAAS3C,IAEzB+C,EAAcjJ,KAAK6I,EAAS3C,WAGpC8C,EAAWvJ,SAAQ,SAACwB,GACZkI,EACAlI,EAAQG,MAAO,GAEfH,EAAUD,GAAcC,EAASC,EAAUC,GAC3CgI,EAAyB5N,QAAQ0F,EAAQG,UAGjD6H,EAAcxJ,SAAQ,SAACwB,GACfiI,EACAjI,EAAQG,MAAO,GAEfH,EAAQG,KAAOD,EACVK,iBAAiBN,EAAUD,EAAQQ,iBACxCyH,EAA4BjI,EAAQG,SAGrCyH,MAGEO,GAAqB,gBAC9B3F,IAAAA,OACA4F,IAAAA,MACAC,IAAAA,OACAC,IAAAA,iBACAC,aAAAA,oBACAC,iBAAAA,uBAEAhG,GAAUA,EAAOiG,aACXjG,EAAOiG,aACL7J,KAAS8J,mBACTN,EACAC,EACAC,EACAC,EACAC,GAEF,MAGGG,GAAyB,gBAClCvO,IAAAA,OACAkG,IAAAA,OACA8H,IAAAA,MACAC,IAAAA,OACAC,IAAAA,iBACAC,aAAAA,gBAEMrI,EAAOtB,KAASuF,QAAQ/J,OACzB8F,SACM,SAEL0I,EAAc1I,EAAKwF,UAAUpF,UAC9BsI,EAGEA,EAAYH,aACf7J,KAAS8J,mBACTN,EACAC,EACAC,EACAC,GACA,GARO,MAaFM,GAAe,gBACxBC,IAAAA,OACAV,IAAAA,MACAC,IAAAA,OACAC,IAAAA,aACAE,IAAAA,wBAEA5J,KAASiK,aACLC,EACAV,EACAC,OACiB/J,IAAjBgK,EAA6BA,EAAe,QAC5CE,IAGKO,GAAuB,iBACxB,CACJC,sBAAgBpK,KAAS8J,+CACzBO,QAAS,CACLC,+BAA0BtK,KAASuK,qBAKlCC,8BAAgB,WACzBhP,EACAiP,qFAEMpF,EAAKrF,OACSqF,EAAGE,QAAQ/J,GAAQoK,aAClCC,eACGC,EAAUG,WACV,IACFzD,aAJEkI,IAAAA,QAKFC,EAAWtF,EAAGuF,eF5II,YE4IyBpI,aAC3CqI,YAAcF,EAASD,kBAAY,IAEtCD,kCACcpF,EAAGyF,eFhJI,oBEiJbH,WACFF,EAAY,CAACjP,8EAIT6J,EAAGyF,eFtJQ,oBEuJjBH,WACFD,cAAcG,IAAarP,2GC9FpC,SAASuP,YACE/K,KAASgL,WAAW1Q,IAAI6J,IANnC8G,EAAQ,CACJC,KAAMtT,EAAkBuT,KAAK7Q,KAAI,iBAAO,CAAE8Q,iBAAkB,OAC5DC,GAAIrT,IAORiI,GAAc,CACV,CACI,gBACA,SACI7I,EACAkK,EACAgK,EACAC,EACAC,OAEMC,EAAYrU,EAAMsP,UACpB+E,IAAc1K,IACX0K,IAAczK,KAEZsK,GAAqBE,EAAKE,WAC3B3N,GAAYsE,GAAUjL,MAItC,CAAC,OAAQ,SAACkK,WACA+D,EAAKrF,KACL4E,EAAOtD,EAAKwF,UAAUzB,EAAGkB,aAC3B3B,GAA4B,WAApBA,EAAKlK,aAEAgB,kBAAQ4F,EAAKsE,aACzBC,eACGC,EAAUG,WACV,4BAHiB0F,EAIlBnJ,iCAJkBoJ,EAIgB5F,UAGrCxJ,GAAkB8E,GAElB7E,GAAY6E,MAGpB,CAAC,wBAAyB,kBAAMxD,OAChC,CAAC,OAAQ,SAAC+N,EAAOC,MACC,aAAVD,KAKU,YAAVA,GAAqC,aAAdC,MAKb,YAAVD,GAAqC,YAAdC,EAAyB,KAC1CC,EAAQhB,YACdjN,UACAxG,EAAOyU,aAPDA,EAAQhB,KACd5T,EAAc4U,YANRA,EAAQhB,KACd1T,EAAc0U,MAetB,CACI,oBACA,SAACC,EAAGH,EAAOpR,UAAuBqB,GAAmBrB,KAEzD,CACI,sBACA,SAACuR,EAAGH,EAAOpR,UAAuBqB,GAAmBrB,KAEzD,CACI,wBACA,SAACuR,EAAGvR,UAAuBqB,GAAmBrB,KAElD,CACI,kBACA,SAACuR,EAAGvR,UAAuBqB,GAAmBrB,KAElD,CACI,wBACA,SAACuR,EAAGvR,UAAuBqB,GAAmBrB,KAElD,CACI,oBACA,SAACuR,EAAGvR,GACAqB,GAAmBrB,GACnBmB,GAAiBnB,KAGzB,CACI,iBACA,SAACuR,EAAGpH,UAAe/I,GAAiB+I,KAExC,CACI,gBACA,SAACoH,EAAGpH,UAAe/I,GAAiB+I,KAExC,CACI,mBACA,SAACoH,EAAGpH,UAAe/I,GAAiB+I,OAI5ChN,EAAkBqU,+BAAK,WAAOC,kFACpBlM,KAASmM,MHjKc,mBGiKWD,6IAE5CpU,EAAemU,+BAAI,WAAOC,kGACCE,gBAChBF,EAAOG,oCACV,CACIC,OAAQ,OACR5J,KAAM6J,KAAKC,UAAU,CAACzK,KHvKJ,gBGuK0B0K,MAAOP,EAAOO,wBAJ5DC,kBAYIA,EAASC,8BAJfC,IAAAA,QACAC,IAAAA,aACAC,IAAAA,UACAC,IAAAA,6BAEG,CACHrL,OAAQkL,EACRI,YAAaH,EACbI,SAAUH,EACVI,UAAWH,uGAInBhV,EAAYkU,cAAI,yFACMjM,OAAV1G,IAAAA,gDACUA,EAAM6T,uDAG5BnV,EAAciU,KAAI,SAACC,UAAWlM,KAASoN,YAAYlB,MAEnD/T,EAAS8T,cAAK,4FACJjM,KAASqN,qDAGnBnV,EAAa+T,KAAI,kBAAMjM,KAASsN,gBAEhCrV,EAAgBgU,cAAI,6FACV5G,EAAKrF,8CACK,gBACVuN,EAAelI,EAAGkB,qDACE,gBACpB3B,EAAOS,EAAGmI,QAAQD,4CACN,iBACZE,EAAa9I,GAAaC,IAGhBC,WAAc4I,EAAW1I,8CACXM,EAAGqI,eAAeH,WAAtCI,SACNF,EAAW5I,UAAY8I,EAAYC,WACnCH,EAAW1I,YAAc4I,EAAYE,6CAElCJ,gDAGXrV,EAAe6T,+BAAI,4FAEX6B,IAAAA,mBACAC,IAAAA,kBAGJvO,GAAasO,KACK9N,OAAV1G,IAAAA,uCACSA,EAAM6T,iCACjBnN,KAASoN,YAAYW,qGAG/B1V,EAAgB4T,cAAI,uFACV5G,EAAKrF,sEAELqF,EAAGgI,0CACHhI,EAAG/L,0BAAH0U,EAAUC,uBAChB5I,EAAGiI,aACHhO,iDAGJhH,EAAiB2T,+BAAK,WAAOvK,6EACnB2D,EAAKrF,KACL4E,EAAOS,EAAGmI,QAAQ9L,yBACP,IAAIf,mCACdgE,GAAaC,sGC1OxBpM,EAAuByT,KAAI,kBAChBjM,KAASkO,kBAGpBzV,EAA4BwT,+BAAI,WAAOkC,2FAEzBnO,KAASoO,mBACXD,EAAQE,MACRF,EAAQG,KACRH,EAAQI,OAGRJ,EAAQK,sEAGZC,QAAQC,MAAM,4CACdD,QAAQC,iIAKhBhW,EAA6BuT,+BAAI,WAAOkC,wFAEhCM,QAAQC,MAAM,kCACM1O,KAASkO,6BAAvBS,SACNF,QAAQC,MAAMC,EAAMC,OAAOtN,eACrBtB,KAAS6O,mBACXV,EAAQE,MACRF,EAAQG,KACRH,EAAQI,OACRJ,EAAQW,kEAGZL,QAAQC,MAAM,0CACdD,QAAQC,6HAIhB/V,EAAyBsT,+BAAI,WAAMkC,kFACzBnO,KAAS+O,eACXZ,EAAQE,MACRF,EAAQG,KACRH,EAAQI,0GChDhBrP,GAAoB+M,+BAAI,WAAO+C,kFACrBhP,KAASiP,eAAeD,qGAGlC7P,GAAkB8M,+BAAI,WAAOiD,kFACnBlP,KAASmP,aAAaD,qGCDzB,IAAME,GAAatW,EACrBjB,SACQwX,GAAqBvW,EAC7BjB,SACQyX,GAAoCxW,EAC5CjB,omDCuFL,IAEM0X,GAAmBC,EAAO,CAAE3X,OAAQ0F,KACpCkS,GAAoBD,EAAO,CAAE3X,OAAQ0F,KACrCmS,GAAoBF,EAAO,CAAE3X,OAAQ0F,KAErCoS,GAA0BC,EAAS,CACrClY,OAAQqE,GACRpE,QAAS,MAGPkY,GAAmBL,EAAO,CAC5B3X,OAAQ6F,KAGNoS,GAAmBN,EAAO,CAC5B3X,OAAQ2F,wkBAEZ1D,GACKiG,GAAGnE,IAAkB,SAACrB,EAASE,MACzBA,EAAOsV,cACFxV,EAAQE,EAAOe,iBAERjB,WACFE,EAAOe,mBAAajB,EAAQE,EAAOe,UAASf,eAI9CF,WACFE,EAAOe,OAAS,CAACf,QAGtBF,EAAQE,EAAOe,QAAS,IACpBjB,EAAQE,EAAOe,QAAQ6H,OAAS,EAAG,KAC7B2M,EAAgBzV,EAAQE,EAAOe,QAChChB,QAAO,qBAAEkH,SAAuBjH,EAAOiH,0BAErCnH,WACFE,EAAOe,SAAawU,mBAGtBzV,EAAQE,EAAOe,cAEfjB,OAId0V,MAAMtU,IAEXlC,GACKsG,GAAG/D,IAAU,SAACkU,cAAK1U,UACnByU,MAAMtW,IACXD,GACKqG,GAAG+P,GAAiBK,UAAU,SAACD,EAAG5O,UAASA,KAC3C2O,MAAMtW,IACXC,GACKmG,GAAGqP,GAAWe,UAAU,SAACD,EAAGzU,UAAmBA,KAC/CwU,MAAMxW,IACXD,GACKuG,GAAG8P,GAAiBM,UAAU,SAACD,EAAGE,UAAUA,KAC5CH,MAAMxW,IACXI,GACKkG,GAAGsP,GAAmBc,UAAU,SAACD,EAAGG,UAAeA,KACnDJ,MAAMxW,IACXM,GACKgG,GAAGuP,GAAkCa,UAClC,SAACD,EAAGI,UAAgBA,EAAY3I,QACnCsI,MAAMxW,IACXQ,GACK8F,GAAGuP,GAAkCa,UAClC,SAACD,EAAGI,UAAgBA,EAAY7I,OACnCwI,MAAMxW,IACXO,GACK+F,GAAGuP,GAAkCa,UAClC,SAACD,EAAGI,UAAgBA,EAAYzV,UACnCoV,MAAMxW,IACXS,GACK6F,GAAGuP,GAAkCa,UAClC,SAACD,EAAGI,UAAgBA,EAAYC,iBACnCN,MAAMxW,IACXU,GACK4F,GAAGuP,GAAkCa,UAClC,SAACD,EAAGI,UAAgBA,EAAYxI,UACnCmI,MAAMxW,IACXW,GACK2F,GAAGuP,GAAkCa,UAClC,SAACD,EAAGI,UAAgBA,EAAYE,gBACnCP,MAAMxW,IAEXwR,EAAQ,CACJC,KAAM3N,GAAWkT,QACjBpF,GAAI9R,KAER0R,EAAQ,CACJC,KAAMlP,GACNqP,GAAI+D,KAERnE,EAAQ,CACJC,KAAMqE,GAAiBpE,KACvBE,GAAIpP,KAERgP,EAAQ,CACJC,KAAMwF,EAAO,CACThZ,OAAQkC,GACR+W,MAAOvB,GAAWjE,KAElByF,GAAI,eAERvF,GAAInP,KAER+O,EAAQ,CACJC,KAAMuE,GAAkBtE,KACxBE,GAAIlP,KAER8O,EAAQ,CACJC,KAAMwE,GAAkBvE,KACxBE,GAAIjP,KAGRyU,EAAM,CACFF,MAAOlX,GACPe,OAAQkB,QACRoV,OAAQhB,KAGZe,EAAM,CACFnZ,OAAQ+B,GACRe,OAAQ,SAACgB,UAAWE,QAAQF,IAC5BsV,OAAQ/U,KAEZ8U,EAAM,CACFF,MAAO9U,GACPnE,OAAQ8B,GACRgB,OAAQ,SAACuW,EAAoBnM,UAASlJ,QAClCqV,MAAAA,SAAAA,EAAoBC,MAAM,SAACvW,UACvBA,EAAOiH,SAAWkD,EAAKlD,YAE/BoP,OAAQ/U,KAEZ8U,EAAM,CACFF,MAAO7U,GACPpE,OAAQ+B,GACRe,OAAQ,SAACgB,EAAQf,UAAWe,IAAWf,EAAOe,QAC9CsV,OAAQ/U,KAEZ8U,EAAM,CACFnZ,OAAQ+B,GACRkX,MAAOhB,GACPnV,OAAQkB,QACRoV,OAAQjB,KAEZgB,EAAM,CACFnZ,OAAQgZ,EACJ,CAACjX,GAAgBG,IACjByC,IACA,2BACIb,OACAC,OAEAwV,IAAAA,eACAC,IAAAA,sBACAC,kCACqB,CACrB3V,OAAQA,EACRC,eAAgBA,EAChBwV,eAAAA,EACAC,kBAAAA,EACAC,uCAN8B,iBAStC3W,OAAQe,GACRuV,OAAQpB,KAEZmB,EAAM,CACFnZ,OAAQgZ,EACJ,CAACjX,GAAgBG,IACjB2C,IACA,iCAMyB,CACrBf,YACAC,oBACAwV,iBALAA,eAMAC,oBALAA,kBAMAC,4BAA6B,eAGrC3W,OAAQe,GACRuV,OAAQrB,KAEZoB,EAAM,CACFnZ,OAAQgZ,EACJ,CAACjX,GAAgBG,IACjB0C,IACA,+BAGyB,CACrBd,YACAC,oBACA0V,4BAA6B,eAGrC3W,OAAQe,GACRuV,OAAQvB,KAGZsB,EAAM,CACFF,MAAOlX,GACPe,OAAQkB,QACRoV,OAAQ,CAACzB,GAAoBC,MAGjCD,GAAmBpD,KAAI,SAACzQ,OACd6J,EAAKrF,KACLsB,EAAO+D,EAAGE,QAAQ/J,GAClBkG,EAAS2D,EAAGkB,gBACb7E,EAAQ,MAAM,IAAIf,OACjBiE,EAAOtD,EAAKwF,UAAUpF,OACvBkD,EAAM,MAAM,IAAIjE,UACdiE,EAAKyL,cAGhBf,GAAkCrD,KAAI,SAACzQ,mBAG7BmK,EAFK3F,KACKuF,QAAQ/J,GACSoK,aAC5BC,eAAe,sBAAuB,IACtCrD,mBAEE,CACHmF,eAAMhC,EAAmBgC,oBd3SM,Gc4S/BF,cAAK9B,EAAmB8B,mBd7SM,Gc8S9B5M,iBAAQ8K,EAAmB9K,sBd/SM,GcgTjC0V,wBAAe5K,EAAmByL,8Bd7SW,Ec+S7CZ,uBAAc7K,EAAmB0L,6Bd9SW,GcgT5CvJ,iBAAQnC,EAAmBmC,sBd/SM,OcmTzCpK,GAAqBuO,KAAI,SAACzQ,OAChB8F,EAAOtB,KAASuF,QAAQ/J,OACzB8F,EAAM,MAAM,IAAId,UACdc,EAAKgQ,aACPhX,KAAI,SAACG,OACImK,EAAO5E,KAASwN,QAAQ/S,EAAOiH,YAChCkD,EAAM,MAAM,IAAIjE,mBNnK7B4Q,EACA3M,OAEI4M,OAAO9R,SACmB,MAA1B6R,EAAWlB,WACXmB,EAAO1a,EAAS2a,MACiB,KAA1BF,EAAWlB,aAClBmB,EAAO1a,EAAS4a,WAEb,CACHhX,WAAY6W,EAAW7W,WACvB0J,KAAMmN,EAAWnN,KACjBiM,WAAYkB,EAAWlB,WACvBsB,eAAgBJ,EAAWI,eAC3BC,eAAgBL,EAAWK,eAC3BpW,OAAQ+V,EAAW/V,OACnBuU,OAAQwB,EAAWxB,OACnBnL,KAAMD,GAAaC,GACnBlD,OAAQ6P,EAAW7P,OACnB8P,KAAAA,GMiJWK,CAAmBpX,EAAQmK,SAI9C/H,GAAcoP,KAAI,SAACzQ,OACT8F,EAAOtB,KAASuF,QAAQ/J,OACzB8F,EAAM,MAAM,IAAId,mBN7LEc,SAChB,CACHwQ,iBAAkBxQ,EAAKyQ,wBM4LpBC,CAAW1Q,MAGtB8N,GAAWnD,+BAAI,4FAASzQ,IAAAA,OACd6J,EAAKrF,KACLsB,EAAOtB,KAASuF,QAAQ/J,yBACb,IAAIgF,iBACfyR,EAAc3Q,EAAK4Q,6CAClB,IAAIvS,EAAOwS,eAAe9M,EAAI4M,sGAGzC1U,GAAW0O,+BAAI,oGACXxQ,IAAAA,eACAwV,IAAAA,eACAC,IAAAA,kBACAC,IAAAA,4BAEK1V,wBAAsB,IAAIiF,0BAEzBjF,EAAe2W,KAAKnB,EAA0BC,aAC9CmB,EAAqB5W,EAAe6W,YAAYC,EAAUC,SAC5DxJ,EAAWD,GAAYtN,KAEvByV,GAAqBlI,EAAS3F,OAAS6N,uBAEjCuB,EAAOvB,EAAoBlI,EAAS3F,OACN,aAAhC8N,oCACwB1V,EACnBiX,SAAS/S,EAAOgT,cAAcC,UAAWH,WAD9CI,kDAGwBpX,EACnBiX,SAAS/S,EAAOgT,cAAcG,SAAUL,WAD7CI,iBAGAA,IACA7J,EAAWD,GAAYtN,qCAGxB,CACHuN,SAAAA,EACA+J,QAASV,EACTA,mBAAAA,EACAW,oBAAqBvX,EAAe6W,YAAYC,EAAUU,+GAIlErW,GAAyBqP,KAAI,SAACF,OACf/L,KACF,MAAM,IAAIS,UACZsL,EAAMzR,KAAI,SAACgH,UAAS6D,GAAmB7D,SAGlD3E,GACKsP,+BAAI,kGAASiH,IAAAA,KAAM1X,IAAAA,WAAQ2X,QAAAA,aAAUC,EAAcC,OAC1C/R,EAAOtB,KAASuF,QAAQ/J,yBACb,IAAIgF,iBACf8S,EAA6C,YACtBtT,KAASuT,OAAO,CACzC7Q,KAAM,CACF8Q,kBAAmB,CACfC,YAAa,CACTC,YAAaR,EACbS,KAAM,CAAC,gBACPnZ,OAAQ,CACJuR,MAAO,CAACvQ,IAEZoY,SAAUT,qBATpBU,2BAcCA,EACFL,kBACAC,YAAYK,QAAQxZ,KAAI,gBAAGyZ,IAAAA,OAElB3c,EAAQ,IAAI4c,EAAYD,GACxBE,EAAW7c,EAAM8c,wBACQxU,IAA3B4T,EAAaW,KACbX,EAAaW,GAAY3S,EACpBwF,UAAUmN,IAEnB7c,EAAMwM,OAAS0P,EAAaW,GACrB5R,GAAUjL,yGAIjC0F,GAAcmP,KAAI,kBAAMjM,KAASmU,WAAW7Z,IAAIqK,OAEhD5H,GAAakP,+BAAI,0GACb7H,IAAAA,KACAvJ,IAAAA,OACAuZ,IAAAA,eACAC,aAAAA,aAAe,KACfC,IAAAA,OAEM7U,EAAU,CACZ2E,KAAAA,EACAvJ,OAAAA,EACAuZ,WAAAA,EACAG,cAAeF,EAAa/Z,KAAI,SAACuR,mBAC1BA,OACH2I,UAAW3I,EAAM4I,SACjBA,cAAU/U,OAEd4U,OAAAA,YAIsBtU,KAAS0U,WAAWjV,0BAAtCkV,IAAAA,0BAED,CAAEnZ,OAAQmZ,sGAGrB3X,GAAmBiP,+BAAK,wGAAQrH,IAAAA,KAAM0P,IAAAA,WAAQD,aAAAA,aAAe,KACnDhP,EAAKrF,KNjaL4U,OAAAA,EAAAA,EADK5U,KACY4K,eDnDC,YCmD4BpI,aMka9CqS,ENjaCD,GAAeE,OAAOC,OAAOH,GAAaI,SAAQ,SAAC1T,UAASA,OMka7D2T,EAAaJ,EAAS7D,MACxB,SAACxV,0BAAW6J,EAAGE,QAAQ/J,uBAAX0Z,EAAoBtP,aAAarL,QAAQqK,EAAKlD,qDAEvC,CAAElG,OAAQyZ,kBAE3BxV,EAAU,CACZ0V,WAAW,EACXta,OAAQ,CAAC+J,EAAKlD,QACd0S,WAAYxb,UACZ2b,cAAeF,EAAa/Z,KAAI,SAACuR,mBAC1BA,OACH2I,UAAW3I,EAAM4I,SACjBA,cAAU/U,OAEd4U,OAAAA,EACAc,iBAAkB,CACdpP,UAAU,EACV0E,QAASrF,EAAGkB,uBAGMlB,EAAGqP,WAAWjV,0BAAhCkV,IAAAA,kBACFnK,GAAcmK,EAAS/P,EAAKlD,yCAE3B,CAAElG,OAAQmZ,sCN5bc,IAEzBC,kEM6bV3X,GAAagP,+BAAK,4FAAQvK,IAAAA,OAAQlG,IAAAA,mBACbwE,KAASuF,QAAQ/J,GAAQoK,aACrCC,eACGC,EAAUG,WACV,4BAHSoP,EAIV7S,iCAJU8S,EAIItP,gCAEX,IAAInF,GAAgB,yEAGpBb,KAASnF,OAAOW,EAAQkG,6DAET,MAAjB6T,KAAEC,kCACI,IAAI1U,GACN,0JAMhB5D,GAAc+O,+BAAK,kGAAQwJ,IAAAA,SAAUja,IAAAA,mBAChBwE,KAASuF,QAAQ/J,GAAQoK,aACrCC,eACGC,EAAUG,WACV,4BAHSyP,EAIVlT,iCAJUmT,EAII3P,gCAEX,IAAInF,GAAgB,qDAEb4U,mEAANG,6BAEG5V,KAASnF,OAAOW,EAAQoa,gEAET,MAAjBC,KAAEL,kCACI,IAAI1U,wQAM1B3D,GAAe8O,+BAAK,8FAASzQ,IAAAA,OAAQkG,IAAAA,OAAQoU,IAAAA,gBACnC9V,KAAS2H,KAAKnM,EAAQkG,EAAQoU,qGAGxC1Y,GAAa6O,+BAAK,4FAAQzQ,IAAAA,OAAQ4I,IAAAA,cACxBpE,KAAS+V,YAAYva,EAAQ4I,qGAGvC/G,GAAW4O,+BAAK,kGAAQzQ,IAAAA,WAAQwK,SAAAA,gBACtBX,EAAKrF,cACQqF,EAAG2Q,SAASxa,aAAzB8F,UACF0E,kCACMwE,GAAchP,mCAEjB2J,GAAmBhB,GAAa7C,uGAG3C9D,GAAcyO,KAAI,SAACzQ,OACT8J,EAAatF,KAASuF,QAAQ/J,UAC/B8J,EACEH,GAAmBhB,GAAamB,IADf,QAI5BhI,GAAY2O,+BAAK,WAAOzQ,kFACdwE,KAASiW,MAAMza,qGAGzBkB,GAAyBuP,KAAI,SAACvK,SACpB2D,EAAKrF,KACL4U,YAAcvP,EAAGuF,ePrjBC,gCOqjBJsL,EAAiC1T,aAC/ChH,EAASoZ,EAAYlT,IAAWkT,EAAYlT,GAAQ,OACtDlG,EAAQ,MAAM,IAAIgF,OAChBc,EAAO+D,EAAGE,QAAQ/J,OACpB8F,EAAM,MAAM,IAAId,UACb2D,GAAa7C,MAGxB7D,GAAawO,+BAAI,4FAASzQ,IAAAA,OAAQ2a,IAAAA,kBACxBnW,KAASoW,WAAW5a,EAAQ2a,EA/dR,uGCpFvB,IAAME,GAAiBzY,GACzB/F,SAEQye,GAAqB9G,EAAO,CACrC9X,OAAQ,CAAC+B,GAAgBG,IACzB/B,OAAQwe,GACRE,UAAW,SAACrK,6BACR1Q,YACAC,oBACA+a,UAAW,YACRtK,MAIEuK,GAAoBjH,EAAO,CACpC9X,OAAQ,CAAC+B,GAAgBG,IACzB/B,OAAQwe,GACRE,UAAW,SAACrK,6BACR1Q,YACAC,oBACA+a,UAAW,WACRtK,MAIEwK,GAAmB9Y,GAC3B/F,SAGQ8e,GAAc9F,EAAM,CAC7BnZ,OAAQgZ,EACJjX,GACA,CAAC8D,GAAW4N,KAAMkL,GAAelL,KAAMuL,GAAiBvL,OACxD,SACIyL,gBAKAA,cAAAA,EACApb,SAJI0Q,OAAU1Q,UACVuY,WAOZvZ,OAAQ,qBAAGoc,kBAAepb,UCgBxBqb,GAAmBzW,KAEnB0W,GAAoBtH,EAAO,CAC7B3X,OAAQ4e,GACRF,UAAW,kBAA4C,CACnD9D,OADUzJ,SACK3F,WAIvBxF,GACKkC,GAAG4W,IAAa,SAACzG,cAAKlH,YACtBiH,MAAMxW,IACXJ,GACK0G,GAAG4W,IAAa,SAACzG,cAAK6C,UACtB9C,MAAMxW,IAGX,IAAMsd,GAAkBhc,EACpBQ,GACAgD,GACAD,GACA/E,IACA,SACIyd,EACAC,EACAC,EACAC,UACCH,IACKC,IACAC,IACAC,KAGd5Y,GACKwB,GAAGuW,GAAmB7F,SAAS,SAACP,EAAGE,UAAUA,KAC7CH,MAAMxW,IACX6E,GACKyB,GAAG0W,GAAkBhG,SAAS,SAACP,EAAGE,UAAUA,KAC5CH,MAAMxW,IACX+E,GACKuB,GAAG4W,IAAa,SAACzG,cAAK8C,uBACtB/C,MAAM,CAAC5T,GAAU5C,KACtBgF,GACKsB,GAAG4W,IAAa,SAACzG,cAAKmC,sBACtBpC,MAAM,CAAC5T,GAAU5C,KAEtBwR,EAAQ,CACJC,KAAMoL,GAAmBnL,KACzBE,GAAInN,KAGR+M,EAAQ,CACJC,KAAMuL,GAAkBtL,KACxBE,GAAIlN,KAGR0S,EAAM,CACFnZ,OAAQ2G,GACR7D,OAAQuc,GACRjG,OAAQwF,KAEZzF,EAAM,CACFnZ,OAAQ0G,GACR5D,OAAQuc,GACRjG,OAAQ2F,KAGZxL,EAAQ,CACJC,KAAMwF,EACF7S,GACAiZ,GAAkB3L,MAClB,SAAC+E,cAAKhE,OAAoBlD,YAE9BqC,GAAIrN,KAGRiN,EAAQ,CACJC,KAAM2L,GAAiBvc,KAAI,SAAC0O,SAAc,CAAEA,SAAAA,MAC5CqC,GAAIyL,KAGRjG,EAAM,CACFnZ,OAAQgZ,EACJ,CAACjX,GAAgBG,IACjBnC,EAAS,CACLC,OAAQoG,GACRnG,QAzFkB,OA2FtB,yBAAE6D,aAA6B,CAC3BC,oBACAD,OAAQA,MAGhBhB,OAAQZ,GAAgBU,KAAI,SAAAmB,UAAkBC,QAAQD,MACtDqV,OAAQ4F,KAGZhG,EAAO,CACHC,MAAOf,EAAS,CACZlY,OAAQgH,GAAcyM,KACtBxT,QAtG2B,MAwG/BiZ,GAAI,gBAAG1E,IAAAA,OAAQ6H,IAAAA,aAAc,CACzBvY,OAAQ0Q,EAAO1Q,OACf4b,QAASrD,EAAOsD,WAEpBvG,OAAQjS,KAGZH,GAAcuN,+BAAK,8FACfzQ,IAAAA,OACA4G,IAAAA,QACAkV,IAAAA,eACQtX,KAASuX,YAAY/b,EAAQ4G,EAAqBkV,6IAE9D3Y,GAAcsN,+BAAK,gGACfzQ,IAAAA,OAAQ4b,IAAAA,QAAS1U,IAAAA,KAAM4U,IAAAA,eACftX,KAASuX,YACjB/b,EACA,iBACqB,CACboH,QAAS,SAAUF,KAAAA,kBAEP,CACZ8U,SAAU,YACVH,SAAUD,WAEH,cACH,IAEZE,6IAEJ1Y,GAAgBqN,+BAAI,kGAChBzQ,IAAAA,OAAQ4b,IAAAA,QAAStB,IAAAA,OAEXrW,EAAUqW,EAAS,CAAEA,OAAAA,QAAWpW,WACpBM,KAASyX,YAAYjc,EAAQ4b,OAAS1X,EAAWD,iBAA7DiY,2BACC,CACHN,QAASM,EAAIL,6GAGrBxY,GAAkBoN,+BAAI,4FAASzQ,IAAAA,OAAQ4b,IAAAA,QAC7B9V,EAAOtB,KAASuF,QAAQ/J,yBACb,IAAIgF,aACfmX,EAAUrW,EAAKsW,cAAcR,yBACf,IAAI9W,0BAGlBN,KACD6X,mBAAmBrc,EAAQ4b,EAASO,EAAS,CAAEG,QAAQ,sGAEhE/Y,GAAgBkN,KAAI,gBAChB8L,IAAAA,KACA3T,IAAAA,KACA4T,IAAAA,gBACAC,IAAAA,eACAC,IAAAA,YACAnW,IAAAA,KAGMoW,EADKnY,KACQoY,cAAcL,EAAM,CACnC3T,KAAAA,EACA4T,gBAAAA,EACAjW,KAAAA,EACAkW,eAAAA,EACAC,YAAAA,EACAG,gBAAiB,gBAAGC,IAAAA,OAAQC,IAAAA,MAKxBta,GAAiB,CAAE8Z,KAAAA,EAAMO,OAAAA,EAAQC,MAAAA,OAGnCxE,EAA8B,CAAEoE,QAAAA,UAClCA,EAAQK,QAAOzE,EAAOyE,MAAQL,EAAQK,OACnCzE,KAGX/U,GAAgBiN,KAAI,gBAAEwM,IAAAA,IAAKC,IAAAA,OAAI/gB,QAAAA,aAAU,aAC9B,IAAIghB,SAAQ,SAACC,GAChB5Y,KAAS6Y,cAAcJ,EAAKC,GACvBI,KAAKF,UACC,kBAAKA,EAAQ,UAAWH,OACnCM,YAAW,WACPH,EAAQ,UAAWH,MACpB9gB,SAiBXmH,GAAwBmN,KAAI,gBAAGmL,IAAAA,QAAS5b,IAAAA,OAC9B6J,EAAKrF,SACNqF,EAAI,MAAM,IAAI5E,OACba,EAAO+D,EAAGE,QAAQ/J,OACnB8F,EAAM,MAAM,IAAId,OACfwY,EAAU1X,EAAKsW,cAAcR,OAC9B4B,EAAS,MAAM,IAAI1Y,OAClBoB,EAAS2D,EAAGkB,gBACb7E,EAAQ,MAAM,IAAId,OACjBiH,EAAYvG,EAAKsE,aAClBqT,yBAAyBD,EAAStX,IAE3B,sBADJsX,EAAQtS,UAEVwS,EA1BV,SAAwBF,MAChBA,EAAQG,SAAWC,EAAYC,WACT,mBAAtBL,EAAQtS,WACRsS,EAAQ/U,oBAED,MAEL7B,EAAU4W,EAAQM,qBACjB1W,EAAWR,EAAXQ,eACa,WAAZA,GAAoC,YAAZA,IAC5BlH,QAAQ0G,EAAQM,OAAiC,iBAAjBN,EAAQM,MACxCsW,EAAQ9E,cAAgBlU,KAASuG,YAerBgT,CAAeP,SACxB,CACHnR,UAAAA,EACAqR,QAAAA,MAGRxC,GAAiBzK,KAAI,gBAAGxQ,IAAAA,eACd4W,EAAqB5W,EAAe6W,YAAYC,EAAUC,eACzD,CACHxJ,SAAUD,GAAYtN,GACtBsX,QAASV,EACTA,mBAAoBA,EACpBW,oBAAqBvX,EAAe6W,YAAYC,EAAUU,cAIlEoD,GAAepK,+BAAI,oGACfxQ,IAAAA,eACA+a,IAAAA,UACA/D,IAAAA,KACA+G,IAAAA,YACAC,IAAAA,aAEKhe,wBAAsB,IAAIiF,iBACzBgZ,EAAoB,YAAdlD,EACR7W,EAAOgT,cAAcG,SACrBnT,EAAOgT,cAAcC,mBACnBnX,EACDiX,SAASgH,EAAKjH,EAAM+G,EAAaC,iBAChCpH,EAAqB5W,EAAe6W,YAAYC,EAAUC,SAC1DxJ,EAAWD,GAAYtN,qBACtB,CACHuN,SAAAA,EACA+J,QAASV,EACTA,mBAAoBA,EACpBW,oBAAqBvX,EAAe6W,YAAYC,EAAUU"}
