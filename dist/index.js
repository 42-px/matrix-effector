import e,{MatrixEvent as t}from"matrix-js-sdk";export{MatrixEvent,Room,RoomMember}from"matrix-js-sdk";import{createDomain as n,forward as o}from"effector";import{batchEvents as i}from"@42px/effector-extra";import{createCustomError as r}from"@42px/custom-errors";const s=n("matrix"),d=s.effect(),a=s.effect(),c=s.effect(),f=s.effect(),m=s.effect(),l=s.effect(),u=s.effect(),g=s.effect(),v=s.effect(),p=s.effect(),I=s.effect(),w=s.effect(),y=s.effect(),R=s.effect(),E=s.effect(),h=s.effect(),T=s.event(),x=i(T,500),S=s.event(),C=s.event(),N=s.event();let A,M;const _=[],k=()=>(A||(A=e.createClient(M),_.forEach((([e,t])=>{A.on(e,t)}))),A),D=e=>{M=e},W=e=>{_.push(...e)},b="m.room.message",P="m.room.redaction";function B(e,t){return{originalEventId:void 0!==t?t:e.getId(),content:e.getContent(),sender:e.sender,originServerTs:e.getDate(),edited:Boolean(e.replacingEventId()),redacted:e.isRedacted()}}function F(e){const t=e.getLiveTimeline().getEvents();let n=0;const o=k();for(let i=t.length-1;i>=0&&o&&i!==t.length-99;i--){const r=t[i];if(e.hasUserReadEvent(o.getUserId(),r.getId()))break;n+=1}const i=t.filter((e=>[b,P].includes(e.getType()))).reduce(U,[]),r=i.length?i[i.length-1]:void 0;return{roomId:e.roomId,name:e.name,summary:e.summary,unreadCount:n,lastMessage:r}}function U(e,t){return t.isRelation("m.replace")||t.isRedaction()||e.push(B(t)),e}const z=r("RoomNotFound"),G=r("TimelineWindowUndefined"),L=r("PaginationFail"),Y=r("EventNotFound");function j(){return k().getRooms().map(F)}let q;o({from:d.done.map((()=>({initialSyncLimit:20}))),to:f}),d.use((e=>k().login("m.login.password",e))),a.use((e=>k().login("m.login.token",e))),c.use((async()=>{const{store:e}=k();if(e)return e.startup()})),f.use((e=>k().startClient(e))),l.use((async e=>(await k().search(e)).search_categories.room_events.results.map((({result:e})=>B(new t(e)))))),u.use((e=>k().searchMessageText(e))),g.use((({roomId:e,content:t,txnId:n})=>k().sendMessage(e,t,n))),v.use((({roomId:e,eventId:t,body:n,txnId:o})=>k().sendMessage(e,{"m.new_content":{msgtype:"m.text",body:n},"m.relates_to":{rel_type:"m.replace",event_id:t},msgtype:"m.text",body:""},o))),p.use((async({roomId:e,eventId:t,reason:n})=>{const o=n?{reason:n}:void 0;return{eventId:(await k().redactEvent(e,t,void 0,o)).event_id}})),I.use((e=>{const t=k().getRoom(e);return t?t.timeline.filter((e=>[b,P].includes(e.getType()))).reduce(U,[]):[]})),W([["Room.timeline",(e,t,n,o,i)=>{const r=e.getType();r!==b&&r!==P||!n&&i.liveEvent&&T(function(e){const t={eventId:e.getId(),content:e.getContent(),originServerTs:e.getDate(),roomId:e.getRoomId(),sender:e.sender,type:e.getType(),redaction:e.isRedaction(),redacted:e.isRedacted(),editing:Boolean(e.isRelation())};return e.hasAssocation()&&(t.relatedEventId=e.getAssociatedId()),t}(e))}],["sync",(e,t)=>{if("PREPARED"!==e)if("SYNCING"!==e||"PREPARED"!==t)if("SYNCING"!==e||"SYNCING"!==t);else{const e=j();N(e)}else{const e=j();S(e)}else{const e=j();C(e)}}]]),h.use((({roomId:e,eventId:t})=>{const n=k().getRoom(e);if(!n)throw new z;const o=n.findEventById(t);if(!o)throw new Y;return k().setRoomReadMarkers(e,t,o)})),m.use((()=>k().stopClient())),w.use((async({roomId:t,initialEventId:n,initialWindowSize:o})=>{const i=k(),r=k().getRoom(t);if(!r)throw new z;const s=r.getUnfilteredTimelineSet();return q=new e.TimelineWindow(i,s),await q.load(n,o),q.getEvents().filter((e=>[b,P].includes(e.getType()))).reduce(U,[])})),R.use((async({initialEventId:e,initialWindowSize:t})=>{if(!q)throw new G;return await q.load(e,t),q.getEvents().filter((e=>[b,P].includes(e.getType()))).reduce(U,[])})),y.use((()=>q?q.getEvents().filter((e=>[b,P].includes(e.getType()))).reduce(U,[]):[])),E.use((async({direction:t,size:n,makeRequest:o,requestLimit:i})=>{if(!q)throw new G;const r="forward"===t?e.EventTimeline.FORWARDS:e.EventTimeline.BACKWARDS;if(!await q.paginate(r,n,o,i))throw new L;return q.getEvents().filter((e=>[b,P].includes(e.getType()))).reduce(U,[])}));export{k as client,p as deleteMessageFx,v as editMessageFx,I as getRoomTimelineFx,y as getTimelineWindowMessagesFx,c as initStoreFx,w as initTimelineWindowFx,R as loadTimelineWindowFx,d as loginByPasswordFx,a as loginByTokenFx,C as onCachedState,W as onClientEvent,S as onInitialSync,N as onSync,E as paginateTimelineWindowFx,D as prependClientParams,h as readAllMessages,T as roomMessage,x as roomMessageBatch,l as searchFx,u as searchMessageTextFx,g as sendMessageFx,f as startClientFx,m as stopClientFx};
//# sourceMappingURL=index.js.map
