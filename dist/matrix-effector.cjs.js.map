<<<<<<< HEAD
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/idbHelper.ts","../src/verification/public.ts","../src/cryptoCallbacks.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/reducers.ts","../src/verification/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n\nexport const getUserDevicesFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore.stopPeeking()\n        // TODO Не чистить сторы, если userId нового юзера совпадает со старым юзером\n        clientStore.clearStores()\n        clientStore.crypto.stop()\n        clientStore.crypto.cryptoStore.deleteAllData()\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { \n    VerificationRequest, \n    IVerificationChannel, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: number\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n\nexport type InputToKeyParams = {\n  passphrase?: string\n  recoveryKey?: string\n}\n\nexport type CheckCanVerifyFxParams = {\n  profileId: string\n}\n\nexport type CheckKeyInfo = {\n  keyInfo: ISecretStorageKeyInfo\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { createApi } from \"effector\"\nimport { IRecoveryKey } from \"matrix-js-sdk/lib\"\nimport { verificationDomain } from \"./domain\"\nimport {\n    CheckCanVerifyFxParams,\n    MyVerificationRequest,\n    StartVerificationDeviceParams,\n    CheckKeyInfo,\n    InputToKeyParams,\n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\n// Emodji SAS Verification\n\nexport const $isWaitingAnotherUser = verificationDomain\n    .store<boolean>(false)\n\nexport const {\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser\n} = createApi(\n    $isWaitingAnotherUser,\n    {\n        setWaitingAnotherUser: () => true,\n        resetWaitingAnotherUser: () => false\n    }\n)\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startThisDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n\n\n// Recovery Key\n\nexport const createRecoveryKeyAndPassPhraseFx = verificationDomain\n    .effect<string | undefined, IRecoveryKey, Error>()\n\nexport const onNeedRecoveryKeyOrPassphrase = verificationDomain\n    .event<void>()\n\nexport const startRecoveryKeyOrPassphraseVerification = verificationDomain\n    .event<void>()\n\nexport const setCheckKeyInfo = verificationDomain\n    .event<CheckKeyInfo>()\n\nexport const onCheckSecretStorageKey = verificationDomain.event<string>()\n\nexport const onRecoveryKeyOrPassphraseSuccess = verificationDomain.event<void>()\n\nexport const onValidRecoveryKey = verificationDomain.event<void>()\nexport const onInvalidRecoveryKey = verificationDomain.event<Error>()\n\n// passphrasse verification \n\nexport const $hasPassphrase = verificationDomain.store<boolean>(false)\nexport const onHasPassphrase = verificationDomain.event<boolean>()\n\n// others\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkThisDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\nexport const checkCanVerifyFx = verificationDomain\n    .effect<CheckCanVerifyFxParams, boolean, Error>()\n\nexport const onUsersProfileUpdate = verificationDomain\n    .event<UserId[]>()\n\nexport const onResolveSecretStorageKey = verificationDomain\n    .event<InputToKeyParams>()\n\nexport const onRejectSecretStorageKey = verificationDomain\n    .event<void>()\n\n","import {\n    decodeRecoveryKey,\n    deriveKey,\n    DeviceTrustLevel,\n    encodeBase64,\n    encodeUnpaddedBase64,\n    ICryptoCallbacks,\n    ISecretStorageKeyInfo,\n    MatrixClient\n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\nimport {\n    InputToKeyParams,\n    onHasPassphrase,\n    setCheckKeyInfo,\n    onNeedRecoveryKeyOrPassphrase,\n    onRecoveryKeyOrPassphraseSuccess,\n    onRejectSecretStorageKey,\n} from \"@/verification\"\nimport { onResolveSecretStorageKey } from \"./verification\"\n\nlet secretStorageBeingAccessed = false\nlet secretStorageKeys: Record<string, Uint8Array> = {}\nlet secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction setCachingAllowed(newVal: boolean): void {\n    secretStorageBeingAccessed = newVal\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    secretStorageKeys[keyId] = key\n    secretStorageKeyInfo[keyId] = keyInfo\n}\n\nexport async function promptForBackupPassphrase(): Promise<Uint8Array> {\n    const key = new Uint8Array()\n\n    console.log(\"promptForBackupPassphrase\")\n    // const success = await finished;\n    // if (!success) throw new Error(\"Key backup prompt cancelled\");\n\n    return key\n}\n\nexport async function accessSecretStorage(\n    func = async () => { return },\n    forceReset = false\n): Promise<any> {\n    const cl = client()\n    setCachingAllowed(true)\n    try {\n        if (!(await cl.hasSecretStorageKey()) || forceReset) {\n            // Потребуется для сбросса кросс подписей \n        } else {\n            await cl.bootstrapCrossSigning({})\n            await cl.bootstrapSecretStorage({\n                getKeyBackupPassphrase: promptForBackupPassphrase,\n            })\n    \n            const keyId = Object.keys(secretStorageKeys)[0]\n            if (keyId) {\n                let dehydrationKeyInfo = {}\n                if (\n                    secretStorageKeyInfo[keyId]\n                    && secretStorageKeyInfo[keyId].passphrase\n                ) {\n                    dehydrationKeyInfo = {\n                        passphrase: secretStorageKeyInfo[keyId].passphrase\n                    }\n                }\n                console.log(\"Setting dehydration key\")\n                await cl\n                    .setDehydrationKey(\n                        secretStorageKeys[keyId],\n                        dehydrationKeyInfo,\n                        \"Backup device\"\n                    )\n            } else if (!keyId) {\n                console.warn(\"Not setting dehydration key: no SSSS key found\")\n            } else {\n                console.log(\"Not setting dehydration key: feature disabled\")\n            }\n    \n        }\n        // `return await` needed here to ensure `finally` block runs after the\n        // inner operation completes.\n        return await func()\n    } catch (e) {\n        // SecurityCustomisations.catchAccessSecretStorageError?.(e)\n        console.error(e)\n        // Re-throw so that higher level logic can abort as needed\n        throw e\n    } finally {\n        // Clear secret storage key cache now that work is complete\n        setCachingAllowed(false)\n        if (!isCachingAllowed()) {\n            secretStorageKeys = {}\n            secretStorageKeyInfo = {}\n        }\n    }\n}\n\n\nfunction makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (params: InputToKeyParams) => Promise<Uint8Array> {\n    return async (params) => {\n        if (params.passphrase) {\n            return deriveKey(\n                params.passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else if (params.recoveryKey) {\n            return decodeRecoveryKey(params.recoveryKey)\n        }\n        throw new Error(\"Invalid recoveryKey or passphrase\")\n    }\n}\n\ntype CreatePromiseResult<T> = {\n    promise: Promise<T>\n    resolve: (params: T) => void\n    reject: (params: any) => void\n}\n\nfunction createPromise<T>(): CreatePromiseResult<T> {\n    let resolve = (params: T) => { return }\n    let reject = (params: any) => { return }\n    const promise = new Promise<T>((res, rej) => {\n        resolve = res\n        reject = rej\n    })\n    return {promise, resolve, reject}\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cl = client()\n    let keyId = await cl.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if (!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    } \n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        [keyId, keyInfo] = keyInfoEntries[0]\n    }\n\n    // Check the in-memory cache\n    if (secretStorageKeys[keyId] && isCachingAllowed()) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (await cl.checkSecretStorageKey(dehydrationCache.key, keyInfo)) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n    const {promise, resolve, reject} = createPromise<InputToKeyParams>()\n    const resolveWatcher = onResolveSecretStorageKey.watch(resolve)\n    const rejectWatcher = onRejectSecretStorageKey.watch(reject)\n\n    promise.finally(() => {\n        resolveWatcher.unsubscribe()\n        rejectWatcher.unsubscribe()\n    })\n\n    onNeedRecoveryKeyOrPassphrase()\n    onHasPassphrase(Boolean(keyInfo.passphrase))\n    setCheckKeyInfo({ keyInfo })\n\n    const input = await promise\n\n    const key = await inputToKey(input)\n\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    onRecoveryKeyOrPassphraseSuccess()\n    return [keyId, key]\n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\" })\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if (key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        let data\n        try {\n            data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n        } catch (e) {\n            console.log(\"idbLoad for pickleKey failed\", e)\n        }\n        if (!data) {\n            return null\n        }\n        if (!data.encrypted || !data.iv || !data.cryptoKey) {\n            console.log(\"Badly formatted pickle key\")\n            return null\n        }\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        try {\n            const key = await crypto.subtle.decrypt(\n                { name: \"AES-GCM\", iv: data.iv, additionalData },\n                data.cryptoKey,\n                data.encrypted,\n            )\n            return encodeUnpaddedBase64(key)\n        } catch (e) {\n            console.log(\"Error decrypting pickle key\")\n            return null\n        }\n    }\n\nexport const CreatePickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        const crypto = window.crypto\n        const randomArray = new Uint8Array(32)\n        crypto.getRandomValues(randomArray)\n        const cryptoKey = await crypto.subtle.generateKey(\n            { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n        )\n        const iv = new Uint8Array(32)\n        crypto.getRandomValues(iv)\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        const encrypted = await crypto.subtle.encrypt(\n            { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n        )\n\n        try {\n            await IdbSave(\n                \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n            )\n        } catch (e) {\n            return null\n        }\n        return encodeUnpaddedBase64(randomArray)\n    }\n\nexport async function tryToUnlockSecretStorageWithDehydrationKey(\n    client: MatrixClient,\n): Promise<void> {\n    const key = dehydrationCache.key\n    let restoringBackup = false\n    if (key && (await client.isSecretStorageReady())) {\n        setCachingAllowed(true)\n        try {\n            await client.checkOwnCrossSigningTrust()\n    \n            // we also need to set a new dehydrated device to replace the\n            // device we rehydrated\n            let dehydrationKeyInfo = {}\n            if (\n                dehydrationCache.keyInfo \n                && dehydrationCache.keyInfo.passphrase\n            ) {\n                dehydrationKeyInfo = { \n                    passphrase: dehydrationCache.keyInfo.passphrase }\n            }\n            await client\n                .setDehydrationKey(key, dehydrationKeyInfo, \"Backup device\")\n    \n            // and restore from backup\n            const backupInfo = await client.getKeyBackupVersion()\n            if (backupInfo) {\n                restoringBackup = true\n                // don't await, because this can take a long time\n                client.restoreKeyBackupWithSecretStorage(backupInfo)\n                    .finally(() => {\n                        secretStorageBeingAccessed = false\n                        if (!isCachingAllowed()) {\n                            secretStorageKeys = {}\n                            secretStorageKeyInfo = {}\n                        }\n                    })\n            }\n        } finally {\n            dehydrationCache = {}\n            // the secret storage cache is needed for restoring from backup, so\n            // don't clear it yet if we're restoring from backup\n            if (!restoringBackup) {\n                setCachingAllowed(false)\n                if (!isCachingAllowed()) {\n                    secretStorageKeys = {}\n                    secretStorageKeyInfo = {}\n                }\n            }\n        }\n    }\n}\n    \n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\nexport const InvalidBackupInfo = createCustomError(\"InvalidBackupInfo\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n\nexport const $isCryptoEnabled = cryptoDomain.store<boolean | null>(null)\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n    UserTrustLevel,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport {\n    checkBackupKeyFx,\n    initCryptoFx,\n    onCrossSigningKeyChange,\n} from \"@/crypto\"\nimport {\n    onVerificationRequest,\n    MyVerificationRequest,\n    onUpdateDeviceList,\n    onUsersProfileUpdate,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { DeviceInfo } from \"matrix-js-sdk/lib/crypto/deviceinfo\"\nimport { IdbDelete } from \"@/idbHelper\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Session.logged_out\", (args) => {\n        console.log(\"Session.logged_out\", args)\n    }],\n    // @TODO Реализовать. Этот эвент приходит когда логаут происходит из другой сессии.\n    // cli.on(HttpApiEvent.SessionLoggedOut, function (errObj) {\n    //     if (Lifecycle.isLoggingOut()) return;\n\n    //     // A modal might have been open when we were logged out by the server\n    //     Modal.closeCurrentModal('Session.logged_out');\n\n    //     if (errObj.httpStatus === 401 && errObj.data && errObj.data['soft_logout']) {\n    //         logger.warn(\"Soft logout issued by server - avoiding data deletion\");\n    //         Lifecycle.softLogout();\n    //         return;\n    //     }\n\n    //     Modal.createDialog(ErrorDialog, {\n    //         title: _t('Signed Out'),\n    //         description: _t('For security, this session has been signed out. Please sign in again.'),\n    //     });\n\n    //     dis.dispatch({\n    //         action: 'logout',\n    //     });\n    // });\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            const cl = client()\n            const deviceId = cl.getDeviceId()\n            const userId = cl.getUserId()\n            const isVerified = cl\n                .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n            if (isVerified || request.isSelfVerification) {\n                request.id = Date.now()\n                onVerificationRequest(request)\n            }\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n            onUsersProfileUpdate(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", (userIds: string[]) => {\n        onUpdateDeviceList(userIds)\n        onUsersProfileUpdate(userIds)\n    }],\n    [\"deviceVerificationChanged\", (\n        userId: string,\n        deviceId: string,\n        deviceInfo: DeviceInfo\n    ) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }],\n    [\"userTrustStatusChanged\", (userId: string, newStatus: UserTrustLevel) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }]\n])\n\nloginByPasswordFx.use(async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        {\n            method: \"POST\",\n            body: JSON.stringify({ type: LOGIN_BY_TOKEN, token: params.token })\n        }\n    )\n    const {\n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return {\n        userId: user_id,\n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.downloadKeys([cl.getUserId() ?? createClientParams.options.userId])\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await IdbDelete(\"pickleKey\", [cl.getUserId(), cl.getDeviceId()])\n    await IdbDelete(\"account\", \"mx_access_token\")\n    cl.stopClient()\n    await cl.logout()\n    destroyClient()\n})\n\ngetProfileInfoFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx,\n    getUserDevicesFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoom,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    \n    }),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoomMessage,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: toLiveTimeline,\n        fn: ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members, true)\n        await cl.downloadKeysForUsers(members, {})\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n\ngetUserDevicesFx.use(async (userId) => {\n    const cl = client()\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const setEnableCrypto = cryptoDomain.event<boolean>()\n","import { client } from \"@/matrix-client\"\nimport { forward } from \"effector\"\nimport { checkThisDeviceVerificationFx } from \"@/verification\"\nimport { destroyClientFx } from \"@/app\"\nimport { \n    crossSigningChangeFx, \n    setEnableCrypto\n} from \"./private\"\nimport { \n    $isCryptoEnabled,\n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    onCrossSigningKeyChange, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\n$isCryptoEnabled\n    .on(setEnableCrypto, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncheckBackupKeyFx.use(() => {\n    return client().getKeyBackupEnabled()\n})\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) {\n        setEnableCrypto(false)\n        return\n    }\n\n    await cl.initCrypto()\n    setEnableCrypto(true)\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n    checkThisDeviceVerificationFx()\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n    checkThisDeviceVerificationFx()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams, \n    CheckKeyInfo,\n} from \"./types\"\n\n// Emodji SAS Verification\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n// Recovery key\n\nexport const restoreKeyBackupFx = verificationDomain\n    .effect<void, void, Error>()\n\nexport const $checkKeyInfo = verificationDomain\n    .store<CheckKeyInfo | null>(null)\n\nexport const checkSecretStorageKeyFx = verificationDomain\n    .effect<CheckKeyInfo & { input: string }, boolean, Error>()\n\n// others\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n","import { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport {\n    onCancelVerificationEvent, \n    startSASFx, \n    updateVerificationPhase,\n    cancelVerificationEventFx, \n} from \"./private\"\nimport {\n    onUsersProfileUpdate, \n    setCurrentVerificationEvent \n} from \"./public\"\nimport { \n    MyVerificationRequest,\n    OnVerificationRequestFxParams, \n    Phase\n} from \"./types\"\n\n\nexport const onVerificationRequestFxReducer = async (\n    {\n        request, \n        currentRequest\n    }: OnVerificationRequestFxParams): Promise<MyVerificationRequest> => {\n    const onChange = () => {\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n            return\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            onUsersProfileUpdate([request.otherUserId])\n            return\n        }\n\n        if (request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n            return\n        }\n\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n            return\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const excludePhaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested\n    ]\n    if (!currentRequest && !excludePhaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n        && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n\n    return request\n}\n","import { forward, sample, guard, attach } from \"effector\"\n\nimport { client } from \"@/matrix-client\"\nimport { createDirectRoomFx } from \"@/room\"\nimport { MappedUser } from \"@/types\"\nimport { destroyClientFx } from \"@/app\"\nimport {\n    updateVerificationPhase,\n    onCancelVerificationEvent,\n    confirmSASVerificationFx,\n    onVerificationRequestFx,\n    startSASFx,\n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n    restoreKeyBackupFx,\n    cancelVerificationEventFx,\n    checkSecretStorageKeyFx,\n    $checkKeyInfo,\n} from \"./private\"\nimport {\n    onHasPassphrase,\n    $currentVerificationEvent,\n    $deviceIsVerified,\n    $verificationEvents,\n    checkThisDeviceVerificationFx,\n    confirmSASVerification,\n    startThisDeviceVerificationFx,\n    onVerificationRequest,\n    setCurrentVerificationEvent,\n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests,\n    checkCanVerifyFx,\n    createRecoveryKeyAndPassPhraseFx,\n    startRecoveryKeyOrPassphraseVerification,\n    $hasPassphrase,\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser,\n    setCheckKeyInfo,\n    onCheckSecretStorageKey,\n    onValidRecoveryKey,\n    onInvalidRecoveryKey,\n    onRejectSecretStorageKey,\n} from \"./public\"\nimport { MyVerificationRequest } from \"./types\"\nimport { onVerificationRequestFxReducer } from \"./reducers\"\nimport { InvalidBackupInfo } from \"@/errors\"\nimport { accessSecretStorage } from \"../cryptoCallbacks\"\n    \n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n    .reset(destroyClientFx)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n    .reset(destroyClientFx)\n// When copying an object, proto properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n    .reset(destroyClientFx)\n\n$hasPassphrase\n    .on(onHasPassphrase, (_, val) => val)\n    .reset(destroyClientFx)\n\n$checkKeyInfo\n    .on(setCheckKeyInfo, (_, val) => val)\n    .reset([destroyClientFx, onRejectSecretStorageKey])\n\nforward({\n    from: checkThisDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkThisDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx\n})\n\nforward({\n    from: [\n        startVerificationUserFx,\n        startVerificationDeviceFx,\n        confirmSASVerification,\n        startSASFx,\n        startThisDeviceVerificationFx\n    ],\n    to: setWaitingAnotherUser\n})\n\nforward({\n    from: [\n        onCancelVerificationEvent,\n        $currentVerificationEvent.updates\n    ],\n    to: resetWaitingAnotherUser\n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData,\n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nforward({\n    from: startRecoveryKeyOrPassphraseVerification,\n    to: restoreKeyBackupFx\n})\n\nforward({\n    from: checkSecretStorageKeyFx.doneData,\n    to: onValidRecoveryKey\n})\n\nforward({\n    from: checkSecretStorageKeyFx.failData,\n    to: onInvalidRecoveryKey,\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(onVerificationRequestFxReducer)\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    await (currentRequest.verifier as any).sasEvent.confirm()\n})\n\ncheckThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = Date.now()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n\ncheckCanVerifyFx.use(async ({ profileId }) => {\n    const cl = client()\n    const cryptoEnabled = cl.isCryptoEnabled()\n    const homeserverSupportsCrossSigning = await cl\n        .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n\n    const userTrust = cryptoEnabled && cl.checkUserTrust(profileId)\n    const userVerified = cryptoEnabled && userTrust && userTrust\n        .isCrossSigningVerified()\n    const isMe = profileId === cl.getUserId()\n    if (isMe && isVerified) return true\n\n    const canVerify = cryptoEnabled\n        && homeserverSupportsCrossSigning\n        && !userVerified\n        && isVerified\n    return canVerify\n})\n\ncreateRecoveryKeyAndPassPhraseFx.use(async (password) => {\n    const cl = client()\n    const key = await cl.createRecoveryKeyFromPassphrase(password)\n    if (!key) throw new Error(\"createRecovery Error\")\n    return key\n})\n\nrestoreKeyBackupFx.use(async () => {\n    const cl = client()\n    accessSecretStorage(async () => {\n        const backupInfo = await cl.getKeyBackupVersion()\n        await cl.checkOwnCrossSigningTrust()\n\n        if (!backupInfo) throw new InvalidBackupInfo(\"backupInfo is null\")\n        await cl.restoreKeyBackupWithSecretStorage(backupInfo)\n    })\n})\n\nguard({\n    source: sample({\n        clock: onCheckSecretStorageKey,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, input) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            input\n        }),\n    }),\n    filter: (params): params is any => Boolean(\n        params.keyInfo\n    ),\n    target: checkSecretStorageKeyFx,\n})\n\n\ncheckSecretStorageKeyFx.use(({ input, keyInfo }) => {\n    const cl = client()\n    const decodedKey = cl.keyBackupKeyFromRecoveryKey(input)\n    return cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","stopPeeking","clearStores","crypto","stop","cryptoStore","deleteAllData","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","indexedDB","verificationDomain","$isWaitingAnotherUser","createApi","setWaitingAnotherUser","resetWaitingAnotherUser","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","startVerificationDevice","startThisDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","createRecoveryKeyAndPassPhraseFx","onNeedRecoveryKeyOrPassphrase","startRecoveryKeyOrPassphraseVerification","setCheckKeyInfo","onCheckSecretStorageKey","onRecoveryKeyOrPassphraseSuccess","onValidRecoveryKey","onInvalidRecoveryKey","$hasPassphrase","onHasPassphrase","$deviceIsVerified","onUpdateDeviceList","checkThisDeviceVerificationFx","checkCanVerifyFx","onUsersProfileUpdate","onResolveSecretStorageKey","onRejectSecretStorageKey","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","IdbDelete","secretStorageBeingAccessed","secretStorageKeys","secretStorageKeyInfo","dehydrationCache","isCachingAllowed","setCachingAllowed","newVal","cacheSecretStorageKey","keyId","keyInfo","promptForBackupPassphrase","Uint8Array","console","log","accessSecretStorage","func","forceReset","cl","hasSecretStorageKey","bootstrapCrossSigning","bootstrapSecretStorage","getKeyBackupPassphrase","Object","keys","dehydrationKeyInfo","passphrase","setDehydrationKey","warn","error","makeInputToKey","params","deriveKey","salt","iterations","recoveryKey","decodeRecoveryKey","createPromise","promise","res","rej","keyInfos","getDefaultSecretStorageKeyId","keyInfoEntries","entries","length","checkSecretStorageKey","inputToKey","resolveWatcher","watch","rejectWatcher","unsubscribe","input","getDehydrationKey","userId","deviceId","requestId","name","deviceTrust","getUserId","isVerified","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","i","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","restoringBackup","isSecretStorageReady","checkOwnCrossSigningTrust","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","InvalidBackupInfo","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","isReadUpTo","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","$isCryptoEnabled","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","args","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","getDeviceId","checkDeviceTrust","isSelfVerification","id","Date","now","userIds","initialFetch","deviceInfo","newStatus","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","downloadKeys","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeysForUsers","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","isMe","getStoredDevicesForUser","device","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","crossSigningChangeFx","setEnableCrypto","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","cancelVerificationEventFx","restoreKeyBackupFx","$checkKeyInfo","checkSecretStorageKeyFx","updateDeviceVerification","onVerificationRequestFxReducer","currentRequest","onChange","cancelled","off","VerificationRequestEvent","Change","cancellationCode","phase","Done","otherUserId","Ready","Started","verifier","sasEvent","excludePhaseArray","Cancelled","Requested","requests","req","currentReq","canceledReq","val","failData","accept","beginKeyVerification","once","verify","cancel","confirm","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","profileId","cryptoEnabled","homeserverSupportsCrossSigning","userTrust","userVerified","canVerify","password","createRecoveryKeyFromPassphrase","checkKeyInfo","decodedKey","keyBackupKeyFromRecoveryKey","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
=======
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/idbHelper.ts","../src/verification/public.ts","../src/cryptoCallbacks.ts","../src/reset-cross-signing/domain.ts","../src/reset-cross-signing/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/reducers.ts","../src/verification/init.ts","../src/reset-cross-signing/private.ts","../src/reset-cross-signing/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n\nexport const getUserDevicesFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore.stopPeeking()\n        // TODO Не чистить сторы, если userId нового юзера совпадает со старым юзером\n        clientStore.clearStores()\n        clientStore.crypto.stop()\n        clientStore.crypto.cryptoStore.deleteAllData()\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { \n    VerificationRequest, \n    IVerificationChannel, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: number\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n\nexport type InputToKeyParams = {\n  passphrase?: string\n  recoveryKey?: string\n}\n\nexport type ResolveRecoveryKeyParams = Pick<InputToKeyParams, \"recoveryKey\">\nexport type ResolvePassphrase = Pick<InputToKeyParams, \"passphrase\">\n\nexport type ResolveRecoveryKeyFxParams = ResolveRecoveryKeyParams & {\n  resolveAndReject: SecretStorageKeyResolveAndReject\n}\n\nexport type ResolvePassphraseFxParams = ResolvePassphrase & {\n  resolveAndReject: SecretStorageKeyResolveAndReject\n}\n\nexport type SavedInputToKeyMethod = (\n  params: InputToKeyParams\n) => Promise<Uint8Array>\n\n\nexport type CheckCanVerifyFxParams = {\n  profileId: string\n}\n\nexport type SecretStorageKeyResolveAndReject = {\n  resolve:(input: InputToKeyParams) => void\n  reject: () => void\n} \n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { createApi } from \"effector\"\nimport { IRecoveryKey, ISecretStorageKeyInfo } from \"matrix-js-sdk/lib\"\nimport { verificationDomain } from \"./domain\"\nimport {\n    CheckCanVerifyFxParams,\n    ResolvePassphrase,\n    ResolveRecoveryKeyParams,\n    MyVerificationRequest,\n    SavedInputToKeyMethod,\n    SecretStorageKeyResolveAndReject,\n    StartVerificationDeviceParams,\n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\n// Emodji SAS Verification\n\nexport const $isWaitingAnotherUser = verificationDomain\n    .store<boolean>(false)\n\nexport const {\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser\n} = createApi(\n    $isWaitingAnotherUser,\n    {\n        setWaitingAnotherUser: () => true,\n        resetWaitingAnotherUser: () => false\n    }\n)\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startThisDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n\n\n// Recovery Key\nexport const resolveRecoveryKey = verificationDomain\n    .event<ResolveRecoveryKeyParams>()\n\nexport const createRecoveryKeyAndPassPhraseFx = verificationDomain\n    .effect<string | undefined, IRecoveryKey, Error>()\n\nexport const saveInputToKeyMethod = verificationDomain\n    .event<SavedInputToKeyMethod>()\n\nexport const setSecretStoragePromise = verificationDomain\n    .event<SecretStorageKeyResolveAndReject>()\n\nexport const onNeedRecoveryKeyOrPassphrase = verificationDomain\n    .event<void>()\n\nexport const startRecoveryKeyOrPassphraseVerification = verificationDomain\n    .event<void>()\n\ntype CheckKeyInfo = {\n    keyInfo: ISecretStorageKeyInfo\n}\n\nexport const $checkKeyInfo = verificationDomain\n    .store<CheckKeyInfo | null>(null)\n\nexport const setCheckKeyInfo = verificationDomain\n    .event<CheckKeyInfo>()\n\nexport const onCheckSecretStorageKey = verificationDomain.event<string>()\n\nexport const checkSecretStorageKeyFx = verificationDomain\n    .effect<CheckKeyInfo & { input: string }, boolean, Error>()\n\nexport const onRecoveryKeyOrPassphraseSuccess = verificationDomain.event<void>()\n\n// passphrasse verification \n\nexport const resolvePassphrase = verificationDomain\n    .event<ResolvePassphrase>()\n\nexport const $hasPassphrase = verificationDomain.store<boolean>(false)\nexport const onHasPassphrase = verificationDomain.event<boolean>()\n\n// others\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkThisDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\nexport const checkCanVerifyFx = verificationDomain\n    .effect<CheckCanVerifyFxParams, boolean, Error>()\n\nexport const onUsersProfileUpdate = verificationDomain\n    .event<UserId[]>()\n","import {\n    decodeRecoveryKey,\n    deriveKey,\n    DeviceTrustLevel,\n    encodeBase64,\n    encodeUnpaddedBase64,\n    ICryptoCallbacks,\n    ISecretStorageKeyInfo,\n    MatrixClient\n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\nimport {\n    InputToKeyParams,\n    onHasPassphrase,\n    setCheckKeyInfo,\n    onNeedRecoveryKeyOrPassphrase,\n    onRecoveryKeyOrPassphraseSuccess,\n    setSecretStoragePromise,\n} from \"@/verification\"\n\nlet secretStorageBeingAccessed = false\nlet secretStorageKeys: Record<string, Uint8Array> = {}\nlet secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction setCachingAllowed(newVal: boolean): void {\n    secretStorageBeingAccessed = newVal\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    secretStorageKeys[keyId] = key\n    secretStorageKeyInfo[keyId] = keyInfo\n}\n\nexport async function promptForBackupPassphrase(): Promise<Uint8Array> {\n    const key = new Uint8Array()\n\n    console.log(\"promptForBackupPassphrase\")\n    // const success = await finished;\n    // if (!success) throw new Error(\"Key backup prompt cancelled\");\n\n    return key\n}\n\nexport async function accessSecretStorage(\n    func = async () => { return },\n    forceReset = false\n): Promise<any> {\n    const cl = client()\n    setCachingAllowed(true)\n    try {\n        if (!(await cl.hasSecretStorageKey()) || forceReset) {\n            // Потребуется для сбросса кросс подписей \n        } else {\n            await cl.bootstrapCrossSigning({})\n            await cl.bootstrapSecretStorage({\n                getKeyBackupPassphrase: promptForBackupPassphrase,\n            })\n    \n            const keyId = Object.keys(secretStorageKeys)[0]\n            if (keyId) {\n                let dehydrationKeyInfo = {}\n                if (\n                    secretStorageKeyInfo[keyId]\n                    && secretStorageKeyInfo[keyId].passphrase\n                ) {\n                    dehydrationKeyInfo = {\n                        passphrase: secretStorageKeyInfo[keyId].passphrase\n                    }\n                }\n                console.log(\"Setting dehydration key\")\n                await cl\n                    .setDehydrationKey(\n                        secretStorageKeys[keyId],\n                        dehydrationKeyInfo,\n                        \"Backup device\"\n                    )\n            } else if (!keyId) {\n                console.warn(\"Not setting dehydration key: no SSSS key found\")\n            } else {\n                console.log(\"Not setting dehydration key: feature disabled\")\n            }\n    \n        }\n        // `return await` needed here to ensure `finally` block runs after the\n        // inner operation completes.\n        return await func()\n    } catch (e) {\n        // SecurityCustomisations.catchAccessSecretStorageError?.(e)\n        console.error(e)\n        // Re-throw so that higher level logic can abort as needed\n        throw e\n    } finally {\n        // Clear secret storage key cache now that work is complete\n        setCachingAllowed(false)\n        if (!isCachingAllowed()) {\n            secretStorageKeys = {}\n            secretStorageKeyInfo = {}\n        }\n    }\n}\n\n\nfunction makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (params: InputToKeyParams) => Promise<Uint8Array> {\n    return async (params) => {\n        if (params.passphrase) {\n            return deriveKey(\n                params.passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else if (params.recoveryKey) {\n            return decodeRecoveryKey(params.recoveryKey)\n        }\n        throw new Error(\"Invalid recoveryKey or passphrase\")\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cl = client()\n    let keyId = await cl.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if (!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    } \n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        [keyId, keyInfo] = keyInfoEntries[0]\n    }\n\n    // Check the in-memory cache\n    if (secretStorageKeys[keyId] && isCachingAllowed()) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (await cl.checkSecretStorageKey(dehydrationCache.key, keyInfo)) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n    const promise = new Promise<InputToKeyParams>((resolve, reject) => {\n        setSecretStoragePromise({\n            reject,\n            resolve\n        })\n    })\n    onNeedRecoveryKeyOrPassphrase()\n    onHasPassphrase(Boolean(keyInfo.passphrase))\n    setCheckKeyInfo({ keyInfo })\n\n    const input = await promise\n\n    const key = await inputToKey(input)\n\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    onRecoveryKeyOrPassphraseSuccess()\n    return [keyId, key]\n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\" })\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if (key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        let data\n        try {\n            data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n        } catch (e) {\n            console.log(\"idbLoad for pickleKey failed\", e)\n        }\n        if (!data) {\n            return null\n        }\n        if (!data.encrypted || !data.iv || !data.cryptoKey) {\n            console.log(\"Badly formatted pickle key\")\n            return null\n        }\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        try {\n            const key = await crypto.subtle.decrypt(\n                { name: \"AES-GCM\", iv: data.iv, additionalData },\n                data.cryptoKey,\n                data.encrypted,\n            )\n            return encodeUnpaddedBase64(key)\n        } catch (e) {\n            console.log(\"Error decrypting pickle key\")\n            return null\n        }\n    }\n\nexport const CreatePickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        const crypto = window.crypto\n        const randomArray = new Uint8Array(32)\n        crypto.getRandomValues(randomArray)\n        const cryptoKey = await crypto.subtle.generateKey(\n            { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n        )\n        const iv = new Uint8Array(32)\n        crypto.getRandomValues(iv)\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        const encrypted = await crypto.subtle.encrypt(\n            { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n        )\n\n        try {\n            await IdbSave(\n                \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n            )\n        } catch (e) {\n            return null\n        }\n        return encodeUnpaddedBase64(randomArray)\n    }\n\nexport async function tryToUnlockSecretStorageWithDehydrationKey(\n    client: MatrixClient,\n): Promise<void> {\n    const key = dehydrationCache.key\n    let restoringBackup = false\n    if (key && (await client.isSecretStorageReady())) {\n        setCachingAllowed(true)\n        try {\n            await client.checkOwnCrossSigningTrust()\n    \n            // we also need to set a new dehydrated device to replace the\n            // device we rehydrated\n            let dehydrationKeyInfo = {}\n            if (\n                dehydrationCache.keyInfo \n                && dehydrationCache.keyInfo.passphrase\n            ) {\n                dehydrationKeyInfo = { \n                    passphrase: dehydrationCache.keyInfo.passphrase }\n            }\n            await client\n                .setDehydrationKey(key, dehydrationKeyInfo, \"Backup device\")\n    \n            // and restore from backup\n            const backupInfo = await client.getKeyBackupVersion()\n            if (backupInfo) {\n                restoringBackup = true\n                // don't await, because this can take a long time\n                client.restoreKeyBackupWithSecretStorage(backupInfo)\n                    .finally(() => {\n                        secretStorageBeingAccessed = false\n                        if (!isCachingAllowed()) {\n                            secretStorageKeys = {}\n                            secretStorageKeyInfo = {}\n                        }\n                    })\n            }\n        } finally {\n            dehydrationCache = {}\n            // the secret storage cache is needed for restoring from backup, so\n            // don't clear it yet if we're restoring from backup\n            if (!restoringBackup) {\n                setCachingAllowed(false)\n                if (!isCachingAllowed()) {\n                    secretStorageKeys = {}\n                    secretStorageKeyInfo = {}\n                }\n            }\n        }\n    }\n}\n    \n","import { createDomain } from \"effector\"\n\nexport const d = createDomain(\"resetCrossSigning\")\n","import { d } from \"./domain\"\nimport { \n    ConfirmResetCrossSigningFxResult, \n    OnInteractiveAuthStateUpdateResult \n} from \"./types\"\n\nexport const confirmResetCrossSigningFx = d\n    .effect<void, ConfirmResetCrossSigningFxResult, Error>()\n\n\nexport const submitAuthDict = d.event<string>()\n\nexport const onNeedUserPassword = d.event<void>()\nexport const onUserPasswordError = d.event<string>()\n\nexport const onInteractiveAuthBusyChange = d.event<boolean>()\nexport const onInteractiveAuthStateUpdate = d\n    .event<OnInteractiveAuthStateUpdateResult>()\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\nexport const InvalidBackupInfo = createCustomError(\"InvalidBackupInfo\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n\nexport const $isCryptoEnabled = cryptoDomain.store<boolean | null>(null)\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n    UserTrustLevel,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport {\n    checkBackupKeyFx,\n    initCryptoFx,\n    onCrossSigningKeyChange,\n} from \"@/crypto\"\nimport {\n    onVerificationRequest,\n    MyVerificationRequest,\n    onUpdateDeviceList,\n    onUsersProfileUpdate,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { DeviceInfo } from \"matrix-js-sdk/lib/crypto/deviceinfo\"\nimport { IdbDelete } from \"@/idbHelper\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Session.logged_out\", (args) => {\n        console.log(\"Session.logged_out\", args)\n    }],\n    // @TODO Реализовать. Этот эвент приходит когда логаут происходит из другой сессии.\n    // cli.on(HttpApiEvent.SessionLoggedOut, function (errObj) {\n    //     if (Lifecycle.isLoggingOut()) return;\n\n    //     // A modal might have been open when we were logged out by the server\n    //     Modal.closeCurrentModal('Session.logged_out');\n\n    //     if (errObj.httpStatus === 401 && errObj.data && errObj.data['soft_logout']) {\n    //         logger.warn(\"Soft logout issued by server - avoiding data deletion\");\n    //         Lifecycle.softLogout();\n    //         return;\n    //     }\n\n    //     Modal.createDialog(ErrorDialog, {\n    //         title: _t('Signed Out'),\n    //         description: _t('For security, this session has been signed out. Please sign in again.'),\n    //     });\n\n    //     dis.dispatch({\n    //         action: 'logout',\n    //     });\n    // });\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            const cl = client()\n            const deviceId = cl.getDeviceId()\n            const userId = cl.getUserId()\n            const isVerified = cl\n                .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n            if (isVerified || request.isSelfVerification) {\n                request.id = Date.now()\n                onVerificationRequest(request)\n            }\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n            onUsersProfileUpdate(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", (userIds: string[]) => {\n        onUpdateDeviceList(userIds)\n        onUsersProfileUpdate(userIds)\n    }],\n    [\"deviceVerificationChanged\", (\n        userId: string,\n        deviceId: string,\n        deviceInfo: DeviceInfo\n    ) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }],\n    [\"userTrustStatusChanged\", (userId: string, newStatus: UserTrustLevel) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }]\n])\n\nloginByPasswordFx.use(async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        {\n            method: \"POST\",\n            body: JSON.stringify({ type: LOGIN_BY_TOKEN, token: params.token })\n        }\n    )\n    const {\n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return {\n        userId: user_id,\n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.downloadKeys([cl.getUserId() ?? createClientParams.options.userId])\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await IdbDelete(\"pickleKey\", [cl.getUserId(), cl.getDeviceId()])\n    await IdbDelete(\"account\", \"mx_access_token\")\n    cl.stopClient()\n    await cl.logout()\n    destroyClient()\n})\n\ngetProfileInfoFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx,\n    getUserDevicesFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoom,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    \n    }),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoomMessage,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: toLiveTimeline,\n        fn: ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members, true)\n        await cl.downloadKeysForUsers(members, {})\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n\ngetUserDevicesFx.use(async (userId) => {\n    const cl = client()\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const setEnableCrypto = cryptoDomain.event<boolean>()\n","import { client } from \"@/matrix-client\"\nimport { forward } from \"effector\"\nimport { checkThisDeviceVerificationFx } from \"@/verification\"\nimport { destroyClientFx } from \"@/app\"\nimport { \n    crossSigningChangeFx, \n    setEnableCrypto\n} from \"./private\"\nimport { \n    $isCryptoEnabled,\n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    onCrossSigningKeyChange, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\n$isCryptoEnabled\n    .on(setEnableCrypto, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncheckBackupKeyFx.use(() => {\n    return client().getKeyBackupEnabled()\n})\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) {\n        setEnableCrypto(false)\n        return\n    }\n\n    await cl.initCrypto()\n    setEnableCrypto(true)\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n    checkThisDeviceVerificationFx()\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n    checkThisDeviceVerificationFx()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    ResolvePassphraseFxParams,\n    ResolveRecoveryKeyFxParams,\n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    SavedInputToKeyMethod, \n    SecretStorageKeyResolveAndReject, \n    StartVerificationDeviceParams \n} from \"./types\"\n\n// Emodji SAS Verification\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n// Recovery key\nexport const resolveRecoveryKeyFx = verificationDomain\n    .effect<ResolveRecoveryKeyFxParams, void, Error>()\n\nexport const $savedInputToKeyMethod = verificationDomain\n    .store<SavedInputToKeyMethod | null>(null)\n\nexport const $secretStorageKeyResolveAndReject = verificationDomain\n    .store<SecretStorageKeyResolveAndReject|null>(null)\n\nexport const restoreKeyBackupFx = verificationDomain\n    .effect<void, void, Error>()\n\n// passpharasse verification \nexport const resolvePassphraseFx = verificationDomain\n    .effect<ResolvePassphraseFxParams, void, Error>()\n\n// others\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n","import { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport {\n    onCancelVerificationEvent, \n    startSASFx, \n    updateVerificationPhase,\n    cancelVerificationEventFx, \n} from \"./private\"\nimport {\n    onUsersProfileUpdate, \n    setCurrentVerificationEvent \n} from \"./public\"\nimport { \n    MyVerificationRequest,\n    OnVerificationRequestFxParams, \n    Phase\n} from \"./types\"\n\n\nexport const onVerificationRequestFxReducer = async (\n    {\n        request, \n        currentRequest\n    }: OnVerificationRequestFxParams): Promise<MyVerificationRequest> => {\n    const onChange = () => {\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n            return\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            onUsersProfileUpdate([request.otherUserId])\n            return\n        }\n\n        if (request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n            return\n        }\n\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n            return\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const excludePhaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested\n    ]\n    if (!currentRequest && !excludePhaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n        && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n\n    return request\n}\n","import { forward, sample, guard, attach } from \"effector\"\n\nimport { client } from \"@/matrix-client\"\nimport { createDirectRoomFx } from \"@/room\"\nimport { MappedUser } from \"@/types\"\nimport { destroyClientFx } from \"@/app\"\nimport {\n    updateVerificationPhase,\n    onCancelVerificationEvent,\n    confirmSASVerificationFx,\n    onVerificationRequestFx,\n    startSASFx,\n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n    resolveRecoveryKeyFx,\n    $savedInputToKeyMethod,\n    $secretStorageKeyResolveAndReject,\n    restoreKeyBackupFx,\n    cancelVerificationEventFx,\n    resolvePassphraseFx,\n} from \"./private\"\nimport {\n    onHasPassphrase,\n    $currentVerificationEvent,\n    $deviceIsVerified,\n    $verificationEvents,\n    checkThisDeviceVerificationFx,\n    confirmSASVerification,\n    startThisDeviceVerificationFx,\n    onVerificationRequest,\n    setCurrentVerificationEvent,\n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests,\n    checkCanVerifyFx,\n    createRecoveryKeyAndPassPhraseFx,\n    resolveRecoveryKey,\n    saveInputToKeyMethod,\n    startRecoveryKeyOrPassphraseVerification,\n    resolvePassphrase,\n    $hasPassphrase,\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser,\n    checkSecretStorageKeyFx,\n    $checkKeyInfo,\n    setCheckKeyInfo,\n    onCheckSecretStorageKey,\n    onRecoveryKeyOrPassphraseSuccess,\n    setSecretStoragePromise,\n} from \"./public\"\nimport { MyVerificationRequest } from \"./types\"\nimport { onVerificationRequestFxReducer } from \"./reducers\"\nimport { InvalidBackupInfo } from \"@/errors\"\nimport { accessSecretStorage } from \"../cryptoCallbacks\"\n\n$savedInputToKeyMethod\n    .on(saveInputToKeyMethod, (_, method) => method)\n    .reset(destroyClientFx)\n\n$secretStorageKeyResolveAndReject\n    .on(setSecretStoragePromise, (_, callbacks) => callbacks)\n    .reset([destroyClientFx, onRecoveryKeyOrPassphraseSuccess])\n    \n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n    .reset(destroyClientFx)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n    .reset(destroyClientFx)\n// When copying an object, proto properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n    .reset(destroyClientFx)\n\n$hasPassphrase\n    .on(onHasPassphrase, (_, val) => val)\n    .reset(destroyClientFx)\n\n$checkKeyInfo\n    .on(setCheckKeyInfo, (_, val) => val)\n    .reset(destroyClientFx)\n\nforward({\n    from: checkThisDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkThisDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx\n})\n\nforward({\n    from: [\n        startVerificationUserFx,\n        startVerificationDeviceFx,\n        confirmSASVerification,\n        startSASFx,\n        startThisDeviceVerificationFx\n    ],\n    to: setWaitingAnotherUser\n})\n\nforward({\n    from: [\n        onCancelVerificationEvent,\n        $currentVerificationEvent.updates\n    ],\n    to: resetWaitingAnotherUser\n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData,\n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nforward({\n    from: startRecoveryKeyOrPassphraseVerification,\n    to: restoreKeyBackupFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nsample({\n    clock: resolvePassphrase,\n    source: $secretStorageKeyResolveAndReject,\n    filter: (resolveAndReject) => resolveAndReject !== null,\n    fn: (resolveAndReject, { passphrase }) => ({\n        resolveAndReject: resolveAndReject as any,\n        passphrase\n    }),\n    target: resolvePassphraseFx\n})\n\nsample({\n    clock: resolveRecoveryKey,\n    source: $secretStorageKeyResolveAndReject,\n    filter: (resolveAndReject) => resolveAndReject !== null,\n    fn: (resolveAndReject, { recoveryKey }) => ({\n        resolveAndReject: resolveAndReject as any,\n        recoveryKey\n    }),\n    target: resolveRecoveryKeyFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(onVerificationRequestFxReducer)\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    await (currentRequest.verifier as any).sasEvent.confirm()\n})\n\ncheckThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = Date.now()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n\ncheckCanVerifyFx.use(async ({ profileId }) => {\n    const cl = client()\n    const cryptoEnabled = cl.isCryptoEnabled()\n    const homeserverSupportsCrossSigning = await cl\n        .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n\n    const userTrust = cryptoEnabled && cl.checkUserTrust(profileId)\n    const userVerified = cryptoEnabled && userTrust && userTrust\n        .isCrossSigningVerified()\n    const isMe = profileId === cl.getUserId()\n    if (isMe && isVerified) return true\n\n    const canVerify = cryptoEnabled\n        && homeserverSupportsCrossSigning\n        && !userVerified\n        && isVerified\n    return canVerify\n})\n\nresolveRecoveryKeyFx.use(async ({ resolveAndReject, recoveryKey }) => {\n    resolveAndReject.resolve({ recoveryKey })\n})\n\nresolvePassphraseFx.use(async ({ resolveAndReject, passphrase }) => {\n    resolveAndReject.resolve({ passphrase })\n})\n\ncreateRecoveryKeyAndPassPhraseFx.use(async (password) => {\n    const cl = client()\n    const key = await cl.createRecoveryKeyFromPassphrase(password)\n    if (!key) throw new Error(\"createRecovery Error\")\n    return key\n})\n\nrestoreKeyBackupFx.use(async () => {\n    const cl = client()\n    accessSecretStorage(async () => {\n        const backupInfo = await cl.getKeyBackupVersion()\n        await cl.checkOwnCrossSigningTrust()\n\n        if (!backupInfo) throw new InvalidBackupInfo(\"backupInfo is null\")\n        await cl.restoreKeyBackupWithSecretStorage(backupInfo)\n    })\n})\n\nguard({\n    source: sample({\n        clock: onCheckSecretStorageKey,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, input) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            input\n        }),\n    }),\n    filter: (params): params is any => Boolean(\n        params.keyInfo\n    ),\n    target: checkSecretStorageKeyFx,\n})\n\n\ncheckSecretStorageKeyFx.use(({ input, keyInfo }) => {\n    const cl = client()\n    const decodedKey = cl.keyBackupKeyFromRecoveryKey(input)\n    return cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n})\n","import { InteractiveAuth } from \"matrix-js-sdk\"\nimport { d } from \"./domain\"\nimport { SubmitAuthDictFxParams } from \"./types\"\n\nexport const $interactiveAuthInstance = d.store<InteractiveAuth | null>(null)\n\nexport const setInteractiveAuth = d.event<InteractiveAuth>()\nexport const submitAuthDictFx = d\n    .effect<SubmitAuthDictFxParams, void, Error>()\n","import { IAuthData, InteractiveAuth } from \"matrix-js-sdk\"\nimport { sample } from \"effector\"\n\nimport { client } from \"@/matrix-client\"\nimport { LOGIN_BY_PASSWORD } from \"@/constants\"\n\nimport { \n    confirmResetCrossSigningFx, \n    onInteractiveAuthBusyChange, \n    onInteractiveAuthStateUpdate, \n    onNeedUserPassword,\n    onUserPasswordError,\n    submitAuthDict\n} from \"./public\"\nimport { \n    $interactiveAuthInstance,\n    setInteractiveAuth,\n    submitAuthDictFx\n} from \"./private\"\nimport { ConfirmResetCrossSigningFxResult } from \"./types\"\n\n$interactiveAuthInstance\n    .on(setInteractiveAuth, (_, auth) => auth)\n\nsample({\n    clock: submitAuthDict,\n    source: $interactiveAuthInstance,\n    filter: (\n        isInstance: InteractiveAuth | null,\n    ): isInstance is InteractiveAuth => Boolean(isInstance),\n    fn: (auth, pass) => ({\n        password: pass,\n        interactiveAuth: auth\n    }),\n    target: submitAuthDictFx\n})\n\nsample({\n    source: onInteractiveAuthStateUpdate,\n    filter: ({status}) => status.errcode === \"M_FORBIDDEN\",\n    fn: ({status}) => status.error as string,\n    target: onUserPasswordError,\n})\n\nconfirmResetCrossSigningFx.use(async () => {\n    const cl = client()\n    const promise = new Promise<\n        ConfirmResetCrossSigningFxResult\n    >((res, rej) => {\n        cl.bootstrapCrossSigning({\n            \n            authUploadDeviceSigningKeys: async (makeRequest) => {\n                const requestCallback = (\n                    auth: IAuthData, \n                ): Promise<IAuthData> => {\n                    return makeRequest(auth)\n                }\n                const interactiveAuth = new InteractiveAuth({\n                    doRequest: requestCallback,\n                    busyChanged: onInteractiveAuthBusyChange,\n                    stateUpdated: (nextStage, status) => {\n                        onInteractiveAuthStateUpdate({\n                            nextStage, status\n                        })\n                    },\n                    matrixClient: cl,\n                    // нам это не нужно \n                    requestEmailToken: undefined as any\n                })\n                setInteractiveAuth(interactiveAuth)\n                onNeedUserPassword()\n                await interactiveAuth.attemptAuth()\n            },\n            setupNewCrossSigning: true,\n        }).then(() => {\n            res({\n                result: true\n            })\n        })\n    })\n    return promise\n})\n\nsubmitAuthDictFx.use(async ({password, interactiveAuth}) => {\n    const cl = client()\n    await interactiveAuth.submitAuthDict(\n        {\n            \"type\": LOGIN_BY_PASSWORD,\n            \"user\": cl.getUserId(),\n            \"identifier\": {\n                \"type\": \"m.id.user\",\n                \"user\": cl.getUserId()\n            },\n            \"password\": password\n        }\n    )\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","stopPeeking","clearStores","crypto","stop","cryptoStore","deleteAllData","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","indexedDB","verificationDomain","$isWaitingAnotherUser","createApi","setWaitingAnotherUser","resetWaitingAnotherUser","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","startVerificationDevice","startThisDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","resolveRecoveryKey","createRecoveryKeyAndPassPhraseFx","saveInputToKeyMethod","setSecretStoragePromise","onNeedRecoveryKeyOrPassphrase","startRecoveryKeyOrPassphraseVerification","$checkKeyInfo","setCheckKeyInfo","onCheckSecretStorageKey","checkSecretStorageKeyFx","onRecoveryKeyOrPassphraseSuccess","resolvePassphrase","$hasPassphrase","onHasPassphrase","$deviceIsVerified","onUpdateDeviceList","checkThisDeviceVerificationFx","checkCanVerifyFx","onUsersProfileUpdate","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","IdbDelete","secretStorageBeingAccessed","secretStorageKeys","secretStorageKeyInfo","dehydrationCache","isCachingAllowed","setCachingAllowed","newVal","cacheSecretStorageKey","keyId","keyInfo","promptForBackupPassphrase","Uint8Array","console","log","accessSecretStorage","func","forceReset","cl","hasSecretStorageKey","bootstrapCrossSigning","bootstrapSecretStorage","getKeyBackupPassphrase","Object","keys","dehydrationKeyInfo","passphrase","setDehydrationKey","warn","error","makeInputToKey","params","deriveKey","salt","iterations","recoveryKey","decodeRecoveryKey","keyInfos","getDefaultSecretStorageKeyId","keyInfoEntries","entries","length","checkSecretStorageKey","inputToKey","promise","input","getDehydrationKey","userId","deviceId","requestId","name","deviceTrust","getUserId","isVerified","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","i","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","restoringBackup","isSecretStorageReady","checkOwnCrossSigningTrust","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","confirmResetCrossSigningFx","submitAuthDict","onNeedUserPassword","onUserPasswordError","onInteractiveAuthBusyChange","onInteractiveAuthStateUpdate","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","InvalidBackupInfo","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","isReadUpTo","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","$isCryptoEnabled","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","args","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","getDeviceId","checkDeviceTrust","isSelfVerification","id","Date","now","userIds","initialFetch","deviceInfo","newStatus","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","downloadKeys","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeysForUsers","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","isMe","getStoredDevicesForUser","device","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","crossSigningChangeFx","setEnableCrypto","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","cancelVerificationEventFx","resolveRecoveryKeyFx","$savedInputToKeyMethod","$secretStorageKeyResolveAndReject","restoreKeyBackupFx","resolvePassphraseFx","updateDeviceVerification","onVerificationRequestFxReducer","currentRequest","onChange","cancelled","off","VerificationRequestEvent","Change","cancellationCode","phase","Done","otherUserId","Ready","Started","verifier","sasEvent","excludePhaseArray","Cancelled","Requested","requests","req","currentReq","canceledReq","val","resolveAndReject","accept","beginKeyVerification","once","verify","cancel","confirm","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","profileId","cryptoEnabled","homeserverSupportsCrossSigning","userTrust","userVerified","canVerify","password","createRecoveryKeyFromPassphrase","checkKeyInfo","decodedKey","keyBackupKeyFromRecoveryKey","$interactiveAuthInstance","setInteractiveAuth","submitAuthDictFx","auth","isInstance","pass","interactiveAuth","errcode","rej","authUploadDeviceSigningKeys","requestCallback","InteractiveAuth","doRequest","busyChanged","stateUpdated","nextStage","matrixClient","requestEmailToken","attemptAuth","setupNewCrossSigning","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
>>>>>>> f480ef8 (WIP)
