{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/verification/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/init.ts"],"sourcesContent":["export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    EventType,\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport enum Presence {\r\n    online = \"online\",\r\n    offline = \"offline\", \r\n    unavailable = \"unavailable\",\r\n} \r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    isVerified: boolean\r\n    presence: Presence\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n    seen?: boolean\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n    powerlevels: RoomPowerLevelsContent\r\n    myPowerLevel: number\r\n    canKick: boolean\r\n    canBan: boolean\r\n    canInvite: boolean\r\n    canSendEvents: {\r\n        canChangeRoomAvatar: boolean\r\n        canChangeHistoryVisivility: boolean\r\n        canChangeRoomName: boolean\r\n        canChangeRoomPowerLevels: boolean\r\n        canChangeCanonicalAlias: boolean\r\n        canChangeRoomEncryption: boolean\r\n        canChangeRoomTobstone: boolean\r\n        canChangeRoomServerAcl: boolean\r\n    }\r\n    canRedact: boolean\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n\r\ntype EventPowerLevels = {\r\n    [EventType.RoomCanonicalAlias]: number\r\n    [EventType.RoomAvatar]: number\r\n    [EventType.RoomEncryption]: number\r\n    [EventType.RoomHistoryVisibility]: number\r\n    [EventType.RoomName]: number\r\n    [EventType.RoomPowerLevels]: number\r\n    [EventType.RoomServerAcl]: number\r\n    [EventType.RoomTombstone]: number\r\n}\r\n\r\nexport type RoomPowerLevelsContent = {\r\n    ban: number\r\n    events: EventPowerLevels\r\n    users: {\r\n        [key in string]: number \r\n    }\r\n    redact: number\r\n    kick: number\r\n    invite: number\r\n    state_default: number\r\n    users_default: number\r\n    events_default: number\r\n}\r\n\r\nexport enum UserRole {\r\n    admin = \"Admin\",\r\n    moderator = \"Moderator\"\r\n}\r\n","import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams,\r\n    CreateClientParams, \r\n    AuthData \r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message,\r\n    UserRole\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n  role?: UserRole\r\n  allDeviceVerified: boolean\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    \"public\" = \"public\",\r\n    \"private\" = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type InviteUsersParams = {\r\n    roomId: string\r\n    usersIds: string[]\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n\r\nexport type SendTypingParams = {\r\n    roomId: string\r\n    isTyping: boolean\r\n  }\r\n\r\nexport type MyDeviceInfo =  {\r\n    verified: boolean\r\n    deviceId: string\r\n    displayName: string | null\r\n}\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    RoomMember,\r\n    User\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixMembershipType,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams,\r\n    LoadRoomFxParams,\r\n    MessageResponse,\r\n    SendTypingParams,\r\n    InviteUsersParams,\r\n    MyDeviceInfo,\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $typingMembers = roomDomain\r\n    .store<{[key in string]: RoomMember[]}>({})\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.join) ?? []\r\n    )\r\nexport const $currentRoomInvitedMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.invite\r\n        ) ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const clearTypingMember = roomDomain.event<void>()\r\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const findDirectRoomByUserIdFx = roomDomain\r\n    .effect<string, MappedRoom, Error>()\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const sendTypingFx = roomDomain\r\n    .effect<SendTypingParams, void, Error>()\r\nexport const getMembersByRoomIdFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const getRoomMemberFx = roomDomain\r\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\r\n\r\nexport const getUserDevicesFx = roomDomain\r\n    .effect<string, MyDeviceInfo[], Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        // clientStore.clearStores()\r\n        clientStore = null as any\r\n    }\r\n}\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","import { \n    IVerificationChannel \n} from \"matrix-js-sdk/lib/crypto/verification/request/Channel\"\nimport {\n    VerificationRequest \n} from \"matrix-js-sdk/lib/crypto/verification/request/VerificationRequest\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: string\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview,\r\n    PaginateParams,\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\nexport const $currentRoomUnreadMessageCount = messagesDomain\r\n    .store<number | null>(null)\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\r\nexport const onPaginateForwardDone = messagesDomain.event<void>()\r\nexport const paginateForward = messagesDomain.event<PaginateParams>()\r\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\r\n\r\nexport const $paginateForwardPending = messagesDomain.store(false)\r\nexport const $paginateBackwardPending = messagesDomain.store(false)\r\nexport const $canPaginateBackward = messagesDomain.store(true)\r\nexport const $canPaginateForward = messagesDomain.store(true)\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const d = root.domain(\"profile\")\r\n","import { d } from \"./domain\"\r\n\r\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\r\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\r\n\r\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    StartVerificationDeviceParams, \n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\n\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkMyDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startMyDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\nexport const CantInviteUsers = \r\n  createCustomError(\"CantInviteUsers\")\r\nexport const NotEnoughPermissions = \r\n  createCustomError(\"NotEnoughPermissions\")\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room,\r\n    EventType\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { StateEventsContent } from \"./app/types\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType,\r\n    RoomPowerLevelsContent,\r\n    UserRole\r\n} from \"./types\"\r\n\r\nexport const toMessageSeen = (\r\n    message: Message,\r\n    myUserId: string,\r\n    room: Room\r\n): Message => {\r\n    message.seen = room.getJoinedMembers().some((member) => {\r\n        if (member.userId === myUserId) return false\r\n        return room\r\n            .hasUserReadEvent(member.userId, message.originalEventId)\r\n    })\r\n    return message\r\n}\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = (): string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId() as string,\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => {\r\n    const cl = client()\r\n    return {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n        isVerified: cl.checkUserTrust(user.userId).isVerified(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    const cl = client()\r\n    const isMe = cl.getUserId() === user.userId\r\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\r\n    const allDeviceVerified = cl.getStoredDevicesForUser(user.userId)\r\n        .some((device) => {\r\n            let verified: boolean\r\n            if (isMe) {\r\n                verified = crossSigningInfo.checkDeviceTrust(\r\n                    crossSigningInfo,\r\n                    device,\r\n                    false,\r\n                    true,\r\n                ).isCrossSigningVerified()\r\n            } else {\r\n                verified = device.isVerified()\r\n            }\r\n            return verified\r\n        })\r\n    let role = undefined\r\n    if (roomMember.powerLevel === 100) {\r\n        role = UserRole.admin\r\n    } else if (roomMember.powerLevel === 50) {\r\n        role = UserRole.moderator\r\n    }\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n        role,\r\n        allDeviceVerified,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    const powerLevelsContent = matrixRoom.currentState\r\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\r\n        .getContent<RoomPowerLevelsContent>()\r\n\r\n    const isDirect = Boolean(matrixRoom.currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate, \r\n            \"\"\r\n        )?.getContent<StateEventsContent>()?.isDirect)\r\n\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n\r\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\r\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\r\n    const myUserId = cl.getUserId()\r\n\r\n    if (lastMessage) {\r\n        if (lastMessage.sender.userId !== myUserId) {\r\n            lastMessage.seen = matrixRoom\r\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \r\n        } else {\r\n            lastMessage = toMessageSeen(\r\n                lastMessage,\r\n                myUserId,\r\n                matrixRoom\r\n            )\r\n        }\r\n    }\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \r\n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\r\n        powerlevels: powerLevelsContent,\r\n        myPowerLevel,\r\n        canBan: myPowerLevel >= powerLevelsContent.ban,\r\n        canKick: myPowerLevel >= powerLevelsContent.kick,\r\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\r\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\r\n        canSendEvents: {\r\n            canChangeHistoryVisivility: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomHistoryVisibility]\r\n            ),\r\n            canChangeRoomAvatar: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\r\n            ),\r\n            canChangeRoomName: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\r\n            ),\r\n            canChangeRoomPowerLevels: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomPowerLevels]\r\n            ),\r\n            canChangeCanonicalAlias: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomCanonicalAlias]\r\n            ),\r\n            canChangeRoomEncryption: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomEncryption]\r\n            ),\r\n            canChangeRoomServerAcl: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomServerAcl]\r\n            ),\r\n            canChangeRoomTobstone: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomTombstone]\r\n            )\r\n        }\r\n    }\r\n}\r\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client } from \"./matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport {\r\n    mergeMessageEvents,\r\n    toMessageSeen\r\n} from \"./mappers\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams,\r\n    Message,\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\r\n    const messages = timelineWindow.getEvents()\r\n        .filter((event) => (\r\n            [\r\n                ROOM_MESSAGE_EVENT,\r\n                ROOM_REDACTION_EVENT\r\n            ].includes(event.getType())))\r\n        .reduce(mergeMessageEvents, [])\r\n    const cl = client()\r\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\r\n    const room = cl.getRoom(roomId as string)\r\n    if (!room) throw new RoomNotFound()\r\n    const myMessages = []\r\n    const otherMessages = []\r\n    const myUserId = cl.getUserId()\r\n    let findFirstSeenOtherMessage = false\r\n    let findFirstSeenMyMessage = false\r\n    for (let i = messages.length - 1; i >= 0; i--) {\r\n        if (messages[i].sender.userId === myUserId) {\r\n            myMessages.push(messages[i])\r\n        } else {\r\n            otherMessages.push(messages[i])\r\n        }\r\n    }\r\n    myMessages.forEach((message) => {\r\n        if (findFirstSeenMyMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message = toMessageSeen(message, myUserId, room)\r\n            findFirstSeenMyMessage = Boolean(message.seen)\r\n        }\r\n    })\r\n    otherMessages.forEach((message) => {\r\n        if (findFirstSeenOtherMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message.seen = room\r\n                .hasUserReadEvent(myUserId, message.originalEventId)\r\n            findFirstSeenOtherMessage = message.seen\r\n        }\r\n    })\r\n    return messages\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (\r\n    roomId: string,\r\n    companion?: string\r\n): Promise<{}> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        ).getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n\r\n    if(companion) {\r\n        return await cl.setAccountData(DIRECT_EVENT, {\r\n            ...prevData,\r\n            [companion]: [roomId]\r\n        })\r\n        \r\n    }\r\n    return await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n\r\nexport const uid = (): string => ( \r\n    `id${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`\r\n)\r\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    EventType,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    toggleTypingUser\r\n} from \"@/room\"\r\nimport { \r\n    initCryptoFx, \r\n} from \"@/crypto\"\r\nimport {\r\n    onVerificationRequest, \r\n    MyVerificationRequest,\r\n    onUpdateDeviceList,\r\n} from \"@/verification\"\r\nimport { UserNotFound } from \"@/errors\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\nimport { uid } from \"@/utils\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {            \r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = Boolean(room.currentState\r\n            .getStateEvents(\r\n                EventType.RoomCreate,\r\n                \"\"\r\n            )?.getContent<StateEventsContent>()?.isDirect)\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", async (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            await client().uploadKeys()\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            updateMessages()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => {\r\n            onRoomMemberUpdate(member)\r\n            toggleTypingUser(member)\r\n        }\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"crossSigning.keysChanged\",\r\n        (...args) => console.log(\"crossSigning.keysChanged\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequest\",\r\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequestCancellation\",\r\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\r\n    ],\r\n    [\r\n        \"crypto.secrets.requestCancelled\",\r\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\r\n    ],\r\n    [\r\n        \"crypto.suggestKeyRestore\",\r\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request.unknown\",\r\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request\", (\r\n            request: MyVerificationRequest\r\n        ) => {\r\n            request.id = uid()\r\n            onVerificationRequest(request)\r\n        }\r\n    ],\r\n    [\r\n        \"crypto.warning\",\r\n        (...args) => console.warn(\"crypto.warning\", args)\r\n    ],\r\n    [\r\n        \"crypto.keyBackupStatus\",\r\n        (enabled) => console.log(\"keyBackupStatus\", enabled)\r\n    ],\r\n    [\r\n        \"crypto.willUpdateDevices\",\r\n        (userIds: string[], initialFetch?: boolean) => {\r\n            // If we didn't know about *any* devices before (ie. it's fresh login),\r\n            // then they are all pre-existing devices, so ignore this and set the\r\n            // devicesAtStart list to the devices that we see after the fetch.\r\n            if (initialFetch) return\r\n            onUpdateDeviceList(userIds)\r\n        }\r\n    ],\r\n    [\"crypto.devicesUpdated\", onUpdateDeviceList],\r\n    [\"deviceVerificationChanged\", onUpdateDeviceList],\r\n    [\"userTrustStatusChanged\", onUpdateDeviceList]\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    } = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const cl = client()\r\n    const { store } = cl\r\n    if (store) await store.startup()\r\n    await initCryptoFx()\r\n    await cl.startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { client } from \"../matrix-client\"\r\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\r\n\r\nupdateDisplayNameFx.use(async (newDisplayName) => {\r\n    await client().setDisplayName(newDisplayName)\r\n})\r\n\r\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\r\n    await client().setAvatarUrl(newAvatarUrl)\r\n})\r\n\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    EventType,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\n\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { DIRECT_EVENT } from \"@/constants\"\r\nimport { \r\n    CantInviteUsers,\r\n    ClientNotInitialized,\r\n    NotEnoughPermissions,\r\n    RoomNotFound, \r\n    TimelineWindowUndefined,\r\n    UserNotFound \r\n} from \"@/errors\"\r\nimport { getMessages, setDirectRoom } from \"@/utils\"\r\nimport { onUpdateDeviceList } from \"@/verification\"\r\n\r\nimport {\r\n    initRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx,\r\n    $loadFilter,\r\n    loadRoomFx,\r\n    findDirectRoomByUserIdFx,\r\n    $typingMembers,\r\n    clearTypingMember,\r\n    toggleTypingUser,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    sendTypingFx,\r\n    getMembersByRoomIdFx,\r\n    inviteUsersFx,\r\n    getRoomMemberFx,\r\n    getUserDevicesFx,\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\n\r\nconst TYPING_SERVER_TIMEOUT = 5000\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst getRoomMembersFx = attach({\r\n    effect: getMembersByRoomIdFx\r\n})\r\n\r\nconst getCurrentRoomFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n$typingMembers\r\n    .on(toggleTypingUser, (members, member) => {\r\n        if(member.typing) {\r\n            if (members[member.roomId]) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...members[member.roomId], member] \r\n                }\r\n            } \r\n            return {\r\n                ...members,\r\n                [member.roomId]: [member] \r\n            }\r\n        } \r\n        if (members[member.roomId]) {\r\n            if (members[member.roomId].length > 1) {\r\n                const filteredUsers = members[member.roomId]\r\n                    .filter(({userId}) => userId !== member.userId)\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...filteredUsers] \r\n                }\r\n            }\r\n            delete members[member.roomId]\r\n            return {\r\n                ...members, \r\n            }\r\n        }\r\n    })\r\n    .reset(clearTypingMember)\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getCurrentRoomFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetMembersByRoomIdFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return room.getMembers()\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n        const room = client().getRoom(roomId)\r\n        if (!room) throw new RoomNotFound()\r\n        const membersCache: { [id: string]: RoomMember } = {}\r\n        const searchResponse = await client().search({\r\n            body: {\r\n                search_categories: {\r\n                    room_events: {\r\n                        search_term: term,\r\n                        keys: [\"content.body\"],\r\n                        filter: {\r\n                            rooms: [roomId],\r\n                        },\r\n                        order_by: orderBy,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n        return searchResponse\r\n            .search_categories\r\n            .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n                const event = new MatrixEvent(result)\r\n                const senderId = event.getSender()\r\n                if (membersCache[senderId] === undefined) {\r\n                    membersCache[senderId] = room\r\n                        .getMember(senderId) as RoomMember\r\n                }\r\n                event.sender = membersCache[senderId]\r\n                return toMessage(event)\r\n            })\r\n    })\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id, user.userId)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    try {\r\n        await client().invite(roomId, userId)\r\n        await client().sendSharedHistoryKeys(roomId, [userId])\r\n    } catch (e: any) {\r\n        if (e.httpStatus === 403) {\r\n            throw new NotEnoughPermissions(\r\n                \"Not enough permissions to invite users\"\r\n            )\r\n        }\r\n    }\r\n})\r\n\r\ninviteUsersFx.use( async ({usersIds, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    for (const id of usersIds) {\r\n        try {\r\n            await client().invite(roomId, id)\r\n            await client().sendSharedHistoryKeys(roomId, [id])\r\n        } catch (e: any) {\r\n            if (e.httpStatus === 403) {\r\n                throw new NotEnoughPermissions()\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n\r\nfindDirectRoomByUserIdFx.use((userId) => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\r\n    const roomId = directRooms[userId] && directRooms[userId][0]\r\n    if(!roomId) throw new RoomNotFound()\r\n    const room = cl.getRoom(roomId)\r\n    if(!room) throw new RoomNotFound()\r\n    return toMappedRoom(room)\r\n})\r\n\r\nsendTypingFx.use(async ({ roomId, isTyping }) => {\r\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\r\n})\r\n\r\ngetRoomMemberFx.use(({ roomId, userId }) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\r\n    const roomMember = matrixRoom?.getMember(userId)\r\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\r\n    return roomMember\r\n})\r\n\r\ngetUserDevicesFx.use((id) => {\r\n    const cl = client()\r\n    const isMe = cl.getUserId() === id\r\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\r\n    return cl.getStoredDevicesForUser(id).map((device) => {\r\n        let verified: boolean\r\n        if (isMe) {\r\n            verified = crossSigningInfo.checkDeviceTrust(\r\n                crossSigningInfo,\r\n                device,\r\n                false,\r\n                true,\r\n            ).isCrossSigningVerified()\r\n        } else {\r\n            verified = device.isVerified()\r\n        }\r\n        return {\r\n            deviceId: device.deviceId,\r\n            displayName: device.getDisplayName(),\r\n            verified,\r\n        }\r\n    })\r\n\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach, guard, sample} from \"effector\"\r\nimport {\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    loadRoomFx,\r\n    MessageResponse\r\n} from \"@/room\"\r\nimport {\r\n    UpdateMessagesFxParams,\r\n    PaginateParams,\r\n    PaginateRoomFxParams\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const paginateRoomFx = messagesDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n\r\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\r\n    .effect<string, number, Error>()\r\n","import {\r\n    attach,\r\n    combine,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport matrix, {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    debounce,\r\n    throttle\r\n} from \"patronum\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $loadFilter,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx,\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx,\r\n    updateCurrentRoomUnreadMessageCountFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    updateMessages,\r\n    $currentRoomUnreadMessageCount,\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst THROTTLE_MESSAGE_TIME = 800\r\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n\r\n$currentRoomUnreadMessageCount\r\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\r\n    .reset($currentRoomId)\r\n\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n          && !backwardPaginationPending\r\n          && !forwardPaginationPending\r\n          && !roomLoading\r\n)\r\n    \r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n    \r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n    \r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n    \r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\n\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        throttle({\r\n            source: updateMessages,\r\n            timeout: THROTTLE_MESSAGE_TIME\r\n        }),\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nguard({\r\n    clock: $messages.updates,\r\n    source: $currentRoomId,\r\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\r\n    target: updateCurrentRoomUnreadMessageCountFx\r\n})\r\n\r\nsample({\r\n    clock: debounce({\r\n        source: sendMessageFx.done,\r\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\r\n    }),\r\n    fn: ({ params, result }) => ({\r\n        roomId: params.roomId,\r\n        eventId: result.event_id\r\n    }),\r\n    target: readAllMessagesFx\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n    await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n    \r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\n\r\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const count = matrixRoom.getUnreadNotificationCount()\r\n    return count ?? 0\r\n})\r\n","import { client } from \"@/matrix-client\"\nimport { checkMyDeviceVerificationFx } from \"@/verification\"\nimport { \n    checkBackupKeyFx, \n    initCryptoFx, \n} from \"./public\"\n\ncheckBackupKeyFx.use(async () => client().getKeyBackupEnabled())\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) return\n    await cl.initCrypto()\n    // @TODO Убрать хардкод. Настройка ручной верификации каждой сессии\n    cl.setCryptoTrustCrossSignedDevices(false)\n    // const backupInfo = await cl.getKeyBackupVersion()\n    // if (backupInfo) {\n    // don't await, because this can take a long times\n    // cl.restoreKeyBackupWithSecretStorage(backupInfo).then(console.log)\n    // }\n    checkMyDeviceVerificationFx()\n})\n\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams \n} from \"./types\"\n\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\n","import { forward, sample, guard } from \"effector\"\nimport { client } from \"@/matrix-client\"\n\nimport { uid } from \"@/utils\"\n\nimport { \n    updateVerificationPhase, \n    onCancelVerificationEvent,\n    confirmSASVerificationFx, \n    onVerificationRequestFx, \n    startSASFx, \n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n} from \"./private\"\nimport { \n    $currentVerificationEvent, \n    $deviceIsVerified, \n    $verificationEvents, \n    cancelVerificationEventFx,\n    checkMyDeviceVerificationFx,\n    confirmSASVerification,\n    startMyDeviceVerificationFx,\n    onVerificationRequest, \n    setCurrentVerificationEvent, \n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel, \n} from \"./public\"\nimport { MyVerificationRequest, Phase } from \"./types\"\n\n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => [\n        ...requests, req\n    ]))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n// @TODO When copying an object, access to private properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n\nforward({\n    from: checkMyDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkMyDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx \n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData, \n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(async ({request, currentRequest}) => {\n    const onChange = (e: any) => {\n        if (request.accepting || request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n        }\n\n        if (request.cancelled) {\n            request.off(\"change\", onChange)\n            onCancelVerificationEvent(request)\n        }\n        if (request.phase === Phase.Done) {\n            request.off(\"change\", onChange)\n            onCancelVerificationEvent(request)\n        }\n        if (\n            request.phase === Phase.Started \n            && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n        }\n    }\n    request.on(\"change\", onChange)\n    request.on(\"error\", console.error)\n    const phaseArray = [Phase.Cancelled, Phase.Done, Phase.Requested]\n    // Восстановление предыдущего реквеста после обновления приложения\n    if (!currentRequest && !phaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n    // При запуски приложения, если девайс не верифицирован, то отправляется запрос на верификацию и мы сразу его принимаем\n    if (request.isSelfVerification) {\n        request.accept()\n    }\n    return request\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", () => {\n        updateVerificationPhase()\n    })\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n\n    try {\n        await verifier.verify()\n    } catch (e) {\n        onCancelVerificationEvent(request)\n    }\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    try {\n        await (currentRequest.verifier as any).sasEvent.confirm()\n    } finally {\n        updateVerificationPhase()\n    }\n})\n\ncheckMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    cl.downloadKeys([userId])\n    const device = cl.getStoredDevice(  \n        userId, deviceId\n    )\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\n    const isVerified = crossSigningInfo.checkDeviceTrust(\n        crossSigningInfo,\n        device,\n        false,\n        true,\n    ).isCrossSigningVerified()\n\n    return isVerified\n})\n\nstartMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = uid()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({userId, deviceId}) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","verificationDomain","$currentVerificationEvent","setCurrentVerificationEvent","cancelVerificationEventFx","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","$deviceIsVerified","onUpdateDeviceList","checkMyDeviceVerificationFx","startVerificationDevice","startMyDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","cl","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","isVerified","checkUserTrust","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","uid","Date","now","toString","Math","random","substring","cryptoDomain","checkBackupKeyFx","initCryptoFx","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","e","args","console","log","request","id","warn","enabled","userIds","initialFetch","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","error","rules","global","setPushRuleEnabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","isMe","crossSigningInfo","getStoredCrossSigningForUser","allDeviceVerified","getStoredDevicesForUser","device","checkDeviceTrust","isCrossSigningVerified","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","_client$getRoom$curre","_client$getRoom$curre2","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_client$getRoom$curre3","_client$getRoom$curre4","_context7","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","getKeyBackupEnabled","initCrypto","setCryptoTrustCrossSignedDevices","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","updateDeviceVerification","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","requests","req","currentReq","canceledReq","currentRequest","onChange","accepting","phase","Ready","cancelled","off","Done","Started","verifier","sasEvent","phaseArray","Cancelled","Requested","isSelfVerification","accept","beginKeyVerification","once","verify","cancel","confirm","getDeviceId","downloadKeys","getStoredDevice","requestVerification","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}