{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/domain.ts","../src/effects.ts","../src/events.ts","../src/matrix-client.ts","../src/utils.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { SearchResponse } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    LoginByPasswordParams,\n    LoginPayload,\n    Room,\n    SearchMessageTextPayload,\n    SendMessagePayload,\n    StartClientParams,\n    Message,\n    LoginByTokenParams,\n    InitTimelineWindowParams,\n    TimelineWindowPaginationParams,\n    SearchPayload,\n    LoadTimelineWindowParams,\n    ReadAllMessagesParams,\n    RoomWithActivity,\n    MappedRoom,\n    RoomInfo,\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchFx = matrixDomain.effect<SearchPayload, Message[], Error>()\nexport const searchMessageTextFx = matrixDomain\n    .effect<SearchMessageTextPayload, SearchResponse, Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const getRoomTimelineFx = matrixDomain\n    .effect<Room[\"roomId\"], Message[], Error>()\nexport const initTimelineWindowFx = matrixDomain\n    .effect<InitTimelineWindowParams, Message[], Error>()\nexport const getTimelineWindowMessagesFx = matrixDomain\n    .effect<void, Message[], Error>()\nexport const loadTimelineWindowFx = matrixDomain\n    .effect<LoadTimelineWindowParams, Message[], Error>()\nexport const paginateTimelineWindowFx = matrixDomain\n    .effect<TimelineWindowPaginationParams, Message[], Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport { MappedRoom, MessageEvent } from \"./types\"\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams\n} from \"./types\"\n\nexport const getSenderAvatar = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatar = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n} from \"./types\"\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: event.getContent(),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: event.getContent(),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { forward } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    searchMessageTextFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    getRoomTimelineFx,\n    loginByTokenFx,\n    stopClientFx,\n    initTimelineWindowFx,\n    getTimelineWindowMessagesFx,\n    paginateTimelineWindowFx,\n    searchFx,\n    loadTimelineWindowFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx\n} from \"./effects\"\nimport { onCachedState, onInitialSync, onSync, roomMessage } from \"./events\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst PaginationFail = createCustomError(\"PaginationFail\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchFx.use(async (params) => {\n    const searchResponse = await client().search(params)\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            return toMessage(event)\n        })\n})\n// TODO а нужен ли?\nsearchMessageTextFx.use((params) => client().searchMessageText(params))\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\ngetRoomTimelineFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (room) {\n        return room.timeline\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n    }\n    return []\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n        \n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId : DMUser?.user.userId,\n            isOnline: DMUser ? Boolean(DMUser.user.currentlyActive) : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nlet timelineWindow: matrix.TimelineWindow | undefined\ninitTimelineWindowFx\n    .use(async ({ roomId, initialEventId, initialWindowSize }) => {\n        const cl = client()\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const timelineSet = room.getUnfilteredTimelineSet()\n        timelineWindow = new matrix.TimelineWindow(cl, timelineSet)\n        await timelineWindow.load(initialEventId, initialWindowSize)\n        return timelineWindow\n            .getEvents()\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n    })\nloadTimelineWindowFx.use(async ({ initialEventId, initialWindowSize }) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n})\ngetTimelineWindowMessagesFx.use(() => {\n    if (!timelineWindow) return []\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n})\n\npaginateTimelineWindowFx.use(async ({\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    const result: boolean = await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    if (!result) throw new PaginationFail()\n    return timelineWindow.getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n"],"names":["matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchFx","searchMessageTextFx","sendMessageFx","editMessageFx","deleteMessageFx","getRoomTimelineFx","initTimelineWindowFx","getTimelineWindowMessagesFx","loadTimelineWindowFx","paginateTimelineWindowFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","roomMessage","event","onInitialSync","onCachedState","onSync","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","checkIsDirect","roomId","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","toMessage","originalEventId","undefined","getId","content","sender","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","room","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","PaginationFail","EventNotFound","ClientNotInitialized","getMappedRooms","getRooms","map","timelineWindow","forward","from","done","initialSyncLimit","to","use","params","login","async","store","startup","startClient","search","search_categories","room_events","results","result","MatrixEvent","searchMessageText","txnId","sendMessage","eventId","body","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","getRoom","timeline","filter","getType","reduce","toStartOfTimeline","removed","data","eventType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rooms","rrEvent","findEventById","setRoomReadMarkers","cl","matrixRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","hasUserReadEvent","getUserId","mergedMessageEvents","lastMessage","isDirect","DMUser","getMember","guessDMUserId","directUserId","user","userId","isOnline","currentlyActive","lastActivityTS","getLastActiveTimestamp","stopClient","initialEventId","initialWindowSize","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","direction","size","makeRequest","requestLimit","dir","EventTimeline","FORWARDS","BACKWARDS","paginate","roomMembersCount","getJoinedMemberCount","toRoomInfo","ms","throttle","source","timeout","batchEvents","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","opts"],"mappings":"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"}