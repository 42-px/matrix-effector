{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/domain.ts","../src/effects.ts","../src/events.ts","../src/matrix-client.ts","../src/constants.ts","../src/mappers.ts","../src/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { SearchResponse } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    LoginByPasswordParams,\n    LoginPayload,\n    Room,\n    SearchMessageTextPayload,\n    SendMessagePayload,\n    StartClientParams,\n    Message,\n    LoginByTokenParams,\n    InitTimelineWindowParams,\n    TimelineWindowPaginationParams,\n    SearchPayload,\n    LoadTimelineWindowParams,\n    ReadAllMessagesParams,\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchFx = matrixDomain.effect<SearchPayload, Message[], Error>()\nexport const searchMessageTextFx = matrixDomain\n    .effect<SearchMessageTextPayload, SearchResponse, Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const getRoomTimelineFx = matrixDomain\n    .effect<Room[\"roomId\"], Message[], Error>()\nexport const initTimelineWindowFx = matrixDomain\n    .effect<InitTimelineWindowParams, Message[], Error>()\nexport const getTimelineWindowMessagesFx = matrixDomain\n    .effect<void, Message[], Error>()\nexport const loadTimelineWindowFx = matrixDomain\n    .effect<LoadTimelineWindowParams, Message[], Error>()\nexport const paginateTimelineWindowFx = matrixDomain\n    .effect<TimelineWindowPaginationParams, Message[], Error>()\nexport const readAllMessages = matrixDomain\n    .effect<ReadAllMessagesParams, void,Error>()\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { matrixDomain } from \"./domain\"\nimport { MappedRoom, MessageEvent } from \"./types\"\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const roomMessageBatch = batchEvents(roomMessage, 500)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n} from \"./types\"\nimport { client } from \"./matrix-client\"\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: event.getContent(),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: event.getContent(),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    const maxHistory = 99\n    const events = room.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    const cl = client()\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (!cl) break\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        if (room.hasUserReadEvent(cl.getUserId() as string, event.getId())) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        unreadCount,\n        lastMessage\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { forward } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    searchMessageTextFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    getRoomTimelineFx,\n    loginByTokenFx,\n    stopClientFx,\n    initTimelineWindowFx,\n    getTimelineWindowMessagesFx,\n    paginateTimelineWindowFx,\n    searchFx,\n    loadTimelineWindowFx,\n    readAllMessages,\n} from \"./effects\"\nimport { onCachedState, onInitialSync, onSync, roomMessage } from \"./events\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst PaginationFail = createCustomError(\"PaginationFail\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchFx.use(async (params) => {\n    const searchResponse = await client().search(params)\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            return toMessage(event)\n        })\n})\n// TODO а нужен ли?\nsearchMessageTextFx.use((params) => client().searchMessageText(params))\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\ngetRoomTimelineFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (room) {\n        return room.timeline\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n    }\n    return []\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessages.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\nstopClientFx.use(() => client().stopClient())\nlet timelineWindow: matrix.TimelineWindow | undefined\ninitTimelineWindowFx\n    .use(async ({ roomId, initialEventId, initialWindowSize }) => {\n        const cl = client()\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const timelineSet = room.getUnfilteredTimelineSet()\n        timelineWindow = new matrix.TimelineWindow(cl, timelineSet)\n        await timelineWindow.load(initialEventId, initialWindowSize)\n        return timelineWindow\n            .getEvents()\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n    })\nloadTimelineWindowFx.use(async ({ initialEventId, initialWindowSize }) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n})\ngetTimelineWindowMessagesFx.use(() => {\n    if (!timelineWindow) return []\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n})\n\npaginateTimelineWindowFx.use(async ({\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    const result: boolean = await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    if (!result) throw new PaginationFail()\n    return timelineWindow.getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n})\n"],"names":["matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchFx","searchMessageTextFx","sendMessageFx","editMessageFx","deleteMessageFx","getRoomTimelineFx","initTimelineWindowFx","getTimelineWindowMessagesFx","loadTimelineWindowFx","paginateTimelineWindowFx","readAllMessages","roomMessage","event","roomMessageBatch","batchEvents","onInitialSync","onCachedState","onSync","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessage","originalEventId","undefined","getId","content","getContent","sender","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","room","events","getLiveTimeline","getEvents","unreadCount","cl","i","length","hasUserReadEvent","getUserId","mergedMessageEvents","filter","includes","getType","reduce","mergeMessageEvents","lastMessage","roomId","name","summary","acc","isRelation","isRedaction","RoomNotFound","createCustomError","TimelineWindowUndefined","PaginationFail","EventNotFound","getMappedRooms","getRooms","map","timelineWindow","forward","from","done","initialSyncLimit","to","use","params","login","async","store","startup","startClient","search","search_categories","room_events","results","result","MatrixEvent","searchMessageText","txnId","sendMessage","eventId","body","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","getRoom","timeline","toStartOfTimeline","removed","data","eventType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rooms","rrEvent","findEventById","setRoomReadMarkers","stopClient","initialEventId","initialWindowSize","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","direction","size","makeRequest","requestLimit","dir","EventTimeline","FORWARDS","BACKWARDS","paginate","opts"],"mappings":"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"}