{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    EventPermissions,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedUser,\n    Message,\n    MessageEvent,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    StartClientParams,\n    UploadContentParams,\n    UploadProgress,\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const checkEventPermissionsFx = matrixDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = matrixDomain\n    .effect<UploadContentParams, string, Error>()\n\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const onRoomInitialized = matrixDomain.event<void>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\nexport const onUploadProgress = matrixDomain.event<UploadProgress>()\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    PaginateRoomFxParams,\n    UpdateMessagesFxParams\n} from \"./types\"\n\nexport const updateMessages = matrixDomain.event<void>()\n\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\nexport const updateMessagesFx = matrixDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MsgType,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    if (!matrixContent.body) return {}\n    const content: any = {\n        body: matrixContent.body,\n        msgtype: matrixContent.msgtype\n    }\n    if (matrixContent.msgtype === MsgType.BadEncrypted) return content\n    if (matrixContent[\"m.relates_to\"]) {\n        content[\"m.relates_to\"] = {...matrixContent[\"m.relates_to\"]}\n    }\n    if (matrixContent.msgtype === MsgType.Text ||\n        matrixContent.msgtype === MsgType.Emote ||\n        matrixContent.msgtype === MsgType.Notice\n    ) {\n        if (matrixContent.format) content.format = matrixContent.format\n        if (matrixContent.formatted_body) {\n            content.formatted_body = matrixContent.formatted_body\n        }\n        return content\n    }\n    if (matrixContent.msgtype === MsgType.Location) {\n        if (matrixContent.geo_uri) content.geo_uri = matrixContent.geo_uri\n        if (matrixContent.info) content.info = matrixContent.info\n        return content\n    }\n    if (matrixContent.file) content.file = matrixContent.file\n    if (matrixContent.url) content.url = matrixContent.url\n    if (matrixContent.info) content.info = {...matrixContent.info}\n    return content\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, {\n    RoomMember,\n    TimelineWindow,\n    EventStatus,\n} from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward,\n    onRoomInitialized,\n    checkEventPermissionsFx,\n    uploadContentFx,\n    onUploadProgress,\n} from \"./public\"\nimport {\n    paginateRoomFx,\n    loadRoomFx,\n    initRoomFx,\n    updateMessagesFx,\n    updateMessages\n} from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nconst UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n\nfunction getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(() => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    return {\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\n\nuploadContentFx.use(async ({\n    file,\n    name,\n    includeFilename,\n    type,\n}) => {\n    const cl = client()\n    const contentUri = await cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri: true,\n        rawResponse: false,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any)\n    return contentUri\n})\n"],"names":["MsgType","matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","checkEventPermissionsFx","uploadContentFx","$currentRoomId","store","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","onInitialSync","onCachedState","onSync","initRoom","onRoomInitialized","loadRoom","paginateForward","paginateBackward","onUploadProgress","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","checkIsDirect","roomId","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","updateMessages","initRoomFx","loadRoomFx","paginateRoomFx","updateMessagesFx","getMappedContent","matrixContent","body","content","msgtype","BadEncrypted","Text","Emote","Notice","format","formatted_body","Location","geo_uri","info","file","url","toMessage","originalEventId","undefined","getId","sender","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","room","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","UserNotLoggedIn","getMessages","timelineWindow","getEvents","filter","getType","reduce","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","$loadFilter","combine","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","_","doneData","reset","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","map","messages","isLive","canPaginateBackward","canPaginateForward","forward","from","pending","to","clock","fn","target","initialEventId","initialWindowSize","loadAdditionalDataDirection","use","cl","loggedUserId","getUserId","user","getUser","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","async","startup","startClient","term","orderBy","getRoom","membersCache","search","search_categories","room_events","search_term","keys","rooms","order_by","results","MatrixEvent","senderId","getSender","getMember","txnId","sendMessage","eventId","m.new_content","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","makeRequest","requestLimit","dir","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","mxEvent","canRedact","currentState","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","includeFilename","uploadContent","onlyContentUri","rawResponse","progressHandler","loaded","total","ms","throttle","timeout","batchEvents","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","mxcUrl","mxcUrlToHttp","opts"],"mappings":"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"}