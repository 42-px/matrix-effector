{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room/types.ts","../src/room-messages/domain.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/types/content.ts","../src/matrix-client.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport { LoginPayload } from \"matrix-js-sdk\";\nimport { MappedRoom, MappedUser } from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams\n} from \"./types\"\nimport { appDomain } from \"./domain\"\nimport { CreateClientParams, AuthData } from \"./types\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { RoomMember, MappedUser, Message } from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    public = \"public\",\n    private = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const paginationDomain = root.domain(\"pagination\")\n","import { paginationDomain } from \"./domain\"\nimport { PaginateParams } from \"./types\"\n\nexport const $paginateForwardPending = paginationDomain.store(false)\nexport const $paginateBackwardPending = paginationDomain.store(false)\nexport const $canPaginateBackward = paginationDomain.store(true)\nexport const $canPaginateForward = paginationDomain.store(true)\n\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\nexport const onPaginateForwardDone = paginationDomain.event<void>()\nexport const paginateForward = paginationDomain.event<PaginateParams>()\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport { createClientOptions, EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: createClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\nimport { checkIsDirect, client } from \"@/index\"\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership()\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = (cl.getAccountData(\n        DIRECT_EVENT as EventType) as MatrixEvent\n    )?.getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = (roomId: string): Promise<void> => {\n    const cl = client()\n    const { creator } = (cl.getRoom(roomId)?.currentState\n        .getStateEvents(\n            \"m.room.create\" as EventType,\n            undefined as any\n        ) as any )[0]?.getContent()\n    const prevData = (cl.getAccountData(\n        DIRECT_EVENT as EventType\n    ) as MatrixEvent)?.getContent() as any\n    const prevRoomsId = prevData[creator] ?? []\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { combine } from \"effector\"\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { RoomWithActivity } from \"@/types\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse, RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\nimport { $currentRoomId, $timelineWindow } from \"./public\"\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\n\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\nimport { paginationDomain } from \"./domain\"\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\n\nexport const paginateRoomFx = paginationDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n","import { guard, sample } from \"effector\"\nimport { $currentRoomId, MessageResponse } from \"@/room\"\nimport { paginateRoomFx } from \"@/room-pagination/private\"\nimport { loadRoomFx } from \"@/room/private\"\nimport { UpdateMessagesFxParams } from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const updateMessages = messagesDomain.event<void>()\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import { forward } from \"effector\"\nimport { EventType, User } from \"matrix-js-sdk\"\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\nimport { MatrixEvent, Room, RoomMember, LoginPayload } from \"@/types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx\n} from \"./public\"\nimport { AuthData } from \"./types\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport { updateMessages } from \"@/room-messages/private\"\nimport { roomMessage } from \"@/room-messages\"\nimport { directRoomCreated, roomCreated } from \"@/room\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId() as string)\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = (room.currentState\n            .getStateEvents(\n                \"m.room.create\" as EventType, \n                undefined as any\n            ) as any)[0]?.getContent()?.isDirect\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    }: LoginPayload = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(() => client().logout())\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import matrix, { Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport { attach, forward, guard, sample } from \"effector\"\nimport {\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { MatrixEvent, RoomMember } from \"@/types\"\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    $loadFilter,\n    getRoomByIdFx,\n    getRoomMembers,\n    getRoomMembersFx,\n    initRoomFx,\n    loadRoomFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    updatePowerLevelFx, updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $timelineWindow,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    onRoomLoaded,\n    createRoomFx,\n    getAllUsersFx,\n    inviteUserFx,\n    kickUserRoomFx,\n    renameRoomFx,\n    joinRoomFx,\n    createDirectRoomFx,\n    clearCurrentRoomState,\n    $myPowerLevel,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForRedact,\n    $requiredPowerLevelForDefaultState,\n    $currentRoom,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n} from \"./public\"\nimport { LoadRoomFxParams, Visibility } from \"./types\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getRoomByIdFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getRoomByIdFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = (\n        room.currentState\n            .getStateEvents(\"m.room.power_levels\", \"\") as MatrixEvent[])[0]\n        .getContent() as any\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    const { room_id } = await client().createRoom(options)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n","import { attach, forward, guard, sample } from \"effector\"\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\nimport { paginateForwardFx } from \"@/room-pagination/private\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx\n} from \"./public\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport {\n    RoomNotFound,\n    EventNotFound,\n    ClientNotInitialized,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n","import { combine, forward, guard } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    $currentRoomId,\n    $loadRoomFxPending,\n    loadRoom\n} from \"@/room\"\nimport { $loadFilter } from \"@/room/private\"\nimport { setMessages } from \"@/room-messages/private\"\nimport { getMessages } from \"@/utils\"\nimport {\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    paginateBackward,\n    paginateForward,\n    onPaginateForwardDone\n} from \"./public\"\nimport { TimelineWindowUndefined } from \"@/errors\"\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n"],"names":["root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","Visibility","Preset","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","MsgType","clientStore","messageBatchInterval","callbacksStore","createClient","options","ms","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","getIsDirectRoomsIds","directRooms","getAccountData","Object","values","flatMap","setDirectRoom","creator","currentState","getStateEvents","prevData","prevRoomsId","setAccountData","[object Object]","$loadFilter","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","getRoomByIdFx","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","state","prevState","rooms","e","use","login","async","response","fetch","baseUrl","method","body","JSON","stringify","type","token","user_id","access_token","device_id","well_known","json","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","profileInfo","getProfileInfo","avatar_url","displayname","createClientParams","startClientParams","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","timeout","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","isLive","canPaginateBackward","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","order_by","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","room_id","createRoom","findRoomId","is_direct","private","creation_content","reason","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}