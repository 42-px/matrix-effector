{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/idbHelper.ts","../src/verification/public.ts","../src/create-verification-method/domain.ts","../src/create-verification-method/public.ts","../src/interactive-auth/domain.ts","../src/interactive-auth/public.ts","../src/cryptoCallbacks.ts","../src/cross-signing/domain.ts","../src/cross-signing/public.ts","../src/key-backup/domain.ts","../src/key-backup/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/private.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/MegolmExportEncryption.ts","../src/crypto/domain.ts","../src/crypto/private.ts","../src/crypto/public.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/reducers.ts","../src/verification/init.ts","../src/cross-signing/private.ts","../src/cross-signing/init.ts","../src/create-verification-method/init.ts","../src/interactive-auth/private.ts","../src/interactive-auth/init.ts","../src/key-backup/private.ts","../src/key-backup/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n    isCryptoEnabled: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n\nexport enum SecureBackupSetupMethod {\n    Key = \"key\",\n    Passphrase = \"passphrase\",\n}\n\nexport enum RecoveryKeyOrPassphraseEnum {\n    RecoveryKey = \"RecoveryKey\",\n    Passphrase = \"Passphrase\"\n}\n\nexport type UserId = string\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport { \n    Room, \n    RoomMember, \n    User\n} from \"matrix-js-sdk\"\n\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload,\n    Message,\n    UserId\n} from \"@/types\"\n\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData,\n    MyVerificationRequest\n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n\nexport const $currentDeviceId = appDomain.store<string | null>(null)\n\nexport const onUpdateKeyBackupStatus = appDomain.event<void>()\n\nexport const onRoomMessage = appDomain.event<Message>()\nexport const directRoomCreated = appDomain.event<Room>()\nexport const roomCreated = appDomain.event<Room>()\nexport const messagesUpdated = appDomain.event<void>()\nexport const roomMemberUpdated = appDomain.event<RoomMember>()\nexport const roomUserUpdated = appDomain.event<User>()\nexport const toggleTypingUser = appDomain.event<RoomMember>()\nexport const onSessionRemaining = appDomain.event<number>()\nexport const crossSigningKeyChanged = appDomain.event<void>()\nexport const crossSigningStatusUpdated = appDomain.event<void>()\nexport const onVerificationRequest = appDomain.event<MyVerificationRequest>()\nexport const onUpdateDeviceList = appDomain.event<string[]>()\nexport const onUsersProfileUpdate = appDomain.event<UserId[]>()\nexport const initCryptoFx = appDomain.effect<void, void, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember,\n    IRoomEncryption\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n\nexport type TurnOnEcnryptionParams = {\n    roomId: string\n    encryptionEvent: IRoomEncryption\n}\n","import {\n    TimelineWindow,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions,\n    MyDeviceInfo,\n    TurnOnEcnryptionParams,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n\nexport const getUserDevicesInfoFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n\nexport const turnOnEcnryptionFx = roomDomain\n    .effect<TurnOnEcnryptionParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { onRoomMessage } from \"./app\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore.stopPeeking()\n        // TODO Не чистить сторы, если userId нового юзера совпадает со старым юзером\n        clientStore.clearStores()\n        clientStore.crypto.stop()\n        clientStore.crypto.cryptoStore.deleteAllData()\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(onRoomMessage, messageBatchInterval)\n}\n","import { \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type InputToKeyParams = {\n  passphrase?: string\n  recoveryKey?: string\n}\n\nexport type CheckKeyInfo = {\n  keyInfo: ISecretStorageKeyInfo\n}\n\nexport type ValidatePassphraseFxParams = CheckKeyInfo & { passphrase: string }\nexport type ValidateRecoveryKeyFxParams = CheckKeyInfo & { input: string }","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\nimport { RenameDeviceParams, SessionInfo } from \"./types\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\nexport const $mySessionsInfo = d.store<SessionInfo[] | null>(null)\nexport const getMySessionsFx = d.effect<void, SessionInfo[], Error>()\nexport const clearMySessionsInfo = d.event<void>()\n\nexport const logoutSessionsById = d.event<SessionInfo[\"device_id\"][]>()\n\nexport const renameDeviceFx = d.effect<RenameDeviceParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const verificationDomain = root.domain(\"verificationDomain\")\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { createApi } from \"effector\"\n\nimport { \n    MyVerificationRequest,\n    StartVerificationDeviceParams\n} from \"@/app\"\nimport { UserId } from \"@/types\"\n\nimport { verificationDomain } from \"./domain\"\nimport {\n    CheckKeyInfo,\n    InputToKeyParams,\n} from \"./types\"\n\n// Emodji SAS Verification\n\nexport const $isWaitingAnotherUser = verificationDomain\n    .store<boolean>(false)\n\nexport const {\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser\n} = createApi(\n    $isWaitingAnotherUser,\n    {\n        setWaitingAnotherUser: () => true,\n        resetWaitingAnotherUser: () => false\n    }\n)\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startThisDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n\n\n// Recovery Key\n\nexport const keyVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\nexport const onNeedRecoveryKeyOrPassphrase = verificationDomain\n    .event<void>()\n\nexport const startRecoveryKeyOrPassphraseVerification = verificationDomain\n    .event<void>()\n\nexport const setCheckKeyInfo = verificationDomain\n    .event<CheckKeyInfo>()\n\nexport const validateRecoveryKey = verificationDomain.event<string>()\n\nexport const onRecoveryKeyOrPassphraseSuccess = verificationDomain.event<void>()\n\nexport const onValidRecoveryKey = verificationDomain.event<void>()\nexport const onInvalidRecoveryKey = verificationDomain.event<Error>()\n\n// passphrasse verification \n\nexport const $hasPassphrase = verificationDomain.store<boolean>(false)\nexport const onHasPassphrase = verificationDomain.event<boolean>()\n\nexport const validatePassphrase = verificationDomain.event<string>()\nexport const onValidPassphrase = verificationDomain.event<void>()\nexport const onInvalidPassphrase = verificationDomain.event<Error>()\n\n// others\nexport const $canVerify = verificationDomain.store<boolean>(false)\n\ntype DeviceIsVerified = boolean\n\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const checkThisDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\nexport const onResolveSecretStorageKey = verificationDomain\n    .event<InputToKeyParams>()\n\nexport const onRejectSecretStorageKey = verificationDomain\n    .event<void>()\n\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"createVerificationMethod\")\n","import { IRecoveryKey } from \"matrix-js-sdk\"\n\nimport { SecureBackupSetupMethod } from \"@/types\"\n\nimport { d } from \"./domain\"\n\nexport const createRecoveryKeyAndPassPhraseFx = d\n    .effect<string | undefined, IRecoveryKey, Error>()\n\nexport const getSecureBackupSetupMethodsFx = d\n    .effect<void, SecureBackupSetupMethod[], Error>()\n\nexport const onNeedCreateRecoveryMethod = d.event<void>()\n\nexport const lossAllRecoveryKeyMethod = d.event<void>()\n\nexport const cancelCreateNewMethod = d.event<void>()\nexport const onNewRecoveryMethodCreated = d.event<void>()\n\nexport const bootstrapSecretStorageFx = d.effect<IRecoveryKey, void, Error>()\n\nexport const resetAllRecoveryKeyMethodsFx = d.effect<void,void, Error>()\n\nexport const setupRecoveryMethodFx = d.effect<void, void, Error>()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"interactiveAuth\")\n","import { IAuthData } from \"matrix-js-sdk\"\n\nimport { d } from \"./domain\"\nimport { OnInteractiveAuthStateUpdateResult } from \"./types\"\n\nexport const createInteractiveAuthFx = d\n    .effect<(auth: IAuthData) => Promise<IAuthData>, void, Error>()\n\nexport const submitAuthDict = d.event<string>()\n\nexport const onNeedUserPassword = d.event<void>()\nexport const onUserPasswordError = d.event<string>()\nexport const onUserPasswordSuccess = d.event<void>()\n\nexport const onInteractiveAuthBusyChange = d.event<boolean>()\nexport const onInteractiveAuthStateUpdate = d\n    .event<OnInteractiveAuthStateUpdateResult>()\n\nexport const cancelInteractiveAuth = d.event<void>()\n","import {\n    decodeRecoveryKey,\n    deriveKey,\n    DeviceTrustLevel,\n    encodeBase64,\n    encodeUnpaddedBase64,\n    IAuthData,\n    ICryptoCallbacks,\n    ISecretStorageKeyInfo,\n    MatrixClient\n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\nimport {\n    InputToKeyParams,\n    onHasPassphrase,\n    setCheckKeyInfo,\n    onNeedRecoveryKeyOrPassphrase,\n    onRecoveryKeyOrPassphraseSuccess,\n    onRejectSecretStorageKey,\n} from \"@/verification\"\nimport { onResolveSecretStorageKey } from \"./verification\"\nimport { \n    cancelCreateNewMethod, \n    onNeedCreateRecoveryMethod,\n    onNewRecoveryMethodCreated\n} from \"@/create-verification-method\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\n\nlet secretStorageBeingAccessed = false\nlet secretStorageKeys: Record<string, Uint8Array> = {}\nlet secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\ntype CreatePromiseResult<T> = {\n    promise: Promise<T>\n    resolve: (params: T) => void\n    reject: (params: any) => void\n}\n\nfunction createPromise<T>(): CreatePromiseResult<T> {\n    let resolve = (params: T) => { return }\n    let reject = (params: any) => { return }\n    const promise = new Promise<T>((res, rej) => {\n        resolve = res\n        reject = rej\n    })\n    return {promise, resolve, reject}\n}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction setCachingAllowed(newVal: boolean): void {\n    secretStorageBeingAccessed = newVal\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    secretStorageKeys[keyId] = key\n    secretStorageKeyInfo[keyId] = keyInfo\n}\n\nexport async function promptForBackupPassphrase(): Promise<Uint8Array> {\n    const key = new Uint8Array()\n\n    console.log(\"promptForBackupPassphrase\")\n    // const success = await finished;\n    // if (!success) throw new Error(\"Key backup prompt cancelled\");\n\n    return key\n}\n\nexport async function accessSecretStorage(\n    func = async () => { return },\n    forceReset = false\n): Promise<any> {\n    const cl = client()\n    setCachingAllowed(true)\n    try {\n        if (!(await cl.hasSecretStorageKey()) || forceReset) {\n            const {promise, reject, resolve} = createPromise<void>()\n            onNeedCreateRecoveryMethod()\n            const createdSub = onNewRecoveryMethodCreated.watch(() => {\n                resolve()\n            })\n            const cancelSub = cancelCreateNewMethod.watch(() => {\n                reject(\"Cancel create new Method\")\n            })\n            promise.finally(() => {\n                cancelSub()\n                createdSub()\n            })\n            await promise\n        } else {\n            await cl.bootstrapCrossSigning({\n                authUploadDeviceSigningKeys: async (makeRequest) => {\n                    const requestCallback = (\n                        auth: IAuthData, \n                    ): Promise<IAuthData> => {\n                        return makeRequest(auth)\n                    }\n                    await createInteractiveAuthFx(requestCallback)\n                },\n            })\n            await cl.bootstrapSecretStorage({\n                getKeyBackupPassphrase: promptForBackupPassphrase,\n            })\n    \n            const keyId = Object.keys(secretStorageKeys)[0]\n            if (keyId) {\n                let dehydrationKeyInfo = {}\n                if (\n                    secretStorageKeyInfo[keyId]\n                    && secretStorageKeyInfo[keyId].passphrase\n                ) {\n                    dehydrationKeyInfo = {\n                        passphrase: secretStorageKeyInfo[keyId].passphrase\n                    }\n                }\n                console.log(\"Setting dehydration key\")\n                await cl\n                    .setDehydrationKey(\n                        secretStorageKeys[keyId],\n                        dehydrationKeyInfo,\n                        \"Backup device\"\n                    )\n            } else if (!keyId) {\n                console.warn(\"Not setting dehydration key: no SSSS key found\")\n            } else {\n                console.log(\"Not setting dehydration key: feature disabled\")\n            }\n    \n        }\n        // `return await` needed here to ensure `finally` block runs after the\n        // inner operation completes.\n        return await func()\n    } catch (e) {\n        console.error(e)\n        // Re-throw so that higher level logic can abort as needed\n        throw e\n    } finally {\n        // Clear secret storage key cache now that work is complete\n        setCachingAllowed(false)\n        if (!isCachingAllowed()) {\n            secretStorageKeys = {}\n            secretStorageKeyInfo = {}\n        }\n    }\n}\n\n\nexport function makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (params: InputToKeyParams) => Promise<Uint8Array> {\n    return async (params) => {\n        if (params.passphrase) {\n            return deriveKey(\n                params.passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else if (params.recoveryKey) {\n            return decodeRecoveryKey(params.recoveryKey)\n        }\n        throw new Error(\"Invalid recoveryKey or passphrase\")\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cl = client()\n    let keyId = await cl.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if (!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    } \n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        [keyId, keyInfo] = keyInfoEntries[0]\n    }\n\n    // Check the in-memory cache\n    if (secretStorageKeys[keyId] && isCachingAllowed()) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (await cl.checkSecretStorageKey(dehydrationCache.key, keyInfo)) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n    const {promise, resolve, reject} = createPromise<InputToKeyParams>()\n    const resolveWatcher = onResolveSecretStorageKey.watch(resolve)\n    const rejectWatcher = onRejectSecretStorageKey.watch(reject)\n\n    promise.finally(() => {\n        resolveWatcher.unsubscribe()\n        rejectWatcher.unsubscribe()\n    })\n    \n    onNeedRecoveryKeyOrPassphrase()\n    onHasPassphrase(Boolean(keyInfo.passphrase))\n    setCheckKeyInfo({ keyInfo })\n\n    const input = await promise\n\n    const key = await inputToKey(input)\n\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    onRecoveryKeyOrPassphraseSuccess()\n    return [keyId, key]\n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\" })\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if (key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        let data\n        try {\n            data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n        } catch (e) {\n            console.log(\"idbLoad for pickleKey failed\", e)\n        }\n        if (!data) {\n            return null\n        }\n        if (!data.encrypted || !data.iv || !data.cryptoKey) {\n            console.log(\"Badly formatted pickle key\")\n            return null\n        }\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        try {\n            const key = await crypto.subtle.decrypt(\n                { name: \"AES-GCM\", iv: data.iv, additionalData },\n                data.cryptoKey,\n                data.encrypted,\n            )\n            return encodeUnpaddedBase64(key)\n        } catch (e) {\n            console.log(\"Error decrypting pickle key\")\n            return null\n        }\n    }\n\nexport const CreatePickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        const crypto = window.crypto\n        const randomArray = new Uint8Array(32)\n        crypto.getRandomValues(randomArray)\n        const cryptoKey = await crypto.subtle.generateKey(\n            { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n        )\n        const iv = new Uint8Array(32)\n        crypto.getRandomValues(iv)\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        const encrypted = await crypto.subtle.encrypt(\n            { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n        )\n\n        try {\n            await IdbSave(\n                \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n            )\n        } catch (e) {\n            return null\n        }\n        return encodeUnpaddedBase64(randomArray)\n    }\n\nexport async function tryToUnlockSecretStorageWithDehydrationKey(\n    client: MatrixClient,\n): Promise<void> {\n    const key = dehydrationCache.key\n    let restoringBackup = false\n    if (key && (await client.isSecretStorageReady())) {\n        setCachingAllowed(true)\n        try {\n            await client.checkOwnCrossSigningTrust()\n    \n            // we also need to set a new dehydrated device to replace the\n            // device we rehydrated\n            let dehydrationKeyInfo = {}\n            if (\n                dehydrationCache.keyInfo \n                && dehydrationCache.keyInfo.passphrase\n            ) {\n                dehydrationKeyInfo = { \n                    passphrase: dehydrationCache.keyInfo.passphrase }\n            }\n            await client\n                .setDehydrationKey(key, dehydrationKeyInfo, \"Backup device\")\n    \n            // and restore from backup\n            const backupInfo = await client.getKeyBackupVersion()\n            if (backupInfo) {\n                restoringBackup = true\n                // don't await, because this can take a long time\n                client.restoreKeyBackupWithSecretStorage(backupInfo)\n                    .finally(() => {\n                        secretStorageBeingAccessed = false\n                        if (!isCachingAllowed()) {\n                            secretStorageKeys = {}\n                            secretStorageKeyInfo = {}\n                        }\n                    })\n            }\n        } finally {\n            dehydrationCache = {}\n            // the secret storage cache is needed for restoring from backup, so\n            // don't clear it yet if we're restoring from backup\n            if (!restoringBackup) {\n                setCachingAllowed(false)\n                if (!isCachingAllowed()) {\n                    secretStorageKeys = {}\n                    secretStorageKeyInfo = {}\n                }\n            }\n        }\n    }\n}\n    \n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"resetCrossSigning\")\n","import { d } from \"./domain\"\nimport { ConfirmResetCrossSigningFxResult, CrossSigningStatus } from \"./types\"\n\nexport const confirmResetCrossSigningFx = d\n    .effect<void, ConfirmResetCrossSigningFxResult, Error>()\n\nexport const $crossSigningId = d.store<string|null>(null)\n\nexport const crossSigningChangeFx = d.effect<void, void, Error>()\n\nexport const $crossSigningStatus = d.store<CrossSigningStatus|null>(null)\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"key-backup\")\n","import { MatrixError } from \"matrix-js-sdk\"\nimport { IKeyBackupCheck } from \"matrix-js-sdk/lib/crypto/backup\"\nimport { IKeyBackupRestoreResult } from \"matrix-js-sdk/lib/crypto/keybackup\"\n\nimport { d } from \"./domain\"\nimport { DetailedKeyBackupInfo, OnBackupKeyLoadProgress } from \"./types\"\n\nexport const newKeyBackupFx = d.effect<void, void, Error>()\n\nexport const $keyBackupInfo = d.store<IKeyBackupCheck | null>(null)\nexport const getKeyBackupInfoFx = d\n    .effect<void, IKeyBackupCheck, Error>()\n\nexport const $detailedKeyBackupInfo = d\n    .store<DetailedKeyBackupInfo | null>(null)\n\nexport const onBackupKeyLoadProgress = d.event<OnBackupKeyLoadProgress>()\n\nexport const $isKeyBackupEnabled = d.store<boolean | null>(null)\nexport const checkBackupEnabledKeyFx = d.effect<void, boolean | null, Error>() \n\nexport const deleteKeyBackup = d.event<void>()\n\nexport const restoreKeyBackupFx = d\n    .effect<void, IKeyBackupRestoreResult | void, MatrixError>()\n\nexport const resetCryptoStorageFx = d.effect<void, void, Error>()\n\nexport const $sessionsRemaining = d.store<number | null>(null)\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\nexport const InvalidBackupInfo = createCustomError(\"InvalidBackupInfo\")\nexport const VerificationError = createCustomError(\"VerificationError\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n\nexport const E2EE_WK_KEY = \"io.element.e2ee\"\nexport const E2EE_WK_KEY_DEPRECATED = \"im.vector.riot.e2ee\"","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n\n    const isCryptoEnabled = cl.isRoomEncrypted(room.roomId)\n\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        isCryptoEnabled,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                \"m.room.member\",\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n    UserTrustLevel,\n} from \"matrix-js-sdk\"\nimport { DeviceInfo } from \"matrix-js-sdk/lib/crypto/deviceinfo\"\n\nimport { IdbDelete } from \"@/idbHelper\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport { UserNotFound } from \"@/errors\"\n\nimport {\n    AuthData,\n    StateEventsContent,\n    MyVerificationRequest,\n} from \"./types\"\nimport {\n    onUsersProfileUpdate,\n    onUpdateDeviceList,\n    onVerificationRequest,\n    crossSigningStatusUpdated,\n    crossSigningKeyChanged, \n    roomUserUpdated,\n    roomMemberUpdated,\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n    $currentDeviceId,\n    onUpdateKeyBackupStatus,\n    onRoomMessage,\n    directRoomCreated,\n    roomCreated,\n    messagesUpdated,\n    toggleTypingUser,\n    onSessionRemaining,\n    initCryptoFx\n} from \"./public\"\n\n$currentDeviceId\n    .on(createClientFx.done, \n        (_, {params}) => params.createClientParams.options.deviceId)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    onRoomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Session.logged_out\", (args) => {\n        console.log(\"Session.logged_out\", args)\n    }],\n    // @TODO Реализовать. Этот эвент приходит когда логаут происходит из другой сессии.\n    // cli.on(HttpApiEvent.SessionLoggedOut, function (errObj) {\n    //     if (Lifecycle.isLoggingOut()) return;\n\n    //     // A modal might have been open when we were logged out by the server\n    //     Modal.closeCurrentModal('Session.logged_out');\n\n    //     if (errObj.httpStatus === 401 && errObj.data && errObj.data['soft_logout']) {\n    //         logger.warn(\"Soft logout issued by server - avoiding data deletion\");\n    //         Lifecycle.softLogout();\n    //         return;\n    //     }\n\n    //     Modal.createDialog(ErrorDialog, {\n    //         title: _t('Signed Out'),\n    //         description: _t('For security, this session has been signed out. Please sign in again.'),\n    //     });\n\n    //     dis.dispatch({\n    //         action: 'logout',\n    //     });\n    // });\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => messagesUpdated()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            messagesUpdated()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => roomMemberUpdated(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => roomMemberUpdated(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => roomMemberUpdated(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => roomMemberUpdated(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => roomMemberUpdated(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            roomMemberUpdated(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => roomUserUpdated(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => roomUserUpdated(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => roomUserUpdated(user)\n    ],\n    [\n        \"crossSigning.keysChanged\", () => {\n            crossSigningKeyChanged()\n            crossSigningStatusUpdated()\n        }\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            const cl = client()\n            const deviceId = cl.getDeviceId()\n            const userId = cl.getUserId()\n            const isVerified = cl\n                .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n            if (isVerified || request.isSelfVerification) {\n                request.id = Date.now()\n                onVerificationRequest(request)\n            }\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\", () => {\n            onUpdateKeyBackupStatus()\n        }\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n            onUsersProfileUpdate(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", (userIds: string[]) => {\n        onUpdateDeviceList(userIds)\n        onUsersProfileUpdate(userIds)\n    }],\n    [\"deviceVerificationChanged\", (\n        userId: string,\n        deviceId: string,\n        deviceInfo: DeviceInfo\n    ) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }],\n    [\"userTrustStatusChanged\", (userId: string, newStatus: UserTrustLevel) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n        crossSigningStatusUpdated()\n    }],\n    [\"crypto.keyBackupSessionsRemaining\", onSessionRemaining],\n    [\"accountData\", () => {\n        crossSigningStatusUpdated()\n    }]\n])\n\nloginByPasswordFx.use(async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        {\n            method: \"POST\",\n            body: JSON.stringify({ type: LOGIN_BY_TOKEN, token: params.token })\n        }\n    )\n    const {\n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return {\n        userId: user_id,\n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.downloadKeys([cl.getUserId() ?? createClientParams.options.userId])\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await IdbDelete(\"pickleKey\", [cl.getUserId(), cl.getDeviceId()])\n    await IdbDelete(\"account\", \"mx_access_token\")\n    cl.stopClient()\n    await cl.logout()\n    destroyClient()\n})\n\ngetProfileInfoFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) {\n        throw new Error(\"Client doesn't support Crypto\")\n    }\n\n    await cl.initCrypto()\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { d } from \"./domain\"\nimport { SessionInfo } from \"./types\"\n\nexport const logoutSessionsByIdFx = d\n    .effect<SessionInfo[\"device_id\"][], void, Error>()\n","import { forward, guard } from \"effector\"\nimport { IAuthData } from \"matrix-js-sdk\"\n\nimport { client } from \"@/matrix-client\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\nimport { onUpdateDeviceList } from \"@/app\"\n\nimport { logoutSessionsByIdFx } from \"./private\"\nimport { \n    updateDisplayNameFx, \n    updateAvatarUrlFx, \n    getMySessionsFx,\n    $mySessionsInfo,\n    clearMySessionsInfo,\n    logoutSessionsById,\n    renameDeviceFx,\n} from \"./public\"\n\n$mySessionsInfo\n    .on(getMySessionsFx.doneData, (_, sessionsInfo) => sessionsInfo)\n    .reset([getMySessionsFx.fail, clearMySessionsInfo])\n\nforward({\n    from: logoutSessionsById,\n    to: logoutSessionsByIdFx\n})\n\nguard({\n    clock: onUpdateDeviceList,\n    filter: $mySessionsInfo.map((sessions) => Boolean(sessions)),\n    target: getMySessionsFx,\n})\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\ngetMySessionsFx.use(async () => {\n    const cl = client()\n    const {devices} = await cl.getDevices()\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\n    const myDeviceId = cl.getDeviceId()\n    return devices.map((device) => {\n        const deviceInfo = cl.getStoredDevice(cl.getUserId(), device.device_id)\n        let isVerified = false\n        // @TODO В devices может прийти такой девайс, по которому мы не можем получить инфу\n        // и getStoredDevice отдает null\n        if (deviceInfo) {\n            isVerified = crossSigningInfo.checkDeviceTrust(\n                crossSigningInfo,\n                deviceInfo,\n                false,\n                true,\n            ).isCrossSigningVerified()\n        }\n\n        return {\n            ...device,\n            isVerified,\n            isCurrentSession: device.device_id === myDeviceId \n        }\n    })\n})\n\nlogoutSessionsByIdFx.use(async (sessionsId) => {\n    const cl = client()\n    const callback = async (auth: IAuthData) => {\n        await cl.deleteMultipleDevices(sessionsId, auth)\n        return auth\n    }\n    await createInteractiveAuthFx(callback)\n    await callback\n})\n\nrenameDeviceFx.use(async ({deviceId, newDisplayName}) => {\n    await client().setDeviceDetails(deviceId, {\n        display_name: newDisplayName,\n    })\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    MEGOLM_ALGORITHM,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\nimport { \n    roomMemberUpdated, \n    roomUserUpdated, \n    toggleTypingUser\n} from \"@/app\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx,\n    getUserDevicesInfoFx,\n    turnOnEcnryptionFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: roomUserUpdated,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: roomMemberUpdated,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoom,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    \n    }),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoomMessage,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: toLiveTimeline,\n        fn: ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: MEGOLM_ALGORITHM }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members, true)\n        await cl.downloadKeysForUsers(members, {})\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n\ngetUserDevicesInfoFx.use(async (userId) => {\n    const cl = client()\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n\nturnOnEcnryptionFx.use(async ({\n    encryptionEvent,\n    roomId\n}) => {\n    const cl = client()\n    await cl.sendStateEvent(\n        roomId, EventType.RoomEncryption,\n        encryptionEvent,\n    )\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\n\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport { messagesUpdated } from \"@/app\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: messagesUpdated,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","// Taken from here\n// https://github.com/matrix-org/matrix-react-sdk/blob/d835721ae1dd005b7c0ba5b4b2448f5396128e1a/src/utils/MegolmExportEncryption.ts\n\nconst subtleCrypto = window?.crypto.subtle\n\n/**\n * Derive the AES and HMAC-SHA-256 keys for the file\n *\n * @param {Unit8Array} salt  salt for pbkdf\n * @param {Number} iterations number of pbkdf iterations\n * @param {String} password  password\n * @return {Promise<[CryptoKey, CryptoKey]>} promise for [aes key, hmac key]\n */\nasync function deriveKeys(\n    salt: Uint8Array, \n    iterations: number, \n    password: string\n): Promise<[CryptoKey, CryptoKey]> {\n    let key\n    try {\n        key = await subtleCrypto.importKey(\n            \"raw\",\n            new TextEncoder().encode(password),\n            { name: \"PBKDF2\" },\n            false,\n            [\"deriveBits\"],\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.importKey failed: ${  e}`)\n    }\n\n    let keybits\n    try {\n        keybits = await subtleCrypto.deriveBits(\n            {\n                name: \"PBKDF2\",\n                salt: salt,\n                iterations: iterations,\n                hash: \"SHA-512\",\n            },\n            key,\n            512,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.deriveBits failed: ${  e}`)\n    }\n\n    const aesKey = keybits.slice(0, 32)\n    const hmacKey = keybits.slice(32)\n\n    const aesProm = subtleCrypto.importKey(\n        \"raw\",\n        aesKey,\n        { name: \"AES-CTR\" },\n        false,\n        [\"encrypt\", \"decrypt\"],\n    ).catch((e) => {\n        throw new Error(`subtleCrypto.importKey failed for AES key: ${  e}`)\n    })\n\n    const hmacProm = subtleCrypto.importKey(\n        \"raw\",\n        hmacKey,\n        {\n            name: \"HMAC\",\n            hash: { name: \"SHA-256\" },\n        },\n        false,\n        [\"sign\", \"verify\"],\n    ).catch((e) => {\n        throw new Error(`subtleCrypto.importKey failed for HMAC key: ${  e}`)\n    })\n\n    return Promise.all([aesProm, hmacProm])\n}\n\nconst HEADER_LINE = \"-----BEGIN MEGOLM SESSION DATA-----\"\nconst TRAILER_LINE = \"-----END MEGOLM SESSION DATA-----\"\n\n/**\n * Encode a typed array of uint8 as base64.\n * @param {Uint8Array} uint8Array The data to encode.\n * @return {string} The base64.\n */\nfunction encodeBase64(uint8Array: Uint8Array): string {\n    // Misinterpt the Uint8Array as Latin-1.\n    // window.btoa expects a unicode string with codepoints in the range 0-255.\n    // @TODO fix me\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const latin1String = String.fromCharCode.apply(null, uint8Array)\n    // Use the builtin base64 encoder.\n    return window.btoa(latin1String)\n}\n\n/**\n * Decode a base64 string to a typed array of uint8.\n * @param {string} base64 The base64 to decode.\n * @return {Uint8Array} The decoded data.\n */\nfunction decodeBase64(base64: string): Uint8Array {\n    // window.atob returns a unicode string with codepoints in the range 0-255.\n    const latin1String = window.atob(base64)\n    // Encode the string as a Uint8Array\n    const uint8Array = new Uint8Array(latin1String.length)\n    for (let i = 0; i < latin1String.length; i++) {\n        uint8Array[i] = latin1String.charCodeAt(i)\n    }\n    return uint8Array\n}\n\n/**\n * ascii-armour a  megolm key file\n *\n * base64s the content, and adds header and trailer lines\n *\n * @param {Uint8Array} data  raw data\n * @return {ArrayBuffer} formatted file\n */\nfunction packMegolmKeyFile(data: Uint8Array): ArrayBuffer {\n    // we split into lines before base64ing, because encodeBase64 doesn't deal\n    // terribly well with large arrays.\n    const LINE_LENGTH = (72 * 4 / 3)\n    const nLines = Math.ceil(data.length / LINE_LENGTH)\n    const lines = new Array(nLines + 3)\n    lines[0] = HEADER_LINE\n    let o = 0\n    let i\n    for (i = 1; i <= nLines; i++) {\n        lines[i] = encodeBase64(data.subarray(o, o+LINE_LENGTH))\n        o += LINE_LENGTH\n    }\n    lines[i++] = TRAILER_LINE\n    lines[i] = \"\"\n    return (new TextEncoder().encode(lines.join(\"\\n\"))).buffer\n}\n\n/**\n * Encrypt a megolm key file\n *\n * @param {String} data\n * @param {String} password\n * @param {Object=} options\n * @param {Number=} options.kdf_rounds Number of iterations to perform of the\n *    key-derivation function.\n * @return {Promise<ArrayBuffer>} promise for encrypted output\n */\nexport async function encryptMegolmKeyFile(\n    data: string,\n    password: string,\n    options?: { kdf_rounds?: number }, // eslint-disable-line camelcase\n): Promise<ArrayBuffer> {\n    options = options || {}\n    const kdfRounds = options.kdf_rounds || 500000\n\n    const salt = new Uint8Array(16)\n    window.crypto.getRandomValues(salt)\n\n    const iv = new Uint8Array(16)\n    window.crypto.getRandomValues(iv)\n\n    // clear bit 63 of the IV to stop us hitting the 64-bit counter boundary\n    // (which would mean we wouldn't be able to decrypt on Android). The loss\n    // of a single bit of iv is a price we have to pay.\n    iv[8] &= 0x7f\n\n    const [aesKey, hmacKey] = await deriveKeys(salt, kdfRounds, password)\n    const encodedData = new TextEncoder().encode(data)\n\n    let ciphertext\n    try {\n        ciphertext = await subtleCrypto.encrypt(\n            {\n                name: \"AES-CTR\",\n                counter: iv,\n                length: 64,\n            },\n            aesKey,\n            encodedData,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.encrypt failed: ${  e}`)\n    }\n\n    const cipherArray = new Uint8Array(ciphertext)\n    const bodyLength = (1+salt.length+iv.length+4+cipherArray.length+32)\n    const resultBuffer = new Uint8Array(bodyLength)\n    let idx = 0\n    resultBuffer[idx++] = 1 // version\n    resultBuffer.set(salt, idx); idx += salt.length\n    resultBuffer.set(iv, idx); idx += iv.length\n    resultBuffer[idx++] = kdfRounds >> 24\n    resultBuffer[idx++] = (kdfRounds >> 16) & 0xff\n    resultBuffer[idx++] = (kdfRounds >> 8) & 0xff\n    resultBuffer[idx++] = kdfRounds & 0xff\n    resultBuffer.set(cipherArray, idx); idx += cipherArray.length\n\n    const toSign = resultBuffer.subarray(0, idx)\n\n    let hmac\n    try {\n        hmac = await subtleCrypto.sign(\n            { name: \"HMAC\" },\n            hmacKey,\n            toSign,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.sign failed: ${  e}`)\n    }\n\n    const hmacArray = new Uint8Array(hmac)\n    resultBuffer.set(hmacArray, idx)\n    return packMegolmKeyFile(resultBuffer)\n}\n\n/**\n * Unbase64 an ascii-armoured megolm key file\n *\n * Strips the header and trailer lines, and unbase64s the content\n *\n * @param {ArrayBuffer} data  input file\n * @return {Uint8Array} unbase64ed content\n */\nfunction unpackMegolmKeyFile(data: ArrayBuffer): Uint8Array {\n    // parse the file as a great big String. This should be safe, because there\n    // should be no non-ASCII characters, and it means that we can do string\n    // comparisons to find the header and footer, and feed it into window.atob.\n    const fileStr = new TextDecoder().decode(new Uint8Array(data))\n\n    // look for the start line\n    let lineStart = 0\n    // eslint-disable-next-line no-constant-condition\n    while (1) {\n        const lineEnd = fileStr.indexOf(\"\\n\", lineStart)\n        if (lineEnd < 0) {\n            throw new Error(\"Header line not found\")\n        }\n        const line = fileStr.slice(lineStart, lineEnd).trim()\n\n        // start the next line after the newline\n        lineStart = lineEnd+1\n\n        if (line === HEADER_LINE) {\n            break\n        }\n    }\n\n    const dataStart = lineStart\n\n    // look for the end line\n    // eslint-disable-next-line no-constant-condition\n    while (1) {\n        const lineEnd = fileStr.indexOf(\"\\n\", lineStart)\n        const line = fileStr\n            .slice(lineStart, lineEnd < 0 ? undefined : lineEnd).trim()\n        if (line === TRAILER_LINE) {\n            break\n        }\n\n        if (lineEnd < 0) {\n            throw new Error(\"Trailer line not found\")\n        }\n\n        // start the next line after the newline\n        lineStart = lineEnd+1\n    }\n\n    const dataEnd = lineStart\n    return decodeBase64(fileStr.slice(dataStart, dataEnd))\n}\n\n\n/**\n * Decrypt a megolm key file\n *\n * @param {ArrayBuffer} data file to decrypt\n * @param {String} password\n * @return {Promise<String>} promise for decrypted output\n *\n *\n */\nexport async function decryptMegolmKeyFile(\n    data: ArrayBuffer, \n    password: string\n): Promise<string> {\n    const body = unpackMegolmKeyFile(data)\n\n    // check we have a version byte\n    if (body.length < 1) {\n        throw new Error(\"Invalid file: too short\")\n    }\n\n    const version = body[0]\n    if (version !== 1) {\n        throw new Error(\"Unsupported version\")\n    }\n\n    const ciphertextLength = body.length-(1+16+16+4+32)\n    if (ciphertextLength < 0) {\n        throw new Error(\"Invalid file: too short\")\n    }\n\n    const salt = body.subarray(1, 1+16)\n    const iv = body.subarray(17, 17+16)\n    const iterations = \n        body[33] << 24 | body[34] << 16 | body[35] << 8 | body[36]\n    const ciphertext = body.subarray(37, 37+ciphertextLength)\n    const hmac = body.subarray(-32)\n\n    const [aesKey, hmacKey] = await deriveKeys(salt, iterations, password)\n    const toVerify = body.subarray(0, -32)\n\n    let isValid\n    try {\n        isValid = await subtleCrypto.verify(\n            { name: \"HMAC\" },\n            hmacKey,\n            hmac,\n            toVerify,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.verify failed: ${  e}`)\n    }\n    if (!isValid) {\n        throw new Error(\n            \"hmac mismatch Authentication check failed: incorrect password?\"\n        )\n    }\n\n    let plaintext\n    try {\n        plaintext = await subtleCrypto.decrypt(\n            {\n                name: \"AES-CTR\",\n                counter: iv,\n                length: 64,\n            },\n            aesKey,\n            ciphertext,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.decrypt failed: ${  e}`)\n    }\n\n    return new TextDecoder().decode(new Uint8Array(plaintext))\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const getIdentityKeyFx = cryptoDomain\n    .effect<void, string | null, Error>()\n\nexport const getDeviceEd25519KeyFx = cryptoDomain.effect<void, string, Error>()\n","import { cryptoDomain } from \"./domain\"\nimport { \n    ExportE2ERoomsKeysFxParams, \n    importE2ERoomsKeysFxParams\n} from \"./types\"\n\nexport const $isCryptoEnabled = cryptoDomain.store<boolean | null>(null)\n\nexport const $identityKey = cryptoDomain.store<string|null>(null)\n\nexport const exportE2ERoomsKeysFx = cryptoDomain\n    .effect<ExportE2ERoomsKeysFxParams, ArrayBuffer, Error>()\n\nexport const importE2ERoomsKeysFx = cryptoDomain\n    .effect<importE2ERoomsKeysFxParams, void, Error>()\n\nexport const $deviceEd25519Key = cryptoDomain.store<string|null>(null)\n","import { client } from \"@/matrix-client\"\nimport { forward } from \"effector\"\n\nimport { \n    decryptMegolmKeyFile, \n    encryptMegolmKeyFile\n} from \"@/MegolmExportEncryption\"\nimport { destroyClientFx, initCryptoFx } from \"@/app\"\n\nimport { \n    getIdentityKeyFx,\n    getDeviceEd25519KeyFx,\n} from \"./private\"\nimport { \n    $identityKey,\n    $isCryptoEnabled,\n    exportE2ERoomsKeysFx, \n    importE2ERoomsKeysFx,\n    $deviceEd25519Key,\n} from \"./public\"\n\n$isCryptoEnabled\n    .on(initCryptoFx.doneData, () => true)\n    .reset([destroyClientFx.done, initCryptoFx.failData])\n\n$identityKey\n    .on(getIdentityKeyFx.doneData, (_, key) => key)\n    .reset(destroyClientFx.done)\n\n$deviceEd25519Key\n    .on(getDeviceEd25519KeyFx.doneData, (_, key) => key)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: initCryptoFx.doneData,\n    to: [getDeviceEd25519KeyFx, getIdentityKeyFx]\n})\n\ngetIdentityKeyFx.use(() => {\n    const key = client().getDeviceEd25519Key()\n    if (!key) throw new Error(\"crypto is disabled\")\n    return key\n})\n\nexportE2ERoomsKeysFx.use(async ({passphrase}) => {\n    const cl = client()\n    const keys = await cl.exportRoomKeys()\n\n    return encryptMegolmKeyFile(\n        JSON.stringify(keys), passphrase,\n    )\n})\n\nimportE2ERoomsKeysFx.use(async ({arrayBuffer, passphrase}) => {\n    const keys = await decryptMegolmKeyFile(\n        arrayBuffer, passphrase,\n    )\n    const cl = client()\n    cl.importRoomKeys(JSON.parse(keys))\n})\n\ngetDeviceEd25519KeyFx.use(() => {\n    const cl = client()\n    return cl.getDeviceEd25519Key()\n})\n","import { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams\n} from \"@/app\"\n\nimport { verificationDomain } from \"./domain\"\nimport { \n    CheckKeyInfo,\n    ValidatePassphraseFxParams,\n    ValidateRecoveryKeyFxParams,\n} from \"./types\"\n\n// Emodji SAS Verification\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n// Recovery key\n\nexport const $checkKeyInfo = verificationDomain\n    .store<CheckKeyInfo | null>(null)\n\nexport const validateRecoveryKeyFx = verificationDomain\n    .effect<ValidateRecoveryKeyFxParams, boolean, Error>()\n\n// others\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const validatePassphraseFx = verificationDomain\n    .effect<ValidatePassphraseFxParams, boolean, Error>()\n\nexport const checkCanVerifyFx = verificationDomain\n    .effect<void, boolean, Error>()\n","import { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams,\n    onUsersProfileUpdate, \n} from \"@/app\"\n\nimport {\n    onCancelVerificationEvent, \n    startSASFx, \n    updateVerificationPhase,\n    cancelVerificationEventFx, \n} from \"./private\"\nimport {\n    setCurrentVerificationEvent \n} from \"./public\"\nimport { \n    Phase\n} from \"./types\"\n\n\nexport const onVerificationRequestFxReducer = async (\n    {\n        request, \n        currentRequest\n    }: OnVerificationRequestFxParams): Promise<MyVerificationRequest> => {\n    const onChange = () => {\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n            return\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            onUsersProfileUpdate([request.otherUserId])\n            return\n        }\n\n        if (request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n            return\n        }\n\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n            return\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const excludePhaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested\n    ]\n    if (!currentRequest && !excludePhaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n        && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n\n    return request\n}\n","import { forward, sample, guard, attach } from \"effector\"\nimport { client } from \"@/matrix-client\"\n\nimport { createDirectRoomFx } from \"@/room\"\nimport { MappedUser } from \"@/types\"\nimport { \n    createClientFx, \n    destroyClientFx, \n    initCryptoFx, \n    MyVerificationRequest, \n    onUpdateDeviceList, \n    onVerificationRequest\n} from \"@/app\"\nimport { InvalidBackupInfo, VerificationError } from \"@/errors\"\nimport { crossSigningChangeFx } from \"@/cross-signing\"\n\nimport {\n    updateVerificationPhase,\n    onCancelVerificationEvent,\n    confirmSASVerificationFx,\n    onVerificationRequestFx,\n    startSASFx,\n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n    cancelVerificationEventFx,\n    validateRecoveryKeyFx,\n    $checkKeyInfo,\n    validatePassphraseFx,\n    checkCanVerifyFx,\n} from \"./private\"\nimport {\n    onHasPassphrase,\n    $currentVerificationEvent,\n    $deviceIsVerified,\n    $verificationEvents,\n    checkThisDeviceVerificationFx,\n    confirmSASVerification,\n    startThisDeviceVerificationFx,\n    setCurrentVerificationEvent,\n    startSASVerification,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests,\n    startRecoveryKeyOrPassphraseVerification,\n    $hasPassphrase,\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser,\n    setCheckKeyInfo,\n    validateRecoveryKey,\n    onValidRecoveryKey,\n    onInvalidRecoveryKey,\n    onRejectSecretStorageKey,\n    validatePassphrase,\n    onInvalidPassphrase,\n    onValidPassphrase,\n    $canVerify,\n    keyVerificationFx,\n} from \"./public\"\nimport { \n    ValidatePassphraseFxParams, \n    ValidateRecoveryKeyFxParams \n} from \"./types\"\nimport { onVerificationRequestFxReducer } from \"./reducers\"\nimport { accessSecretStorage, makeInputToKey } from \"../cryptoCallbacks\"\n\n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n    .reset(destroyClientFx.done)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n    .reset(destroyClientFx.done)\n\n// When copying an object, proto properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n    .reset(destroyClientFx.done)\n\n$hasPassphrase\n    .on(onHasPassphrase, (_, val) => val)\n    .reset(destroyClientFx.done)\n\n$checkKeyInfo\n    .on(setCheckKeyInfo, (_, val) => val)\n    .reset([\n        destroyClientFx.done, \n        onRejectSecretStorageKey, \n        keyVerificationFx.finally\n    ])\n\n$canVerify\n    .on(checkCanVerifyFx.doneData, (_, canVerify) => canVerify)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: checkThisDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkThisDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx\n})\n\nforward({\n    from: [\n        startVerificationUserFx,\n        startVerificationDeviceFx,\n        confirmSASVerification,\n        startSASFx,\n        startThisDeviceVerificationFx\n    ],\n    to: setWaitingAnotherUser\n})\n\nforward({\n    from: [\n        onCancelVerificationEvent,\n        $currentVerificationEvent.updates\n    ],\n    to: resetWaitingAnotherUser\n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData,\n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nforward({\n    from: startRecoveryKeyOrPassphraseVerification,\n    to: keyVerificationFx\n})\n\nforward({\n    from: validateRecoveryKeyFx.doneData,\n    to: onValidRecoveryKey\n})\n\nforward({\n    from: validateRecoveryKeyFx.failData,\n    to: onInvalidRecoveryKey,\n})\n\nforward({\n    from: validatePassphraseFx.doneData,\n    to: onValidPassphrase\n})\n\nforward({\n    from: validatePassphraseFx.failData,\n    to: onInvalidPassphrase,\n})\n\nforward({\n    from: [createClientFx.doneData, $deviceIsVerified.updates],\n    to: checkCanVerifyFx\n})\n\nforward({\n    from: [initCryptoFx.done, crossSigningChangeFx.done],\n    to: checkThisDeviceVerificationFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(onVerificationRequestFxReducer)\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    await (currentRequest.verifier as any).sasEvent.confirm()\n})\n\ncheckThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = Date.now()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n\ncheckCanVerifyFx.use(async () => {\n    const cl = client()\n    const cryptoEnabled = cl.isCryptoEnabled()\n    const homeserverSupportsCrossSigning = await cl\n        .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n\n    const canVerify = cryptoEnabled\n        && homeserverSupportsCrossSigning\n        && isVerified\n    return canVerify\n})\n\nkeyVerificationFx.use(async () => {\n    const cl = client()\n    await accessSecretStorage(async () => {\n        const backupInfo = await cl.getKeyBackupVersion()\n        await cl.checkOwnCrossSigningTrust()\n\n        if (!backupInfo) throw new InvalidBackupInfo(\"backupInfo is null\")\n        await cl.restoreKeyBackupWithSecretStorage(backupInfo)\n    })\n\n    if (!cl.getCrossSigningId()) {\n        throw new VerificationError(\"Secret storage access canceled\")\n    }\n})\n\nguard({\n    source: sample({\n        clock: validateRecoveryKey,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, input) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            input\n        }),\n    }),\n    filter: (params): params is ValidateRecoveryKeyFxParams => Boolean(\n        params.keyInfo\n    ),\n    target: validateRecoveryKeyFx,\n})\n\nguard({\n    source: sample({\n        clock: validatePassphrase,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, passphrase) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            passphrase,\n        }),\n    }),\n    filter: (params): params is ValidatePassphraseFxParams => Boolean(\n        params.keyInfo\n    ),\n    target: validatePassphraseFx,\n})\n\nvalidateRecoveryKeyFx.use(async ({ input, keyInfo }) => {\n    const cl = client()\n    const decodedKey = cl.keyBackupKeyFromRecoveryKey(input)\n    const isValid = await cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n    if (!isValid) throw new Error(\"Invalid recovery Key\")\n    return isValid\n})\n\nvalidatePassphraseFx.use( async ({keyInfo, passphrase}) => {\n    const cl = client()\n    const makeInput = makeInputToKey(keyInfo)\n    const decodedKey = await makeInput({passphrase})\n    const isValid = await cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n    if (!isValid) throw new Error(\"Invalid passphrase\")\n    return isValid\n})\n\n","import { d } from \"./domain\"\n\nimport { CrossSigningStatus } from \"./types\"\n\nexport const getCrossSigningIdFx = d.effect<void, string, Error>()\n\nexport const getCrossSigningStatusFx = d\n    .effect<void, CrossSigningStatus, Error>()\n","import { IAuthData } from \"matrix-js-sdk\"\nimport { forward } from \"effector\"\n\nimport { client } from \"@/matrix-client\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\nimport { \n    destroyClientFx,\n    crossSigningKeyChanged,\n    crossSigningStatusUpdated,\n    initCryptoFx,\n} from \"@/app\"\n\nimport { \n    $crossSigningId, \n    $crossSigningStatus, \n    confirmResetCrossSigningFx, \n    crossSigningChangeFx, \n} from \"./public\"\nimport { ConfirmResetCrossSigningFxResult } from \"./types\"\nimport { getCrossSigningIdFx, getCrossSigningStatusFx } from \"./private\"\n\n$crossSigningId\n    .on(getCrossSigningIdFx.doneData, (_, id) => id)\n    .reset(destroyClientFx.done)\n\n$crossSigningStatus\n    .on(getCrossSigningStatusFx.doneData, (_, status) => status)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: crossSigningKeyChanged,\n    to: crossSigningChangeFx\n})\nforward({\n    from: [\n        crossSigningStatusUpdated, \n        initCryptoFx.done, \n    ],\n    to: getCrossSigningStatusFx,\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n})\n\nconfirmResetCrossSigningFx.use(async () => {\n    const cl = client()\n    const promise = new Promise<\n        ConfirmResetCrossSigningFxResult\n    >((resolve, rej) => {\n        cl.bootstrapCrossSigning({\n            authUploadDeviceSigningKeys: async (makeRequest) => {\n                const requestCallback = (\n                    auth: IAuthData, \n                ): Promise<IAuthData> => {\n                    return makeRequest(auth)\n                }\n                await createInteractiveAuthFx(requestCallback)\n            },\n\n            setupNewCrossSigning: true,\n        }).then(() => {\n            resolve({\n                result: true\n            })\n        })\n    })\n    return promise\n})\n\ngetCrossSigningIdFx.use(() => {\n    const cl = client()\n    return cl.getCrossSigningId()\n})\n\ngetCrossSigningStatusFx.use(async () => {\n    const cl = client()\n    const pkCache = cl.getCrossSigningCacheCallbacks()\n    const crossSigning = cl.crypto.crossSigningInfo\n    const secretStorage = cl.crypto.secretStorage\n    const crossSigningPublicKeysOnDevice = Boolean(crossSigning.getId())\n    const crossSigningPrivateKeysInStorage = Boolean(\n        await crossSigning.isStoredInSecretStorage(secretStorage)\n    )\n    const masterPrivateKeyCached = !!(pkCache && (\n        await pkCache.getCrossSigningKeyCache?.(\"master\")\n    ))\n    const selfSigningPrivateKeyCached = !!(pkCache && (\n        await pkCache.getCrossSigningKeyCache?.(\"self_signing\")\n    ))\n    const userSigningPrivateKeyCached = !!(pkCache && (\n        await pkCache.getCrossSigningKeyCache?.(\"user_signing\")\n    ))\n    const homeserverSupportsCrossSigning =\n        await cl\n            .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n    const crossSigningReady = await cl.isCrossSigningReady()\n\n    return {\n        crossSigningPublicKeysOnDevice,\n        crossSigningPrivateKeysInStorage,\n        masterPrivateKeyCached,\n        selfSigningPrivateKeyCached,\n        userSigningPrivateKeyCached,\n        homeserverSupportsCrossSigning,\n        crossSigningReady,\n    }\n})\n","import { forward } from \"effector\"\nimport { IAuthData } from \"matrix-js-sdk\"\n\nimport { client } from \"@/matrix-client\"\nimport { SecureBackupSetupMethod } from \"@/types\"\nimport { accessSecretStorage } from \"@/cryptoCallbacks\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\nimport { \n    E2EE_WK_KEY, \n    E2EE_WK_KEY_DEPRECATED\n} from \"@/constants\"\n\nimport { \n    bootstrapSecretStorageFx,\n    createRecoveryKeyAndPassPhraseFx,\n    getSecureBackupSetupMethodsFx,\n    lossAllRecoveryKeyMethod, \n    onNewRecoveryMethodCreated, \n    resetAllRecoveryKeyMethodsFx,\n    setupRecoveryMethodFx\n} from \"./public\"\n\nforward({\n    from: lossAllRecoveryKeyMethod,\n    to: resetAllRecoveryKeyMethodsFx\n})\n\nforward({\n    from: bootstrapSecretStorageFx.doneData,\n    to: onNewRecoveryMethodCreated,\n})\n\nsetupRecoveryMethodFx.use(async () => accessSecretStorage())\n\nresetAllRecoveryKeyMethodsFx.use(async () => {\n    // Force reset secret storage (which resets the key backup)\n    await accessSecretStorage(async () => {\n        const cl = client()\n        await cl.bootstrapCrossSigning({\n            authUploadDeviceSigningKeys: async (makeRequest) => {\n                const requestCallback = (\n                    auth: IAuthData, \n                ): Promise<IAuthData> => {\n                    return makeRequest(auth)\n                }\n                await createInteractiveAuthFx(requestCallback)\n            },\n            setupNewCrossSigning: true,\n        })\n    }, true)\n})\n\nbootstrapSecretStorageFx.use(async (key) => {\n    const cl = client()\n    await cl.bootstrapSecretStorage({\n        createSecretStorageKey: async () => key,\n        setupNewKeyBackup: true,\n        setupNewSecretStorage: true,\n    })\n})\n\ncreateRecoveryKeyAndPassPhraseFx.use(async (password) => {\n    const cl = client()\n    const key = await cl.createRecoveryKeyFromPassphrase(password)\n    if (!key) throw new Error(\"createRecovery Error\")\n    return key\n})\n\ngetSecureBackupSetupMethodsFx.use(() => {\n    const clientWellKnown = client().getClientWellKnown()\n    let wellKnown = null\n    if (clientWellKnown && clientWellKnown[E2EE_WK_KEY]) {\n        wellKnown = clientWellKnown[E2EE_WK_KEY]\n    }\n    if (clientWellKnown && clientWellKnown[E2EE_WK_KEY_DEPRECATED]) {\n        wellKnown = clientWellKnown[E2EE_WK_KEY_DEPRECATED]\n    }\n    if (\n        !wellKnown ||\n        !wellKnown[\"secure_backup_setup_methods\"] ||\n        !wellKnown[\"secure_backup_setup_methods\"].length ||\n        !(\n            wellKnown[\"secure_backup_setup_methods\"]\n                .includes(SecureBackupSetupMethod.Key) ||\n            wellKnown[\"secure_backup_setup_methods\"]\n                .includes(SecureBackupSetupMethod.Passphrase)\n        )\n    ) {\n        return [\n            SecureBackupSetupMethod.Key,\n            SecureBackupSetupMethod.Passphrase,\n        ]\n    }\n    return wellKnown[\"secure_backup_setup_methods\"]\n})\n","import { InteractiveAuth } from \"matrix-js-sdk\"\n\nimport { d } from \"./domain\"\nimport { SubmitAuthDictFxParams } from \"./types\"\n\nexport const $interactiveAuthInstance = d.store<InteractiveAuth | null>(null)\n\nexport const setInteractiveAuth = d.event<InteractiveAuth>()\nexport const submitAuthDictFx = d\n    .effect<SubmitAuthDictFxParams, void, Error>()","import { sample } from \"effector\"\nimport { InteractiveAuth } from \"matrix-js-sdk\"\n\nimport { LOGIN_BY_PASSWORD } from \"@/constants\"\nimport { client } from \"@/matrix-client\"\n\nimport { \n    $interactiveAuthInstance, \n    setInteractiveAuth, \n    submitAuthDictFx \n} from \"./private\"\nimport { \n    cancelInteractiveAuth,\n    createInteractiveAuthFx, \n    onInteractiveAuthBusyChange,\n    onInteractiveAuthStateUpdate,\n    onNeedUserPassword,\n    onUserPasswordError,\n    onUserPasswordSuccess,\n    submitAuthDict\n} from \"./public\"\n\n$interactiveAuthInstance\n    .on(setInteractiveAuth, (_, auth) => auth)\n    .reset([onUserPasswordSuccess, cancelInteractiveAuth])\n\nsample({\n    clock: submitAuthDict,\n    source: $interactiveAuthInstance,\n    filter: (\n        isInstance: InteractiveAuth | null,\n    ): isInstance is InteractiveAuth => Boolean(isInstance),\n    fn: (auth, pass) => ({\n        password: pass,\n        interactiveAuth: auth\n    }),\n    target: submitAuthDictFx\n})\n\nsample({\n    source: onInteractiveAuthStateUpdate,\n    filter: ({status}) => status.errcode === \"M_FORBIDDEN\",\n    fn: ({status}) => status.error as string,\n    target: onUserPasswordError,\n})\n\ncreateInteractiveAuthFx.use(async (requestCallback) => {\n    const cl = client()\n\n    const interactiveAuth = new InteractiveAuth({\n        doRequest: requestCallback,\n        busyChanged: onInteractiveAuthBusyChange,\n        stateUpdated: (nextStage, status) => {\n            onInteractiveAuthStateUpdate({\n                nextStage, status\n            })\n        },\n        matrixClient: cl,\n        // нам это не нужно \n        requestEmailToken: undefined as any\n    })\n    setInteractiveAuth(interactiveAuth)\n    onNeedUserPassword()\n\n    return new Promise<void>(async (resolve, reject) => {\n        const unSub = cancelInteractiveAuth.watch(() => {\n            unSub()\n            reject()\n        })\n        await interactiveAuth.attemptAuth()\n        unSub()\n        onUserPasswordSuccess()\n        resolve()\n    })\n})\n\nsubmitAuthDictFx.use(async ({password, interactiveAuth}) => {\n    const cl = client()\n    await interactiveAuth.submitAuthDict(\n        {\n            \"type\": LOGIN_BY_PASSWORD,\n            \"user\": cl.getUserId(),\n            \"identifier\": {\n                \"type\": \"m.id.user\",\n                \"user\": cl.getUserId()\n            },\n            \"password\": password\n        }\n    )\n})\n","import { d } from \"./domain\"\nimport { DetailedKeyBackupInfo } from \"./types\"\n\nexport const getDetailedKeyBackupInfoFx = d\n    .effect<void, DetailedKeyBackupInfo, Error>()\n\nexport const deleteKeyBackupFx = d.effect<string, void, Error>()\n","import { forward, sample } from \"effector\"\nimport { IKeyBackupCheck } from \"matrix-js-sdk/lib/crypto/backup\"\n\nimport { client } from \"@/matrix-client\"\nimport { \n    destroyClientFx, \n    initCryptoFx, \n    onSessionRemaining, \n    onUpdateKeyBackupStatus\n} from \"@/app\"\nimport { accessSecretStorage } from \"@/cryptoCallbacks\"\n\nimport { \n    $detailedKeyBackupInfo, \n    $isKeyBackupEnabled, \n    $keyBackupInfo, \n    $sessionsRemaining, \n    checkBackupEnabledKeyFx, \n    deleteKeyBackup, \n    getKeyBackupInfoFx, \n    newKeyBackupFx,\n    onBackupKeyLoadProgress,\n    resetCryptoStorageFx,\n    restoreKeyBackupFx,\n} from \"./public\"\nimport { \n    deleteKeyBackupFx,\n    getDetailedKeyBackupInfoFx \n} from \"./private\"\n\n$sessionsRemaining\n    .on(onSessionRemaining, (_, remaining) => remaining)\n    .reset(destroyClientFx.done)\n\n$isKeyBackupEnabled\n    .on(checkBackupEnabledKeyFx.doneData, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx.done)\n\n$keyBackupInfo\n    .on(getKeyBackupInfoFx.doneData, (_, info) => info)\n    .reset(destroyClientFx.done)\n\n$detailedKeyBackupInfo\n    .on(getDetailedKeyBackupInfoFx.doneData, (_, detailedInfo) => detailedInfo)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: initCryptoFx.doneData,\n    to: checkBackupEnabledKeyFx,\n})\n\nforward({\n    from: [\n        onUpdateKeyBackupStatus, \n        resetCryptoStorageFx.finally,\n        deleteKeyBackupFx.finally,\n    ],\n    to: [\n        checkBackupEnabledKeyFx, \n        getKeyBackupInfoFx, \n        getDetailedKeyBackupInfoFx\n    ]\n})\n\nsample({\n    clock: deleteKeyBackup,\n    source: $keyBackupInfo,\n    filter: (\n        keyInfo: IKeyBackupCheck | null\n    ): keyInfo is IKeyBackupCheck => Boolean(keyInfo?.backupInfo.version),\n    fn: (keyInfo: IKeyBackupCheck) => keyInfo.backupInfo.version as string,\n    target:  deleteKeyBackupFx,\n})\n\ncheckBackupEnabledKeyFx.use(() => {\n    return client().getKeyBackupEnabled()\n})\n\ngetKeyBackupInfoFx.use(() => {\n    return client().checkKeyBackup()\n})\n\nnewKeyBackupFx.use(async () => {\n    let info: any\n    const cl = client()\n    try {\n        const secureSecretStorage = await cl\n            .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n        if (secureSecretStorage) {\n            await accessSecretStorage(async () => {\n                info = await cl.prepareKeyBackupVersion(\n                    undefined /* random key */,\n                    { secureSecretStorage: true },\n                )\n                info = await cl.createKeyBackupVersion(info)\n            })\n        } else {\n            const keyBackupInfo = await cl.getKeyBackupVersion()\n            if (keyBackupInfo) [\n                info = await cl.createKeyBackupVersion(\n                    keyBackupInfo,\n                )\n            ]\n        }\n\n        await cl.scheduleAllGroupSessionsForBackup()\n\n    } catch (e) {\n        // TODO: If creating a version succeeds, but backup fails, should we\n        // delete the version, disable backup, or do nothing?  If we just\n        // disable without deleting, we'll enable on next app reload since\n        // it is trusted.\n        if (info) {\n            cl.deleteKeyBackupVersion(info.version)\n        }\n    }\n})\n\ngetDetailedKeyBackupInfoFx.use(async () => {\n    const cl = client()\n    const secretStorage = cl.crypto.secretStorage\n\n    const backupKeyStored = !!(await cl.isKeyBackupKeyStored())\n    const backupKeyFromCache = await cl.crypto.getSessionBackupPrivateKey()\n    const backupKeyCached = !!(backupKeyFromCache)\n    const backupKeyWellFormed = backupKeyFromCache instanceof Uint8Array\n    const secretStorageKeyInAccount = await secretStorage.hasKey()\n    const secretStorageReady = await cl.isSecretStorageReady()\n\n    return {\n        backupKeyStored,\n        backupKeyCached,\n        backupKeyWellFormed,\n        secretStorageKeyInAccount,\n        secretStorageReady\n    }\n})\n\ndeleteKeyBackupFx.use((version) => {\n    const cl = client()\n    return cl.deleteKeyBackupVersion(version)\n})\n\nrestoreKeyBackupFx.use(async () => {\n    const cl = client()\n    const backupInfo = await cl.getKeyBackupVersion()\n    const has4S = await cl.hasSecretStorageKey()\n    const backupKeyStored = has4S && (await cl.isKeyBackupKeyStored())\n    if (!backupInfo) return\n    const progressCallback = {\n        progressCallback: (e: any) => {\n            onBackupKeyLoadProgress(e)\n        }\n    }\n    try {\n        const recoverInfo = await cl.restoreKeyBackupWithCache(\n            undefined, /* targetRoomId */\n            undefined, /* targetSessionId */\n            backupInfo,\n            // @TODO fix matrix-types\n            progressCallback,\n        )\n        console.log(\"RestoreKeyBackupDialog: found cached backup key\")\n        return recoverInfo\n    } catch (e) {\n        console.error(e)\n    }\n\n    if (backupKeyStored) {\n        await accessSecretStorage(async () => {\n            await cl.restoreKeyBackupWithSecretStorage(\n                backupInfo, undefined, undefined,\n                // @TODO fix matrix-types\n                progressCallback,\n            )\n        })\n    }\n\n}) \n\nresetCryptoStorageFx.use(async() => {\n    await accessSecretStorage(async () => undefined, /* forceReset = */ true)\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","SecureBackupSetupMethod","RecoveryKeyOrPassphraseEnum","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","$currentDeviceId","store","onUpdateKeyBackupStatus","onRoomMessage","directRoomCreated","roomCreated","messagesUpdated","roomMemberUpdated","roomUserUpdated","toggleTypingUser","onSessionRemaining","crossSigningKeyChanged","crossSigningStatusUpdated","onVerificationRequest","onUpdateDeviceList","onUsersProfileUpdate","initCryptoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","getUserDevicesInfoFx","turnOnEcnryptionFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","$mySessionsInfo","getMySessionsFx","clearMySessionsInfo","logoutSessionsById","renameDeviceFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","stopPeeking","clearStores","crypto","stop","cryptoStore","deleteAllData","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","indexedDB","verificationDomain","$isWaitingAnotherUser","createApi","setWaitingAnotherUser","resetWaitingAnotherUser","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","startSASVerification","confirmSASVerification","startVerificationDevice","startThisDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","keyVerificationFx","onNeedRecoveryKeyOrPassphrase","startRecoveryKeyOrPassphraseVerification","setCheckKeyInfo","validateRecoveryKey","onRecoveryKeyOrPassphraseSuccess","onValidRecoveryKey","onInvalidRecoveryKey","$hasPassphrase","onHasPassphrase","validatePassphrase","onValidPassphrase","onInvalidPassphrase","$canVerify","$deviceIsVerified","checkThisDeviceVerificationFx","onResolveSecretStorageKey","onRejectSecretStorageKey","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","IdbDelete","createRecoveryKeyAndPassPhraseFx","getSecureBackupSetupMethodsFx","onNeedCreateRecoveryMethod","lossAllRecoveryKeyMethod","cancelCreateNewMethod","onNewRecoveryMethodCreated","bootstrapSecretStorageFx","resetAllRecoveryKeyMethodsFx","setupRecoveryMethodFx","createInteractiveAuthFx","submitAuthDict","onNeedUserPassword","onUserPasswordError","onUserPasswordSuccess","onInteractiveAuthBusyChange","onInteractiveAuthStateUpdate","cancelInteractiveAuth","secretStorageBeingAccessed","secretStorageKeys","secretStorageKeyInfo","dehydrationCache","createPromise","params","promise","res","rej","isCachingAllowed","setCachingAllowed","newVal","cacheSecretStorageKey","keyId","keyInfo","promptForBackupPassphrase","Uint8Array","console","log","accessSecretStorage","func","forceReset","cl","hasSecretStorageKey","createdSub","watch","cancelSub","bootstrapCrossSigning","authUploadDeviceSigningKeys","makeRequest","requestCallback","auth","bootstrapSecretStorage","getKeyBackupPassphrase","Object","keys","dehydrationKeyInfo","passphrase","setDehydrationKey","warn","error","makeInputToKey","deriveKey","salt","iterations","recoveryKey","decodeRecoveryKey","keyInfos","getDefaultSecretStorageKeyId","keyInfoEntries","entries","length","checkSecretStorageKey","inputToKey","resolveWatcher","rejectWatcher","unsubscribe","input","getDehydrationKey","userId","deviceId","requestId","name","deviceTrust","getUserId","isVerified","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","i","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","restoringBackup","isSecretStorageReady","checkOwnCrossSigningTrust","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","confirmResetCrossSigningFx","$crossSigningId","crossSigningChangeFx","$crossSigningStatus","newKeyBackupFx","$keyBackupInfo","getKeyBackupInfoFx","$detailedKeyBackupInfo","onBackupKeyLoadProgress","$isKeyBackupEnabled","checkBackupEnabledKeyFx","deleteKeyBackup","restoreKeyBackupFx","resetCryptoStorageFx","$sessionsRemaining","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","InvalidBackupInfo","VerificationError","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","isCryptoEnabled","isRoomEncrypted","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","isReadUpTo","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","getMappedRooms","getRooms","done","_","createClientParams","reset","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","args","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","getDeviceId","checkDeviceTrust","isSelfVerification","id","Date","now","userIds","initialFetch","deviceInfo","newStatus","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","startClientParams","downloadKeys","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","rules","global","setPushRuleEnabled","enabled","deletePushRule","logoutSessionsByIdFx","doneData","sessionsInfo","fail","guard","clock","sessions","target","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","getDevices","devices","crossSigningInfo","getStoredCrossSigningForUser","myDeviceId","device","getStoredDevice","isCurrentSession","sessionsId","callback","deleteMultipleDevices","setDeviceDetails","display_name","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","fn","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","setRoomEncryption","algorithm","MEGOLM_ALGORITHM","getEncryptionTargetMembers","x","downloadKeysForUsers","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","isMe","getStoredDevicesForUser","verified","getDisplayName","encryptionEvent","sendStateEvent","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","requestLimit","dir","getUnreadNotificationCount","subtleCrypto","_window","deriveKeys","password","importKey","TextEncoder","encode","deriveBits","hash","keybits","aesKey","slice","hmacKey","aesProm","hmacProm","all","HEADER_LINE","packMegolmKeyFile","nLines","Math","ceil","lines","Array","uint8Array","latin1String","o","subarray","String","fromCharCode","apply","btoa","buffer","encryptMegolmKeyFile","kdfRounds","kdf_rounds","encodedData","counter","ciphertext","cipherArray","bodyLength","resultBuffer","idx","set","toSign","sign","hmac","hmacArray","unpackMegolmKeyFile","fileStr","TextDecoder","decode","lineStart","lineEnd","indexOf","line","trim","dataStart","dataEnd","base64","atob","decodeBase64","decryptMegolmKeyFile","ciphertextLength","toVerify","verify","isValid","plaintext","cryptoDomain","getIdentityKeyFx","getDeviceEd25519KeyFx","$isCryptoEnabled","$identityKey","exportE2ERoomsKeysFx","importE2ERoomsKeysFx","$deviceEd25519Key","failData","getDeviceEd25519Key","exportRoomKeys","arrayBuffer","importRoomKeys","parse","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","cancelVerificationEventFx","$checkKeyInfo","validateRecoveryKeyFx","updateDeviceVerification","validatePassphraseFx","checkCanVerifyFx","onVerificationRequestFxReducer","currentRequest","onChange","cancelled","off","VerificationRequestEvent","Change","cancellationCode","phase","Done","otherUserId","Ready","Started","verifier","sasEvent","excludePhaseArray","Cancelled","Requested","requests","req","currentReq","canceledReq","val","canVerify","accept","beginKeyVerification","once","cancel","confirm","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","cryptoEnabled","doesServerSupportUnstableFeature","homeserverSupportsCrossSigning","getCrossSigningId","checkKeyInfo","decodedKey","keyBackupKeyFromRecoveryKey","makeInput","getCrossSigningIdFx","getCrossSigningStatusFx","isInitialSyncComplete","setupNewCrossSigning","pkCache","crossSigning","secretStorage","crossSigningPublicKeysOnDevice","isStoredInSecretStorage","crossSigningPrivateKeysInStorage","_pkCache$getCrossSign","masterPrivateKeyCached","_pkCache$getCrossSign2","selfSigningPrivateKeyCached","_pkCache$getCrossSign3","userSigningPrivateKeyCached","isCrossSigningReady","crossSigningReady","createSecretStorageKey","setupNewKeyBackup","setupNewSecretStorage","createRecoveryKeyFromPassphrase","clientWellKnown","getClientWellKnown","Key","Passphrase","$interactiveAuthInstance","setInteractiveAuth","submitAuthDictFx","isInstance","pass","interactiveAuth","errcode","InteractiveAuth","doRequest","busyChanged","stateUpdated","nextStage","matrixClient","requestEmailToken","unSub","attemptAuth","getDetailedKeyBackupInfoFx","deleteKeyBackupFx","remaining","isEnabled","info","detailedInfo","version","getKeyBackupEnabled","checkKeyBackup","prepareKeyBackupVersion","secureSecretStorage","createKeyBackupVersion","keyBackupInfo","scheduleAllGroupSessionsForBackup","deleteKeyBackupVersion","isKeyBackupKeyStored","backupKeyStored","backupKeyFromCache","backupKeyCached","backupKeyWellFormed","hasKey","secretStorageKeyInAccount","secretStorageReady","has4S","progressCallback","restoreKeyBackupWithCache","recoverInfo","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}