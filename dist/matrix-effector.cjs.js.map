{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    DeleteNotificationsRuleEnabledParams,\n    EditMessagePayload,\n    EventPermissions,\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedRoomMember,\n    MappedUser,\n    Message,\n    MessageEvent,\n    NotificationRulesResult,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams,\n    StartClientParams,\n    UploadContentParams,\n    UploadContentResult,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const checkEventPermissionsFx = matrixDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = matrixDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = matrixDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\nexport const getNotificationRulesFx = matrixDomain\n    .effect<void,NotificationRulesResult,Error>()\nexport const setNotificationRuleActionFx = matrixDomain\n    .effect<SetNotificationsRuleParams,void,Error>()\nexport const setNotificationRuleEnabledFx = matrixDomain\n    .effect<SetNotificationsRuleEnabledParams,void,Error>()\nexport const deleteNotificationRuleFx = matrixDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\nexport const logoutFx = matrixDomain\n    .effect<void,void,Error>()\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoomMembers = matrixDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<Message>()\nexport const newMessagesLoaded = matrixDomain.event<Message[]>()\nexport const onPaginateBackwardDone = matrixDomain.event<void>()\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const onRoomInitialized = matrixDomain.event<void>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const loadRoomMessage = matrixDomain.event<GoToMessageParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\nexport const onUploadProgress = matrixDomain.event<UploadProgress>()\nexport const toLiveTimeline = matrixDomain.event<void>()\nexport const liveTimelineLoaded = matrixDomain.event<void>()\nexport const loadRoomMessageDone = matrixDomain.event<void>()\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./public\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\nexport const createClient = (): void => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        createClient()\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption & {\n        messageBatchInterval?: number\n    }\n): void => {\n    if (typeof opts === \"string\") {\n        options = opts\n        return\n    }\n    const { messageBatchInterval: ms, ...restOpts} = opts\n    options = restOpts\n    if (ms !== undefined) messageBatchInterval = ms\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n","import { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse,\n    PaginateRoomFxParams,\n    UpdateMessagesFxParams\n} from \"./types\"\n\nexport const updateMessages = matrixDomain.event<void>()\nexport const getRoomMembers = matrixDomain.event<void>()\nexport const onRoomMemberUpdate = matrixDomain.event<RoomMember>()\nexport const onRoomUserUpdate = matrixDomain.event<User>()\n\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\nexport const updateMessagesFx = matrixDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = matrixDomain\n    .effect<string, MappedRoomMember[], Error>()\n","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedRoomMember,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: {\n            avatarUrl: user.avatarUrl,\n            userId : user.userId,\n            currentlyActive :  user.currentlyActive,\n            displayName :  user.displayName,\n            lastActiveAgo :  user.lastActiveAgo,\n            lastPresenceTs :  user.lastPresenceTs,\n            presence: user.presence as any,\n        },\n        userId: roomMember.userId,\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, {\n    RoomMember,\n    TimelineWindow,\n    EventStatus,\n    User,\n} from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward,\n    onRoomInitialized,\n    checkEventPermissionsFx,\n    uploadContentFx,\n    onUploadProgress,\n    $currentRoomMembers,\n    getUrlPreviewFx,\n    getNotificationRulesFx,\n    setNotificationRuleEnabledFx,\n    setNotificationRuleActionFx,\n    deleteNotificationRuleFx,\n    newMessagesLoaded,\n    toLiveTimeline,\n    liveTimelineLoaded,\n    onPaginateBackwardDone,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    logoutFx\n} from \"./public\"\nimport {\n    paginateRoomFx,\n    loadRoomFx,\n    initRoomFx,\n    updateMessagesFx,\n    updateMessages,\n    getRoomMembers,\n    getRoomMembersFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n} from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMessage,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, createRoomMessageBatch, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n    UploadContentResult,\n    NotificationRulesResult,\n    SetNotificationsRuleParams,\n    Message,\n    GoToMessageParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\nimport { debounce } from \"patronum\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst UserNotFound = createCustomError(\"UserNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nconst UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n\nfunction getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\nconst toLiveTimelineFx = attach({\n    effect: loadRoomFx,\n})\nconst loadRoomMessageFx = attach({\n    effect: loadRoomFx,\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\n\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\n\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    let avatarUrl = user.avatarUrl\n    let displayName = user.displayName\n    if (!user?.avatarUrl || !user?.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        avatarUrl = profileInfo.avatar_url as string\n        displayName = profileInfo.displayname as string\n    }\n    return {\n        avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    \n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\n\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n\nlogoutFx.use(() => client().logout())\n"],"names":["MsgType","matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","logoutFx","$currentRoomId","store","$currentRoomMembers","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","newMessagesLoaded","onPaginateBackwardDone","onInitialSync","onCachedState","onSync","initRoom","onRoomInitialized","loadRoom","loadRoomMessage","paginateForward","paginateBackward","onUploadProgress","toLiveTimeline","liveTimelineLoaded","loadRoomMessageDone","clientStore","options","messageBatchInterval","callbacksStore","createClient","removeAllListeners","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","checkIsDirect","roomId","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","updateMessages","getRoomMembers","onRoomMemberUpdate","onRoomUserUpdate","initRoomFx","loadRoomFx","paginateRoomFx","updateMessagesFx","getRoomMembersFx","getMappedContent","toMessage","originalEventId","relation","getRelation","undefined","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","name","summary","mergeMessageEvents","acc","isRelation","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","UserNotFound","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","UserNotLoggedIn","getMessages","timelineWindow","getEvents","filter","getType","reduce","roomMessageBatch","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","loadNewMessagesFx","messages","size","length","toLiveTimelineFx","loadRoomMessageFx","forward","from","sample","done","_","to","map","$loadFilter","combine","Boolean","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","doneData","reset","setMessages","guard","currentRoomId","result","isLive","value","canPaginateBackward","canPaginateForward","target","getRoomMembersDebounced","debounce","timeout","getMappedRooms","getRooms","clock","member","currentRoomMembers","user","find","userId","pending","fn","initialEventId","initialWindowSize","loadAdditionalDataDirection","use","async","cl","loggedUserId","getUserId","getUser","avatarUrl","displayName","profileInfo","getProfileInfo","avatar_url","displayname","currentlyActive","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","startup","startClient","term","orderBy","getRoom","membersCache","search","body","search_categories","room_events","search_term","keys","rooms","order_by","results","MatrixEvent","senderId","getSender","getMember","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","liveEvent","state","prevState","e","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","unreadCount","i","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","eventsRetrieved","paginate","EventTimeline","BACKWARDS","FORWARDS","makeRequest","requestLimit","dir","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","mxEvent","canRedact","currentState","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","file","includeFilename","onlyContentUri","rawResponse","type","promise","uploadContent","progressHandler","loaded","total","abort","members","roomMember","membership","powerLevel","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","logout","ms","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp","opts","restOpts"],"mappings":"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"}