{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/domain.ts","../src/effects.ts","../src/events.ts","../src/matrix-client.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { SearchResponse } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    LoginByPasswordParams,\n    LoginPayload,\n    Room,\n    SearchMessageTextPayload,\n    SendMessagePayload,\n    StartClientParams,\n    Message,\n    LoginByTokenParams,\n    InitTimelineWindowParams,\n    TimelineWindowPaginationParams,\n    SearchPayload,\n    LoadTimelineWindowParams,\n    ReadAllMessagesParams,\n    RoomWithActivity,\n    MappedRoom,\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchFx = matrixDomain.effect<SearchPayload, Message[], Error>()\nexport const searchMessageTextFx = matrixDomain\n    .effect<SearchMessageTextPayload, SearchResponse, Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const getRoomTimelineFx = matrixDomain\n    .effect<Room[\"roomId\"], Message[], Error>()\nexport const initTimelineWindowFx = matrixDomain\n    .effect<InitTimelineWindowParams, Message[], Error>()\nexport const getTimelineWindowMessagesFx = matrixDomain\n    .effect<void, Message[], Error>()\nexport const loadTimelineWindowFx = matrixDomain\n    .effect<LoadTimelineWindowParams, Message[], Error>()\nexport const paginateTimelineWindowFx = matrixDomain\n    .effect<TimelineWindowPaginationParams, Message[], Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport { MappedRoom, MessageEvent } from \"./types\"\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n} from \"./types\"\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: event.getContent(),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: event.getContent(),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { forward } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    searchMessageTextFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    getRoomTimelineFx,\n    loginByTokenFx,\n    stopClientFx,\n    initTimelineWindowFx,\n    getTimelineWindowMessagesFx,\n    paginateTimelineWindowFx,\n    searchFx,\n    loadTimelineWindowFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n} from \"./effects\"\nimport { onCachedState, onInitialSync, onSync, roomMessage } from \"./events\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst PaginationFail = createCustomError(\"PaginationFail\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchFx.use(async (params) => {\n    const searchResponse = await client().search(params)\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            return toMessage(event)\n        })\n})\n// TODO а нужен ли?\nsearchMessageTextFx.use((params) => client().searchMessageText(params))\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\ngetRoomTimelineFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (room) {\n        return room.timeline\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n    }\n    return []\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nlet timelineWindow: matrix.TimelineWindow | undefined\ninitTimelineWindowFx\n    .use(async ({ roomId, initialEventId, initialWindowSize }) => {\n        const cl = client()\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const timelineSet = room.getUnfilteredTimelineSet()\n        timelineWindow = new matrix.TimelineWindow(cl, timelineSet)\n        await timelineWindow.load(initialEventId, initialWindowSize)\n        return timelineWindow\n            .getEvents()\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n    })\nloadTimelineWindowFx.use(async ({ initialEventId, initialWindowSize }) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n})\ngetTimelineWindowMessagesFx.use(() => {\n    if (!timelineWindow) return []\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n})\n\npaginateTimelineWindowFx.use(async ({\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    const result: boolean = await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    if (!result) throw new PaginationFail()\n    return timelineWindow.getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n})\n"],"names":["matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchFx","searchMessageTextFx","sendMessageFx","editMessageFx","deleteMessageFx","getRoomTimelineFx","initTimelineWindowFx","getTimelineWindowMessagesFx","loadTimelineWindowFx","paginateTimelineWindowFx","readAllMessagesFx","getRoomsWithActivitiesFx","roomMessage","event","onInitialSync","onCachedState","onSync","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","toMessage","originalEventId","undefined","getId","content","getContent","sender","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","room","roomId","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","PaginationFail","EventNotFound","ClientNotInitialized","getMappedRooms","getRooms","map","timelineWindow","forward","from","done","initialSyncLimit","to","use","params","login","async","store","startup","startClient","search","search_categories","room_events","results","result","MatrixEvent","searchMessageText","txnId","sendMessage","eventId","body","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","getRoom","timeline","filter","includes","getType","reduce","toStartOfTimeline","removed","data","eventType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rooms","rrEvent","findEventById","setRoomReadMarkers","cl","matrixRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","hasUserReadEvent","getUserId","mergedMessageEvents","lastMessage","stopClient","initialEventId","initialWindowSize","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","direction","size","makeRequest","requestLimit","dir","EventTimeline","FORWARDS","BACKWARDS","paginate","ms","throttle","source","timeout","batchEvents","opts"],"mappings":"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"}