{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room/types.ts","../src/room-messages/domain.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/types/content.ts","../src/matrix-client.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport { MappedRoom, MappedUser } from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    StartClientParams\n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams\n} from \"./types\"\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\n\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const newDirectRoom = roomDomain.event<Room>()\nexport const newRoom = roomDomain.event<Room>()\n\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain.effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain.effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain.effect<{roomId: string, isDirect?: boolean}, RoomWithActivity, Error>()\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\nimport { RoomMember, MappedUser, Message } from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string;\n    invite: string[];\n    visibility: Visibility;\n    initialState?: InitialState[];\n    preset?: Preset;\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser;\n    initialState?: InitialState[];\n    preset?: Preset;\n}\n\nexport enum Visibility {\n    public = \"public\",\n    private = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object;\n    stateKey: string;\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string;\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string;\n    userId: string;\n    reason?: string;\n}\n\nexport type RenameRoomParams = {\n    roomId: string;\n    name: string;\n}","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const paginationDomain = root.domain(\"pagination\")\n","import { paginationDomain } from \"./domain\"\nimport { PaginateParams } from \"./types\"\n\nexport const $paginateForwardPending = paginationDomain.store(false)\nexport const $paginateBackwardPending = paginationDomain.store(false)\nexport const $canPaginateBackward = paginationDomain.store(true)\nexport const $canPaginateForward = paginationDomain.store(true)\n\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\nexport const paginateForward = paginationDomain.event<PaginateParams>()\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\nexport const createClient = (): void => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        createClient()\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption & {\n        messageBatchInterval?: number\n    }\n): void => {\n    if (typeof opts === \"string\") {\n        options = opts\n        return\n    }\n    const { messageBatchInterval: ms, ...restOpts} = opts\n    options = restOpts\n    if (ms !== undefined) messageBatchInterval = ms\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\nimport { checkIsDirect, client } from \".\"\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership()\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(room: MappedRoom, maxHistory: number): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { DIRECT_EVENT, ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const userDirectRooms = (cl.getAccountData(DIRECT_EVENT as EventType) as MatrixEvent)?.getContent()\n    return userDirectRooms && Object.values(userDirectRooms).flatMap((room) => room)\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => getIsDirectRoomsIds().includes(roomId)\n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = (roomId: string) => {\n    const cl = client()\n    const directRoomsIds = getIsDirectRoomsIds()\n    if (!directRoomsIds.includes(roomId)) {\n        // @ts-ignore\n        const { creator } = cl.getRoom(roomId)?.currentState.getStateEvents('m.room.create' as EventType, undefined)[0]?.getContent()\n        const prevData = (cl.getAccountData(DIRECT_EVENT as EventType) as MatrixEvent)?.getContent()\n        return cl.setAccountData(DIRECT_EVENT as EventType, {\n            ...prevData,\n            [creator]: [roomId]\n        })\n    }\n}","import { combine } from \"effector\"\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\nimport { $currentRoomId, $timelineWindow } from \"./public\"\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\nimport { paginationDomain } from \"./domain\"\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\n\nexport const paginateRoomFx = paginationDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n","import { guard, sample } from \"effector\"\nimport { $currentRoomId, MessageResponse } from \"@/room\"\nimport { paginateRoomFx } from \"@/room-pagination/private\"\nimport { loadRoomFx } from \"@/room/private\"\nimport { UpdateMessagesFxParams } from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const updateMessages = messagesDomain.event<void>()\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import { forward } from \"effector\"\nimport { EventType, User } from \"matrix-js-sdk\"\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\nimport { client, onClientEvent } from \"@/matrix-client\"\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\nimport { MatrixEvent, Room, RoomMember } from \"@/types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx\n} from \"./public\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport { updateMessages } from \"@/room-messages/private\"\nimport { roomMessage } from \"@/room-messages\"\nimport { newDirectRoom, newRoom } from \"@/room\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n        [\"Room\", async (room: Room) => {\n            const { joined_rooms } = await client().getJoinedRooms() as any\n            if (joined_rooms && joined_rooms.includes(room.roomId)) return\n            // @ts-ignore\n            const isDirect = room.currentState.getStateEvents(\"m.room.create\" as EventType, undefined)[0]?.getContent()?.isDirect\n            if (isDirect) {\n                newDirectRoom(room)\n            } else {\n                newRoom(room)\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(() => client().logout())\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser;\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import matrix, { TimelineWindow } from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport { attach, forward, guard, sample } from \"effector\"\nimport {\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { MatrixEvent, RoomMember } from \"@/types\"\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    $loadFilter,\n    getRoomMembers,\n    getRoomMembersFx,\n    initRoomFx,\n    loadRoomFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n} from \"./private\"\nimport {\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $timelineWindow,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    createRoomFx, \n    getAllUsersFx, \n    inviteUserFx, \n    kickUserRoomFx,\n    renameRoomFx,\n    joinRoomFx,\n    createDirectRoomFx,\n} from \"./public\"\nimport { LoadRoomFxParams, Visibility } from \"./types\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => toRoomWithActivity(room, maxHistory))\n})\n\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ( {name, invite, visibility, initialState = [], preset} ) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    const { room_id } = await client().createRoom(options)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find((roomId) => cl.getRoom(roomId)?.currentState.members[user.userId])\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    setDirectRoom(room_id)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room), 99)\n})","import { attach, forward, guard, sample } from \"effector\"\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\nimport { paginateForwardFx } from \"@/room-pagination/private\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx\n} from \"./public\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport {\n    RoomNotFound,\n    EventNotFound,\n    ClientNotInitialized,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n","import { combine, forward, guard } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    $currentRoomId,\n    $loadRoomFxPending,\n    loadRoom\n} from \"@/room\"\nimport { $loadFilter } from \"@/room/private\"\nimport { setMessages } from \"@/room-messages/private\"\nimport { getMessages } from \"@/utils\"\nimport {\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    paginateBackward,\n    paginateForward,\n} from \"./public\"\nimport { TimelineWindowUndefined } from \"@/errors\"\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n"],"names":["root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$timelineWindow","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","loadRoom","toLiveTimeline","loadRoomMessage","newDirectRoom","newRoom","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","Visibility","Preset","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","paginateForward","paginateBackward","MsgType","clientStore","options","messageBatchInterval","callbacksStore","createClient","removeAllListeners","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","undefined","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","hasUserReadEvent","getUserId","mergedMessageEvents","filter","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","getIsDirectRoomsIds","userDirectRooms","getAccountData","Object","values","flatMap","setDirectRoom","creator","currentState","getStateEvents","prevData","setAccountData","[object Object]","$loadFilter","combine","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoomFx","loadRoomFx","getRoomMembersFx","paginateRoomFx","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","map","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","async","joined_rooms","getJoinedRooms","state","prevState","rooms","e","member","use","login","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","profileInfo","getProfileInfo","avatar_url","displayname","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","getRoomMembersDebounced","debounce","timeout","_","doneData","reset","value","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","members","roomMember","membership","powerLevel","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","isLive","canPaginateBackward","term","orderBy","membersCache","search","body","search_categories","room_events","search_term","keys","order_by","results","MatrixEvent","senderId","getSender","getUsers","invite","visibility","initialState","preset","initial_state","state_key","stateKey","room_id","createRoom","findRoomId","is_direct","private","creation_content","reason","kick","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","type","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir","ms","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp","opts","restOpts"],"mappings":"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"}