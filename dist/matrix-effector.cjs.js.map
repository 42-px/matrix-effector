{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { combine } from \"effector\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedUser,\n    Message,\n    MessageEvent,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    StartClientParams\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\n\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\n\n\nexport const $canLoad = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const $canPaginate = combine(\n    $canLoad,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n  && !backwardPaginationPending\n  && !forwardPaginationPending\n  && !roomLoading\n)\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { matrixDomain } from \"./domain\"\nimport {\n    LoadRoomFxParams,\n    MessageResponse,\n    PaginateRoomFxParams\n} from \"./types\"\n\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n} from \"./types\"\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: event.getContent(),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: event.getContent(),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, forward, guard, sample } from \"effector\"\nimport matrix, { RoomMember, TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoomFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $canLoad,\n    $canPaginate,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward\n} from \"./public\"\nimport { paginateRoomFx, loadRoomFx } from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId.updates)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId.updates)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId.updates)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId.updates])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId.updates])\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize\n        })\n    ),\n    filter: $canLoad,\n    target: loadRoomFx\n})\nguard({\n    source: paginateBackward,\n    filter: $canPaginate,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $canPaginate,\n    target: paginateForwardFx\n})\n\ngetLoggedUserFx.use(() => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    return {\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        const size = messages.length - initialWindowSize\n        const eventsRetrieved: boolean = await timelineWindow\n            .paginate(matrix.EventTimeline.BACKWARDS, size)\n        if (eventsRetrieved) {\n            messages = timelineWindow\n                .getEvents()\n                .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                    .includes(event.getType()))\n                .reduce(mergeMessageEvents, [])\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages =  timelineWindow.getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n"],"names":["matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","initRoomFx","$currentRoomId","store","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","onInitialSync","onCachedState","onSync","initRoom","loadRoom","paginateForward","paginateBackward","$canLoad","combine","roomId","timelineWindow","Boolean","$canPaginate","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","checkIsDirect","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","loadRoomFx","paginateRoomFx","toMessage","originalEventId","undefined","getId","content","sender","originServerTs","getDate","edited","replacingEventId","redacted","isRedacted","toMappedRoom","room","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","_","doneData","reset","updates","setMessages","guard","sample","done","currentRoomId","result","filter","getMappedRooms","getRooms","map","messages","isLive","canPaginateBackward","canPaginateForward","forward","from","pending","to","initialEventId","initialWindowSize","target","use","cl","loggedUserId","getUserId","user","getUser","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","async","startup","startClient","term","getRoom","membersCache","search","body","search_categories","room_events","search_term","keys","rooms","results","MatrixEvent","senderId","getSender","getMember","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","getType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","reduce","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","size","paginate","EventTimeline","BACKWARDS","makeRequest","requestLimit","dir","FORWARDS","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","ms","throttle","timeout","batchEvents","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","opts"],"mappings":"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"}