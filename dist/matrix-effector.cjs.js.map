{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room/types.ts","../src/room-messages/domain.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/types/content.ts","../src/matrix-client.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport { MappedRoom, MappedUser } from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    StartClientParams\n} from \"./types\"\nimport { appDomain } from \"./domain\"\nimport { PrependAndCreateClientParams, AuthData } from \"./types\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const prependAndCreateClientFx = appDomain\n    .effect<PrependAndCreateClientParams, void, Error>()\nexport const destroyClientAndLogoutFx = appDomain\n    .effect<void, void, Error>()","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\nexport const $requiredPowerLevelForKick = roomDomain.store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain.store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain.store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain.store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain.store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain.store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\nimport { RoomMember, MappedUser, Message } from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    public = \"public\",\n    private = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const paginationDomain = root.domain(\"pagination\")\n","import { paginationDomain } from \"./domain\"\nimport { PaginateParams } from \"./types\"\n\nexport const $paginateForwardPending = paginationDomain.store(false)\nexport const $paginateBackwardPending = paginationDomain.store(false)\nexport const $canPaginateBackward = paginationDomain.store(true)\nexport const $canPaginateForward = paginationDomain.store(true)\n\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\nexport const onPaginateForwardDone = paginationDomain.event<void>()\nexport const paginateForward = paginationDomain.event<PaginateParams>()\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\nexport const createClient = (): void => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        createClient()\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption & {\n        messageBatchInterval?: number\n    }\n): void => {\n    if (typeof opts === \"string\") {\n        options = opts\n        return\n    }\n    const { messageBatchInterval: ms, ...restOpts} = opts\n    options = restOpts\n    if (ms !== undefined) messageBatchInterval = ms\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import { MatrixEvent, RoomMember, User } from \"matrix-js-sdk\"\nimport { checkIsDirect, client } from \"@/index\"\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership()\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory: number\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = (cl.getAccountData(\n        DIRECT_EVENT as EventType) as MatrixEvent\n    )?.getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = (roomId: string): Promise<void> => {\n    const cl = client()\n    const { creator } = (cl.getRoom(roomId)?.currentState\n        .getStateEvents(\n            \"m.room.create\" as EventType,\n            undefined as any\n        ) as any )[0]?.getContent()\n    const prevData = (cl.getAccountData(\n        DIRECT_EVENT as EventType\n    ) as MatrixEvent)?.getContent()\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\n        ...prevData,\n        [creator]: [roomId]\n    })\n}\n","import { combine } from \"effector\"\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse, RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\nimport { $currentRoomId, $timelineWindow } from \"./public\"\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\nimport { paginationDomain } from \"./domain\"\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\n\nexport const paginateRoomFx = paginationDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n","import { guard, sample } from \"effector\"\nimport { $currentRoomId, MessageResponse } from \"@/room\"\nimport { paginateRoomFx } from \"@/room-pagination/private\"\nimport { loadRoomFx } from \"@/room/private\"\nimport { UpdateMessagesFxParams } from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const updateMessages = messagesDomain.event<void>()\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import { forward } from \"effector\"\nimport { EventType, User } from \"matrix-js-sdk\"\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\nimport { \n    client,\n    createClient,\n    onClientEvent,\n    prependClientParams\n} from \"@/matrix-client\"\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\nimport { MatrixEvent, Room, RoomMember, LoginPayload } from \"@/types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    prependAndCreateClientFx,\n    destroyClientAndLogoutFx \n} from \"./public\"\nimport { AuthData } from \"./types\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport { updateMessages } from \"@/room-messages/private\"\nimport { roomMessage } from \"@/room-messages\"\nimport { directRoomCreated, roomCreated } from \"@/room\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId() as string)\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = (room.currentState\n            .getStateEvents(\n                \"m.room.create\" as EventType, \n                undefined as any\n            ) as any)[0]?.getContent()?.isDirect\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    }: LoginPayload = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(() => client().logout())\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\nprependAndCreateClientFx.use(async ({ prependParams, createClientParams }) => {\n    prependClientParams(prependParams)\n    createClient()\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(createClientParams)\n})\n\ndestroyClientAndLogoutFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import matrix, { Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport { attach, forward, guard, sample } from \"effector\"\nimport {\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { MatrixEvent, RoomMember } from \"@/types\"\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    $loadFilter,\n    getRoomMembers,\n    getRoomMembersFx,\n    initRoomFx,\n    loadRoomFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    updatePowerLevelFx, updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $timelineWindow,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    onRoomLoaded,\n    createRoomFx,\n    getAllUsersFx,\n    inviteUserFx,\n    kickUserRoomFx,\n    renameRoomFx,\n    joinRoomFx,\n    createDirectRoomFx,\n    clearCurrentRoomState,\n    $myPowerLevel,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForRedact,\n    $requiredPowerLevelForDefaultState,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL, DEFAULT_SET_DEFAULT_STATE_POWERLEVEL, DEFAULT_REDACT_POWERLEVEL,\n} from \"./public\"\nimport { LoadRoomFxParams, Visibility } from \"./types\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = (\n        room.currentState\n            .getStateEvents(\"m.room.power_levels\", \"\") as MatrixEvent[])[0]\n        .getContent() as any\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => toRoomWithActivity(room, maxHistory))\n})\n\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    const { room_id } = await client().createRoom(options)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room), 99)\n})\n","import { attach, forward, guard, sample } from \"effector\"\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\nimport { paginateForwardFx } from \"@/room-pagination/private\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx\n} from \"./public\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport {\n    RoomNotFound,\n    EventNotFound,\n    ClientNotInitialized,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n","import { combine, forward, guard } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    $currentRoomId,\n    $loadRoomFxPending,\n    loadRoom\n} from \"@/room\"\nimport { $loadFilter } from \"@/room/private\"\nimport { setMessages } from \"@/room-messages/private\"\nimport { getMessages } from \"@/utils\"\nimport {\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    paginateBackward,\n    paginateForward,\n    onPaginateForwardDone\n} from \"./public\"\nimport { TimelineWindowUndefined } from \"@/errors\"\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n"],"names":["root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","prependAndCreateClientFx","destroyClientAndLogoutFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","Visibility","Preset","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","MsgType","clientStore","options","messageBatchInterval","callbacksStore","createClient","removeAllListeners","matrix","forEach","eventName","cb","on","client","prependClientParams","opts","ms","restOpts","undefined","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","hasUserReadEvent","getUserId","mergedMessageEvents","filter","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","getIsDirectRoomsIds","directRooms","getAccountData","Object","values","flatMap","setDirectRoom","creator","currentState","getStateEvents","prevData","setAccountData","[object Object]","$loadFilter","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","map","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","membership","state","prevState","rooms","e","member","use","login","async","response","fetch","baseUrl","method","body","JSON","stringify","type","token","user_id","access_token","device_id","well_known","json","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","profileInfo","getProfileInfo","avatar_url","displayname","prependParams","createClientParams","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","err","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","timeout","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","members","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","isLive","canPaginateBackward","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","order_by","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","room_id","createRoom","findRoomId","is_direct","private","creation_content","reason","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","catch","og:url","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}