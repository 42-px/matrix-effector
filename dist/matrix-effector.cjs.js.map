{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/room/types.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/types/index.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"invite\"\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    presence: \"online\" | \"offline\" | \"unavailable\"\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"Can't invite users into a direct room\")\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType\n} from \"./types\"\n\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const isDirect = matrixRoom.currentState\n        .getStateEvents(\n            \"m.room.create\",\n            \"\"\n        )?.getContent()?.isDirect\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const { creator } = cl.getRoom(roomId).currentState\n        .getStateEvents(\n            \"m.room.create\",\n        )[0].getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = room.currentState\n            .getStateEvents(\n                \"m.room.create\"\n            )[0]?.getContent<StateEventsContent>()?.isDirect\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => toggleTypingUser(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUsersFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getCurrentRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getCurrentRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getCurrentRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const isDirect = client().getRoom(roomId).currentState\n        .getStateEvents(\n            \"m.room.create\",\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) throw new CantInviteUsers()\n    for (const id of usersIds) {\n        await client().invite(roomId, id)\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { guard, sample } from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    updateMessages,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: undefined })\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$currentRoomInvitedMembers","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","MsgType","MatrixMembershipType","clientStore","messagesDomain","$messages","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","isDirect","currentState","getStateEvents","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","DMUser","getMember","guessDMUserId","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getCurrentRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","getMembers","roomMember","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","usersIds","_client$getRoom$curre","_client$getRoom$curre2","id","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","roomMessageBatch","loadNewMessagesFx","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}