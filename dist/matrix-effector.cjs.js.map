<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { MappedRoomMember } from \"./room/types\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","clientStore","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","id","_context7","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
=======
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/verification/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/init.ts"],"sourcesContent":["export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    EventType,\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport enum Presence {\r\n    online = \"online\",\r\n    offline = \"offline\", \r\n    unavailable = \"unavailable\",\r\n} \r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    presence: Presence\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n    seen?: boolean\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n    powerlevels: RoomPowerLevelsContent\r\n    myPowerLevel: number\r\n    canKick: boolean\r\n    canBan: boolean\r\n    canInvite: boolean\r\n    canSendEvents: {\r\n        canChangeRoomAvatar: boolean\r\n        canChangeHistoryVisivility: boolean\r\n        canChangeRoomName: boolean\r\n        canChangeRoomPowerLevels: boolean\r\n        canChangeCanonicalAlias: boolean\r\n        canChangeRoomEncryption: boolean\r\n        canChangeRoomTobstone: boolean\r\n        canChangeRoomServerAcl: boolean\r\n    }\r\n    canRedact: boolean\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n\r\ntype EventPowerLevels = {\r\n    [EventType.RoomCanonicalAlias]: number\r\n    [EventType.RoomAvatar]: number\r\n    [EventType.RoomEncryption]: number\r\n    [EventType.RoomHistoryVisibility]: number\r\n    [EventType.RoomName]: number\r\n    [EventType.RoomPowerLevels]: number\r\n    [EventType.RoomServerAcl]: number\r\n    [EventType.RoomTombstone]: number\r\n}\r\n\r\nexport type RoomPowerLevelsContent = {\r\n    ban: number\r\n    events: EventPowerLevels\r\n    users: {\r\n        [key in string]: number \r\n    }\r\n    redact: number\r\n    kick: number\r\n    invite: number\r\n    state_default: number\r\n    users_default: number\r\n    events_default: number\r\n}\r\n\r\nexport enum UserRole {\r\n    admin = \"Admin\",\r\n    moderator = \"Moderator\"\r\n}\r\n","import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams,\r\n    CreateClientParams, \r\n    AuthData \r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message,\r\n    UserRole\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n  role?: UserRole\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    \"public\" = \"public\",\r\n    \"private\" = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type InviteUsersParams = {\r\n    roomId: string\r\n    usersIds: string[]\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n\r\nexport type SendTypingParams = {\r\n    roomId: string\r\n    isTyping: boolean\r\n  }\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    RoomMember,\r\n    User\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixMembershipType,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams,\r\n    LoadRoomFxParams,\r\n    MessageResponse,\r\n    SendTypingParams,\r\n    InviteUsersParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $typingMembers = roomDomain\r\n    .store<{[key in string]: RoomMember[]}>({})\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.join) ?? []\r\n    )\r\nexport const $currentRoomInvitedMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.invite\r\n        ) ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const clearTypingMember = roomDomain.event<void>()\r\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const findDirectRoomByUserIdFx = roomDomain\r\n    .effect<string, MappedRoom, Error>()\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const sendTypingFx = roomDomain\r\n    .effect<SendTypingParams, void, Error>()\r\nexport const getMembersByRoomIdFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const getRoomMemberFx = roomDomain\r\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        // clientStore.clearStores()\r\n        clientStore = null as any\r\n    }\r\n}\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","import { \n    IVerificationChannel \n} from \"matrix-js-sdk/lib/crypto/verification/request/Channel\"\nimport {\n    VerificationRequest \n} from \"matrix-js-sdk/lib/crypto/verification/request/VerificationRequest\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: string\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview,\r\n    PaginateParams,\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\nexport const $currentRoomUnreadMessageCount = messagesDomain\r\n    .store<number | null>(null)\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\r\nexport const onPaginateForwardDone = messagesDomain.event<void>()\r\nexport const paginateForward = messagesDomain.event<PaginateParams>()\r\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\r\n\r\nexport const $paginateForwardPending = messagesDomain.store(false)\r\nexport const $paginateBackwardPending = messagesDomain.store(false)\r\nexport const $canPaginateBackward = messagesDomain.store(true)\r\nexport const $canPaginateForward = messagesDomain.store(true)\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const d = root.domain(\"profile\")\r\n","import { d } from \"./domain\"\r\n\r\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\r\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\r\n\r\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    SetDeviceVerifiedFx \n} from \"./types\"\n\nexport const setDeviceVerifiedFx = verificationDomain\n    .effect<SetDeviceVerifiedFx, void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\ntype DeviceIsVerifired = boolean\n\nexport const setMyDeviceVerifiedFx = verificationDomain\n    .effect<void, DeviceIsVerifired, Error>()\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const checkDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\nexport const $deviceIsVerifired = verificationDomain\n    .store<DeviceIsVerifired | null>(null)\n\nexport const startMyDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\nexport const CantInviteUsers = \r\n  createCustomError(\"CantInviteUsers\")\r\nexport const NotEnoughPermissions = \r\n  createCustomError(\"NotEnoughPermissions\")\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room,\r\n    EventType\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { StateEventsContent } from \"./app/types\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType,\r\n    RoomPowerLevelsContent,\r\n    UserRole\r\n} from \"./types\"\r\n\r\nexport const toMessageSeen = (\r\n    message: Message,\r\n    myUserId: string,\r\n    room: Room\r\n): Message => {\r\n    message.seen = room.getJoinedMembers().some((member) => {\r\n        if (member.userId === myUserId) return false\r\n        return room\r\n            .hasUserReadEvent(member.userId, message.originalEventId)\r\n    })\r\n    return message\r\n}\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = (): string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId() as string,\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    let role = undefined\r\n    if (roomMember.powerLevel === 100) {\r\n        role = UserRole.admin\r\n    } else if (roomMember.powerLevel === 50) {\r\n        role = UserRole.moderator\r\n    }\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n        role,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    const powerLevelsContent = matrixRoom.currentState\r\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\r\n        .getContent<RoomPowerLevelsContent>()\r\n\r\n    const isDirect = Boolean(matrixRoom.currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate, \r\n            \"\"\r\n        )?.getContent<StateEventsContent>()?.isDirect)\r\n\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n\r\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\r\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\r\n    const myUserId = cl.getUserId()\r\n\r\n    if (lastMessage) {\r\n        if (lastMessage.sender.userId !== myUserId) {\r\n            lastMessage.seen = matrixRoom\r\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \r\n        } else {\r\n            lastMessage = toMessageSeen(\r\n                lastMessage,\r\n                myUserId,\r\n                matrixRoom\r\n            )\r\n        }\r\n    }\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \r\n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\r\n        powerlevels: powerLevelsContent,\r\n        myPowerLevel,\r\n        canBan: myPowerLevel >= powerLevelsContent.ban,\r\n        canKick: myPowerLevel >= powerLevelsContent.kick,\r\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\r\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\r\n        canSendEvents: {\r\n            canChangeHistoryVisivility: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomHistoryVisibility]\r\n            ),\r\n            canChangeRoomAvatar: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\r\n            ),\r\n            canChangeRoomName: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\r\n            ),\r\n            canChangeRoomPowerLevels: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomPowerLevels]\r\n            ),\r\n            canChangeCanonicalAlias: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomCanonicalAlias]\r\n            ),\r\n            canChangeRoomEncryption: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomEncryption]\r\n            ),\r\n            canChangeRoomServerAcl: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomServerAcl]\r\n            ),\r\n            canChangeRoomTobstone: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomTombstone]\r\n            )\r\n        }\r\n    }\r\n}\r\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client } from \"./matrix-client\"\r\nimport { MappedRoomMember } from \"./room/types\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport {\r\n    mergeMessageEvents,\r\n    toMessageSeen\r\n} from \"./mappers\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams,\r\n    Message,\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\r\n    const messages = timelineWindow.getEvents()\r\n        .filter((event) => (\r\n            [\r\n                ROOM_MESSAGE_EVENT,\r\n                ROOM_REDACTION_EVENT\r\n            ].includes(event.getType())))\r\n        .reduce(mergeMessageEvents, [])\r\n    const cl = client()\r\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\r\n    const room = cl.getRoom(roomId as string)\r\n    if (!room) throw new RoomNotFound()\r\n    const myMessages = []\r\n    const otherMessages = []\r\n    const myUserId = cl.getUserId()\r\n    let findFirstSeenOtherMessage = false\r\n    let findFirstSeenMyMessage = false\r\n    for (let i = messages.length - 1; i >= 0; i--) {\r\n        if (messages[i].sender.userId === myUserId) {\r\n            myMessages.push(messages[i])\r\n        } else {\r\n            otherMessages.push(messages[i])\r\n        }\r\n    }\r\n    myMessages.forEach((message) => {\r\n        if (findFirstSeenMyMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message = toMessageSeen(message, myUserId, room)\r\n            findFirstSeenMyMessage = Boolean(message.seen)\r\n        }\r\n    })\r\n    otherMessages.forEach((message) => {\r\n        if (findFirstSeenOtherMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message.seen = room\r\n                .hasUserReadEvent(myUserId, message.originalEventId)\r\n            findFirstSeenOtherMessage = message.seen\r\n        }\r\n    })\r\n    return messages\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (\r\n    roomId: string,\r\n    companion?: string\r\n): Promise<{}> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        ).getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n\r\n    if(companion) {\r\n        return await cl.setAccountData(DIRECT_EVENT, {\r\n            ...prevData,\r\n            [companion]: [roomId]\r\n        })\r\n        \r\n    }\r\n    return await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n\r\nexport const uid = (): string => ( \r\n    `id${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`\r\n)\r\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    EventType,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    toggleTypingUser\r\n} from \"@/room\"\r\nimport { \r\n    initCryptoFx, \r\n} from \"@/crypto\"\r\nimport {\r\n    onVerificationRequest, \r\n    MyVerificationRequest,\r\n    checkDeviceVerificationFx\r\n} from \"@/verification\"\r\nimport { UserNotFound } from \"@/errors\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\nimport { uid } from \"@/utils\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {            \r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = Boolean(room.currentState\r\n            .getStateEvents(\r\n                EventType.RoomCreate,\r\n                \"\"\r\n            )?.getContent<StateEventsContent>()?.isDirect)\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", async (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            await client().uploadKeys()\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            updateMessages()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => {\r\n            onRoomMemberUpdate(member)\r\n            toggleTypingUser(member)\r\n        }\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"crossSigning.keysChanged\",\r\n        (...args) => console.log(\"crossSigning.keysChanged\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequest\",\r\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequestCancellation\",\r\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\r\n    ],\r\n    [\r\n        \"crypto.secrets.requestCancelled\",\r\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\r\n    ],\r\n    [\r\n        \"crypto.suggestKeyRestore\",\r\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request.unknown\",\r\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request\", (\r\n            request: MyVerificationRequest\r\n        ) => {\r\n            request.id = uid()\r\n            onVerificationRequest(request)\r\n        }\r\n    ],\r\n    [\r\n        \"crypto.warning\",\r\n        (...args) => console.log(\"crypto.warning\", args)\r\n    ],\r\n    [\r\n        \"crypto.willUpdateDevices\",\r\n        (userIds: string[], initialFetch?: boolean) => {\r\n            // If we didn't know about *any* devices before (ie. it's fresh login),\r\n            // then they are all pre-existing devices, so ignore this and set the\r\n            // devicesAtStart list to the devices that we see after the fetch.\r\n            if (initialFetch) return\r\n            console.log(\"crypto.willUpdateDevices\", userIds)\r\n            const cl = client()\r\n            const myUserId = cl.getUserId()\r\n            if (userIds.includes(myUserId)) {\r\n                console.log(\r\n                    cl.getStoredDevicesForUser(myUserId).map(d => d.deviceId)\r\n                )\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        \"crypto.devicesUpdated\",\r\n        (userIds: string[]) => {\r\n            const cl = client()\r\n            if (userIds.includes(cl.getUserId())) {\r\n                checkDeviceVerificationFx()\r\n            }\r\n            if (!userIds.includes(cl.getUserId())) return\r\n        }\r\n    ]\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    } = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const cl = client()\r\n    const { store } = cl\r\n    if (store) await store.startup()\r\n    await initCryptoFx()\r\n    await cl.startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { client } from \"../matrix-client\"\r\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\r\n\r\nupdateDisplayNameFx.use(async (newDisplayName) => {\r\n    await client().setDisplayName(newDisplayName)\r\n})\r\n\r\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\r\n    await client().setAvatarUrl(newAvatarUrl)\r\n})\r\n\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    EventType,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { DIRECT_EVENT } from \"@/constants\"\r\nimport { \r\n    CantInviteUsers,\r\n    ClientNotInitialized,\r\n    NotEnoughPermissions,\r\n    RoomNotFound, \r\n    TimelineWindowUndefined,\r\n    UserNotFound \r\n} from \"@/errors\"\r\nimport { getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    initRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx,\r\n    $loadFilter,\r\n    loadRoomFx,\r\n    findDirectRoomByUserIdFx,\r\n    $typingMembers,\r\n    clearTypingMember,\r\n    toggleTypingUser,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    sendTypingFx,\r\n    getMembersByRoomIdFx,\r\n    inviteUsersFx,\r\n    getRoomMemberFx\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\n\r\nconst TYPING_SERVER_TIMEOUT = 5000\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst getRoomMembersFx = attach({\r\n    effect: getMembersByRoomIdFx\r\n})\r\n\r\nconst getCurrentRoomFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n$typingMembers\r\n    .on(toggleTypingUser, (members, member) => {\r\n        if(member.typing) {\r\n            if (members[member.roomId]) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...members[member.roomId], member] \r\n                }\r\n            } \r\n            return {\r\n                ...members,\r\n                [member.roomId]: [member] \r\n            }\r\n        } \r\n        if (members[member.roomId]) {\r\n            if (members[member.roomId].length > 1) {\r\n                const filteredUsers = members[member.roomId]\r\n                    .filter(({userId}) => userId !== member.userId)\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...filteredUsers] \r\n                }\r\n            }\r\n            delete members[member.roomId]\r\n            return {\r\n                ...members, \r\n            }\r\n        }\r\n    })\r\n    .reset(clearTypingMember)\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getCurrentRoomFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetMembersByRoomIdFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return room.getMembers()\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n        const room = client().getRoom(roomId)\r\n        if (!room) throw new RoomNotFound()\r\n        const membersCache: { [id: string]: RoomMember } = {}\r\n        const searchResponse = await client().search({\r\n            body: {\r\n                search_categories: {\r\n                    room_events: {\r\n                        search_term: term,\r\n                        keys: [\"content.body\"],\r\n                        filter: {\r\n                            rooms: [roomId],\r\n                        },\r\n                        order_by: orderBy,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n        return searchResponse\r\n            .search_categories\r\n            .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n                const event = new MatrixEvent(result)\r\n                const senderId = event.getSender()\r\n                if (membersCache[senderId] === undefined) {\r\n                    membersCache[senderId] = room\r\n                        .getMember(senderId) as RoomMember\r\n                }\r\n                event.sender = membersCache[senderId]\r\n                return toMessage(event)\r\n            })\r\n    })\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id, user.userId)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    try {\r\n        await client().invite(roomId, userId)\r\n        await client().sendSharedHistoryKeys(roomId, [userId])\r\n    } catch (e: any) {\r\n        if (e.httpStatus === 403) {\r\n            throw new NotEnoughPermissions(\r\n                \"Not enough permissions to invite users\"\r\n            )\r\n        }\r\n    }\r\n})\r\n\r\ninviteUsersFx.use( async ({usersIds, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    for (const id of usersIds) {\r\n        try {\r\n            await client().invite(roomId, id)\r\n            await client().sendSharedHistoryKeys(roomId, [id])\r\n        } catch (e: any) {\r\n            if (e.httpStatus === 403) {\r\n                throw new NotEnoughPermissions()\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n\r\nfindDirectRoomByUserIdFx.use((userId) => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\r\n    const roomId = directRooms[userId] && directRooms[userId][0]\r\n    if(!roomId) throw new RoomNotFound()\r\n    const room = cl.getRoom(roomId)\r\n    if(!room) throw new RoomNotFound()\r\n    return toMappedRoom(room)\r\n})\r\n\r\nsendTypingFx.use(async ({ roomId, isTyping }) => {\r\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\r\n})\r\n\r\ngetRoomMemberFx.use(({ roomId, userId }) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\r\n    const roomMember = matrixRoom?.getMember(userId)\r\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\r\n    return roomMember\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach, guard, sample} from \"effector\"\r\nimport {\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    loadRoomFx,\r\n    MessageResponse\r\n} from \"@/room\"\r\nimport {\r\n    UpdateMessagesFxParams,\r\n    PaginateParams,\r\n    PaginateRoomFxParams\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const paginateRoomFx = messagesDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n\r\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\r\n    .effect<string, number, Error>()\r\n","import {\r\n    attach,\r\n    combine,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport matrix, {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    debounce,\r\n    throttle\r\n} from \"patronum\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $loadFilter,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx,\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx,\r\n    updateCurrentRoomUnreadMessageCountFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    updateMessages,\r\n    $currentRoomUnreadMessageCount,\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst THROTTLE_MESSAGE_TIME = 800\r\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n\r\n$currentRoomUnreadMessageCount\r\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\r\n    .reset($currentRoomId)\r\n\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n          && !backwardPaginationPending\r\n          && !forwardPaginationPending\r\n          && !roomLoading\r\n)\r\n    \r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n    \r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n    \r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n    \r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\n\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        throttle({\r\n            source: updateMessages,\r\n            timeout: THROTTLE_MESSAGE_TIME\r\n        }),\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nguard({\r\n    clock: $messages.updates,\r\n    source: $currentRoomId,\r\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\r\n    target: updateCurrentRoomUnreadMessageCountFx\r\n})\r\n\r\nsample({\r\n    clock: debounce({\r\n        source: sendMessageFx.done,\r\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\r\n    }),\r\n    fn: ({ params, result }) => ({\r\n        roomId: params.roomId,\r\n        eventId: result.event_id\r\n    }),\r\n    target: readAllMessagesFx\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n    await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n    \r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\n\r\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const count = matrixRoom.getUnreadNotificationCount()\r\n    return count ?? 0\r\n})\r\n","import { client } from \"@/matrix-client\"\nimport { checkDeviceVerificationFx } from \"@/verification\"\nimport { \n    checkBackupKeyFx, \n    initCryptoFx, \n} from \"./public\"\n\ncheckBackupKeyFx.use(async () => client().getKeyBackupEnabled())\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) return\n    await cl.initCrypto()\n    // @TODO Убрать хардкод. Настройка ручной верификации каждой сессии\n    cl.setCryptoTrustCrossSignedDevices(false)\n    // const backupInfo = await cl.getKeyBackupVersion()\n    // if (backupInfo) {\n    // don't await, because this can take a long times\n    // cl.restoreKeyBackupWithSecretStorage(backupInfo).then(console.log)\n    // }\n    checkDeviceVerificationFx()\n})\n\n","import { verificationDomain } from \"./domain\"\nimport { MyVerificationRequest, OnVerificationRequestFxParams } from \"./types\"\n\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n","import { forward, sample, guard } from \"effector\"\nimport { client } from \"@/matrix-client\"\nimport { \n    updateVerificationPhase, \n    cancelVerificationEvent, \n    confirmSASVerificationFx, \n    onVerificationRequestFx, \n    startSASFx, \n    updateDeviceVerification,\n} from \"./private\"\nimport { \n    $currentVerificationEvent, \n    $deviceIsVerifired, \n    $verificationEvents, \n    cancelVerificationEventFx,\n    checkDeviceVerificationFx,\n    confirmSASVerification,\n    startMyDeviceVerificationFx,\n    onVerificationRequest, \n    setCurrentVerificationEvent, \n    setDeviceVerifiedFx, \n    setMyDeviceVerifiedFx, \n    startSASVerification, \n} from \"./public\"\nimport { MyVerificationRequest, Phase } from \"./types\"\nimport { uid } from \"@/utils\"\n\n$deviceIsVerifired\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => [\n        ...requests, req\n    ]))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(cancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n// @TODO When copying an object, access to private properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(cancelVerificationEvent, \n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n\nforward({\n    from: setMyDeviceVerifiedFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: cancelVerificationEvent\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nsetMyDeviceVerifiedFx.use(async () => {\n    const cl = client()\n    const userId = cl.getUserId()\n    const deviceId = cl.getDeviceId()\n    await cl.setDeviceKnown(userId, deviceId, true)\n    await cl.setDeviceVerified(userId, deviceId, true)\n    return true\n})\n\nsetDeviceVerifiedFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    await cl.setDeviceKnown(userId, deviceId, true)\n    await cl.setDeviceVerified(userId, deviceId, true)\n})\n\nonVerificationRequestFx.use(async ({request, currentRequest}) => {\n    const onChange = (e: any) => {\n        if (request.accepting || request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n        }\n\n        if (request.cancelled) {\n            request.off(\"change\", onChange)\n            cancelVerificationEvent(request)\n        } else if (request.phase === Phase.Done) {\n            request.off(\"change\", onChange)\n            setMyDeviceVerifiedFx()\n            cancelVerificationEvent(request)\n        }\n        if (\n            request.phase === Phase.Started \n            && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n        }\n    }\n    request.on(\"change\", onChange)\n    const phaseArray = [Phase.Cancelled, Phase.Done, Phase.Requested]\n    // Восстановление предыдущего реквеста после обновления приложения\n    if (!currentRequest && !phaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n    // При запуски приложения, если девайс не верифицирован, то отправляется запрос на верификацию и мы сразу его принимаем\n    if (request.isSelfVerification) {\n        request.accept()\n    }\n    return request\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", () => {\n        updateVerificationPhase()\n    })\n    verifier.once(\"cancel\", () => cancelVerificationEvent(request))\n\n    try {\n        await verifier.verify()\n    } catch (e) {\n        cancelVerificationEvent(request)\n    }\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    try {\n        await (currentRequest.verifier as any).sasEvent.confirm()\n    } finally {\n        updateVerificationPhase()\n    }\n})\n\ncheckDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    cl.downloadKeys([userId])\n    const device = cl.getStoredDevice(  \n        userId, deviceId\n    )\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\n    const isVerified = crossSigningInfo.checkDeviceTrust(\n        crossSigningInfo,\n        device,\n        false,\n        true,\n    ).isCrossSigningVerified()\n\n    updateDeviceVerification(isVerified)\n})\n\nstartMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = uid()\n    onVerificationRequest(request)\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","verificationDomain","setDeviceVerifiedFx","cancelVerificationEventFx","setMyDeviceVerifiedFx","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","checkDeviceVerificationFx","$deviceIsVerifired","startMyDeviceVerificationFx","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","uid","Date","now","toString","Math","random","substring","cryptoDomain","checkBackupKeyFx","initCryptoFx","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","e","args","console","log","request","id","userIds","initialFetch","getStoredDevicesForUser","deviceId","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","_client$getRoom$curre","_client$getRoom$curre2","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_client$getRoom$curre3","_client$getRoom$curre4","_context7","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","getKeyBackupEnabled","initCrypto","setCryptoTrustCrossSignedDevices","startSASFx","confirmSASVerificationFx","cancelVerificationEvent","updateVerificationPhase","updateDeviceVerification","onVerificationRequestFx","isVerified","requests","req","currentReq","canceledReq","currentRequest","getDeviceId","setDeviceKnown","setDeviceVerified","onChange","accepting","phase","Ready","cancelled","off","Done","Started","verifier","sasEvent","phaseArray","Cancelled","Requested","isSelfVerification","accept","beginKeyVerification","once","verify","cancel","confirm","downloadKeys","device","getStoredDevice","crossSigningInfo","getStoredCrossSigningForUser","checkDeviceTrust","isCrossSigningVerified","requestVerification","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
>>>>>>> 228796a (add request verifie flow)
=======
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/verification/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/init.ts"],"sourcesContent":["export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    EventType,\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport enum Presence {\r\n    online = \"online\",\r\n    offline = \"offline\", \r\n    unavailable = \"unavailable\",\r\n} \r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    isVerified: boolean\r\n    presence: Presence\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n    seen?: boolean\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n    powerlevels: RoomPowerLevelsContent\r\n    myPowerLevel: number\r\n    canKick: boolean\r\n    canBan: boolean\r\n    canInvite: boolean\r\n    canSendEvents: {\r\n        canChangeRoomAvatar: boolean\r\n        canChangeHistoryVisivility: boolean\r\n        canChangeRoomName: boolean\r\n        canChangeRoomPowerLevels: boolean\r\n        canChangeCanonicalAlias: boolean\r\n        canChangeRoomEncryption: boolean\r\n        canChangeRoomTobstone: boolean\r\n        canChangeRoomServerAcl: boolean\r\n    }\r\n    canRedact: boolean\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n\r\ntype EventPowerLevels = {\r\n    [EventType.RoomCanonicalAlias]: number\r\n    [EventType.RoomAvatar]: number\r\n    [EventType.RoomEncryption]: number\r\n    [EventType.RoomHistoryVisibility]: number\r\n    [EventType.RoomName]: number\r\n    [EventType.RoomPowerLevels]: number\r\n    [EventType.RoomServerAcl]: number\r\n    [EventType.RoomTombstone]: number\r\n}\r\n\r\nexport type RoomPowerLevelsContent = {\r\n    ban: number\r\n    events: EventPowerLevels\r\n    users: {\r\n        [key in string]: number \r\n    }\r\n    redact: number\r\n    kick: number\r\n    invite: number\r\n    state_default: number\r\n    users_default: number\r\n    events_default: number\r\n}\r\n\r\nexport enum UserRole {\r\n    admin = \"Admin\",\r\n    moderator = \"Moderator\"\r\n}\r\n","import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams,\r\n    CreateClientParams, \r\n    AuthData \r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message,\r\n    UserRole\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n  role?: UserRole\r\n  allDeviceVerified: boolean\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    \"public\" = \"public\",\r\n    \"private\" = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type InviteUsersParams = {\r\n    roomId: string\r\n    usersIds: string[]\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n\r\nexport type SendTypingParams = {\r\n    roomId: string\r\n    isTyping: boolean\r\n  }\r\n\r\nexport type MyDeviceInfo =  {\r\n    verified: boolean\r\n    deviceId: string\r\n    displayName: string | null\r\n}\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    RoomMember,\r\n    User\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixMembershipType,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams,\r\n    LoadRoomFxParams,\r\n    MessageResponse,\r\n    SendTypingParams,\r\n    InviteUsersParams,\r\n    MyDeviceInfo,\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $typingMembers = roomDomain\r\n    .store<{[key in string]: RoomMember[]}>({})\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.join) ?? []\r\n    )\r\nexport const $currentRoomInvitedMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.invite\r\n        ) ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const clearTypingMember = roomDomain.event<void>()\r\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const findDirectRoomByUserIdFx = roomDomain\r\n    .effect<string, MappedRoom, Error>()\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const sendTypingFx = roomDomain\r\n    .effect<SendTypingParams, void, Error>()\r\nexport const getMembersByRoomIdFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const getRoomMemberFx = roomDomain\r\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\r\n\r\nexport const getUserDevicesFx = roomDomain\r\n    .effect<string, MyDeviceInfo[], Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        // clientStore.clearStores()\r\n        clientStore = null as any\r\n    }\r\n}\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","import { \n    IVerificationChannel \n} from \"matrix-js-sdk/lib/crypto/verification/request/Channel\"\nimport {\n    VerificationRequest \n} from \"matrix-js-sdk/lib/crypto/verification/request/VerificationRequest\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: string\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview,\r\n    PaginateParams,\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\nexport const $currentRoomUnreadMessageCount = messagesDomain\r\n    .store<number | null>(null)\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\r\nexport const onPaginateForwardDone = messagesDomain.event<void>()\r\nexport const paginateForward = messagesDomain.event<PaginateParams>()\r\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\r\n\r\nexport const $paginateForwardPending = messagesDomain.store(false)\r\nexport const $paginateBackwardPending = messagesDomain.store(false)\r\nexport const $canPaginateBackward = messagesDomain.store(true)\r\nexport const $canPaginateForward = messagesDomain.store(true)\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const d = root.domain(\"profile\")\r\n","import { d } from \"./domain\"\r\n\r\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\r\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\r\n\r\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    StartVerificationDeviceParams, \n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\n\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkMyDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startMyDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\nexport const CantInviteUsers = \r\n  createCustomError(\"CantInviteUsers\")\r\nexport const NotEnoughPermissions = \r\n  createCustomError(\"NotEnoughPermissions\")\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room,\r\n    EventType\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { StateEventsContent } from \"./app/types\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType,\r\n    RoomPowerLevelsContent,\r\n    UserRole\r\n} from \"./types\"\r\n\r\nexport const toMessageSeen = (\r\n    message: Message,\r\n    myUserId: string,\r\n    room: Room\r\n): Message => {\r\n    message.seen = room.getJoinedMembers().some((member) => {\r\n        if (member.userId === myUserId) return false\r\n        return room\r\n            .hasUserReadEvent(member.userId, message.originalEventId)\r\n    })\r\n    return message\r\n}\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = (): string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId() as string,\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => {\r\n    const cl = client()\r\n    return {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n        isVerified: cl.checkUserTrust(user.userId).isVerified(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    const cl = client()\r\n    const isMe = cl.getUserId() === user.userId\r\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\r\n    const allDeviceVerified = cl.getStoredDevicesForUser(user.userId)\r\n        .some((device) => {\r\n            let verified: boolean\r\n            if (isMe) {\r\n                verified = crossSigningInfo.checkDeviceTrust(\r\n                    crossSigningInfo,\r\n                    device,\r\n                    false,\r\n                    true,\r\n                ).isCrossSigningVerified()\r\n            } else {\r\n                verified = device.isVerified()\r\n            }\r\n            return verified\r\n        })\r\n    let role = undefined\r\n    if (roomMember.powerLevel === 100) {\r\n        role = UserRole.admin\r\n    } else if (roomMember.powerLevel === 50) {\r\n        role = UserRole.moderator\r\n    }\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n        role,\r\n        allDeviceVerified,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    const powerLevelsContent = matrixRoom.currentState\r\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\r\n        .getContent<RoomPowerLevelsContent>()\r\n\r\n    const isDirect = Boolean(matrixRoom.currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate, \r\n            \"\"\r\n        )?.getContent<StateEventsContent>()?.isDirect)\r\n\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n\r\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\r\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\r\n    const myUserId = cl.getUserId()\r\n\r\n    if (lastMessage) {\r\n        if (lastMessage.sender.userId !== myUserId) {\r\n            lastMessage.seen = matrixRoom\r\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \r\n        } else {\r\n            lastMessage = toMessageSeen(\r\n                lastMessage,\r\n                myUserId,\r\n                matrixRoom\r\n            )\r\n        }\r\n    }\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \r\n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\r\n        powerlevels: powerLevelsContent,\r\n        myPowerLevel,\r\n        canBan: myPowerLevel >= powerLevelsContent.ban,\r\n        canKick: myPowerLevel >= powerLevelsContent.kick,\r\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\r\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\r\n        canSendEvents: {\r\n            canChangeHistoryVisivility: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomHistoryVisibility]\r\n            ),\r\n            canChangeRoomAvatar: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\r\n            ),\r\n            canChangeRoomName: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\r\n            ),\r\n            canChangeRoomPowerLevels: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomPowerLevels]\r\n            ),\r\n            canChangeCanonicalAlias: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomCanonicalAlias]\r\n            ),\r\n            canChangeRoomEncryption: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomEncryption]\r\n            ),\r\n            canChangeRoomServerAcl: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomServerAcl]\r\n            ),\r\n            canChangeRoomTobstone: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomTombstone]\r\n            )\r\n        }\r\n    }\r\n}\r\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client } from \"./matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport {\r\n    mergeMessageEvents,\r\n    toMessageSeen\r\n} from \"./mappers\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams,\r\n    Message,\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\r\n    const messages = timelineWindow.getEvents()\r\n        .filter((event) => (\r\n            [\r\n                ROOM_MESSAGE_EVENT,\r\n                ROOM_REDACTION_EVENT\r\n            ].includes(event.getType())))\r\n        .reduce(mergeMessageEvents, [])\r\n    const cl = client()\r\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\r\n    const room = cl.getRoom(roomId as string)\r\n    if (!room) throw new RoomNotFound()\r\n    const myMessages = []\r\n    const otherMessages = []\r\n    const myUserId = cl.getUserId()\r\n    let findFirstSeenOtherMessage = false\r\n    let findFirstSeenMyMessage = false\r\n    for (let i = messages.length - 1; i >= 0; i--) {\r\n        if (messages[i].sender.userId === myUserId) {\r\n            myMessages.push(messages[i])\r\n        } else {\r\n            otherMessages.push(messages[i])\r\n        }\r\n    }\r\n    myMessages.forEach((message) => {\r\n        if (findFirstSeenMyMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message = toMessageSeen(message, myUserId, room)\r\n            findFirstSeenMyMessage = Boolean(message.seen)\r\n        }\r\n    })\r\n    otherMessages.forEach((message) => {\r\n        if (findFirstSeenOtherMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message.seen = room\r\n                .hasUserReadEvent(myUserId, message.originalEventId)\r\n            findFirstSeenOtherMessage = message.seen\r\n        }\r\n    })\r\n    return messages\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (\r\n    roomId: string,\r\n    companion?: string\r\n): Promise<{}> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        ).getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n\r\n    if(companion) {\r\n        return await cl.setAccountData(DIRECT_EVENT, {\r\n            ...prevData,\r\n            [companion]: [roomId]\r\n        })\r\n        \r\n    }\r\n    return await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n\r\nexport const uid = (): string => ( \r\n    `id${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`\r\n)\r\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    EventType,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    toggleTypingUser\r\n} from \"@/room\"\r\nimport { \r\n    initCryptoFx, \r\n} from \"@/crypto\"\r\nimport {\r\n    onVerificationRequest, \r\n    MyVerificationRequest,\r\n    onUpdateDeviceList,\r\n} from \"@/verification\"\r\nimport { UserNotFound } from \"@/errors\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\nimport { uid } from \"@/utils\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {            \r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = Boolean(room.currentState\r\n            .getStateEvents(\r\n                EventType.RoomCreate,\r\n                \"\"\r\n            )?.getContent<StateEventsContent>()?.isDirect)\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", async (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            await client().uploadKeys()\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            updateMessages()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => {\r\n            onRoomMemberUpdate(member)\r\n            toggleTypingUser(member)\r\n        }\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"crossSigning.keysChanged\",\r\n        (...args) => console.log(\"crossSigning.keysChanged\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequest\",\r\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequestCancellation\",\r\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\r\n    ],\r\n    [\r\n        \"crypto.secrets.requestCancelled\",\r\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\r\n    ],\r\n    [\r\n        \"crypto.suggestKeyRestore\",\r\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request.unknown\",\r\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request\", (\r\n            request: MyVerificationRequest\r\n        ) => {\r\n            request.id = uid()\r\n            onVerificationRequest(request)\r\n        }\r\n    ],\r\n    [\r\n        \"crypto.warning\",\r\n        (...args) => console.warn(\"crypto.warning\", args)\r\n    ],\r\n    [\r\n        \"crypto.keyBackupStatus\",\r\n        (enabled) => console.log(\"keyBackupStatus\", enabled)\r\n    ],\r\n    [\r\n        \"crypto.willUpdateDevices\",\r\n        (userIds: string[], initialFetch?: boolean) => {\r\n            // If we didn't know about *any* devices before (ie. it's fresh login),\r\n            // then they are all pre-existing devices, so ignore this and set the\r\n            // devicesAtStart list to the devices that we see after the fetch.\r\n            if (initialFetch) return\r\n            onUpdateDeviceList(userIds)\r\n        }\r\n    ],\r\n    [\"crypto.devicesUpdated\", onUpdateDeviceList],\r\n    [\"deviceVerificationChanged\", onUpdateDeviceList],\r\n    [\"userTrustStatusChanged\", onUpdateDeviceList]\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    } = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const cl = client()\r\n    const { store } = cl\r\n    if (store) await store.startup()\r\n    await initCryptoFx()\r\n    await cl.startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { client } from \"../matrix-client\"\r\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\r\n\r\nupdateDisplayNameFx.use(async (newDisplayName) => {\r\n    await client().setDisplayName(newDisplayName)\r\n})\r\n\r\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\r\n    await client().setAvatarUrl(newAvatarUrl)\r\n})\r\n\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    EventType,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\n\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { DIRECT_EVENT } from \"@/constants\"\r\nimport { \r\n    CantInviteUsers,\r\n    ClientNotInitialized,\r\n    NotEnoughPermissions,\r\n    RoomNotFound, \r\n    TimelineWindowUndefined,\r\n    UserNotFound \r\n} from \"@/errors\"\r\nimport { getMessages, setDirectRoom } from \"@/utils\"\r\nimport { onUpdateDeviceList } from \"@/verification\"\r\n\r\nimport {\r\n    initRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx,\r\n    $loadFilter,\r\n    loadRoomFx,\r\n    findDirectRoomByUserIdFx,\r\n    $typingMembers,\r\n    clearTypingMember,\r\n    toggleTypingUser,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    sendTypingFx,\r\n    getMembersByRoomIdFx,\r\n    inviteUsersFx,\r\n    getRoomMemberFx,\r\n    getUserDevicesFx,\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\n\r\nconst TYPING_SERVER_TIMEOUT = 5000\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst getRoomMembersFx = attach({\r\n    effect: getMembersByRoomIdFx\r\n})\r\n\r\nconst getCurrentRoomFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n$typingMembers\r\n    .on(toggleTypingUser, (members, member) => {\r\n        if(member.typing) {\r\n            if (members[member.roomId]) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...members[member.roomId], member] \r\n                }\r\n            } \r\n            return {\r\n                ...members,\r\n                [member.roomId]: [member] \r\n            }\r\n        } \r\n        if (members[member.roomId]) {\r\n            if (members[member.roomId].length > 1) {\r\n                const filteredUsers = members[member.roomId]\r\n                    .filter(({userId}) => userId !== member.userId)\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...filteredUsers] \r\n                }\r\n            }\r\n            delete members[member.roomId]\r\n            return {\r\n                ...members, \r\n            }\r\n        }\r\n    })\r\n    .reset(clearTypingMember)\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getCurrentRoomFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetMembersByRoomIdFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return room.getMembers()\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n        const room = client().getRoom(roomId)\r\n        if (!room) throw new RoomNotFound()\r\n        const membersCache: { [id: string]: RoomMember } = {}\r\n        const searchResponse = await client().search({\r\n            body: {\r\n                search_categories: {\r\n                    room_events: {\r\n                        search_term: term,\r\n                        keys: [\"content.body\"],\r\n                        filter: {\r\n                            rooms: [roomId],\r\n                        },\r\n                        order_by: orderBy,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n        return searchResponse\r\n            .search_categories\r\n            .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n                const event = new MatrixEvent(result)\r\n                const senderId = event.getSender()\r\n                if (membersCache[senderId] === undefined) {\r\n                    membersCache[senderId] = room\r\n                        .getMember(senderId) as RoomMember\r\n                }\r\n                event.sender = membersCache[senderId]\r\n                return toMessage(event)\r\n            })\r\n    })\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id, user.userId)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    try {\r\n        await client().invite(roomId, userId)\r\n        await client().sendSharedHistoryKeys(roomId, [userId])\r\n    } catch (e: any) {\r\n        if (e.httpStatus === 403) {\r\n            throw new NotEnoughPermissions(\r\n                \"Not enough permissions to invite users\"\r\n            )\r\n        }\r\n    }\r\n})\r\n\r\ninviteUsersFx.use( async ({usersIds, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    for (const id of usersIds) {\r\n        try {\r\n            await client().invite(roomId, id)\r\n            await client().sendSharedHistoryKeys(roomId, [id])\r\n        } catch (e: any) {\r\n            if (e.httpStatus === 403) {\r\n                throw new NotEnoughPermissions()\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n\r\nfindDirectRoomByUserIdFx.use((userId) => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\r\n    const roomId = directRooms[userId] && directRooms[userId][0]\r\n    if(!roomId) throw new RoomNotFound()\r\n    const room = cl.getRoom(roomId)\r\n    if(!room) throw new RoomNotFound()\r\n    return toMappedRoom(room)\r\n})\r\n\r\nsendTypingFx.use(async ({ roomId, isTyping }) => {\r\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\r\n})\r\n\r\ngetRoomMemberFx.use(({ roomId, userId }) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\r\n    const roomMember = matrixRoom?.getMember(userId)\r\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\r\n    return roomMember\r\n})\r\n\r\ngetUserDevicesFx.use((id) => {\r\n    const cl = client()\r\n    const isMe = cl.getUserId() === id\r\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\r\n    return cl.getStoredDevicesForUser(id).map((device) => {\r\n        let verified: boolean\r\n        if (isMe) {\r\n            verified = crossSigningInfo.checkDeviceTrust(\r\n                crossSigningInfo,\r\n                device,\r\n                false,\r\n                true,\r\n            ).isCrossSigningVerified()\r\n        } else {\r\n            verified = device.isVerified()\r\n        }\r\n        return {\r\n            deviceId: device.deviceId,\r\n            displayName: device.getDisplayName(),\r\n            verified,\r\n        }\r\n    })\r\n\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach, guard, sample} from \"effector\"\r\nimport {\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    loadRoomFx,\r\n    MessageResponse\r\n} from \"@/room\"\r\nimport {\r\n    UpdateMessagesFxParams,\r\n    PaginateParams,\r\n    PaginateRoomFxParams\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const paginateRoomFx = messagesDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n\r\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\r\n    .effect<string, number, Error>()\r\n","import {\r\n    attach,\r\n    combine,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport matrix, {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    debounce,\r\n    throttle\r\n} from \"patronum\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $loadFilter,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx,\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx,\r\n    updateCurrentRoomUnreadMessageCountFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    updateMessages,\r\n    $currentRoomUnreadMessageCount,\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst THROTTLE_MESSAGE_TIME = 800\r\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n\r\n$currentRoomUnreadMessageCount\r\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\r\n    .reset($currentRoomId)\r\n\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n          && !backwardPaginationPending\r\n          && !forwardPaginationPending\r\n          && !roomLoading\r\n)\r\n    \r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n    \r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n    \r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n    \r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\n\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        throttle({\r\n            source: updateMessages,\r\n            timeout: THROTTLE_MESSAGE_TIME\r\n        }),\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nguard({\r\n    clock: $messages.updates,\r\n    source: $currentRoomId,\r\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\r\n    target: updateCurrentRoomUnreadMessageCountFx\r\n})\r\n\r\nsample({\r\n    clock: debounce({\r\n        source: sendMessageFx.done,\r\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\r\n    }),\r\n    fn: ({ params, result }) => ({\r\n        roomId: params.roomId,\r\n        eventId: result.event_id\r\n    }),\r\n    target: readAllMessagesFx\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n    await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n    \r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\n\r\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const count = matrixRoom.getUnreadNotificationCount()\r\n    return count ?? 0\r\n})\r\n","import { client } from \"@/matrix-client\"\nimport { checkMyDeviceVerificationFx } from \"@/verification\"\nimport { \n    checkBackupKeyFx, \n    initCryptoFx, \n} from \"./public\"\n\ncheckBackupKeyFx.use(async () => client().getKeyBackupEnabled())\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) return\n    await cl.initCrypto()\n    // @TODO Убрать хардкод. Настройка ручной верификации каждой сессии\n    cl.setCryptoTrustCrossSignedDevices(false)\n    // const backupInfo = await cl.getKeyBackupVersion()\n    // if (backupInfo) {\n    // don't await, because this can take a long times\n    // cl.restoreKeyBackupWithSecretStorage(backupInfo).then(console.log)\n    // }\n    checkMyDeviceVerificationFx()\n})\n\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams \n} from \"./types\"\n\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\n","import { forward, sample, guard } from \"effector\"\nimport { client } from \"@/matrix-client\"\n\nimport { uid } from \"@/utils\"\n\nimport { \n    updateVerificationPhase, \n    onCancelVerificationEvent,\n    confirmSASVerificationFx, \n    onVerificationRequestFx, \n    startSASFx, \n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n} from \"./private\"\nimport { \n    $currentVerificationEvent, \n    $deviceIsVerified, \n    $verificationEvents, \n    cancelVerificationEventFx,\n    checkMyDeviceVerificationFx,\n    confirmSASVerification,\n    startMyDeviceVerificationFx,\n    onVerificationRequest, \n    setCurrentVerificationEvent, \n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel, \n} from \"./public\"\nimport { MyVerificationRequest, Phase } from \"./types\"\n\n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => [\n        ...requests, req\n    ]))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n// @TODO When copying an object, access to private properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n\nforward({\n    from: checkMyDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkMyDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx \n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData, \n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(async ({request, currentRequest}) => {\n    const onChange = (e: any) => {\n        if (request.accepting || request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n        }\n\n        if (request.cancelled) {\n            request.off(\"change\", onChange)\n            onCancelVerificationEvent(request)\n        }\n        if (request.phase === Phase.Done) {\n            request.off(\"change\", onChange)\n            onCancelVerificationEvent(request)\n        }\n        if (\n            request.phase === Phase.Started \n            && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n        }\n    }\n    request.on(\"change\", onChange)\n    request.on(\"error\", console.error)\n    const phaseArray = [Phase.Cancelled, Phase.Done, Phase.Requested]\n    // Восстановление предыдущего реквеста после обновления приложения\n    if (!currentRequest && !phaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n    // При запуски приложения, если девайс не верифицирован, то отправляется запрос на верификацию и мы сразу его принимаем\n    if (request.isSelfVerification) {\n        request.accept()\n    }\n    return request\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", () => {\n        updateVerificationPhase()\n    })\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n\n    try {\n        await verifier.verify()\n    } catch (e) {\n        onCancelVerificationEvent(request)\n    }\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    try {\n        await (currentRequest.verifier as any).sasEvent.confirm()\n    } finally {\n        updateVerificationPhase()\n    }\n})\n\ncheckMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    cl.downloadKeys([userId])\n    const device = cl.getStoredDevice(  \n        userId, deviceId\n    )\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\n    const isVerified = crossSigningInfo.checkDeviceTrust(\n        crossSigningInfo,\n        device,\n        false,\n        true,\n    ).isCrossSigningVerified()\n\n    return isVerified\n})\n\nstartMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = uid()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({userId, deviceId}) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","verificationDomain","$currentVerificationEvent","setCurrentVerificationEvent","cancelVerificationEventFx","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","$deviceIsVerified","onUpdateDeviceList","checkMyDeviceVerificationFx","startVerificationDevice","startMyDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","cl","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","isVerified","checkUserTrust","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","uid","Date","now","toString","Math","random","substring","cryptoDomain","checkBackupKeyFx","initCryptoFx","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","e","args","console","log","request","id","warn","enabled","userIds","initialFetch","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","error","rules","global","setPushRuleEnabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","isMe","crossSigningInfo","getStoredCrossSigningForUser","allDeviceVerified","getStoredDevicesForUser","device","checkDeviceTrust","isCrossSigningVerified","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","_client$getRoom$curre","_client$getRoom$curre2","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_client$getRoom$curre3","_client$getRoom$curre4","_context7","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","getKeyBackupEnabled","initCrypto","setCryptoTrustCrossSignedDevices","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","updateDeviceVerification","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","requests","req","currentReq","canceledReq","currentRequest","onChange","accepting","phase","Ready","cancelled","off","Done","Started","verifier","sasEvent","phaseArray","Cancelled","Requested","isSelfVerification","accept","beginKeyVerification","once","verify","cancel","confirm","getDeviceId","downloadKeys","getStoredDevice","requestVerification","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
>>>>>>> d906366 (WIP)
=======
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/verification/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/idbHelper.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/crypto/cryptoCallbacks.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getUserDevicesFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        // clientStore.clearStores()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { VerificationRequest, IVerificationChannel } from \"matrix-js-sdk\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: string\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    StartVerificationDeviceParams, \n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\n\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkMyDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startMyDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n\nexport const uid = (): string => ( \n    `id${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`\n)\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n","import { \n    decodeRecoveryKey, \n    deriveKey, \n    DeviceTrustLevel, \n    encodeBase64, \n    encodeUnpaddedBase64, \n    ICryptoCallbacks, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\n\nconst secretStorageBeingAccessed = false\nconst secretStorageKeys: Record<string, Uint8Array> = {}\nconst secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    if (isCachingAllowed()) {\n        secretStorageKeys[keyId] = key\n        secretStorageKeyInfo[keyId] = keyInfo\n    }\n}\n\nfunction makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (\n  keyParams: { passphrase: string; recoveryKey: string }\n) => Promise<Uint8Array> {\n    return async ({ passphrase, recoveryKey }) => {\n        if (passphrase) {\n            return deriveKey(\n                passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else {\n            return decodeRecoveryKey(recoveryKey)\n        }\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cli = client()\n    let keyId = await cli.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if(!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    }\n    console.log(\"keyid\", keyInfos[keyId])\n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        if(keyInfoEntries[0]) {\n            keyId = keyInfoEntries[0][0]\n            keyInfo = keyInfoEntries[0][1]\n        }\n    }\n\n    // Check the in-memory cache\n    if (isCachingAllowed() && secretStorageKeys[keyId]) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (\n            await client().checkSecretStorageKey(dehydrationCache.key, keyInfo)\n        ) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n\n    const recoveryKey = await client().createRecoveryKeyFromPassphrase(\"----\")\n    const key = await inputToKey(\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        {passphrase: \"\", recoveryKey: recoveryKey?.keyInfo?.pubkey}\n    )\n    // console.log(recoveryKey);\n    // const key = recoveryKey.keyInfo?.key;\n\n    console.log(\"GOT IT\", key, keyId)\n    // Save to cache to avoid future prompts in the current session\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    if(keyId && key) {\n        return [keyId, key]\n    }\n        \n    return [\"\", new Uint8Array()]\n    \n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\"})\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if(key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey = \n  async (userId: string, deviceId: string): Promise<string | null> => {\n      if (!window.crypto || !window.crypto.subtle) {\n          return null\n      }\n      let data\n      try {\n          data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n      } catch (e) {\n          console.log(\"idbLoad for pickleKey failed\", e)\n      }\n      if (!data) {\n          return null\n      }\n      if (!data.encrypted || !data.iv || !data.cryptoKey) {\n          console.log(\"Badly formatted pickle key\")\n          return null\n      }\n\n      const additionalData = new Uint8Array(userId.length + deviceId.length + 1)\n      for (let i = 0; i < userId.length; i++) {\n          additionalData[i] = userId.charCodeAt(i)\n      }\n      additionalData[userId.length] = 124 // \"|\"\n      for (let i = 0; i < deviceId.length; i++) {\n          additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n      }\n\n      try {\n          const key = await crypto.subtle.decrypt(\n              { name: \"AES-GCM\", iv: data.iv, additionalData }, data.cryptoKey,\n              data.encrypted,\n          )\n          return encodeUnpaddedBase64(key)\n      } catch (e) {\n          console.log(\"Error decrypting pickle key\")\n          return null\n      }\n  }\n\nexport const CreatePickleKey = \n  async (userId: string, deviceId: string): Promise<string | null> => {\n      if (!window.crypto || !window.crypto.subtle) {\n          return null\n      }\n      const crypto = window.crypto\n      const randomArray = new Uint8Array(32)\n      crypto.getRandomValues(randomArray)\n      const cryptoKey = await crypto.subtle.generateKey(\n          { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n      )\n      const iv = new Uint8Array(32)\n      crypto.getRandomValues(iv)\n\n      const additionalData = new Uint8Array(userId.length + deviceId.length + 1)\n      for (let i = 0; i < userId.length; i++) {\n          additionalData[i] = userId.charCodeAt(i)\n      }\n      additionalData[userId.length] = 124 // \"|\"\n      for (let i = 0; i < deviceId.length; i++) {\n          additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n      }\n\n      const encrypted = await crypto.subtle.encrypt(\n          { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n      )\n\n      try {\n          await IdbSave(\n              \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n          )\n      } catch (e) {\n          return null\n      }\n      return encodeUnpaddedBase64(randomArray)\n  }\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport { \n    checkBackupKeyFx,\n    initCryptoFx, onCrossSigningKeyChange, \n} from \"@/crypto\"\nimport {\n    onVerificationRequest, \n    MyVerificationRequest,\n    onUpdateDeviceList,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { uid } from \"@/utils\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {            \n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            request.id = uid()\n            onVerificationRequest(request)\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", onUpdateDeviceList],\n    [\"deviceVerificationChanged\", onUpdateDeviceList],\n    [\"userTrustStatusChanged\", onUpdateDeviceList]\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getUserDevicesFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    const isDirect = room?.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    const isDirect = room?.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetUserDevicesFx.use(async (userId) => {\n    const cl = client()\n    // await cl.downloadKeys([userId], true)\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n","import { client } from \"@/matrix-client\"\nimport { checkMyDeviceVerificationFx } from \"@/verification\"\nimport { forward } from \"effector\"\nimport { crossSigningChangeFx } from \"./private\"\nimport { \n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    onCrossSigningKeyChange, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncheckBackupKeyFx.use(async () => client().getKeyBackupEnabled())\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n    if (!cl.initCrypto) return\n\n    await cl.initCrypto()\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n    const backupInfo = await cl.getKeyBackupVersion()\n    if (backupInfo) {\n    // don't await, because this can take a long times\n        cl.restoreKeyBackupWithSecretStorage(backupInfo).then(console.log)\n    }\n    checkMyDeviceVerificationFx()\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n    checkMyDeviceVerificationFx()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams \n} from \"./types\"\n\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n","import { forward, sample, guard, attach } from \"effector\"\nimport { client } from \"@/matrix-client\"\nimport { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport { MappedUser } from \"@/types\"\nimport { uid } from \"@/utils\"\nimport { createDirectRoomFx } from \"@/room\"\n\nimport { \n    updateVerificationPhase, \n    onCancelVerificationEvent,\n    confirmSASVerificationFx, \n    onVerificationRequestFx, \n    startSASFx, \n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n} from \"./private\"\nimport { \n    $currentVerificationEvent, \n    $deviceIsVerified, \n    $verificationEvents, \n    cancelVerificationEventFx,\n    checkMyDeviceVerificationFx,\n    confirmSASVerification,\n    startMyDeviceVerificationFx,\n    onVerificationRequest, \n    setCurrentVerificationEvent, \n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests, \n} from \"./public\"\nimport { MyVerificationRequest, Phase } from \"./types\"\n\nconst TEN_MINUTES = 36000\n\n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n// @TODO When copying an object, access to private properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n\nforward({\n    from: checkMyDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkMyDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx \n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData, \n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(async ({request, currentRequest}) => {\n    const onChange = () => {\n        console.log(\"request UPDATE\")\n        if (request.accepting || request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n        }\n\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n        }\n\n        if (\n            request.phase === Phase.Started \n            && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const phaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested, \n        Phase.Started\n    ]\n    if (!currentRequest && !phaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        // if (\n        //     request.phase === Phase.Started \n        //   && !(request.verifier as any).sasEvent\n        // ) {\n        //     await startSASFx(request)\n        // }\n    }\n\n    return request\n})\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    try {\n        await (currentRequest.verifier as any).sasEvent.confirm()\n    } finally {\n        updateVerificationPhase()\n    }\n})\n\ncheckMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = uid()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({userId, deviceId}) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","verificationDomain","$currentVerificationEvent","setCurrentVerificationEvent","cancelVerificationEventFx","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","$deviceIsVerified","onUpdateDeviceList","checkMyDeviceVerificationFx","startVerificationDevice","startMyDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","cl","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","isVerified","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","indexedDB","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","uid","Date","now","toString","Math","random","substring","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","dehydrationCache","cacheSecretStorageKey","keyId","keyInfo","makeInputToKey","passphrase","recoveryKey","deriveKey","salt","iterations","decodeRecoveryKey","keyInfos","keys","cli","getDefaultSecretStorageKeyId","Uint8Array","console","log","keyInfoEntries","Object","entries","checkSecretStorageKey","inputToKey","createRecoveryKeyFromPassphrase","_recoveryKey$keyInfo","pubkey","getDehydrationKey","deviceId","requestId","deviceTrust","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","crypto","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","args","id","warn","userIds","initialFetch","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeys","leave","_cl$getAccountData","isTyping","sendTyping","isMe","getStoredDevicesForUser","device","checkDeviceTrust","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","crossSigningChangeFx","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","updateDeviceVerification","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","requests","req","currentReq","canceledReq","currentRequest","onChange","accepting","phase","Ready","cancelled","off","VerificationRequestEvent","Change","cancellationCode","Done","Started","verifier","sasEvent","phaseArray","Cancelled","Requested","accept","beginKeyVerification","once","verify","cancel","confirm","getDeviceId","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
>>>>>>> 021d9ae (WIP)
