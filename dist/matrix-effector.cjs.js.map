{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    EventType,\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport enum Presence {\r\n    online = \"online\",\r\n    offline = \"offline\", \r\n    unavailable = \"unavailable\",\r\n} \r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    presence: Presence\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n    seen?: boolean\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n    powerlevels: RoomPowerLevelsContent\r\n    myPowerLevel: number\r\n    canKick: boolean\r\n    canBan: boolean\r\n    canInvite: boolean\r\n    canSendEvents: {\r\n        canChangeRoomAvatar: boolean\r\n        canChangeHistoryVisivility: boolean\r\n        canChangeRoomName: boolean\r\n        canChangeRoomPowerLevels: boolean\r\n        canChangeCanonicalAlias: boolean\r\n        canChangeRoomEncryption: boolean\r\n        canChangeRoomTobstone: boolean\r\n        canChangeRoomServerAcl: boolean\r\n    }\r\n    canRedact: boolean\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n\r\ntype EventPowerLevels = {\r\n    [EventType.RoomCanonicalAlias]: number\r\n    [EventType.RoomAvatar]: number\r\n    [EventType.RoomEncryption]: number\r\n    [EventType.RoomHistoryVisibility]: number\r\n    [EventType.RoomName]: number\r\n    [EventType.RoomPowerLevels]: number\r\n    [EventType.RoomServerAcl]: number\r\n    [EventType.RoomTombstone]: number\r\n}\r\n\r\nexport type RoomPowerLevelsContent = {\r\n    ban: number\r\n    events: EventPowerLevels\r\n    users: {\r\n        [key in string]: number \r\n    }\r\n    redact: number\r\n    kick: number\r\n    invite: number\r\n    state_default: number\r\n    users_default: number\r\n    events_default: number\r\n}\r\n\r\nexport enum UserRole {\r\n    admin = \"Admin\",\r\n    moderator = \"Moderator\"\r\n}\r\n","import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams,\r\n    CreateClientParams, \r\n    AuthData \r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message,\r\n    UserRole\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n  role?: UserRole\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    \"public\" = \"public\",\r\n    \"private\" = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type InviteUsersParams = {\r\n    roomId: string\r\n    usersIds: string[]\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n\r\nexport type SendTypingParams = {\r\n    roomId: string\r\n    isTyping: boolean\r\n  }\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    RoomMember,\r\n    User\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixMembershipType,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams,\r\n    LoadRoomFxParams,\r\n    MessageResponse,\r\n    SendTypingParams,\r\n    InviteUsersParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $typingMembers = roomDomain\r\n    .store<{[key in string]: RoomMember[]}>({})\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.join) ?? []\r\n    )\r\nexport const $currentRoomInvitedMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.invite\r\n        ) ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const clearTypingMember = roomDomain.event<void>()\r\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const findDirectRoomByUserIdFx = roomDomain\r\n    .effect<string, MappedRoom, Error>()\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const sendTypingFx = roomDomain\r\n    .effect<SendTypingParams, void, Error>()\r\nexport const getMembersByRoomIdFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n}\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview,\r\n    PaginateParams,\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\nexport const $currentRoomUnreadMessageCount = messagesDomain\r\n    .store<number | null>(null)\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\r\nexport const onPaginateForwardDone = messagesDomain.event<void>()\r\nexport const paginateForward = messagesDomain.event<PaginateParams>()\r\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\r\n\r\nexport const $paginateForwardPending = messagesDomain.store(false)\r\nexport const $paginateBackwardPending = messagesDomain.store(false)\r\nexport const $canPaginateBackward = messagesDomain.store(true)\r\nexport const $canPaginateForward = messagesDomain.store(true)\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const d = root.domain(\"profile\")\r\n","import { d } from \"./domain\"\r\n\r\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\r\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\r\n\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\nexport const CantInviteUsers = \r\n  createCustomError(\"CantInviteUsers\")\r\nexport const NotEnoughPermissions = \r\n  createCustomError(\"NotEnoughPermissions\")\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room,\r\n    EventType\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { StateEventsContent } from \"./app/types\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType,\r\n    RoomPowerLevelsContent,\r\n    UserRole\r\n} from \"./types\"\r\n\r\nexport const toMessageSeen = (\r\n    message: Message,\r\n    myUserId: string,\r\n    room: Room\r\n): Message => {\r\n    message.seen = room.getJoinedMembers().some((member) => {\r\n        if (member.userId === myUserId) return false\r\n        return room\r\n            .hasUserReadEvent(member.userId, message.originalEventId)\r\n    })\r\n    return message\r\n}\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = (): string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId() as string,\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    let role = undefined\r\n    if (roomMember.powerLevel === 100) {\r\n        role = UserRole.admin\r\n    } else if (roomMember.powerLevel === 50) {\r\n        role = UserRole.moderator\r\n    }\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n        role,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    const powerLevelsContent = matrixRoom.currentState\r\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\r\n        .getContent<RoomPowerLevelsContent>()\r\n\r\n    const isDirect = Boolean(matrixRoom.currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate, \r\n            \"\"\r\n        )?.getContent<StateEventsContent>()?.isDirect)\r\n\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n\r\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\r\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\r\n    const myUserId = cl.getUserId()\r\n\r\n    if (lastMessage) {\r\n        if (lastMessage.sender.userId !== myUserId) {\r\n            lastMessage.seen = matrixRoom\r\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \r\n        } else {\r\n            lastMessage = toMessageSeen(\r\n                lastMessage,\r\n                myUserId,\r\n                matrixRoom\r\n            )\r\n        }\r\n    }\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \r\n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\r\n        powerlevels: powerLevelsContent,\r\n        myPowerLevel,\r\n        canBan: myPowerLevel >= powerLevelsContent.ban,\r\n        canKick: myPowerLevel >= powerLevelsContent.kick,\r\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\r\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\r\n        canSendEvents: {\r\n            canChangeHistoryVisivility: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomHistoryVisibility]\r\n            ),\r\n            canChangeRoomAvatar: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\r\n            ),\r\n            canChangeRoomName: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\r\n            ),\r\n            canChangeRoomPowerLevels: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomPowerLevels]\r\n            ),\r\n            canChangeCanonicalAlias: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomCanonicalAlias]\r\n            ),\r\n            canChangeRoomEncryption: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomEncryption]\r\n            ),\r\n            canChangeRoomServerAcl: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomServerAcl]\r\n            ),\r\n            canChangeRoomTobstone: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomTombstone]\r\n            )\r\n        }\r\n    }\r\n}\r\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client } from \"./matrix-client\"\r\nimport { MappedRoomMember } from \"./room/types\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport {\r\n    mergeMessageEvents,\r\n    toMessageSeen\r\n} from \"./mappers\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams,\r\n    Message,\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\r\n    const messages = timelineWindow.getEvents()\r\n        .filter((event) => (\r\n            [\r\n                ROOM_MESSAGE_EVENT,\r\n                ROOM_REDACTION_EVENT\r\n            ].includes(event.getType())))\r\n        .reduce(mergeMessageEvents, [])\r\n    const cl = client()\r\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\r\n    const room = cl.getRoom(roomId as string)\r\n    if (!room) throw new RoomNotFound()\r\n    const myMessages = []\r\n    const otherMessages = []\r\n    const myUserId = cl.getUserId()\r\n    let findFirstSeenOtherMessage = false\r\n    let findFirstSeenMyMessage = false\r\n    for (let i = messages.length - 1; i >= 0; i--) {\r\n        if (messages[i].sender.userId === myUserId) {\r\n            myMessages.push(messages[i])\r\n        } else {\r\n            otherMessages.push(messages[i])\r\n        }\r\n    }\r\n    myMessages.forEach((message) => {\r\n        if (findFirstSeenMyMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message = toMessageSeen(message, myUserId, room)\r\n            findFirstSeenMyMessage = Boolean(message.seen)\r\n        }\r\n    })\r\n    otherMessages.forEach((message) => {\r\n        if (findFirstSeenOtherMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message.seen = room\r\n                .hasUserReadEvent(myUserId, message.originalEventId)\r\n            findFirstSeenOtherMessage = message.seen\r\n        }\r\n    })\r\n    return messages\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (\r\n    roomId: string,\r\n    companion?: string\r\n): Promise<{}> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        ).getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n\r\n    if(companion) {\r\n        return await cl.setAccountData(DIRECT_EVENT, {\r\n            ...prevData,\r\n            [companion]: [roomId]\r\n        })\r\n        \r\n    }\r\n    return await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    EventType,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    toggleTypingUser\r\n} from \"@/room\"\r\nimport { UserNotFound } from \"@/errors\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = Boolean(room.currentState\r\n            .getStateEvents(\r\n                EventType.RoomCreate,\r\n                \"\"\r\n            )?.getContent<StateEventsContent>()?.isDirect)\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            updateMessages()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => {\r\n            onRoomMemberUpdate(member)\r\n            toggleTypingUser(member)\r\n        }\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    } = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const { store } = client()\r\n    if (store) await store.startup()\r\n    await client().startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { client } from \"../matrix-client\"\r\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\r\n\r\nupdateDisplayNameFx.use(async (newDisplayName) => {\r\n    await client().setDisplayName(newDisplayName)\r\n})\r\n\r\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\r\n    await client().setAvatarUrl(newAvatarUrl)\r\n})\r\n\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    EventType,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { DIRECT_EVENT } from \"@/constants\"\r\nimport { \r\n    CantInviteUsers,\r\n    ClientNotInitialized,\r\n    NotEnoughPermissions,\r\n    RoomNotFound, \r\n    TimelineWindowUndefined,\r\n    UserNotFound \r\n} from \"@/errors\"\r\nimport { getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    initRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx,\r\n    $loadFilter,\r\n    loadRoomFx,\r\n    findDirectRoomByUserIdFx,\r\n    $typingMembers,\r\n    clearTypingMember,\r\n    toggleTypingUser,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    sendTypingFx,\r\n    getMembersByRoomIdFx,\r\n    inviteUsersFx\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\n\r\nconst TYPING_SERVER_TIMEOUT = 5000\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst getRoomMembersFx = attach({\r\n    effect: getMembersByRoomIdFx\r\n})\r\n\r\nconst getCurrentRoomFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n$typingMembers\r\n    .on(toggleTypingUser, (members, member) => {\r\n        if(member.typing) {\r\n            if (members[member.roomId]) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...members[member.roomId], member] \r\n                }\r\n            } \r\n            return {\r\n                ...members,\r\n                [member.roomId]: [member] \r\n            }\r\n        } \r\n        if (members[member.roomId]) {\r\n            if (members[member.roomId].length > 1) {\r\n                const filteredUsers = members[member.roomId]\r\n                    .filter(({userId}) => userId !== member.userId)\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...filteredUsers] \r\n                }\r\n            }\r\n            delete members[member.roomId]\r\n            return {\r\n                ...members, \r\n            }\r\n        }\r\n    })\r\n    .reset(clearTypingMember)\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getCurrentRoomFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetMembersByRoomIdFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return room.getMembers()\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n        const room = client().getRoom(roomId)\r\n        if (!room) throw new RoomNotFound()\r\n        const membersCache: { [id: string]: RoomMember } = {}\r\n        const searchResponse = await client().search({\r\n            body: {\r\n                search_categories: {\r\n                    room_events: {\r\n                        search_term: term,\r\n                        keys: [\"content.body\"],\r\n                        filter: {\r\n                            rooms: [roomId],\r\n                        },\r\n                        order_by: orderBy,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n        return searchResponse\r\n            .search_categories\r\n            .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n                const event = new MatrixEvent(result)\r\n                const senderId = event.getSender()\r\n                if (membersCache[senderId] === undefined) {\r\n                    membersCache[senderId] = room\r\n                        .getMember(senderId) as RoomMember\r\n                }\r\n                event.sender = membersCache[senderId]\r\n                return toMessage(event)\r\n            })\r\n    })\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id, user.userId)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    try {\r\n        await client().invite(roomId, userId)\r\n    } catch (e: any) {\r\n        if (e.httpStatus === 403) {\r\n            throw new NotEnoughPermissions(\r\n                \"Not enough permissions to invite users\"\r\n            )\r\n        }\r\n    }\r\n})\r\n\r\ninviteUsersFx.use( async ({usersIds, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    for (const id of usersIds) {\r\n        try {\r\n            await client().invite(roomId, id)\r\n        } catch (e: any) {\r\n            if (e.httpStatus === 403) {\r\n                throw new NotEnoughPermissions()\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n\r\nfindDirectRoomByUserIdFx.use((userId) => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\r\n    const roomId = directRooms[userId] && directRooms[userId][0]\r\n    if(!roomId) throw new RoomNotFound()\r\n    const room = cl.getRoom(roomId)\r\n    if(!room) throw new RoomNotFound()\r\n    return toMappedRoom(room)\r\n})\r\n\r\nsendTypingFx.use(async ({ roomId, isTyping }) => {\r\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach, guard, sample} from \"effector\"\r\nimport {\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    loadRoomFx,\r\n    MessageResponse\r\n} from \"@/room\"\r\nimport {\r\n    UpdateMessagesFxParams,\r\n    PaginateParams,\r\n    PaginateRoomFxParams\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const paginateRoomFx = messagesDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n\r\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\r\n    .effect<string, number, Error>()\r\n","import {\r\n    attach,\r\n    combine,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport matrix, {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    debounce,\r\n    throttle\r\n} from \"patronum\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $loadFilter,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx,\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx,\r\n    updateCurrentRoomUnreadMessageCountFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    updateMessages,\r\n    $currentRoomUnreadMessageCount,\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst THROTTLE_MESSAGE_TIME = 800\r\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n\r\n$currentRoomUnreadMessageCount\r\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\r\n    .reset($currentRoomId)\r\n\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n          && !backwardPaginationPending\r\n          && !forwardPaginationPending\r\n          && !roomLoading\r\n)\r\n    \r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n    \r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n    \r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n    \r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\n\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        throttle({\r\n            source: updateMessages,\r\n            timeout: THROTTLE_MESSAGE_TIME\r\n        }),\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nguard({\r\n    clock: $messages.updates,\r\n    source: $currentRoomId,\r\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\r\n    target: updateCurrentRoomUnreadMessageCountFx\r\n})\r\n\r\nsample({\r\n    clock: debounce({\r\n        source: sendMessageFx.done,\r\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\r\n    }),\r\n    fn: ({ params, result }) => ({\r\n        roomId: params.roomId,\r\n        eventId: result.event_id\r\n    }),\r\n    target: readAllMessagesFx\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n    await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n    \r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\n\r\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const count = matrixRoom.getUnreadNotificationCount()\r\n    return count ?? 0\r\n})\r\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","clientStore","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","_client$getRoom$curre","_client$getRoom$curre2","_context6","httpStatus","usersIds","_client$getRoom$curre3","_client$getRoom$curre4","id","_context7","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}