{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/idbHelper.ts","../src/verification/public.ts","../src/cryptoCallbacks.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/reducers.ts","../src/verification/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n\nexport const getUserDevicesFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        // TODO Не чистить сторы, если userId нового юзера совпадает со старым юзером\n        // clientStore.clearStores()\n        // clientStore.crypto.cryptoStore.deleteAllData()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { \n    VerificationRequest, \n    IVerificationChannel, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: number\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n\nexport type InputToKeyParams = {\n  passphrase?: string\n  recoveryKey?: string\n}\n\nexport type CheckRecoveryKeyParams = Pick<InputToKeyParams, \"recoveryKey\">\nexport type CheckPassphrase = Pick<InputToKeyParams, \"passphrase\">\n\nexport type CheckRecoveryKeyFxParams = CheckRecoveryKeyParams & {\n  resolveAndReject: SecretStorageKeyResolveAndReject\n}\n\nexport type CheckPassphraseFxParams = CheckPassphrase & {\n  resolveAndReject: SecretStorageKeyResolveAndReject\n}\n\nexport type SavedInputToKeyMethod = (\n  params: InputToKeyParams\n) => Promise<Uint8Array>\n\n\nexport type CheckCanVerifyFxParams = {\n  profileId: string\n}\n\nexport type SecretStorageKeyResolveAndReject = {\n  resolve:(input: InputToKeyParams) => void\n  reject: () => void\n} \n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { IRecoveryKey } from \"matrix-js-sdk/lib\"\nimport { verificationDomain } from \"./domain\"\nimport { \n    CheckCanVerifyFxParams,\n    CheckPassphrase,\n    CheckRecoveryKeyParams,\n    InputToKeyParams,\n    MyVerificationRequest, \n    SavedInputToKeyMethod, \n    SecretStorageKeyResolveAndReject, \n    StartVerificationDeviceParams, \n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\n// Emodji SAS Verification\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startThisDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n\n\n// Recovery Key\nexport const checkRecoveryKey = verificationDomain\n    .event<CheckRecoveryKeyParams>()\n\nexport const createRecoveryKeyFx = verificationDomain\n    .effect<void, IRecoveryKey, Error>()\n\nexport const saveInputToKeyMethod = verificationDomain\n    .event<SavedInputToKeyMethod>()\n\nexport const setSecretStorageKeyResolveAndReject = verificationDomain\n    .event<SecretStorageKeyResolveAndReject>()\n\nexport const startRecoveryKeyOrPassphraseVerification = verificationDomain\n    .event<void>()\n\n// passpharasse verification \n\nexport const checkPassphrase = verificationDomain\n    .event<CheckPassphrase>()\n\nexport const $hasPassphrase = verificationDomain.store<boolean>(false)\nexport const onHasPassphrase = verificationDomain.event<boolean>()\n\n// others\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkThisDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n    \nexport const checkCanVerifyFx = verificationDomain\n    .effect<CheckCanVerifyFxParams, boolean, Error>()\n\nexport const onUsersProfileUpdate = verificationDomain\n    .event<UserId[]>()\n","import { \n    decodeRecoveryKey, \n    deriveKey, \n    DeviceTrustLevel, \n    encodeBase64, \n    encodeUnpaddedBase64, \n    ICryptoCallbacks, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\nimport { \n    InputToKeyParams, \n    onHasPassphrase, \n    setSecretStorageKeyResolveAndReject, \n} from \"@/verification\"\n\nlet secretStorageBeingAccessed = false\nlet secretStorageKeys: Record<string, Uint8Array> = {}\nlet secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    secretStorageKeys[keyId] = key\n    secretStorageKeyInfo[keyId] = keyInfo\n}\n\nexport async function promptForBackupPassphrase(): Promise<Uint8Array> {\n    const key = new Uint8Array()\n\n    console.log(\"promptForBackupPassphrase\")\n    // const success = await finished;\n    // if (!success) throw new Error(\"Key backup prompt cancelled\");\n\n    return key\n}\n\nexport async function accessSecretStorage(\n    func = async () => {return}, \n    forceReset = false\n): Promise<any> {\n    const cl = client()\n    secretStorageBeingAccessed = true\n    try {\n\n        // await cli.bootstrapCrossSigning({\n        //     authUploadDeviceSigningKeys: async (makeRequest) => {\n        //         const { finished } = Modal.createDialog(InteractiveAuthDialog, {\n        //             title: _t(\"Setting up keys\"),\n        //             matrixClient: cli,\n        //             makeRequest,\n        //         })\n        //         const [confirmed] = await finished\n        //         if (!confirmed) {\n        //             throw new Error(\"Cross-signing key upload auth canceled\")\n        //         }\n        //     },\n        // })\n        await cl.bootstrapSecretStorage({\n            getKeyBackupPassphrase: promptForBackupPassphrase,\n        })\n\n        // const keyId = Object.keys(secretStorageKeys)[0]\n        // if (keyId && SettingsStore.getValue(\"feature_dehydration\")) {\n        //     let dehydrationKeyInfo = {}\n        //     if (secretStorageKeyInfo[keyId] && secretStorageKeyInfo[keyId].passphrase) {\n        //         dehydrationKeyInfo = { passphrase: secretStorageKeyInfo[keyId].passphrase }\n        //     }\n        //     console.log(\"Setting dehydration key\")\n        //     await cl.setDehydrationKey(secretStorageKeys[keyId], dehydrationKeyInfo, \"Backup device\")\n        // } else if (!keyId) {\n        //     console.warn(\"Not setting dehydration key: no SSSS key found\")\n        // } else {\n        //     console.log(\"Not setting dehydration key: feature disabled\")\n        // }\n\n        // `return await` needed here to ensure `finally` block runs after the\n        // inner operation completes.\n        return await func()\n    } catch (e) {\n        // SecurityCustomisations.catchAccessSecretStorageError?.(e)\n        console.error(e)\n        // Re-throw so that higher level logic can abort as needed\n        throw e\n    } finally {\n        // Clear secret storage key cache now that work is complete\n        secretStorageBeingAccessed = false\n        if (!isCachingAllowed()) {\n            secretStorageKeys = {}\n            secretStorageKeyInfo = {}\n        }\n    }\n}\n\n\nfunction makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (params: InputToKeyParams) => Promise<Uint8Array> {\n    return async (params) => {\n        if (params.passphrase) {\n            return deriveKey(\n                params.passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else if(params.recoveryKey) {\n            return decodeRecoveryKey(params.recoveryKey)\n        }\n        throw new Error(\"Invalid recoveryKey or passphrase\")\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cl = client()\n    let keyId = await cl.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if(!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    } else {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        if(keyInfoEntries[0]) {\n            keyId = keyInfoEntries[0][0]\n            keyInfo = keyInfoEntries[0][1]\n        }\n    }\n\n    // Check the in-memory cache\n    if (secretStorageKeys[keyId] && isCachingAllowed()) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n    const promise = new Promise<InputToKeyParams>((resolve, reject) => {\n        setSecretStorageKeyResolveAndReject({\n            reject,\n            resolve\n        })\n    })\n\n    onHasPassphrase(Boolean(keyInfo.passphrase))\n\n    const input = await promise\n\n    const key = await inputToKey(input)\n\n    if (dehydrationCache.key) {\n        if (\n            await client().checkSecretStorageKey(dehydrationCache.key, keyInfo)\n        ) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n    cacheSecretStorageKey(keyId, keyInfo, key)\n\n    return [keyId, key]\n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\"})\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if(key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey = \n  async (userId: string, deviceId: string): Promise<string | null> => {\n      if (!window.crypto || !window.crypto.subtle) {\n          return null\n      }\n      let data\n      try {\n          data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n      } catch (e) {\n          console.log(\"idbLoad for pickleKey failed\", e)\n      }\n      if (!data) {\n          return null\n      }\n      if (!data.encrypted || !data.iv || !data.cryptoKey) {\n          console.log(\"Badly formatted pickle key\")\n          return null\n      }\n\n      const additionalData = new Uint8Array(userId.length + deviceId.length + 1)\n      for (let i = 0; i < userId.length; i++) {\n          additionalData[i] = userId.charCodeAt(i)\n      }\n      additionalData[userId.length] = 124 // \"|\"\n      for (let i = 0; i < deviceId.length; i++) {\n          additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n      }\n\n      try {\n          const key = await crypto.subtle.decrypt(\n              { name: \"AES-GCM\", iv: data.iv, additionalData }, data.cryptoKey,\n              data.encrypted,\n          )\n          return encodeUnpaddedBase64(key)\n      } catch (e) {\n          console.log(\"Error decrypting pickle key\")\n          return null\n      }\n  }\n\nexport const CreatePickleKey = \n  async (userId: string, deviceId: string): Promise<string | null> => {\n      if (!window.crypto || !window.crypto.subtle) {\n          return null\n      }\n      const crypto = window.crypto\n      const randomArray = new Uint8Array(32)\n      crypto.getRandomValues(randomArray)\n      const cryptoKey = await crypto.subtle.generateKey(\n          { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n      )\n      const iv = new Uint8Array(32)\n      crypto.getRandomValues(iv)\n\n      const additionalData = new Uint8Array(userId.length + deviceId.length + 1)\n      for (let i = 0; i < userId.length; i++) {\n          additionalData[i] = userId.charCodeAt(i)\n      }\n      additionalData[userId.length] = 124 // \"|\"\n      for (let i = 0; i < deviceId.length; i++) {\n          additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n      }\n\n      const encrypted = await crypto.subtle.encrypt(\n          { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n      )\n\n      try {\n          await IdbSave(\n              \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n          )\n      } catch (e) {\n          return null\n      }\n      return encodeUnpaddedBase64(randomArray)\n  }\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\nexport const InvalidBackupInfo = createCustomError(\"InvalidBackupInfo\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n\nexport const $isCryptoEnabled = cryptoDomain.store<boolean | null>(null)\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport { \n    checkBackupKeyFx,\n    initCryptoFx, \n    onCrossSigningKeyChange, \n} from \"@/crypto\"\nimport {\n    onVerificationRequest, \n    MyVerificationRequest,\n    onUpdateDeviceList,\n    onUsersProfileUpdate,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {            \n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            const cl = client()\n            const deviceId = cl.getDeviceId()\n            const userId = cl.getUserId()\n            const isVerified = cl\n                .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n            if (isVerified || request.isSelfVerification) {\n                request.id = Date.now()\n                onVerificationRequest(request)\n            }\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n            onUsersProfileUpdate(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", (userIds: string[]) => {\n        onUpdateDeviceList(userIds)\n        onUsersProfileUpdate(userIds)\n    }],\n    [\"deviceVerificationChanged\", (userIds: string[]) => {\n        onUpdateDeviceList(userIds)\n        onUsersProfileUpdate(userIds)\n    }],\n    [\"userTrustStatusChanged\", (userId: string) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n        console.log(\"userTrustStatusChanged\", [userId])\n    }]\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx,\n    getUserDevicesFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoom,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    \n    }),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoomMessage,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: toLiveTimeline,\n        fn: ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members, true)\n        await cl.downloadKeysForUsers(members, {})\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n\ngetUserDevicesFx.use(async (userId) => {\n    const cl = client()\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const setEnableCrypto = cryptoDomain.event<boolean>()\n","import { client } from \"@/matrix-client\"\nimport { forward } from \"effector\"\nimport { checkThisDeviceVerificationFx } from \"@/verification\"\nimport { \n    crossSigningChangeFx, \n    setEnableCrypto\n} from \"./private\"\nimport { \n    $isCryptoEnabled,\n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    onCrossSigningKeyChange, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n\n$isCryptoEnabled\n    .on(setEnableCrypto, (_, isEnabled) => isEnabled)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncheckBackupKeyFx.use(() => {\n    return client().getKeyBackupEnabled()\n})\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) {\n        setEnableCrypto(false)\n        return\n    }\n\n    await cl.initCrypto()\n    setEnableCrypto(true)\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n    checkThisDeviceVerificationFx()\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n    checkThisDeviceVerificationFx()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    CheckPassphraseFxParams,\n    CheckRecoveryKeyFxParams,\n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    SavedInputToKeyMethod, \n    SecretStorageKeyResolveAndReject, \n    StartVerificationDeviceParams \n} from \"./types\"\n\n// Emodji SAS Verification\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n// Recovery key\nexport const checkRecoveryKeyFx = verificationDomain\n    .effect<CheckRecoveryKeyFxParams, void, Error>()\n\nexport const $savedInputToKeyMethod = verificationDomain\n    .store<SavedInputToKeyMethod | null>(null)\n\nexport const $secretStorageKeyResolveAndReject = verificationDomain\n    .store<SecretStorageKeyResolveAndReject|null>(null)\n\nexport const restoreKeyBackupFx = verificationDomain\n    .effect<void, void, Error>()\n\n// passpharasse verification \nexport const checkPassphraseFx = verificationDomain\n    .effect<CheckPassphraseFxParams, void, Error>()\n\n// others\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n","import { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport {\n    onCancelVerificationEvent, \n    startSASFx, \n    updateVerificationPhase,\n    cancelVerificationEventFx, \n} from \"./private\"\nimport {\n    onUsersProfileUpdate, \n    setCurrentVerificationEvent \n} from \"./public\"\nimport { \n    MyVerificationRequest,\n    OnVerificationRequestFxParams, \n    Phase\n} from \"./types\"\n\n\nexport const onVerificationRequestFxReducer = async (\n    {\n        request, \n        currentRequest\n    }: OnVerificationRequestFxParams): Promise<MyVerificationRequest> => {\n    const onChange = () => {\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n            return\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            onUsersProfileUpdate([request.otherUserId])\n            return\n        }\n\n        if (request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n            return\n        }\n\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n            return\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const excludePhaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested\n    ]\n    if (!currentRequest && !excludePhaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n        && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n\n    return request\n}\n","import { forward, sample, guard, attach } from \"effector\"\n\nimport { client } from \"@/matrix-client\"\nimport { createDirectRoomFx } from \"@/room\"\nimport { MappedUser } from \"@/types\"\nimport { destroyClientFx } from \"@/app\"\nimport { \n    updateVerificationPhase, \n    onCancelVerificationEvent,\n    confirmSASVerificationFx, \n    onVerificationRequestFx, \n    startSASFx, \n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n    checkRecoveryKeyFx,\n    $savedInputToKeyMethod,\n    $secretStorageKeyResolveAndReject,\n    restoreKeyBackupFx,\n    cancelVerificationEventFx,\n    checkPassphraseFx,\n} from \"./private\"\nimport { \n    onHasPassphrase,\n    $currentVerificationEvent, \n    $deviceIsVerified, \n    $verificationEvents, \n    checkThisDeviceVerificationFx,\n    confirmSASVerification,\n    startThisDeviceVerificationFx,\n    onVerificationRequest, \n    setCurrentVerificationEvent, \n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests,\n    checkCanVerifyFx,\n    createRecoveryKeyFx,\n    checkRecoveryKey,\n    saveInputToKeyMethod,\n    setSecretStorageKeyResolveAndReject,\n    startRecoveryKeyOrPassphraseVerification,\n    checkPassphrase,\n    $hasPassphrase,\n} from \"./public\"\nimport { MyVerificationRequest } from \"./types\"\nimport { onVerificationRequestFxReducer } from \"./reducers\"\nimport { InvalidBackupInfo } from \"@/errors\"\nimport { accessSecretStorage } from \"../cryptoCallbacks\"\n\n$savedInputToKeyMethod\n    .on(saveInputToKeyMethod, (_, method) => method)\n    .reset(destroyClientFx)\n\n$secretStorageKeyResolveAndReject\n    .on(setSecretStorageKeyResolveAndReject, (_, callbacks) => callbacks) \n    .reset(destroyClientFx)\n\n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n    .reset(destroyClientFx)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n    .reset(destroyClientFx)\n// When copying an object, proto properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n    .reset(destroyClientFx)\n\n$hasPassphrase\n    .on(onHasPassphrase, (_, val) => val )\n    .reset(destroyClientFx)\n\nforward({\n    from: checkThisDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkThisDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx \n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData, \n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nforward({\n    from: startRecoveryKeyOrPassphraseVerification,\n    to: restoreKeyBackupFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(onVerificationRequestFxReducer)\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    await (currentRequest.verifier as any).sasEvent.confirm()\n})\n\ncheckThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = Date.now()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({userId, deviceId}) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n\ncheckCanVerifyFx.use(async ({ profileId }) => {\n    const cl = client()\n    const cryptoEnabled = cl.isCryptoEnabled()\n    const homeserverSupportsCrossSigning = await cl\n        .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n\n    const userTrust = cryptoEnabled && cl.checkUserTrust(profileId)\n    const userVerified = cryptoEnabled && userTrust && userTrust\n        .isCrossSigningVerified()\n    const isMe = profileId === cl.getUserId()\n    if (isMe && isVerified) return true\n\n    const canVerify = cryptoEnabled \n        && homeserverSupportsCrossSigning \n        && !userVerified \n        && isVerified\n    return canVerify\n})\n\nsample({\n    clock: checkPassphrase,\n    source: $secretStorageKeyResolveAndReject,\n    filter: (resolveAndReject ) => resolveAndReject !== null,\n    fn: (resolveAndReject, {passphrase}) => ({\n        resolveAndReject: resolveAndReject as any,\n        passphrase\n    }),\n    target: checkPassphraseFx\n})\n\nsample({\n    clock: checkRecoveryKey,\n    source: $secretStorageKeyResolveAndReject,\n    filter: (resolveAndReject ) => resolveAndReject !== null,\n    fn: (resolveAndReject, {recoveryKey}) => ({\n        resolveAndReject: resolveAndReject as any,\n        recoveryKey\n    }),\n    target: checkRecoveryKeyFx\n})\n\ncheckRecoveryKeyFx.use(async ({resolveAndReject, recoveryKey}) => {\n    resolveAndReject.resolve({recoveryKey})\n})\n\ncheckPassphraseFx.use(async ({resolveAndReject, passphrase}) => {\n    resolveAndReject.resolve({passphrase})\n})\n\ncreateRecoveryKeyFx.use(async () => {\n    const cl = client()\n    const key = await cl.createRecoveryKeyFromPassphrase()\n    if (!key) throw new Error(\"createRecovery Error\")\n    return key\n})\n\nrestoreKeyBackupFx.use(async () => {\n    const cl = client()\n    accessSecretStorage(async () => {\n        const backupInfo = await cl.getKeyBackupVersion()\n        await cl.checkOwnCrossSigningTrust()\n    \n        if (!backupInfo) throw new InvalidBackupInfo(\"backupInfo is null\") \n        // don't await, because this can take a long times\n        cl.restoreKeyBackupWithSecretStorage(backupInfo)\n    })\n})\n\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\nwindow.createRecoveryKeyFx = createRecoveryKeyFx\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","indexedDB","verificationDomain","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","startVerificationDevice","startThisDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","checkRecoveryKey","createRecoveryKeyFx","saveInputToKeyMethod","setSecretStorageKeyResolveAndReject","startRecoveryKeyOrPassphraseVerification","checkPassphrase","$hasPassphrase","onHasPassphrase","$deviceIsVerified","onUpdateDeviceList","checkThisDeviceVerificationFx","checkCanVerifyFx","onUsersProfileUpdate","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","secretStorageBeingAccessed","secretStorageKeys","secretStorageKeyInfo","dehydrationCache","isCachingAllowed","cacheSecretStorageKey","keyId","keyInfo","promptForBackupPassphrase","Uint8Array","console","log","accessSecretStorage","func","cl","bootstrapSecretStorage","getKeyBackupPassphrase","error","makeInputToKey","params","passphrase","deriveKey","salt","iterations","recoveryKey","decodeRecoveryKey","keyInfos","keys","getDefaultSecretStorageKeyId","keyInfoEntries","Object","entries","length","inputToKey","promise","input","checkSecretStorageKey","getDehydrationKey","userId","deviceId","requestId","name","deviceTrust","getUserId","isVerified","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","crypto","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","i","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","InvalidBackupInfo","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","isReadUpTo","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","$isCryptoEnabled","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","args","getDeviceId","checkDeviceTrust","isSelfVerification","id","Date","now","warn","userIds","initialFetch","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeys","downloadKeysForUsers","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","isMe","getStoredDevicesForUser","device","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","crossSigningChangeFx","setEnableCrypto","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","cancelVerificationEventFx","checkRecoveryKeyFx","$savedInputToKeyMethod","$secretStorageKeyResolveAndReject","restoreKeyBackupFx","checkPassphraseFx","updateDeviceVerification","onVerificationRequestFxReducer","currentRequest","onChange","cancelled","off","VerificationRequestEvent","Change","cancellationCode","phase","Done","otherUserId","Ready","Started","verifier","sasEvent","excludePhaseArray","Cancelled","Requested","requests","req","currentReq","canceledReq","val","accept","beginKeyVerification","once","verify","cancel","confirm","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","profileId","cryptoEnabled","homeserverSupportsCrossSigning","userTrust","userVerified","canVerify","resolveAndReject","createRecoveryKeyFromPassphrase","getKeyBackupVersion","backupInfo","checkOwnCrossSigningTrust","restoreKeyBackupWithSecretStorage","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}