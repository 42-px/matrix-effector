{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    EventPermissions,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedRoomMember,\n    MappedUser,\n    Message,\n    MessageEvent,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    StartClientParams,\n    UploadContentParams,\n    UploadContentResult,\n    UploadProgress,\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const checkEventPermissionsFx = matrixDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = matrixDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\n\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoomMembers = matrixDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const onRoomInitialized = matrixDomain.event<void>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\nexport const onUploadProgress = matrixDomain.event<UploadProgress>()\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse,\n    PaginateRoomFxParams,\n    UpdateMessagesFxParams\n} from \"./types\"\n\nexport const updateMessages = matrixDomain.event<void>()\nexport const getRoomMembers = matrixDomain.event<void>()\nexport const onRoomMemberUpdate = matrixDomain.event<RoomMember>()\nexport const onRoomUserUpdate = matrixDomain.event<User>()\n\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\nexport const updateMessagesFx = matrixDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = matrixDomain\n    .effect<string, MappedRoomMember[], Error>()\n","import { MatrixEvent, RoomMember } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedRoomMember,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\nexport function toMappedRoomMember(roomMember: RoomMember): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: {\n            avatarUrl: roomMember.user.avatarUrl,\n            userId : roomMember.user.userId,\n            currentlyActive :  roomMember.user.currentlyActive,\n            displayName :  roomMember.user.displayName,\n            lastActiveAgo :  roomMember.user.lastActiveAgo,\n            lastPresenceTs :  roomMember.user.lastPresenceTs,\n            presence: roomMember.user.presence as any,\n        },\n        userId: roomMember.userId,\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, {\n    RoomMember,\n    TimelineWindow,\n    EventStatus,\n    User,\n} from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward,\n    onRoomInitialized,\n    checkEventPermissionsFx,\n    uploadContentFx,\n    onUploadProgress,\n    $currentRoomMembers,\n} from \"./public\"\nimport {\n    paginateRoomFx,\n    loadRoomFx,\n    initRoomFx,\n    updateMessagesFx,\n    updateMessages,\n    getRoomMembers,\n    getRoomMembersFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate\n} from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n    UploadContentResult,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\nimport { debounce } from \"patronum\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nconst UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n\nfunction getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nforward({\n    from: [$currentRoomId.updates],\n    to: getRoomMembers,\n})\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\n\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\n\nguard({\n    source: sample(\n        $currentRoomId,\n        getRoomMembersDebounced,\n        (roomId) => roomId as string\n    ),\n    filter: $currentRoomId.map((roomId) => Boolean(roomId)),\n    target: getRoomMembersFx\n})\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(() => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    \n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\n\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members).map(toMappedRoomMember)\n})\n"],"names":["MsgType","matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","checkEventPermissionsFx","uploadContentFx","$currentRoomId","store","$currentRoomMembers","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","onInitialSync","onCachedState","onSync","initRoom","onRoomInitialized","loadRoom","paginateForward","paginateBackward","onUploadProgress","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","checkIsDirect","roomId","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","updateMessages","getRoomMembers","onRoomMemberUpdate","onRoomUserUpdate","initRoomFx","loadRoomFx","paginateRoomFx","updateMessagesFx","getRoomMembersFx","getMappedContent","toMessage","originalEventId","undefined","getId","content","sender","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","room","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","toMappedRoomMember","roomMember","membership","powerLevel","powerLevelNorm","rawDisplayName","typing","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","UserNotLoggedIn","getMessages","timelineWindow","getEvents","filter","getType","reduce","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","$loadFilter","combine","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","_","doneData","reset","setMessages","guard","sample","done","currentRoomId","result","messages","isLive","value","canPaginateBackward","canPaginateForward","forward","from","updates","to","getRoomMembersDebounced","debounce","timeout","getMappedRooms","getRooms","map","clock","member","target","currentRoomMembers","find","pending","fn","initialEventId","initialWindowSize","loadAdditionalDataDirection","use","cl","loggedUserId","getUserId","getUser","initialSyncLimit","login","async","startup","startClient","term","orderBy","getRoom","membersCache","search","body","search_categories","room_events","search_term","keys","rooms","order_by","results","MatrixEvent","senderId","getSender","getMember","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","e","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","makeRequest","requestLimit","dir","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","mxEvent","canRedact","currentState","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","members","ms","throttle","batchEvents","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","mxcUrl","mxcUrlToHttp","opts"],"mappings":"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"}