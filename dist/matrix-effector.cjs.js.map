{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/idbHelper.ts","../src/verification/public.ts","../src/cryptoCallbacks.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/reducers.ts","../src/verification/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n\nexport const getUserDevicesFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore.stopPeeking()\n        // TODO Не чистить сторы, если userId нового юзера совпадает со старым юзером\n        clientStore.clearStores()\n        clientStore.crypto.stop()\n        clientStore.crypto.cryptoStore.deleteAllData()\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { \n    VerificationRequest, \n    IVerificationChannel, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: number\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n\nexport type InputToKeyParams = {\n  passphrase?: string\n  recoveryKey?: string\n}\n\nexport type ResolveRecoveryKeyParams = Pick<InputToKeyParams, \"recoveryKey\">\nexport type ResolvePassphrase = Pick<InputToKeyParams, \"passphrase\">\n\nexport type ResolveRecoveryKeyFxParams = ResolveRecoveryKeyParams & {\n  resolveAndReject: SecretStorageKeyResolveAndReject\n}\n\nexport type ResolvePassphraseFxParams = ResolvePassphrase & {\n  resolveAndReject: SecretStorageKeyResolveAndReject\n}\n\nexport type SavedInputToKeyMethod = (\n  params: InputToKeyParams\n) => Promise<Uint8Array>\n\n\nexport type CheckCanVerifyFxParams = {\n  profileId: string\n}\n\nexport type SecretStorageKeyResolveAndReject = {\n  resolve:(input: InputToKeyParams) => void\n  reject: () => void\n} \n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { createApi } from \"effector\"\nimport { IRecoveryKey, ISecretStorageKeyInfo } from \"matrix-js-sdk/lib\"\nimport { verificationDomain } from \"./domain\"\nimport {\n    CheckCanVerifyFxParams,\n    ResolvePassphrase,\n    ResolveRecoveryKeyParams,\n    MyVerificationRequest,\n    SavedInputToKeyMethod,\n    SecretStorageKeyResolveAndReject,\n    StartVerificationDeviceParams,\n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\n// Emodji SAS Verification\n\nexport const $isWaitingAnotherUser = verificationDomain\n    .store<boolean>(false)\n\nexport const {\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser\n} = createApi(\n    $isWaitingAnotherUser,\n    {\n        setWaitingAnotherUser: () => true,\n        resetWaitingAnotherUser: () => false\n    }\n)\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startThisDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n\n\n// Recovery Key\nexport const resolveRecoveryKey = verificationDomain\n    .event<ResolveRecoveryKeyParams>()\n\nexport const createRecoveryKeyAndPassPhraseFx = verificationDomain\n    .effect<string | undefined, IRecoveryKey, Error>()\n\nexport const saveInputToKeyMethod = verificationDomain\n    .event<SavedInputToKeyMethod>()\n\nexport const onNeedRecoveryKeyOrPassphrase = verificationDomain\n    .event<SecretStorageKeyResolveAndReject>()\n\nexport const startRecoveryKeyOrPassphraseVerification = verificationDomain\n    .event<void>()\n\ntype CheckKeyInfo = {\n    keyInfo: ISecretStorageKeyInfo\n}\n\nexport const $checkKeyInfo = verificationDomain\n    .store<CheckKeyInfo | null>(null)\n\nexport const setCheckKeyInfo = verificationDomain\n    .event<CheckKeyInfo>()\n\nexport const onCheckSecretStorageKey = verificationDomain.event<string>()\n\nexport const checkSecretStorageKeyFx = verificationDomain\n    .effect<CheckKeyInfo & { input: string }, boolean, Error>()\n\nexport const onRecoveryKeyOrPassphraseSuccess = verificationDomain.event<void>()\n\n// passphrasse verification \n\nexport const resolvePassphrase = verificationDomain\n    .event<ResolvePassphrase>()\n\nexport const $hasPassphrase = verificationDomain.store<boolean>(false)\nexport const onHasPassphrase = verificationDomain.event<boolean>()\n\n// others\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkThisDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\nexport const checkCanVerifyFx = verificationDomain\n    .effect<CheckCanVerifyFxParams, boolean, Error>()\n\nexport const onUsersProfileUpdate = verificationDomain\n    .event<UserId[]>()\n","import {\n    decodeRecoveryKey,\n    deriveKey,\n    DeviceTrustLevel,\n    encodeBase64,\n    encodeUnpaddedBase64,\n    ICryptoCallbacks,\n    ISecretStorageKeyInfo,\n    MatrixClient\n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\nimport {\n    InputToKeyParams,\n    onHasPassphrase,\n    setCheckKeyInfo,\n    onNeedRecoveryKeyOrPassphrase,\n    onRecoveryKeyOrPassphraseSuccess,\n} from \"@/verification\"\n\nlet secretStorageBeingAccessed = false\nlet secretStorageKeys: Record<string, Uint8Array> = {}\nlet secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction setCachingAllowed(newVal: boolean): void {\n    secretStorageBeingAccessed = newVal\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    secretStorageKeys[keyId] = key\n    secretStorageKeyInfo[keyId] = keyInfo\n}\n\nexport async function promptForBackupPassphrase(): Promise<Uint8Array> {\n    const key = new Uint8Array()\n\n    console.log(\"promptForBackupPassphrase\")\n    // const success = await finished;\n    // if (!success) throw new Error(\"Key backup prompt cancelled\");\n\n    return key\n}\n\nexport async function accessSecretStorage(\n    func = async () => { return },\n    forceReset = false\n): Promise<any> {\n    const cl = client()\n    setCachingAllowed(true)\n    try {\n        if (!(await cl.hasSecretStorageKey()) || forceReset) {\n            // Потребуется для сбросса кросс подписей \n        } else {\n            await cl.bootstrapCrossSigning({})\n            await cl.bootstrapSecretStorage({\n                getKeyBackupPassphrase: promptForBackupPassphrase,\n            })\n    \n            const keyId = Object.keys(secretStorageKeys)[0]\n            if (keyId) {\n                let dehydrationKeyInfo = {}\n                if (\n                    secretStorageKeyInfo[keyId]\n                    && secretStorageKeyInfo[keyId].passphrase\n                ) {\n                    dehydrationKeyInfo = {\n                        passphrase: secretStorageKeyInfo[keyId].passphrase\n                    }\n                }\n                console.log(\"Setting dehydration key\")\n                await cl\n                    .setDehydrationKey(\n                        secretStorageKeys[keyId],\n                        dehydrationKeyInfo,\n                        \"Backup device\"\n                    )\n            } else if (!keyId) {\n                console.warn(\"Not setting dehydration key: no SSSS key found\")\n            } else {\n                console.log(\"Not setting dehydration key: feature disabled\")\n            }\n    \n        }\n        // `return await` needed here to ensure `finally` block runs after the\n        // inner operation completes.\n        return await func()\n    } catch (e) {\n        // SecurityCustomisations.catchAccessSecretStorageError?.(e)\n        console.error(e)\n        // Re-throw so that higher level logic can abort as needed\n        throw e\n    } finally {\n        // Clear secret storage key cache now that work is complete\n        setCachingAllowed(false)\n        if (!isCachingAllowed()) {\n            secretStorageKeys = {}\n            secretStorageKeyInfo = {}\n        }\n    }\n}\n\n\nfunction makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (params: InputToKeyParams) => Promise<Uint8Array> {\n    return async (params) => {\n        if (params.passphrase) {\n            return deriveKey(\n                params.passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else if (params.recoveryKey) {\n            return decodeRecoveryKey(params.recoveryKey)\n        }\n        throw new Error(\"Invalid recoveryKey or passphrase\")\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cl = client()\n    let keyId = await cl.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if (!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    } \n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        [keyId, keyInfo] = keyInfoEntries[0]\n    }\n\n    // Check the in-memory cache\n    if (secretStorageKeys[keyId] && isCachingAllowed()) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (await cl.checkSecretStorageKey(dehydrationCache.key, keyInfo)) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n    const promise = new Promise<InputToKeyParams>((resolve, reject) => {\n        onNeedRecoveryKeyOrPassphrase({\n            reject,\n            resolve\n        })\n    })\n\n    onHasPassphrase(Boolean(keyInfo.passphrase))\n    setCheckKeyInfo({ keyInfo })\n\n    const input = await promise\n\n    const key = await inputToKey(input)\n\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    onRecoveryKeyOrPassphraseSuccess()\n    return [keyId, key]\n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\" })\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if (key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        let data\n        try {\n            data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n        } catch (e) {\n            console.log(\"idbLoad for pickleKey failed\", e)\n        }\n        if (!data) {\n            return null\n        }\n        if (!data.encrypted || !data.iv || !data.cryptoKey) {\n            console.log(\"Badly formatted pickle key\")\n            return null\n        }\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        try {\n            const key = await crypto.subtle.decrypt(\n                { name: \"AES-GCM\", iv: data.iv, additionalData },\n                data.cryptoKey,\n                data.encrypted,\n            )\n            return encodeUnpaddedBase64(key)\n        } catch (e) {\n            console.log(\"Error decrypting pickle key\")\n            return null\n        }\n    }\n\nexport const CreatePickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        const crypto = window.crypto\n        const randomArray = new Uint8Array(32)\n        crypto.getRandomValues(randomArray)\n        const cryptoKey = await crypto.subtle.generateKey(\n            { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n        )\n        const iv = new Uint8Array(32)\n        crypto.getRandomValues(iv)\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        const encrypted = await crypto.subtle.encrypt(\n            { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n        )\n\n        try {\n            await IdbSave(\n                \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n            )\n        } catch (e) {\n            return null\n        }\n        return encodeUnpaddedBase64(randomArray)\n    }\n\nexport async function tryToUnlockSecretStorageWithDehydrationKey(\n    client: MatrixClient,\n): Promise<void> {\n    const key = dehydrationCache.key\n    let restoringBackup = false\n    if (key && (await client.isSecretStorageReady())) {\n        setCachingAllowed(true)\n        try {\n            await client.checkOwnCrossSigningTrust()\n    \n            // we also need to set a new dehydrated device to replace the\n            // device we rehydrated\n            let dehydrationKeyInfo = {}\n            if (\n                dehydrationCache.keyInfo \n                && dehydrationCache.keyInfo.passphrase\n            ) {\n                dehydrationKeyInfo = { \n                    passphrase: dehydrationCache.keyInfo.passphrase }\n            }\n            await client\n                .setDehydrationKey(key, dehydrationKeyInfo, \"Backup device\")\n    \n            // and restore from backup\n            const backupInfo = await client.getKeyBackupVersion()\n            if (backupInfo) {\n                restoringBackup = true\n                // don't await, because this can take a long time\n                client.restoreKeyBackupWithSecretStorage(backupInfo)\n                    .finally(() => {\n                        secretStorageBeingAccessed = false\n                        if (!isCachingAllowed()) {\n                            secretStorageKeys = {}\n                            secretStorageKeyInfo = {}\n                        }\n                    })\n            }\n        } finally {\n            dehydrationCache = {}\n            // the secret storage cache is needed for restoring from backup, so\n            // don't clear it yet if we're restoring from backup\n            if (!restoringBackup) {\n                setCachingAllowed(false)\n                if (!isCachingAllowed()) {\n                    secretStorageKeys = {}\n                    secretStorageKeyInfo = {}\n                }\n            }\n        }\n    }\n}\n    \n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\nexport const InvalidBackupInfo = createCustomError(\"InvalidBackupInfo\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n\nexport const $isCryptoEnabled = cryptoDomain.store<boolean | null>(null)\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n    UserTrustLevel,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport {\n    checkBackupKeyFx,\n    initCryptoFx,\n    onCrossSigningKeyChange,\n} from \"@/crypto\"\nimport {\n    onVerificationRequest,\n    MyVerificationRequest,\n    onUpdateDeviceList,\n    onUsersProfileUpdate,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { DeviceInfo } from \"matrix-js-sdk/lib/crypto/deviceinfo\"\nimport { IdbDelete } from \"@/idbHelper\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Session.logged_out\", (args) => {\n        console.log(\"Session.logged_out\", args)\n    }],\n    // @TODO Реализовать. Этот эвент приходит когда логаут происходит из другой сессии.\n    // cli.on(HttpApiEvent.SessionLoggedOut, function (errObj) {\n    //     if (Lifecycle.isLoggingOut()) return;\n\n    //     // A modal might have been open when we were logged out by the server\n    //     Modal.closeCurrentModal('Session.logged_out');\n\n    //     if (errObj.httpStatus === 401 && errObj.data && errObj.data['soft_logout']) {\n    //         logger.warn(\"Soft logout issued by server - avoiding data deletion\");\n    //         Lifecycle.softLogout();\n    //         return;\n    //     }\n\n    //     Modal.createDialog(ErrorDialog, {\n    //         title: _t('Signed Out'),\n    //         description: _t('For security, this session has been signed out. Please sign in again.'),\n    //     });\n\n    //     dis.dispatch({\n    //         action: 'logout',\n    //     });\n    // });\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            const cl = client()\n            const deviceId = cl.getDeviceId()\n            const userId = cl.getUserId()\n            const isVerified = cl\n                .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n            if (isVerified || request.isSelfVerification) {\n                request.id = Date.now()\n                onVerificationRequest(request)\n            }\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n            onUsersProfileUpdate(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", (userIds: string[]) => {\n        onUpdateDeviceList(userIds)\n        onUsersProfileUpdate(userIds)\n    }],\n    [\"deviceVerificationChanged\", (\n        userId: string,\n        deviceId: string,\n        deviceInfo: DeviceInfo\n    ) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }],\n    [\"userTrustStatusChanged\", (userId: string, newStatus: UserTrustLevel) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }]\n])\n\nloginByPasswordFx.use(async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        {\n            method: \"POST\",\n            body: JSON.stringify({ type: LOGIN_BY_TOKEN, token: params.token })\n        }\n    )\n    const {\n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return {\n        userId: user_id,\n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.downloadKeys([cl.getUserId() ?? createClientParams.options.userId])\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await IdbDelete(\"pickleKey\", [cl.getUserId(), cl.getDeviceId()])\n    await IdbDelete(\"account\", \"mx_access_token\")\n    cl.stopClient()\n    await cl.logout()\n    destroyClient()\n})\n\ngetProfileInfoFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx,\n    getUserDevicesFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoom,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    \n    }),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoomMessage,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: toLiveTimeline,\n        fn: ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members, true)\n        await cl.downloadKeysForUsers(members, {})\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n\ngetUserDevicesFx.use(async (userId) => {\n    const cl = client()\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const setEnableCrypto = cryptoDomain.event<boolean>()\n","import { client } from \"@/matrix-client\"\nimport { forward } from \"effector\"\nimport { checkThisDeviceVerificationFx } from \"@/verification\"\nimport { destroyClientFx } from \"@/app\"\nimport { \n    crossSigningChangeFx, \n    setEnableCrypto\n} from \"./private\"\nimport { \n    $isCryptoEnabled,\n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    onCrossSigningKeyChange, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\n$isCryptoEnabled\n    .on(setEnableCrypto, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncheckBackupKeyFx.use(() => {\n    return client().getKeyBackupEnabled()\n})\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) {\n        setEnableCrypto(false)\n        return\n    }\n\n    await cl.initCrypto()\n    setEnableCrypto(true)\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n    checkThisDeviceVerificationFx()\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n    checkThisDeviceVerificationFx()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    ResolvePassphraseFxParams,\n    ResolveRecoveryKeyFxParams,\n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    SavedInputToKeyMethod, \n    SecretStorageKeyResolveAndReject, \n    StartVerificationDeviceParams \n} from \"./types\"\n\n// Emodji SAS Verification\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n// Recovery key\nexport const resolveRecoveryKeyFx = verificationDomain\n    .effect<ResolveRecoveryKeyFxParams, void, Error>()\n\nexport const $savedInputToKeyMethod = verificationDomain\n    .store<SavedInputToKeyMethod | null>(null)\n\nexport const $secretStorageKeyResolveAndReject = verificationDomain\n    .store<SecretStorageKeyResolveAndReject|null>(null)\n\nexport const restoreKeyBackupFx = verificationDomain\n    .effect<void, void, Error>()\n\n// passpharasse verification \nexport const resolvePassphraseFx = verificationDomain\n    .effect<ResolvePassphraseFxParams, void, Error>()\n\n// others\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n","import { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport {\n    onCancelVerificationEvent, \n    startSASFx, \n    updateVerificationPhase,\n    cancelVerificationEventFx, \n} from \"./private\"\nimport {\n    onUsersProfileUpdate, \n    setCurrentVerificationEvent \n} from \"./public\"\nimport { \n    MyVerificationRequest,\n    OnVerificationRequestFxParams, \n    Phase\n} from \"./types\"\n\n\nexport const onVerificationRequestFxReducer = async (\n    {\n        request, \n        currentRequest\n    }: OnVerificationRequestFxParams): Promise<MyVerificationRequest> => {\n    const onChange = () => {\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n            return\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            onUsersProfileUpdate([request.otherUserId])\n            return\n        }\n\n        if (request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n            return\n        }\n\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n            return\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const excludePhaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested\n    ]\n    if (!currentRequest && !excludePhaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n        && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n\n    return request\n}\n","import { forward, sample, guard, attach } from \"effector\"\n\nimport { client } from \"@/matrix-client\"\nimport { createDirectRoomFx } from \"@/room\"\nimport { MappedUser } from \"@/types\"\nimport { destroyClientFx } from \"@/app\"\nimport {\n    updateVerificationPhase,\n    onCancelVerificationEvent,\n    confirmSASVerificationFx,\n    onVerificationRequestFx,\n    startSASFx,\n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n    resolveRecoveryKeyFx,\n    $savedInputToKeyMethod,\n    $secretStorageKeyResolveAndReject,\n    restoreKeyBackupFx,\n    cancelVerificationEventFx,\n    resolvePassphraseFx,\n} from \"./private\"\nimport {\n    onHasPassphrase,\n    $currentVerificationEvent,\n    $deviceIsVerified,\n    $verificationEvents,\n    checkThisDeviceVerificationFx,\n    confirmSASVerification,\n    startThisDeviceVerificationFx,\n    onVerificationRequest,\n    setCurrentVerificationEvent,\n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests,\n    checkCanVerifyFx,\n    createRecoveryKeyAndPassPhraseFx,\n    resolveRecoveryKey,\n    saveInputToKeyMethod,\n    onNeedRecoveryKeyOrPassphrase,\n    startRecoveryKeyOrPassphraseVerification,\n    resolvePassphrase,\n    $hasPassphrase,\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser,\n    checkSecretStorageKeyFx,\n    $checkKeyInfo,\n    setCheckKeyInfo,\n    onCheckSecretStorageKey,\n    onRecoveryKeyOrPassphraseSuccess,\n} from \"./public\"\nimport { MyVerificationRequest } from \"./types\"\nimport { onVerificationRequestFxReducer } from \"./reducers\"\nimport { InvalidBackupInfo } from \"@/errors\"\nimport { accessSecretStorage } from \"../cryptoCallbacks\"\n\n$savedInputToKeyMethod\n    .on(saveInputToKeyMethod, (_, method) => method)\n    .reset(destroyClientFx)\n\n$secretStorageKeyResolveAndReject\n    .on(onNeedRecoveryKeyOrPassphrase, (_, callbacks) => callbacks)\n    .reset([destroyClientFx, onRecoveryKeyOrPassphraseSuccess])\n    \n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n    .reset(destroyClientFx)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n    .reset(destroyClientFx)\n// When copying an object, proto properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n    .reset(destroyClientFx)\n\n$hasPassphrase\n    .on(onHasPassphrase, (_, val) => val)\n    .reset(destroyClientFx)\n\n$checkKeyInfo\n    .on(setCheckKeyInfo, (_, val) => val)\n    .reset(destroyClientFx)\n\nforward({\n    from: checkThisDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkThisDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx\n})\n\nforward({\n    from: [\n        startVerificationUserFx,\n        startVerificationDeviceFx,\n        confirmSASVerification,\n        startSASFx,\n        startThisDeviceVerificationFx\n    ],\n    to: setWaitingAnotherUser\n})\n\nforward({\n    from: [\n        onCancelVerificationEvent,\n        $currentVerificationEvent.updates\n    ],\n    to: resetWaitingAnotherUser\n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData,\n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nforward({\n    from: startRecoveryKeyOrPassphraseVerification,\n    to: restoreKeyBackupFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nsample({\n    clock: resolvePassphrase,\n    source: $secretStorageKeyResolveAndReject,\n    filter: (resolveAndReject) => resolveAndReject !== null,\n    fn: (resolveAndReject, { passphrase }) => ({\n        resolveAndReject: resolveAndReject as any,\n        passphrase\n    }),\n    target: resolvePassphraseFx\n})\n\nsample({\n    clock: resolveRecoveryKey,\n    source: $secretStorageKeyResolveAndReject,\n    filter: (resolveAndReject) => resolveAndReject !== null,\n    fn: (resolveAndReject, { recoveryKey }) => ({\n        resolveAndReject: resolveAndReject as any,\n        recoveryKey\n    }),\n    target: resolveRecoveryKeyFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(onVerificationRequestFxReducer)\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    await (currentRequest.verifier as any).sasEvent.confirm()\n})\n\ncheckThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = Date.now()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n\ncheckCanVerifyFx.use(async ({ profileId }) => {\n    const cl = client()\n    const cryptoEnabled = cl.isCryptoEnabled()\n    const homeserverSupportsCrossSigning = await cl\n        .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n\n    const userTrust = cryptoEnabled && cl.checkUserTrust(profileId)\n    const userVerified = cryptoEnabled && userTrust && userTrust\n        .isCrossSigningVerified()\n    const isMe = profileId === cl.getUserId()\n    if (isMe && isVerified) return true\n\n    const canVerify = cryptoEnabled\n        && homeserverSupportsCrossSigning\n        && !userVerified\n        && isVerified\n    return canVerify\n})\n\nresolveRecoveryKeyFx.use(async ({ resolveAndReject, recoveryKey }) => {\n    resolveAndReject.resolve({ recoveryKey })\n})\n\nresolvePassphraseFx.use(async ({ resolveAndReject, passphrase }) => {\n    resolveAndReject.resolve({ passphrase })\n})\n\ncreateRecoveryKeyAndPassPhraseFx.use(async (password) => {\n    const cl = client()\n    const key = await cl.createRecoveryKeyFromPassphrase(password)\n    if (!key) throw new Error(\"createRecovery Error\")\n    return key\n})\n\nrestoreKeyBackupFx.use(async () => {\n    const cl = client()\n    accessSecretStorage(async () => {\n        const backupInfo = await cl.getKeyBackupVersion()\n        await cl.checkOwnCrossSigningTrust()\n\n        if (!backupInfo) throw new InvalidBackupInfo(\"backupInfo is null\")\n        await cl.restoreKeyBackupWithSecretStorage(backupInfo)\n    })\n})\n\nguard({\n    source: sample({\n        clock: onCheckSecretStorageKey,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, input) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            input\n        }),\n    }),\n    filter: (params): params is any => Boolean(\n        params.keyInfo\n    ),\n    target: checkSecretStorageKeyFx,\n})\n\n\ncheckSecretStorageKeyFx.use(({ input, keyInfo }) => {\n    const cl = client()\n    const decodedKey = cl.keyBackupKeyFromRecoveryKey(input)\n    return cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","stopPeeking","clearStores","crypto","stop","cryptoStore","deleteAllData","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","indexedDB","verificationDomain","$isWaitingAnotherUser","createApi","setWaitingAnotherUser","resetWaitingAnotherUser","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","startVerificationDevice","startThisDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","resolveRecoveryKey","createRecoveryKeyAndPassPhraseFx","saveInputToKeyMethod","onNeedRecoveryKeyOrPassphrase","startRecoveryKeyOrPassphraseVerification","$checkKeyInfo","setCheckKeyInfo","onCheckSecretStorageKey","checkSecretStorageKeyFx","onRecoveryKeyOrPassphraseSuccess","resolvePassphrase","$hasPassphrase","onHasPassphrase","$deviceIsVerified","onUpdateDeviceList","checkThisDeviceVerificationFx","checkCanVerifyFx","onUsersProfileUpdate","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","IdbDelete","secretStorageBeingAccessed","secretStorageKeys","secretStorageKeyInfo","dehydrationCache","isCachingAllowed","setCachingAllowed","newVal","cacheSecretStorageKey","keyId","keyInfo","promptForBackupPassphrase","Uint8Array","console","log","accessSecretStorage","func","forceReset","cl","hasSecretStorageKey","bootstrapCrossSigning","bootstrapSecretStorage","getKeyBackupPassphrase","Object","keys","dehydrationKeyInfo","passphrase","setDehydrationKey","warn","error","makeInputToKey","params","deriveKey","salt","iterations","recoveryKey","decodeRecoveryKey","keyInfos","getDefaultSecretStorageKeyId","keyInfoEntries","entries","length","checkSecretStorageKey","inputToKey","promise","input","getDehydrationKey","userId","deviceId","requestId","name","deviceTrust","getUserId","isVerified","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","i","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","restoringBackup","isSecretStorageReady","checkOwnCrossSigningTrust","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","InvalidBackupInfo","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","isReadUpTo","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","$isCryptoEnabled","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","args","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","getDeviceId","checkDeviceTrust","isSelfVerification","id","Date","now","userIds","initialFetch","deviceInfo","newStatus","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","downloadKeys","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeysForUsers","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","isMe","getStoredDevicesForUser","device","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","crossSigningChangeFx","setEnableCrypto","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","cancelVerificationEventFx","resolveRecoveryKeyFx","$savedInputToKeyMethod","$secretStorageKeyResolveAndReject","restoreKeyBackupFx","resolvePassphraseFx","updateDeviceVerification","onVerificationRequestFxReducer","currentRequest","onChange","cancelled","off","VerificationRequestEvent","Change","cancellationCode","phase","Done","otherUserId","Ready","Started","verifier","sasEvent","excludePhaseArray","Cancelled","Requested","requests","req","currentReq","canceledReq","val","resolveAndReject","accept","beginKeyVerification","once","verify","cancel","confirm","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","profileId","cryptoEnabled","homeserverSupportsCrossSigning","userTrust","userVerified","canVerify","password","createRecoveryKeyFromPassphrase","checkKeyInfo","decodedKey","keyBackupKeyFromRecoveryKey","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}