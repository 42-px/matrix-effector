{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    EventPermissions,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedUser,\n    Message,\n    MessageEvent,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    StartClientParams\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const checkEventPermissionsFx = matrixDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\n\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const onRoomInitialized = matrixDomain.event<void>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    PaginateRoomFxParams,\n    UpdateMessagesFxParams\n} from \"./types\"\n\nexport const updateMessages = matrixDomain.event<void>()\n\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\nexport const updateMessagesFx = matrixDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const content: any = {}\n    const matrixContent: any = event.getContent()\n    if (matrixContent.body) content.body = matrixContent.body\n    if (matrixContent.msgtype) content.msgtype = matrixContent.msgtype\n    if (matrixContent[\"m.relates_to\"]) {\n        content[\"m.relates_to\"] = {...matrixContent[\"m.relates_to\"]}\n    }\n    return content\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, {\n    RoomMember,\n    TimelineWindow,\n    EventStatus,\n} from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward,\n    onRoomInitialized,\n    checkEventPermissionsFx\n} from \"./public\"\nimport {\n    paginateRoomFx,\n    loadRoomFx,\n    initRoomFx,\n    updateMessagesFx,\n    updateMessages\n} from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nconst UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n\nfunction getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(() => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    return {\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\n"],"names":["matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","checkEventPermissionsFx","$currentRoomId","store","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","onInitialSync","onCachedState","onSync","initRoom","onRoomInitialized","loadRoom","paginateForward","paginateBackward","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","checkIsDirect","roomId","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","updateMessages","initRoomFx","loadRoomFx","paginateRoomFx","updateMessagesFx","getMappedContent","content","matrixContent","body","msgtype","toMessage","originalEventId","undefined","getId","sender","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","room","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","UserNotLoggedIn","getMessages","timelineWindow","getEvents","filter","getType","reduce","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","$loadFilter","combine","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","_","doneData","reset","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","map","messages","isLive","canPaginateBackward","canPaginateForward","forward","from","pending","to","clock","fn","target","initialEventId","initialWindowSize","loadAdditionalDataDirection","use","cl","loggedUserId","getUserId","user","getUser","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","async","startup","startClient","term","orderBy","getRoom","membersCache","search","search_categories","room_events","search_term","keys","rooms","order_by","results","MatrixEvent","senderId","getSender","getMember","txnId","sendMessage","eventId","m.new_content","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","eventsRetrieved","size","paginate","EventTimeline","BACKWARDS","FORWARDS","makeRequest","requestLimit","dir","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","mxEvent","canRedact","currentState","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","ms","throttle","timeout","batchEvents","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","opts"],"mappings":"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"}