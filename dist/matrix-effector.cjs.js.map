<<<<<<< HEAD
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/room/types.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/types/index.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    \"public\" = \"public\",\r\n    \"private\" = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n","import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams,\r\n    CreateClientParams, \r\n    AuthData \r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    User,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport { combine } from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams,\r\n    LoadRoomFxParams,\r\n    MessageResponse\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === \"join\") ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const findDirectRoomByUserIdFx = roomDomain\r\n    .effect<string, MappedRoom, Error>()\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    presence: \"online\" | \"offline\" | \"unavailable\"\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n}\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview,\r\n    PaginateParams,\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\r\nexport const onPaginateForwardDone = messagesDomain.event<void>()\r\nexport const paginateForward = messagesDomain.event<PaginateParams>()\r\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\r\n\r\nexport const $paginateForwardPending = messagesDomain.store(false)\r\nexport const $paginateBackwardPending = messagesDomain.store(false)\r\nexport const $canPaginateBackward = messagesDomain.store(true)\r\nexport const $canPaginateForward = messagesDomain.store(true)\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType\r\n} from \"./types\"\r\n\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = ():string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId(),\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    const isDirect = matrixRoom.currentState\r\n        .getStateEvents(\r\n            \"m.room.create\",\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n    const lastMessage = mergedMessageEvents.length ?\r\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\r\n    }\r\n}\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport { mergeMessageEvents } from \"./mappers\"\r\nimport { client } from \"./matrix-client\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow) {\r\n    return timelineWindow\r\n        .getEvents()\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (\r\n    roomId: string,\r\n    companion?: string\r\n): Promise<{}> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            \"m.room.create\",\r\n        )[0].getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n\r\n    if(companion) {\r\n        return await cl.setAccountData(DIRECT_EVENT, {\r\n            ...prevData,\r\n            [companion]: [roomId]\r\n        })\r\n        \r\n    }\r\n    return await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate\r\n} from \"@/room\"\r\nimport { MatrixLoginPayload} from \"@/types\"\r\nimport { UserNotFound } from \"@/errors\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = room.currentState\r\n            .getStateEvents(\r\n                \"m.room.create\"\r\n            )[0]?.getContent<StateEventsContent>()?.isDirect\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    }: MatrixLoginPayload = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const { store } = client()\r\n    if (store) await store.startup()\r\n    await client().startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    MappedRoomMember,\r\n    RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const getRoomMembersFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport {\r\n    getMessages,\r\n    setDirectRoom\r\n} from \"@/utils\"\r\nimport {\r\n    ClientNotInitialized,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotFound\r\n} from \"@/errors\"\r\nimport {\r\n    getRoomMembersFx,\r\n    initRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    getRoomMembers,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx,\r\n    $loadFilter,\r\n    loadRoomFx,\r\n    getRoomByIdFx,\r\n    findDirectRoomByUserIdFx\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\nimport { DIRECT_EVENT } from \"@/constants\"\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst getCurrentRoomFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getCurrentRoomFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetRoomMembersFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return Object.values(room.currentState.members)\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n        const room = client().getRoom(roomId)\r\n        if (!room) throw new RoomNotFound()\r\n        const membersCache: { [id: string]: RoomMember } = {}\r\n        const searchResponse = await client().search({\r\n            body: {\r\n                search_categories: {\r\n                    room_events: {\r\n                        search_term: term,\r\n                        keys: [\"content.body\"],\r\n                        filter: {\r\n                            rooms: [roomId],\r\n                        },\r\n                        order_by: orderBy,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n        return searchResponse\r\n            .search_categories\r\n            .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n                const event = new MatrixEvent(result)\r\n                const senderId = event.getSender()\r\n                if (membersCache[senderId] === undefined) {\r\n                    membersCache[senderId] = room\r\n                        .getMember(senderId) as RoomMember\r\n                }\r\n                event.sender = membersCache[senderId]\r\n                return toMessage(event)\r\n            })\r\n    })\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id, user.userId)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    await client().invite(roomId, userId)\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n\r\nfindDirectRoomByUserIdFx.use((userId) => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\r\n    const roomId = directRooms[userId] && directRooms[userId][0]\r\n    if(!roomId) throw new RoomNotFound()\r\n    const room = cl.getRoom(roomId)\r\n    if(!room) throw new RoomNotFound()\r\n    return toMappedRoom(room)\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach } from \"effector\"\r\nimport { guard, sample } from \"effector\"\r\nimport {\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    loadRoomFx,\r\n    MessageResponse\r\n} from \"@/room\"\r\nimport {\r\n    UpdateMessagesFxParams,\r\n    PaginateParams,\r\n    PaginateRoomFxParams\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const paginateRoomFx = messagesDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n","import {\r\n    attach,\r\n    combine,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport matrix, {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $loadFilter,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx,\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    updateMessages,\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n          && !backwardPaginationPending\r\n          && !forwardPaginationPending\r\n          && !roomLoading\r\n)\r\n    \r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n    \r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n    \r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n    \r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        updateMessages,\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n    await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: undefined })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n    \r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","MsgType","MatrixMembershipType","clientStore","messagesDomain","$messages","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","isDirect","currentState","getStateEvents","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","DMUser","getMember","guessDMUserId","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","initRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getCurrentRoomFx","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","Object","values","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","reason","setRoomName","joinRoom","leave","_cl$getAccountData","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","roomMessageBatch","loadNewMessagesFx","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
=======
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/room/types.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { TimelineWindow, RoomMember } from \"matrix-js-sdk\"\r\nimport { MappedUser, Message } from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    public = \"public\",\r\n    private = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n","import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport { LoginPayload } from \"matrix-js-sdk\";\r\nimport { MappedRoom, MappedUser } from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams\r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\nimport { CreateClientParams, AuthData } from \"./types\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    RoomMember,\r\n    User\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $typingMembers = roomDomain\r\n    .store<{[key in string]: RoomMember[]}>({})\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === \"join\") ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const clearTypingMember = roomDomain.event<void>()\r\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport { createClientOptions, EventListener } from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: createClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n}\r\n","import {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\n\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, void, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, void, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const paginationDomain = root.domain(\"pagination\")\r\n","import { paginationDomain } from \"./domain\"\r\nimport { PaginateParams } from \"./types\"\r\n\r\nexport const $paginateForwardPending = paginationDomain.store(false)\r\nexport const $paginateBackwardPending = paginationDomain.store(false)\r\nexport const $canPaginateBackward = paginationDomain.store(true)\r\nexport const $canPaginateForward = paginationDomain.store(true)\r\n\r\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\r\nexport const onPaginateForwardDone = paginationDomain.event<void>()\r\nexport const paginateForward = paginationDomain.event<PaginateParams>()\r\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\n","import { MatrixEvent, RoomMember, User, Room } from \"matrix-js-sdk\"\r\nimport { checkIsDirect, client } from \"@/index\"\r\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n} from \"./types\"\r\n\r\nfunction getMappedContent(event: MatrixEvent): MessageContent {\r\n    const matrixContent = event.getContent() as MessageContent\r\n    return {...matrixContent}\r\n}\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId(),\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership()\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n    const lastMessage = mergedMessageEvents.length ?\r\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\r\n    const isDirect = checkIsDirect(room.roomId)\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\r\n    }\r\n}\r\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport { mergeMessageEvents } from \"./mappers\"\r\nimport { client } from \"./matrix-client\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow) {\r\n    return timelineWindow\r\n        .getEvents()\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null =>\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\nexport const getIsDirectRoomsIds = ():string[] => {\r\n    const cl = client()\r\n    const directRooms = (cl.getAccountData(\r\n        DIRECT_EVENT as EventType) as MatrixEvent\r\n    )?.getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width !== undefined ? width : null,\r\n        height !== undefined ? height : null,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\r\n    )\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = (roomId: string): Promise<void> => {\r\n    const cl = client()\r\n    const { creator } = (cl.getRoom(roomId)?.currentState\r\n        .getStateEvents(\r\n            \"m.room.create\" as EventType,\r\n            undefined as any\r\n        ) as any )[0]?.getContent()\r\n    const prevData = (cl.getAccountData(\r\n        DIRECT_EVENT as EventType\r\n    ) as MatrixEvent)?.getContent() as any\r\n    const prevRoomsId = prevData[creator] ?? []\r\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n","import { combine } from \"effector\"\r\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\r\nimport { RoomWithActivity } from \"@/types\"\r\nimport {\r\n    InitRoomParams,\r\n    LoadRoomFxParams,\r\n    MappedRoomMember,\r\n    MessageResponse, RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport { $currentRoomId, $timelineWindow } from \"./public\"\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\n\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomMembersFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach } from \"effector\"\r\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\r\nimport { paginationDomain } from \"./domain\"\r\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\r\n\r\nexport const paginateRoomFx = paginationDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n","import { guard, sample } from \"effector\"\r\nimport { $currentRoomId, MessageResponse } from \"@/room\"\r\nimport { paginateRoomFx } from \"@/room-pagination/private\"\r\nimport { loadRoomFx } from \"@/room/private\"\r\nimport { UpdateMessagesFxParams } from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n","import { forward } from \"effector\"\r\nimport {\r\n    EventType,\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    LoginPayload,\r\n} from \"matrix-js-sdk\"\r\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx\r\n} from \"./public\"\r\nimport { AuthData } from \"./types\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport { updateMessages } from \"@/room-messages/private\"\r\nimport { roomMessage } from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    toggleTypingUser\r\n} from \"@/room\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId() as string)\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = (room.currentState\r\n            .getStateEvents(\r\n                \"m.room.create\" as EventType, \r\n                undefined as any\r\n            ) as any)[0]?.getContent()?.isDirect\r\n\r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => toggleTypingUser(member)\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    }: LoginPayload = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use(() => client().logout())\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const { store } = client()\r\n    if (store) await store.startup()\r\n    await client().startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import matrix, {\r\n    Room,\r\n    TimelineWindow,\r\n    MatrixEvent,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport { attach, forward, guard, sample } from \"effector\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    getRoomMembersFx,\r\n    initRoomFx,\r\n    loadRoomFx,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    onRoomLoaded,\r\n    createRoomFx,\r\n    getAllUsersFx,\r\n    inviteUserFx,\r\n    kickUserRoomFx,\r\n    renameRoomFx,\r\n    joinRoomFx,\r\n    createDirectRoomFx,\r\n    clearCurrentRoomState,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForRedact,\r\n    $requiredPowerLevelForDefaultState,\r\n    $currentRoom,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    $loadFilter,\r\n    $typingMembers,\r\n    clearTypingMember,\r\n    toggleTypingUser\r\n} from \"./public\"\r\nimport { LoadRoomFxParams, Visibility } from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotFound\r\n} from \"@/errors\"\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst setRoomByIdFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n\r\n$typingMembers\r\n    .on(toggleTypingUser, (members, member) => {\r\n        if(member.typing) {\r\n            if (members[member.roomId]) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...members[member.roomId], member] \r\n                }\r\n            } \r\n            return {\r\n                ...members,\r\n                [member.roomId]: [member] \r\n            }\r\n        } \r\n        else if (members[member.roomId]) {\r\n            if (members[member.roomId].length > 1) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [\r\n                        ...members[member.roomId]\r\n                            .filter(\r\n                                ({userId}) => userId !== member.userId),\r\n                        member] \r\n                }\r\n            }\r\n            delete members[member.roomId]\r\n            return {\r\n                ...members, \r\n            }\r\n        }\r\n    })\r\n    .reset(clearTypingMember)\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getRoomByIdFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getRoomByIdFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = (\r\n        room.currentState\r\n            .getStateEvents(\"m.room.power_levels\", \"\") as MatrixEvent[])[0]\r\n        .getContent() as any\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetRoomMembersFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return Object.values(room.currentState.members)\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    await timelineWindow.load(initialEventId, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const membersCache: { [id: string]: RoomMember } = {}\r\n    const searchResponse = await client().search({\r\n        body: {\r\n            search_categories: {\r\n                room_events: {\r\n                    search_term: term,\r\n                    keys: [\"content.body\"],\r\n                    filter: {\r\n                        rooms: [roomId],\r\n                    },\r\n                    order_by: orderBy,\r\n                },\r\n            },\r\n        },\r\n    })\r\n    return searchResponse\r\n        .search_categories\r\n        .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n            const event = new MatrixEvent(result as any)\r\n            const senderId = event.getSender()\r\n            if (membersCache[senderId] === undefined) {\r\n                membersCache[senderId] = room.getMember(senderId)\r\n            }\r\n            event.sender = membersCache[senderId]\r\n            return toMessage(event)\r\n        })\r\n})\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    await client().invite(roomId, userId)\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n","import { attach, forward, guard, sample } from \"effector\"\r\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\r\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\r\nimport { paginateForwardFx } from \"@/room-pagination/private\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx\r\n} from \"./public\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport {\r\n    RoomNotFound,\r\n    EventNotFound,\r\n    ClientNotInitialized,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        updateMessages,\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nsendMessageFx.use(({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => client().sendMessage(roomId, content, txnId))\r\neditMessageFx.use(({\r\n    roomId, eventId, body, txnId,\r\n}) => client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n","import { combine, forward, guard } from \"effector\"\r\nimport matrix from \"matrix-js-sdk\"\r\nimport {\r\n    $currentRoomId,\r\n    $loadRoomFxPending,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { $loadFilter } from \"@/room/private\"\r\nimport { setMessages } from \"@/room-messages/private\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx\r\n} from \"./private\"\r\nimport {\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    onPaginateForwardDone\r\n} from \"./public\"\r\nimport { TimelineWindowUndefined } from \"@/errors\"\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n      && !backwardPaginationPending\r\n      && !forwardPaginationPending\r\n      && !roomLoading\r\n)\r\n\r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n\r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n\r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n\r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","MsgType","clientStore","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","messageBatchInterval","callbacksStore","createClient","options","ms","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","getIsDirectRoomsIds","directRooms","getAccountData","_cl$getAccountData","Object","values","flatMap","setDirectRoom","creator","_cl$getRoom","currentState","getStateEvents","_cl$getRoom$currentSt2","prevData","_cl$getAccountData2","prevRoomsId","setAccountData","getRoomByIdFx","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","timeout","typing","reset","_","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","is_direct","creation_content","reason","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
>>>>>>> 467cf52 (add typing store)
