{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/idbHelper.ts","../src/verification/public.ts","../src/create-verification-method/domain.ts","../src/create-verification-method/public.ts","../src/cryptoCallbacks.ts","../src/reset-cross-signing/domain.ts","../src/reset-cross-signing/public.ts","../src/interactive-auth/domain.ts","../src/interactive-auth/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/private.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/MegolmExportEncryption.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/reducers.ts","../src/verification/init.ts","../src/reset-cross-signing/init.ts","../src/create-verification-method/init.ts","../src/interactive-auth/private.ts","../src/interactive-auth/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n\nexport enum SecureBackupSetupMethod {\n    Key = \"key\",\n    Passphrase = \"passphrase\",\n}\n\nexport enum RecoveryKeyOrPassphraseEnum {\n    RecoveryKey = \"RecoveryKey\",\n    Passphrase = \"Passphrase\"\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n\nexport const $currentDeviceId = appDomain.store<string | null>(null)","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type RoomPermissions = {\n    canInvite: boolean\n    canBan: boolean\n    canSendDefaultEvent: boolean\n    canRedact: boolean\n    canKick: boolean\n    canSetDefaultState: boolean\n}\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    RoomPermissions,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getPermissionsByRoomIdFx = roomDomain\n    .effect<string, RoomPermissions, Error>()\n\nexport const getUserDevicesInfoFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore.stopPeeking()\n        // TODO Не чистить сторы, если userId нового юзера совпадает со старым юзером\n        clientStore.clearStores()\n        clientStore.crypto.stop()\n        clientStore.crypto.cryptoStore.deleteAllData()\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { \n    VerificationRequest, \n    IVerificationChannel, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: number\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n\nexport type InputToKeyParams = {\n  passphrase?: string\n  recoveryKey?: string\n}\n\nexport type CheckKeyInfo = {\n  keyInfo: ISecretStorageKeyInfo\n}\n\nexport type ValidatePassphraseFxParams = CheckKeyInfo & { passphrase: string }\nexport type ValidateRecoveryKeyFxParams = CheckKeyInfo & { input: string }","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\nimport { RenameDeviceParams, SessionInfo } from \"./types\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\nexport const $mySessionsInfo = d.store<SessionInfo[] | null>(null)\nexport const getMySessionsFx = d.effect<void, SessionInfo[], Error>()\nexport const clearMySessionsInfo = d.event<void>()\n\nexport const logoutSessionsById = d.event<SessionInfo[\"device_id\"][]>()\n\nexport const renameDeviceFx = d.effect<RenameDeviceParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const verificationDomain = root.domain(\"verificationDomain\")\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { createApi } from \"effector\"\nimport { verificationDomain } from \"./domain\"\nimport {\n    MyVerificationRequest,\n    StartVerificationDeviceParams,\n    CheckKeyInfo,\n    InputToKeyParams,\n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\n// Emodji SAS Verification\n\nexport const $isWaitingAnotherUser = verificationDomain\n    .store<boolean>(false)\n\nexport const {\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser\n} = createApi(\n    $isWaitingAnotherUser,\n    {\n        setWaitingAnotherUser: () => true,\n        resetWaitingAnotherUser: () => false\n    }\n)\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startThisDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n\n\n// Recovery Key\n\nexport const onNeedRecoveryKeyOrPassphrase = verificationDomain\n    .event<void>()\n\nexport const startRecoveryKeyOrPassphraseVerification = verificationDomain\n    .event<void>()\n\nexport const setCheckKeyInfo = verificationDomain\n    .event<CheckKeyInfo>()\n\nexport const validateRecoveryKey = verificationDomain.event<string>()\n\nexport const onRecoveryKeyOrPassphraseSuccess = verificationDomain.event<void>()\n\nexport const onValidRecoveryKey = verificationDomain.event<void>()\nexport const onInvalidRecoveryKey = verificationDomain.event<Error>()\n\n// passphrasse verification \n\nexport const $hasPassphrase = verificationDomain.store<boolean>(false)\nexport const onHasPassphrase = verificationDomain.event<boolean>()\n\nexport const validatePassphrase = verificationDomain.event<string>()\nexport const onValidPassphrase = verificationDomain.event<void>()\nexport const onInvalidPassphrase = verificationDomain.event<Error>()\n\n// others\nexport const $canVerify = verificationDomain.store<boolean>(false)\n\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkThisDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\nexport const onUsersProfileUpdate = verificationDomain\n    .event<UserId[]>()\n\nexport const onResolveSecretStorageKey = verificationDomain\n    .event<InputToKeyParams>()\n\nexport const onRejectSecretStorageKey = verificationDomain\n    .event<void>()\n\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"createVerificationMethod\")\n","import { IRecoveryKey } from \"matrix-js-sdk\"\n\nimport { SecureBackupSetupMethod } from \"@/types\"\n\nimport { d } from \"./domain\"\n\nexport const createRecoveryKeyAndPassPhraseFx = d\n    .effect<string | undefined, IRecoveryKey, Error>()\n\nexport const getSecureBackupSetupMethodsFx = d\n    .effect<void, SecureBackupSetupMethod[], Error>()\n\nexport const onNeedCreateRecoveryMethod = d.event<void>()\n\nexport const lossAllRecoveryKeyMethod = d.event<void>()\n\nexport const cancelCreateNewMethod = d.event<void>()\nexport const onNewRecoveryMethodCreated = d.event<void>()\n\nexport const bootstrapSecretStorageFx = d.effect<IRecoveryKey, void, Error>()\n\nexport const resetAllRecoveryKeyMethodsFx = d.effect<void,void, Error>()\n","import {\n    decodeRecoveryKey,\n    deriveKey,\n    DeviceTrustLevel,\n    encodeBase64,\n    encodeUnpaddedBase64,\n    ICryptoCallbacks,\n    ISecretStorageKeyInfo,\n    MatrixClient\n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\nimport {\n    InputToKeyParams,\n    onHasPassphrase,\n    setCheckKeyInfo,\n    onNeedRecoveryKeyOrPassphrase,\n    onRecoveryKeyOrPassphraseSuccess,\n    onRejectSecretStorageKey,\n} from \"@/verification\"\nimport { onResolveSecretStorageKey } from \"./verification\"\nimport { \n    cancelCreateNewMethod, \n    onNeedCreateRecoveryMethod,\n    onNewRecoveryMethodCreated\n} from \"@/create-verification-method\"\n\nlet secretStorageBeingAccessed = false\nlet secretStorageKeys: Record<string, Uint8Array> = {}\nlet secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\ntype CreatePromiseResult<T> = {\n    promise: Promise<T>\n    resolve: (params: T) => void\n    reject: (params: any) => void\n}\n\nfunction createPromise<T>(): CreatePromiseResult<T> {\n    let resolve = (params: T) => { return }\n    let reject = (params: any) => { return }\n    const promise = new Promise<T>((res, rej) => {\n        resolve = res\n        reject = rej\n    })\n    return {promise, resolve, reject}\n}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction setCachingAllowed(newVal: boolean): void {\n    secretStorageBeingAccessed = newVal\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    secretStorageKeys[keyId] = key\n    secretStorageKeyInfo[keyId] = keyInfo\n}\n\nexport async function promptForBackupPassphrase(): Promise<Uint8Array> {\n    const key = new Uint8Array()\n\n    console.log(\"promptForBackupPassphrase\")\n    // const success = await finished;\n    // if (!success) throw new Error(\"Key backup prompt cancelled\");\n\n    return key\n}\n\nexport async function accessSecretStorage(\n    func = async () => { return },\n    forceReset = false\n): Promise<any> {\n    const cl = client()\n    setCachingAllowed(true)\n    try {\n        if (!(await cl.hasSecretStorageKey()) || forceReset) {\n            const {promise, reject, resolve} = createPromise<void>()\n            onNeedCreateRecoveryMethod()\n            const createdSub = onNewRecoveryMethodCreated.watch(() => {\n                resolve()\n            })\n            const cancelSub = cancelCreateNewMethod.watch(() => {\n                reject(\"Cancel create new Method\")\n            })\n            promise.finally(() => {\n                cancelSub()\n                createdSub()\n            })\n            await promise\n        } else {\n            await cl.bootstrapCrossSigning({})\n            await cl.bootstrapSecretStorage({\n                getKeyBackupPassphrase: promptForBackupPassphrase,\n            })\n    \n            const keyId = Object.keys(secretStorageKeys)[0]\n            if (keyId) {\n                let dehydrationKeyInfo = {}\n                if (\n                    secretStorageKeyInfo[keyId]\n                    && secretStorageKeyInfo[keyId].passphrase\n                ) {\n                    dehydrationKeyInfo = {\n                        passphrase: secretStorageKeyInfo[keyId].passphrase\n                    }\n                }\n                console.log(\"Setting dehydration key\")\n                await cl\n                    .setDehydrationKey(\n                        secretStorageKeys[keyId],\n                        dehydrationKeyInfo,\n                        \"Backup device\"\n                    )\n            } else if (!keyId) {\n                console.warn(\"Not setting dehydration key: no SSSS key found\")\n            } else {\n                console.log(\"Not setting dehydration key: feature disabled\")\n            }\n    \n        }\n        // `return await` needed here to ensure `finally` block runs after the\n        // inner operation completes.\n        return await func()\n    } catch (e) {\n        // SecurityCustomisations.catchAccessSecretStorageError?.(e)\n        console.error(e)\n        // Re-throw so that higher level logic can abort as needed\n        throw e\n    } finally {\n        // Clear secret storage key cache now that work is complete\n        setCachingAllowed(false)\n        if (!isCachingAllowed()) {\n            secretStorageKeys = {}\n            secretStorageKeyInfo = {}\n        }\n    }\n}\n\n\nexport function makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (params: InputToKeyParams) => Promise<Uint8Array> {\n    return async (params) => {\n        if (params.passphrase) {\n            return deriveKey(\n                params.passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else if (params.recoveryKey) {\n            return decodeRecoveryKey(params.recoveryKey)\n        }\n        throw new Error(\"Invalid recoveryKey or passphrase\")\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cl = client()\n    let keyId = await cl.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if (!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    } \n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        [keyId, keyInfo] = keyInfoEntries[0]\n    }\n\n    // Check the in-memory cache\n    if (secretStorageKeys[keyId] && isCachingAllowed()) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (await cl.checkSecretStorageKey(dehydrationCache.key, keyInfo)) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n    const {promise, resolve, reject} = createPromise<InputToKeyParams>()\n    const resolveWatcher = onResolveSecretStorageKey.watch(resolve)\n    const rejectWatcher = onRejectSecretStorageKey.watch(reject)\n\n    promise.finally(() => {\n        resolveWatcher.unsubscribe()\n        rejectWatcher.unsubscribe()\n    })\n    \n    onNeedRecoveryKeyOrPassphrase()\n    onHasPassphrase(Boolean(keyInfo.passphrase))\n    setCheckKeyInfo({ keyInfo })\n\n    const input = await promise\n\n    const key = await inputToKey(input)\n\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    onRecoveryKeyOrPassphraseSuccess()\n    return [keyId, key]\n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\" })\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if (key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        let data\n        try {\n            data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n        } catch (e) {\n            console.log(\"idbLoad for pickleKey failed\", e)\n        }\n        if (!data) {\n            return null\n        }\n        if (!data.encrypted || !data.iv || !data.cryptoKey) {\n            console.log(\"Badly formatted pickle key\")\n            return null\n        }\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        try {\n            const key = await crypto.subtle.decrypt(\n                { name: \"AES-GCM\", iv: data.iv, additionalData },\n                data.cryptoKey,\n                data.encrypted,\n            )\n            return encodeUnpaddedBase64(key)\n        } catch (e) {\n            console.log(\"Error decrypting pickle key\")\n            return null\n        }\n    }\n\nexport const CreatePickleKey =\n    async (userId: string, deviceId: string): Promise<string | null> => {\n        if (!window.crypto || !window.crypto.subtle) {\n            return null\n        }\n        const crypto = window.crypto\n        const randomArray = new Uint8Array(32)\n        crypto.getRandomValues(randomArray)\n        const cryptoKey = await crypto.subtle.generateKey(\n            { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n        )\n        const iv = new Uint8Array(32)\n        crypto.getRandomValues(iv)\n\n        const additionalData = new Uint8Array(\n            userId.length + deviceId.length + 1\n        )\n        for (let i = 0; i < userId.length; i++) {\n            additionalData[i] = userId.charCodeAt(i)\n        }\n        additionalData[userId.length] = 124 // \"|\"\n        for (let i = 0; i < deviceId.length; i++) {\n            additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n        }\n\n        const encrypted = await crypto.subtle.encrypt(\n            { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n        )\n\n        try {\n            await IdbSave(\n                \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n            )\n        } catch (e) {\n            return null\n        }\n        return encodeUnpaddedBase64(randomArray)\n    }\n\nexport async function tryToUnlockSecretStorageWithDehydrationKey(\n    client: MatrixClient,\n): Promise<void> {\n    const key = dehydrationCache.key\n    let restoringBackup = false\n    if (key && (await client.isSecretStorageReady())) {\n        setCachingAllowed(true)\n        try {\n            await client.checkOwnCrossSigningTrust()\n    \n            // we also need to set a new dehydrated device to replace the\n            // device we rehydrated\n            let dehydrationKeyInfo = {}\n            if (\n                dehydrationCache.keyInfo \n                && dehydrationCache.keyInfo.passphrase\n            ) {\n                dehydrationKeyInfo = { \n                    passphrase: dehydrationCache.keyInfo.passphrase }\n            }\n            await client\n                .setDehydrationKey(key, dehydrationKeyInfo, \"Backup device\")\n    \n            // and restore from backup\n            const backupInfo = await client.getKeyBackupVersion()\n            if (backupInfo) {\n                restoringBackup = true\n                // don't await, because this can take a long time\n                client.restoreKeyBackupWithSecretStorage(backupInfo)\n                    .finally(() => {\n                        secretStorageBeingAccessed = false\n                        if (!isCachingAllowed()) {\n                            secretStorageKeys = {}\n                            secretStorageKeyInfo = {}\n                        }\n                    })\n            }\n        } finally {\n            dehydrationCache = {}\n            // the secret storage cache is needed for restoring from backup, so\n            // don't clear it yet if we're restoring from backup\n            if (!restoringBackup) {\n                setCachingAllowed(false)\n                if (!isCachingAllowed()) {\n                    secretStorageKeys = {}\n                    secretStorageKeyInfo = {}\n                }\n            }\n        }\n    }\n}\n    \n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"resetCrossSigning\")\n","import { d } from \"./domain\"\nimport { ConfirmResetCrossSigningFxResult } from \"./types\"\n\nexport const confirmResetCrossSigningFx = d\n    .effect<void, ConfirmResetCrossSigningFxResult, Error>()\n\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"interactiveAuth\")\n","import { IAuthData } from \"matrix-js-sdk\"\n\nimport { d } from \"./domain\"\nimport { OnInteractiveAuthStateUpdateResult } from \"./types\"\n\nexport const createInteractiveAuthFx = d\n    .effect<(auth: IAuthData) => Promise<IAuthData>, void, Error>()\n\nexport const submitAuthDict = d.event<string>()\n\nexport const onNeedUserPassword = d.event<void>()\nexport const onUserPasswordError = d.event<string>()\nexport const onUserPasswordSuccess = d.event<void>()\n\nexport const onInteractiveAuthBusyChange = d.event<boolean>()\nexport const onInteractiveAuthStateUpdate = d\n    .event<OnInteractiveAuthStateUpdateResult>()\n\nexport const cancelInteractiveAuth = d.event<void>()\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\nexport const InvalidBackupInfo = createCustomError(\"InvalidBackupInfo\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n\nexport const E2EE_WK_KEY = \"io.element.e2ee\"\nexport const E2EE_WK_KEY_DEPRECATED = \"im.vector.riot.e2ee\"","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\nimport { ExportE2ERoomsKeysFxParams, importE2ERoomsKeysFxParams } from \"./types\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n\nexport const $isCryptoEnabled = cryptoDomain.store<boolean | null>(null)\n\nexport const $identityKey = cryptoDomain.store<string|null>(null)\n\nexport const exportE2ERoomsKeysFx = cryptoDomain\n    .effect<ExportE2ERoomsKeysFxParams, ArrayBuffer, Error>()\n\nexport const importE2ERoomsKeysFx = cryptoDomain\n    .effect<importE2ERoomsKeysFxParams, void, Error>()\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n    UserTrustLevel,\n} from \"matrix-js-sdk\"\nimport { DeviceInfo } from \"matrix-js-sdk/lib/crypto/deviceinfo\"\n\nimport { IdbDelete } from \"@/idbHelper\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport {\n    checkBackupKeyFx,\n    initCryptoFx,\n    onCrossSigningKeyChange,\n} from \"@/crypto\"\nimport {\n    onVerificationRequest,\n    MyVerificationRequest,\n    onUpdateDeviceList,\n    onUsersProfileUpdate,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n    $currentDeviceId,\n} from \"./public\"\n\n$currentDeviceId\n    .on(createClientFx.done, \n        (_, {params}) => params.createClientParams.options.deviceId)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Session.logged_out\", (args) => {\n        console.log(\"Session.logged_out\", args)\n    }],\n    // @TODO Реализовать. Этот эвент приходит когда логаут происходит из другой сессии.\n    // cli.on(HttpApiEvent.SessionLoggedOut, function (errObj) {\n    //     if (Lifecycle.isLoggingOut()) return;\n\n    //     // A modal might have been open when we were logged out by the server\n    //     Modal.closeCurrentModal('Session.logged_out');\n\n    //     if (errObj.httpStatus === 401 && errObj.data && errObj.data['soft_logout']) {\n    //         logger.warn(\"Soft logout issued by server - avoiding data deletion\");\n    //         Lifecycle.softLogout();\n    //         return;\n    //     }\n\n    //     Modal.createDialog(ErrorDialog, {\n    //         title: _t('Signed Out'),\n    //         description: _t('For security, this session has been signed out. Please sign in again.'),\n    //     });\n\n    //     dis.dispatch({\n    //         action: 'logout',\n    //     });\n    // });\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            const cl = client()\n            const deviceId = cl.getDeviceId()\n            const userId = cl.getUserId()\n            const isVerified = cl\n                .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n            if (isVerified || request.isSelfVerification) {\n                request.id = Date.now()\n                onVerificationRequest(request)\n            }\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n            onUsersProfileUpdate(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", (userIds: string[]) => {\n        onUpdateDeviceList(userIds)\n        onUsersProfileUpdate(userIds)\n    }],\n    [\"deviceVerificationChanged\", (\n        userId: string,\n        deviceId: string,\n        deviceInfo: DeviceInfo\n    ) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }],\n    [\"userTrustStatusChanged\", (userId: string, newStatus: UserTrustLevel) => {\n        onUpdateDeviceList([userId])\n        onUsersProfileUpdate([userId])\n    }]\n])\n\nloginByPasswordFx.use(async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        {\n            method: \"POST\",\n            body: JSON.stringify({ type: LOGIN_BY_TOKEN, token: params.token })\n        }\n    )\n    const {\n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return {\n        userId: user_id,\n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.downloadKeys([cl.getUserId() ?? createClientParams.options.userId])\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await IdbDelete(\"pickleKey\", [cl.getUserId(), cl.getDeviceId()])\n    await IdbDelete(\"account\", \"mx_access_token\")\n    cl.stopClient()\n    await cl.logout()\n    destroyClient()\n})\n\ngetProfileInfoFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { d } from \"./domain\"\nimport { SessionInfo } from \"./types\"\n\nexport const logoutSessionsByIdFx = d\n    .effect<SessionInfo[\"device_id\"][], void, Error>()\n","import { client } from \"@/matrix-client\"\nimport { forward, guard } from \"effector\"\nimport { IAuthData } from \"matrix-js-sdk\"\n\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\nimport { onUpdateDeviceList } from \"@/verification\"\n\nimport { logoutSessionsByIdFx } from \"./private\"\nimport { \n    updateDisplayNameFx, \n    updateAvatarUrlFx, \n    getMySessionsFx,\n    $mySessionsInfo,\n    clearMySessionsInfo,\n    logoutSessionsById,\n    renameDeviceFx,\n} from \"./public\"\n\n$mySessionsInfo\n    .on(getMySessionsFx.doneData, (_, sessionsInfo) => sessionsInfo)\n    .reset([getMySessionsFx.fail, clearMySessionsInfo])\n\nforward({\n    from: logoutSessionsById,\n    to: logoutSessionsByIdFx\n})\n\nguard({\n    clock: onUpdateDeviceList,\n    filter: $mySessionsInfo.map((sessions) => Boolean(sessions)),\n    target: getMySessionsFx,\n})\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\ngetMySessionsFx.use(async () => {\n    const cl = client()\n    const {devices} = await cl.getDevices()\n    const crossSigningInfo = cl.getStoredCrossSigningForUser(cl.getUserId())\n    const myDeviceId = cl.getDeviceId()\n    return devices.map((device) => {\n        const deviceInfo = cl.getStoredDevice(cl.getUserId(), device.device_id)\n        let isVerified = false\n        // @TODO В devices может прийти такой девайс, по которому мы не можем получить инфу\n        // и getStoredDevice отдает null\n        if (deviceInfo) {\n            isVerified = crossSigningInfo.checkDeviceTrust(\n                crossSigningInfo,\n                deviceInfo,\n                false,\n                true,\n            ).isCrossSigningVerified()\n        }\n\n        return {\n            ...device,\n            isVerified,\n            isCurrentSession: device.device_id === myDeviceId \n        }\n    })\n})\n\nlogoutSessionsByIdFx.use(async (sessionsId) => {\n    const cl = client()\n    const callback = async (auth: IAuthData) => {\n        await cl.deleteMultipleDevices(sessionsId, auth)\n        return auth\n    }\n    await createInteractiveAuthFx(callback)\n    await callback\n})\n\nrenameDeviceFx.use(async ({deviceId, newDisplayName}) => {\n    await client().setDeviceDetails(deviceId, {\n        display_name: newDisplayName,\n    })\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getPermissionsByRoomIdFx,\n    getUserDevicesInfoFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoom,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    \n    }),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: loadRoomMessage,\n        fn: ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample({\n        source: [$currentRoomId, $timelineWindow],\n        clock: toLiveTimeline,\n        fn: ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    }),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const isDirect = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members, true)\n        await cl.downloadKeysForUsers(members, {})\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetPermissionsByRoomIdFx.use(async (roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound(`Room ${roomId} not found`)\n    const userId = cl.getUserId()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound(`User ${userId} not found`)\n    const { powerLevel } = user \n    const {\n        kick,\n        ban,\n        invite,\n        events_default,\n        state_default,\n        redact\n    } = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        canKick: powerLevel >= kick,\n        canBan: powerLevel >= ban,\n        canInvite: powerLevel >= invite,\n        canSendDefaultEvent: powerLevel >= events_default,\n        canSetDefaultState: powerLevel >= state_default,\n        canRedact: powerLevel >= redact\n    }\n})\n\ngetUserDevicesInfoFx.use(async (userId) => {\n    const cl = client()\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","const subtleCrypto = window?.crypto.subtle\n\n/**\n * Derive the AES and HMAC-SHA-256 keys for the file\n *\n * @param {Unit8Array} salt  salt for pbkdf\n * @param {Number} iterations number of pbkdf iterations\n * @param {String} password  password\n * @return {Promise<[CryptoKey, CryptoKey]>} promise for [aes key, hmac key]\n */\nasync function deriveKeys(\n    salt: Uint8Array, \n    iterations: number, \n    password: string\n): Promise<[CryptoKey, CryptoKey]> {\n    let key\n    try {\n        key = await subtleCrypto.importKey(\n            \"raw\",\n            new TextEncoder().encode(password),\n            { name: \"PBKDF2\" },\n            false,\n            [\"deriveBits\"],\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.importKey failed: ${  e}`)\n    }\n\n    let keybits\n    try {\n        keybits = await subtleCrypto.deriveBits(\n            {\n                name: \"PBKDF2\",\n                salt: salt,\n                iterations: iterations,\n                hash: \"SHA-512\",\n            },\n            key,\n            512,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.deriveBits failed: ${  e}`)\n    }\n\n    const aesKey = keybits.slice(0, 32)\n    const hmacKey = keybits.slice(32)\n\n    const aesProm = subtleCrypto.importKey(\n        \"raw\",\n        aesKey,\n        { name: \"AES-CTR\" },\n        false,\n        [\"encrypt\", \"decrypt\"],\n    ).catch((e) => {\n        throw new Error(`subtleCrypto.importKey failed for AES key: ${  e}`)\n    })\n\n    const hmacProm = subtleCrypto.importKey(\n        \"raw\",\n        hmacKey,\n        {\n            name: \"HMAC\",\n            hash: { name: \"SHA-256\" },\n        },\n        false,\n        [\"sign\", \"verify\"],\n    ).catch((e) => {\n        throw new Error(`subtleCrypto.importKey failed for HMAC key: ${  e}`)\n    })\n\n    return Promise.all([aesProm, hmacProm])\n}\n\nconst HEADER_LINE = \"-----BEGIN MEGOLM SESSION DATA-----\"\nconst TRAILER_LINE = \"-----END MEGOLM SESSION DATA-----\"\n\n/**\n * Encode a typed array of uint8 as base64.\n * @param {Uint8Array} uint8Array The data to encode.\n * @return {string} The base64.\n */\nfunction encodeBase64(uint8Array: Uint8Array): string {\n    // Misinterpt the Uint8Array as Latin-1.\n    // window.btoa expects a unicode string with codepoints in the range 0-255.\n    // @TODO fix me\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const latin1String = String.fromCharCode.apply(null, uint8Array)\n    // Use the builtin base64 encoder.\n    return window.btoa(latin1String)\n}\n\n/**\n * Decode a base64 string to a typed array of uint8.\n * @param {string} base64 The base64 to decode.\n * @return {Uint8Array} The decoded data.\n */\nfunction decodeBase64(base64: string): Uint8Array {\n    // window.atob returns a unicode string with codepoints in the range 0-255.\n    const latin1String = window.atob(base64)\n    // Encode the string as a Uint8Array\n    const uint8Array = new Uint8Array(latin1String.length)\n    for (let i = 0; i < latin1String.length; i++) {\n        uint8Array[i] = latin1String.charCodeAt(i)\n    }\n    return uint8Array\n}\n\n/**\n * ascii-armour a  megolm key file\n *\n * base64s the content, and adds header and trailer lines\n *\n * @param {Uint8Array} data  raw data\n * @return {ArrayBuffer} formatted file\n */\nfunction packMegolmKeyFile(data: Uint8Array): ArrayBuffer {\n    // we split into lines before base64ing, because encodeBase64 doesn't deal\n    // terribly well with large arrays.\n    const LINE_LENGTH = (72 * 4 / 3)\n    const nLines = Math.ceil(data.length / LINE_LENGTH)\n    const lines = new Array(nLines + 3)\n    lines[0] = HEADER_LINE\n    let o = 0\n    let i\n    for (i = 1; i <= nLines; i++) {\n        lines[i] = encodeBase64(data.subarray(o, o+LINE_LENGTH))\n        o += LINE_LENGTH\n    }\n    lines[i++] = TRAILER_LINE\n    lines[i] = \"\"\n    return (new TextEncoder().encode(lines.join(\"\\n\"))).buffer\n}\n\n/**\n * Encrypt a megolm key file\n *\n * @param {String} data\n * @param {String} password\n * @param {Object=} options\n * @param {Number=} options.kdf_rounds Number of iterations to perform of the\n *    key-derivation function.\n * @return {Promise<ArrayBuffer>} promise for encrypted output\n */\nexport async function encryptMegolmKeyFile(\n    data: string,\n    password: string,\n    options?: { kdf_rounds?: number }, // eslint-disable-line camelcase\n): Promise<ArrayBuffer> {\n    options = options || {}\n    const kdfRounds = options.kdf_rounds || 500000\n\n    const salt = new Uint8Array(16)\n    window.crypto.getRandomValues(salt)\n\n    const iv = new Uint8Array(16)\n    window.crypto.getRandomValues(iv)\n\n    // clear bit 63 of the IV to stop us hitting the 64-bit counter boundary\n    // (which would mean we wouldn't be able to decrypt on Android). The loss\n    // of a single bit of iv is a price we have to pay.\n    iv[8] &= 0x7f\n\n    const [aesKey, hmacKey] = await deriveKeys(salt, kdfRounds, password)\n    const encodedData = new TextEncoder().encode(data)\n\n    let ciphertext\n    try {\n        ciphertext = await subtleCrypto.encrypt(\n            {\n                name: \"AES-CTR\",\n                counter: iv,\n                length: 64,\n            },\n            aesKey,\n            encodedData,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.encrypt failed: ${  e}`)\n    }\n\n    const cipherArray = new Uint8Array(ciphertext)\n    const bodyLength = (1+salt.length+iv.length+4+cipherArray.length+32)\n    const resultBuffer = new Uint8Array(bodyLength)\n    let idx = 0\n    resultBuffer[idx++] = 1 // version\n    resultBuffer.set(salt, idx); idx += salt.length\n    resultBuffer.set(iv, idx); idx += iv.length\n    resultBuffer[idx++] = kdfRounds >> 24\n    resultBuffer[idx++] = (kdfRounds >> 16) & 0xff\n    resultBuffer[idx++] = (kdfRounds >> 8) & 0xff\n    resultBuffer[idx++] = kdfRounds & 0xff\n    resultBuffer.set(cipherArray, idx); idx += cipherArray.length\n\n    const toSign = resultBuffer.subarray(0, idx)\n\n    let hmac\n    try {\n        hmac = await subtleCrypto.sign(\n            { name: \"HMAC\" },\n            hmacKey,\n            toSign,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.sign failed: ${  e}`)\n    }\n\n    const hmacArray = new Uint8Array(hmac)\n    resultBuffer.set(hmacArray, idx)\n    return packMegolmKeyFile(resultBuffer)\n}\n\n/**\n * Unbase64 an ascii-armoured megolm key file\n *\n * Strips the header and trailer lines, and unbase64s the content\n *\n * @param {ArrayBuffer} data  input file\n * @return {Uint8Array} unbase64ed content\n */\nfunction unpackMegolmKeyFile(data: ArrayBuffer): Uint8Array {\n    // parse the file as a great big String. This should be safe, because there\n    // should be no non-ASCII characters, and it means that we can do string\n    // comparisons to find the header and footer, and feed it into window.atob.\n    const fileStr = new TextDecoder().decode(new Uint8Array(data))\n\n    // look for the start line\n    let lineStart = 0\n    // eslint-disable-next-line no-constant-condition\n    while (1) {\n        const lineEnd = fileStr.indexOf(\"\\n\", lineStart)\n        if (lineEnd < 0) {\n            throw new Error(\"Header line not found\")\n        }\n        const line = fileStr.slice(lineStart, lineEnd).trim()\n\n        // start the next line after the newline\n        lineStart = lineEnd+1\n\n        if (line === HEADER_LINE) {\n            break\n        }\n    }\n\n    const dataStart = lineStart\n\n    // look for the end line\n    // eslint-disable-next-line no-constant-condition\n    while (1) {\n        const lineEnd = fileStr.indexOf(\"\\n\", lineStart)\n        const line = fileStr\n            .slice(lineStart, lineEnd < 0 ? undefined : lineEnd).trim()\n        if (line === TRAILER_LINE) {\n            break\n        }\n\n        if (lineEnd < 0) {\n            throw new Error(\"Trailer line not found\")\n        }\n\n        // start the next line after the newline\n        lineStart = lineEnd+1\n    }\n\n    const dataEnd = lineStart\n    return decodeBase64(fileStr.slice(dataStart, dataEnd))\n}\n\n\n/**\n * Decrypt a megolm key file\n *\n * @param {ArrayBuffer} data file to decrypt\n * @param {String} password\n * @return {Promise<String>} promise for decrypted output\n *\n *\n */\nexport async function decryptMegolmKeyFile(\n    data: ArrayBuffer, \n    password: string\n): Promise<string> {\n    const body = unpackMegolmKeyFile(data)\n\n    // check we have a version byte\n    if (body.length < 1) {\n        throw new Error(\"Invalid file: too short\")\n    }\n\n    const version = body[0]\n    if (version !== 1) {\n        throw new Error(\"Unsupported version\")\n    }\n\n    const ciphertextLength = body.length-(1+16+16+4+32)\n    if (ciphertextLength < 0) {\n        throw new Error(\"Invalid file: too short\")\n    }\n\n    const salt = body.subarray(1, 1+16)\n    const iv = body.subarray(17, 17+16)\n    const iterations = \n        body[33] << 24 | body[34] << 16 | body[35] << 8 | body[36]\n    const ciphertext = body.subarray(37, 37+ciphertextLength)\n    const hmac = body.subarray(-32)\n\n    const [aesKey, hmacKey] = await deriveKeys(salt, iterations, password)\n    const toVerify = body.subarray(0, -32)\n\n    let isValid\n    try {\n        isValid = await subtleCrypto.verify(\n            { name: \"HMAC\" },\n            hmacKey,\n            hmac,\n            toVerify,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.verify failed: ${  e}`)\n    }\n    if (!isValid) {\n        throw new Error(\n            \"hmac mismatch Authentication check failed: incorrect password?\"\n        )\n    }\n\n    let plaintext\n    try {\n        plaintext = await subtleCrypto.decrypt(\n            {\n                name: \"AES-CTR\",\n                counter: iv,\n                length: 64,\n            },\n            aesKey,\n            ciphertext,\n        )\n    } catch (e) {\n        throw new Error(`subtleCrypto.decrypt failed: ${  e}`)\n    }\n\n    return new TextDecoder().decode(new Uint8Array(plaintext))\n}\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const setEnableCrypto = cryptoDomain.event<boolean>()\n\nexport const getIdentityKeyFx = cryptoDomain\n    .effect<void, string | null, Error>()\n","import { client } from \"@/matrix-client\"\nimport { forward } from \"effector\"\n\nimport { \n    decryptMegolmKeyFile, \n    encryptMegolmKeyFile\n} from \"@/MegolmExportEncryption\"\nimport { checkThisDeviceVerificationFx } from \"@/verification\"\nimport { destroyClientFx } from \"@/app\"\n\nimport { \n    crossSigningChangeFx, \n    getIdentityKeyFx, \n    setEnableCrypto\n} from \"./private\"\nimport { \n    $identityKey,\n    $isCryptoEnabled,\n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    exportE2ERoomsKeysFx, \n    onCrossSigningKeyChange,\n    importE2ERoomsKeysFx, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\n$isCryptoEnabled\n    .on(setEnableCrypto, (_, isEnabled) => isEnabled)\n    .reset(destroyClientFx)\n\n$identityKey\n    .on(getIdentityKeyFx.doneData, (_, key) => key)\n    .reset(destroyClientFx)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\nforward({\n    from: initCryptoFx.done,\n    to: getIdentityKeyFx\n})\n\nforward({\n    from: [initCryptoFx.done, crossSigningChangeFx.done],\n    to: checkThisDeviceVerificationFx\n})\n\ncheckBackupKeyFx.use(() => {\n    return client().getKeyBackupEnabled()\n})\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n\n    if (!cl.initCrypto) {\n        setEnableCrypto(false)\n        return\n    }\n\n    await cl.initCrypto()\n    setEnableCrypto(true)\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n})\n\ngetIdentityKeyFx.use(() => {\n    const key = client().getDeviceEd25519Key()\n    if (!key) throw new Error(\"crypto is disabled\")\n    return key\n})\n\nexportE2ERoomsKeysFx.use(async ({passphrase}) => {\n    const cl = client()\n    const keys = await cl.exportRoomKeys()\n\n    return encryptMegolmKeyFile(\n        JSON.stringify(keys), passphrase,\n    )\n})\n\nimportE2ERoomsKeysFx.use(async ({arrayBuffer, passphrase}) => {\n    const keys = await decryptMegolmKeyFile(\n        arrayBuffer, passphrase,\n    )\n    const cl = client()\n    cl.importRoomKeys(JSON.parse(keys))\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams, \n    CheckKeyInfo,\n    ValidatePassphraseFxParams,\n    ValidateRecoveryKeyFxParams,\n} from \"./types\"\n\n// Emodji SAS Verification\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n// Recovery key\n\nexport const restoreKeyBackupFx = verificationDomain\n    .effect<void, void, Error>()\n\nexport const $checkKeyInfo = verificationDomain\n    .store<CheckKeyInfo | null>(null)\n\nexport const validateRecoveryKeyFx = verificationDomain\n    .effect<ValidateRecoveryKeyFxParams, boolean, Error>()\n\n// others\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const validatePassphraseFx = verificationDomain\n    .effect<ValidatePassphraseFxParams, boolean, Error>()\n\nexport const checkCanVerifyFx = verificationDomain\n    .effect<void, boolean, Error>()\n","import { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport {\n    onCancelVerificationEvent, \n    startSASFx, \n    updateVerificationPhase,\n    cancelVerificationEventFx, \n} from \"./private\"\nimport {\n    onUsersProfileUpdate, \n    setCurrentVerificationEvent \n} from \"./public\"\nimport { \n    MyVerificationRequest,\n    OnVerificationRequestFxParams, \n    Phase\n} from \"./types\"\n\n\nexport const onVerificationRequestFxReducer = async (\n    {\n        request, \n        currentRequest\n    }: OnVerificationRequestFxParams): Promise<MyVerificationRequest> => {\n    const onChange = () => {\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n            return\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            onUsersProfileUpdate([request.otherUserId])\n            return\n        }\n\n        if (request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n            return\n        }\n\n        if (\n            request.phase === Phase.Started \n          && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n            return\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const excludePhaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested\n    ]\n    if (!currentRequest && !excludePhaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        if (\n            request.phase === Phase.Started \n        && !(request.verifier as any).sasEvent\n        ) {\n            await startSASFx(request)\n        }\n    }\n\n    return request\n}\n","import { forward, sample, guard, attach } from \"effector\"\nimport { client } from \"@/matrix-client\"\n\nimport { createDirectRoomFx } from \"@/room\"\nimport { MappedUser } from \"@/types\"\nimport { createClientFx, destroyClientFx } from \"@/app\"\nimport { InvalidBackupInfo } from \"@/errors\"\n\nimport {\n    updateVerificationPhase,\n    onCancelVerificationEvent,\n    confirmSASVerificationFx,\n    onVerificationRequestFx,\n    startSASFx,\n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n    restoreKeyBackupFx,\n    cancelVerificationEventFx,\n    validateRecoveryKeyFx,\n    $checkKeyInfo,\n    validatePassphraseFx,\n    checkCanVerifyFx,\n} from \"./private\"\nimport {\n    onHasPassphrase,\n    $currentVerificationEvent,\n    $deviceIsVerified,\n    $verificationEvents,\n    checkThisDeviceVerificationFx,\n    confirmSASVerification,\n    startThisDeviceVerificationFx,\n    onVerificationRequest,\n    setCurrentVerificationEvent,\n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests,\n    startRecoveryKeyOrPassphraseVerification,\n    $hasPassphrase,\n    setWaitingAnotherUser,\n    resetWaitingAnotherUser,\n    setCheckKeyInfo,\n    validateRecoveryKey,\n    onValidRecoveryKey,\n    onInvalidRecoveryKey,\n    onRejectSecretStorageKey,\n    validatePassphrase,\n    onInvalidPassphrase,\n    onValidPassphrase,\n    $canVerify,\n} from \"./public\"\nimport { \n    MyVerificationRequest, \n    ValidatePassphraseFxParams, \n    ValidateRecoveryKeyFxParams \n} from \"./types\"\nimport { onVerificationRequestFxReducer } from \"./reducers\"\nimport { accessSecretStorage, makeInputToKey } from \"../cryptoCallbacks\"\n    \n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n    .reset(destroyClientFx)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n    .reset(destroyClientFx)\n// When copying an object, proto properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n    .reset(destroyClientFx)\n\n$hasPassphrase\n    .on(onHasPassphrase, (_, val) => val)\n    .reset(destroyClientFx)\n\n$checkKeyInfo\n    .on(setCheckKeyInfo, (_, val) => val)\n    .reset([destroyClientFx, onRejectSecretStorageKey])\n\n$canVerify\n    .on(checkCanVerifyFx.doneData, (_, canVerify) => canVerify)\n    .reset(destroyClientFx.done)\n\nforward({\n    from: checkThisDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkThisDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx\n})\n\nforward({\n    from: [\n        startVerificationUserFx,\n        startVerificationDeviceFx,\n        confirmSASVerification,\n        startSASFx,\n        startThisDeviceVerificationFx\n    ],\n    to: setWaitingAnotherUser\n})\n\nforward({\n    from: [\n        onCancelVerificationEvent,\n        $currentVerificationEvent.updates\n    ],\n    to: resetWaitingAnotherUser\n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData,\n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nforward({\n    from: startRecoveryKeyOrPassphraseVerification,\n    to: restoreKeyBackupFx\n})\n\nforward({\n    from: validateRecoveryKeyFx.doneData,\n    to: onValidRecoveryKey\n})\n\nforward({\n    from: validateRecoveryKeyFx.failData,\n    to: onInvalidRecoveryKey,\n})\n\nforward({\n    from: validatePassphraseFx.doneData,\n    to: onValidPassphrase\n})\n\nforward({\n    from: validatePassphraseFx.failData,\n    to: onInvalidPassphrase,\n})\n\nforward({\n    from: [createClientFx.doneData, $deviceIsVerified.updates],\n    to: checkCanVerifyFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(onVerificationRequestFxReducer)\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    await (currentRequest.verifier as any).sasEvent.confirm()\n})\n\ncheckThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartThisDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = Date.now()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = Date.now()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n\ncheckCanVerifyFx.use(async () => {\n    const cl = client()\n    const cryptoEnabled = cl.isCryptoEnabled()\n    const homeserverSupportsCrossSigning = await cl\n        .doesServerSupportUnstableFeature(\"org.matrix.e2e_cross_signing\")\n\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n\n    const canVerify = cryptoEnabled\n        && homeserverSupportsCrossSigning\n        && isVerified\n    return canVerify\n})\n\nrestoreKeyBackupFx.use(async () => {\n    const cl = client()\n    accessSecretStorage(async () => {\n        const backupInfo = await cl.getKeyBackupVersion()\n        await cl.checkOwnCrossSigningTrust()\n\n        if (!backupInfo) throw new InvalidBackupInfo(\"backupInfo is null\")\n        await cl.restoreKeyBackupWithSecretStorage(backupInfo)\n    })\n})\n\nguard({\n    source: sample({\n        clock: validateRecoveryKey,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, input) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            input\n        }),\n    }),\n    filter: (params): params is ValidateRecoveryKeyFxParams => Boolean(\n        params.keyInfo\n    ),\n    target: validateRecoveryKeyFx,\n})\n\nguard({\n    source: sample({\n        clock: validatePassphrase,\n        source: $checkKeyInfo,\n        fn: (checkKeyInfo, passphrase) => ({\n            keyInfo: checkKeyInfo?.keyInfo,\n            passphrase,\n        }),\n    }),\n    filter: (params): params is ValidatePassphraseFxParams => Boolean(\n        params.keyInfo\n    ),\n    target: validatePassphraseFx,\n})\n\nvalidateRecoveryKeyFx.use(async ({ input, keyInfo }) => {\n    const cl = client()\n    const decodedKey = cl.keyBackupKeyFromRecoveryKey(input)\n    const isValid = await cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n    if (!isValid) throw new Error(\"Invalid recovery Key\")\n    return isValid\n})\n\nvalidatePassphraseFx.use( async ({keyInfo, passphrase}) => {\n    const cl = client()\n    const makeInput = makeInputToKey(keyInfo)\n    const decodedKey = await makeInput({passphrase})\n    const isValid = await cl.checkSecretStorageKey(\n        decodedKey, keyInfo,\n    )\n    if (!isValid) throw new Error(\"Invalid passphrase\")\n    return isValid\n})\n\n","import { IAuthData } from \"matrix-js-sdk\"\n\nimport { client } from \"@/matrix-client\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\n\nimport { confirmResetCrossSigningFx } from \"./public\"\nimport { ConfirmResetCrossSigningFxResult } from \"./types\"\n\nconfirmResetCrossSigningFx.use(async () => {\n    const cl = client()\n    const promise = new Promise<\n        ConfirmResetCrossSigningFxResult\n    >((res, rej) => {\n        cl.bootstrapCrossSigning({\n            authUploadDeviceSigningKeys: async (makeRequest) => {\n                const requestCallback = (\n                    auth: IAuthData, \n                ): Promise<IAuthData> => {\n                    return makeRequest(auth)\n                }\n                await createInteractiveAuthFx(requestCallback)\n            },\n\n            setupNewCrossSigning: true,\n        }).then(() => {\n            res({\n                result: true\n            })\n        })\n    })\n    return promise\n})\n","import { forward } from \"effector\"\nimport { IAuthData } from \"matrix-js-sdk\"\n\nimport { client } from \"@/matrix-client\"\nimport { SecureBackupSetupMethod } from \"@/types\"\nimport { accessSecretStorage } from \"@/cryptoCallbacks\"\nimport { createInteractiveAuthFx } from \"@/interactive-auth\"\nimport { \n    E2EE_WK_KEY, \n    E2EE_WK_KEY_DEPRECATED\n} from \"@/constants\"\n\nimport { \n    bootstrapSecretStorageFx,\n    createRecoveryKeyAndPassPhraseFx,\n    getSecureBackupSetupMethodsFx,\n    lossAllRecoveryKeyMethod, \n    onNewRecoveryMethodCreated, \n    resetAllRecoveryKeyMethodsFx\n} from \"./public\"\n\nforward({\n    from: lossAllRecoveryKeyMethod,\n    to: resetAllRecoveryKeyMethodsFx\n})\n\nforward({\n    from: bootstrapSecretStorageFx.doneData,\n    to: onNewRecoveryMethodCreated,\n})\n\nresetAllRecoveryKeyMethodsFx.use(async () => {\n    // Force reset secret storage (which resets the key backup)\n    await accessSecretStorage(async () => {\n        const cl = client()\n        await cl.bootstrapCrossSigning({\n            authUploadDeviceSigningKeys: async (makeRequest) => {\n                const requestCallback = (\n                    auth: IAuthData, \n                ): Promise<IAuthData> => {\n                    return makeRequest(auth)\n                }\n                await createInteractiveAuthFx(requestCallback)\n            },\n            setupNewCrossSigning: true,\n        })\n    }, true)\n})\n\nbootstrapSecretStorageFx.use(async (key) => {\n    const cl = client()\n    await cl.bootstrapSecretStorage({\n        createSecretStorageKey: async () => key,\n        setupNewKeyBackup: true,\n        setupNewSecretStorage: true,\n    })\n})\n\ncreateRecoveryKeyAndPassPhraseFx.use(async (password) => {\n    const cl = client()\n    const key = await cl.createRecoveryKeyFromPassphrase(password)\n    if (!key) throw new Error(\"createRecovery Error\")\n    return key\n})\n\ngetSecureBackupSetupMethodsFx.use(() => {\n    const clientWellKnown = client().getClientWellKnown()\n    let wellKnown = null\n    if (clientWellKnown && clientWellKnown[E2EE_WK_KEY]) {\n        wellKnown = clientWellKnown[E2EE_WK_KEY]\n    }\n    if (clientWellKnown && clientWellKnown[E2EE_WK_KEY_DEPRECATED]) {\n        wellKnown = clientWellKnown[E2EE_WK_KEY_DEPRECATED]\n    }\n    if (\n        !wellKnown ||\n        !wellKnown[\"secure_backup_setup_methods\"] ||\n        !wellKnown[\"secure_backup_setup_methods\"].length ||\n        !(\n            wellKnown[\"secure_backup_setup_methods\"]\n                .includes(SecureBackupSetupMethod.Key) ||\n            wellKnown[\"secure_backup_setup_methods\"]\n                .includes(SecureBackupSetupMethod.Passphrase)\n        )\n    ) {\n        return [\n            SecureBackupSetupMethod.Key,\n            SecureBackupSetupMethod.Passphrase,\n        ]\n    }\n    return wellKnown[\"secure_backup_setup_methods\"]\n})\n","import { InteractiveAuth } from \"matrix-js-sdk\"\n\nimport { d } from \"./domain\"\nimport { SubmitAuthDictFxParams } from \"./types\"\n\nexport const $interactiveAuthInstance = d.store<InteractiveAuth | null>(null)\n\nexport const setInteractiveAuth = d.event<InteractiveAuth>()\nexport const submitAuthDictFx = d\n    .effect<SubmitAuthDictFxParams, void, Error>()","import { sample } from \"effector\"\nimport { InteractiveAuth } from \"matrix-js-sdk\"\n\nimport { LOGIN_BY_PASSWORD } from \"@/constants\"\nimport { client } from \"@/matrix-client\"\n\nimport { \n    $interactiveAuthInstance, \n    setInteractiveAuth, \n    submitAuthDictFx \n} from \"./private\"\nimport { \n    cancelInteractiveAuth,\n    createInteractiveAuthFx, \n    onInteractiveAuthBusyChange,\n    onInteractiveAuthStateUpdate,\n    onNeedUserPassword,\n    onUserPasswordError,\n    onUserPasswordSuccess,\n    submitAuthDict\n} from \"./public\"\n\n$interactiveAuthInstance\n    .on(setInteractiveAuth, (_, auth) => auth)\n    .reset([onUserPasswordSuccess, cancelInteractiveAuth])\n\nsample({\n    clock: submitAuthDict,\n    source: $interactiveAuthInstance,\n    filter: (\n        isInstance: InteractiveAuth | null,\n    ): isInstance is InteractiveAuth => Boolean(isInstance),\n    fn: (auth, pass) => ({\n        password: pass,\n        interactiveAuth: auth\n    }),\n    target: submitAuthDictFx\n})\n\nsample({\n    source: onInteractiveAuthStateUpdate,\n    filter: ({status}) => status.errcode === \"M_FORBIDDEN\",\n    fn: ({status}) => status.error as string,\n    target: onUserPasswordError,\n})\n\ncreateInteractiveAuthFx.use(async (requestCallback) => {\n    const cl = client()\n\n    const interactiveAuth = new InteractiveAuth({\n        doRequest: requestCallback,\n        busyChanged: onInteractiveAuthBusyChange,\n        stateUpdated: (nextStage, status) => {\n            onInteractiveAuthStateUpdate({\n                nextStage, status\n            })\n        },\n        matrixClient: cl,\n        // нам это не нужно \n        requestEmailToken: undefined as any\n    })\n    setInteractiveAuth(interactiveAuth)\n    onNeedUserPassword()\n\n    return new Promise<void>(async (resolve, reject) => {\n        const unSub = cancelInteractiveAuth.watch(() => {\n            unSub()\n            reject()\n        })\n        await interactiveAuth.attemptAuth()\n        unSub()\n        onUserPasswordSuccess()\n        resolve()\n    })\n})\n\nsubmitAuthDictFx.use(async ({password, interactiveAuth}) => {\n    const cl = client()\n    await interactiveAuth.submitAuthDict(\n        {\n            \"type\": LOGIN_BY_PASSWORD,\n            \"user\": cl.getUserId(),\n            \"identifier\": {\n                \"type\": \"m.id.user\",\n                \"user\": cl.getUserId()\n            },\n            \"password\": password\n        }\n    )\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","SecureBackupSetupMethod","RecoveryKeyOrPassphraseEnum","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","$currentDeviceId","store","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getPermissionsByRoomIdFx","getUserDevicesInfoFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","$mySessionsInfo","getMySessionsFx","clearMySessionsInfo","logoutSessionsById","renameDeviceFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","stopPeeking","clearStores","crypto","stop","cryptoStore","deleteAllData","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","indexedDB","verificationDomain","$isWaitingAnotherUser","createApi","setWaitingAnotherUser","resetWaitingAnotherUser","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","startVerificationDevice","startThisDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","onNeedRecoveryKeyOrPassphrase","startRecoveryKeyOrPassphraseVerification","setCheckKeyInfo","validateRecoveryKey","onRecoveryKeyOrPassphraseSuccess","onValidRecoveryKey","onInvalidRecoveryKey","$hasPassphrase","onHasPassphrase","validatePassphrase","onValidPassphrase","onInvalidPassphrase","$canVerify","$deviceIsVerified","onUpdateDeviceList","checkThisDeviceVerificationFx","onUsersProfileUpdate","onResolveSecretStorageKey","onRejectSecretStorageKey","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","IdbDelete","createRecoveryKeyAndPassPhraseFx","getSecureBackupSetupMethodsFx","onNeedCreateRecoveryMethod","lossAllRecoveryKeyMethod","cancelCreateNewMethod","onNewRecoveryMethodCreated","bootstrapSecretStorageFx","resetAllRecoveryKeyMethodsFx","secretStorageBeingAccessed","secretStorageKeys","secretStorageKeyInfo","dehydrationCache","createPromise","params","promise","res","rej","isCachingAllowed","setCachingAllowed","newVal","cacheSecretStorageKey","keyId","keyInfo","promptForBackupPassphrase","Uint8Array","console","log","accessSecretStorage","func","forceReset","cl","hasSecretStorageKey","createdSub","watch","cancelSub","bootstrapCrossSigning","bootstrapSecretStorage","getKeyBackupPassphrase","Object","keys","dehydrationKeyInfo","passphrase","setDehydrationKey","warn","error","makeInputToKey","deriveKey","salt","iterations","recoveryKey","decodeRecoveryKey","keyInfos","getDefaultSecretStorageKeyId","keyInfoEntries","entries","length","checkSecretStorageKey","inputToKey","resolveWatcher","rejectWatcher","unsubscribe","input","getDehydrationKey","userId","deviceId","requestId","name","deviceTrust","getUserId","isVerified","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","i","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","restoringBackup","isSecretStorageReady","checkOwnCrossSigningTrust","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","confirmResetCrossSigningFx","createInteractiveAuthFx","submitAuthDict","onNeedUserPassword","onUserPasswordError","onUserPasswordSuccess","onInteractiveAuthBusyChange","onInteractiveAuthStateUpdate","cancelInteractiveAuth","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","InvalidBackupInfo","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","isReadUpTo","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","$isCryptoEnabled","$identityKey","exportE2ERoomsKeysFx","importE2ERoomsKeysFx","getMappedRooms","getRooms","done","_","createClientParams","reset","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","args","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","getDeviceId","checkDeviceTrust","isSelfVerification","id","Date","now","userIds","initialFetch","deviceInfo","newStatus","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","startClientParams","downloadKeys","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","rules","global","setPushRuleEnabled","enabled","deletePushRule","logoutSessionsByIdFx","doneData","sessionsInfo","fail","guard","clock","sessions","target","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","getDevices","devices","crossSigningInfo","getStoredCrossSigningForUser","myDeviceId","device","getStoredDevice","isCurrentSession","sessionsId","callback","auth","deleteMultipleDevices","setDeviceDetails","display_name","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","fn","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeysForUsers","leave","_cl$getAccountData","isTyping","sendTyping","canSendDefaultEvent","canSetDefaultState","isMe","getStoredDevicesForUser","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","subtleCrypto","_window","deriveKeys","password","importKey","TextEncoder","encode","deriveBits","hash","keybits","aesKey","slice","hmacKey","aesProm","hmacProm","all","HEADER_LINE","packMegolmKeyFile","nLines","Math","ceil","lines","Array","uint8Array","latin1String","o","subarray","String","fromCharCode","apply","btoa","buffer","encryptMegolmKeyFile","kdfRounds","kdf_rounds","encodedData","counter","ciphertext","cipherArray","bodyLength","resultBuffer","idx","set","toSign","sign","hmac","hmacArray","unpackMegolmKeyFile","fileStr","TextDecoder","decode","lineStart","lineEnd","indexOf","line","trim","dataStart","dataEnd","base64","atob","decodeBase64","decryptMegolmKeyFile","ciphertextLength","toVerify","verify","isValid","plaintext","crossSigningChangeFx","setEnableCrypto","getIdentityKeyFx","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","getDeviceEd25519Key","exportRoomKeys","arrayBuffer","importRoomKeys","parse","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","cancelVerificationEventFx","restoreKeyBackupFx","$checkKeyInfo","validateRecoveryKeyFx","updateDeviceVerification","validatePassphraseFx","checkCanVerifyFx","onVerificationRequestFxReducer","currentRequest","onChange","cancelled","off","VerificationRequestEvent","Change","cancellationCode","phase","Done","otherUserId","Ready","Started","verifier","sasEvent","excludePhaseArray","Cancelled","Requested","requests","req","currentReq","canceledReq","val","canVerify","failData","accept","beginKeyVerification","once","cancel","confirm","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","cryptoEnabled","homeserverSupportsCrossSigning","checkKeyInfo","decodedKey","keyBackupKeyFromRecoveryKey","makeInput","authUploadDeviceSigningKeys","requestCallback","setupNewCrossSigning","createSecretStorageKey","setupNewKeyBackup","setupNewSecretStorage","createRecoveryKeyFromPassphrase","clientWellKnown","getClientWellKnown","Key","Passphrase","$interactiveAuthInstance","setInteractiveAuth","submitAuthDictFx","isInstance","pass","interactiveAuth","errcode","InteractiveAuth","doRequest","busyChanged","stateUpdated","nextStage","matrixClient","requestEmailToken","unSub","attemptAuth","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}