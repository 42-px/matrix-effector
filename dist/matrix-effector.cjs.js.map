<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/room/types.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/types/index.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    Room,\n    User,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport { combine } from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    presence: \"online\" | \"offline\" | \"unavailable\"\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType\n} from \"./types\"\n\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (roomId: string): Promise<void> => {\n    const cl = client()\n    const { creator } = cl.getRoom(roomId).currentState\n        .getStateEvents(\n            \"m.room.create\",\n        )[0].getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n    await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate\n} from \"@/room\"\nimport { MatrixLoginPayload} from \"@/types\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx\n} from \"./public\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = room.currentState\n            .getStateEvents(\n                \"m.room.create\"\n            )[0]?.getContent<StateEventsContent>()?.isDirect\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    }: MatrixLoginPayload = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { RoomWithActivity } from \"@/types\"\nimport {\n    InitRoomParams,\n    MappedRoomMember,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport {\n    getMessages,\n    setDirectRoom\n} from \"@/utils\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\nimport {\n    getRoomByIdFx,\n    getRoomMembersFx,\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    getRoomMembers,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getRoomByIdFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getRoomByIdFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { guard, sample } from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    updateMessages,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: undefined })\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","MsgType","MatrixMembershipType","clientStore","messagesDomain","$messages","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","getIsDirectRoomsIds","directRooms","getAccountData","Object","values","flatMap","room","checkIsDirect","includes","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","getType","reduce","lastMessage","isDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","setDirectRoom","currentState","getStateEvents","creator","prevData","prevRoomsId","setAccountData","getMappedRooms","getRooms","forward","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","getRoomByIdFx","initRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","sample","clock","fn","guard","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","_cl$getRoom","is_direct","creation_content","reason","setRoomName","joinRoom","leave","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","currentRoomId","roomMessageBatch","loadNewMessagesFx","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
=======
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/room/types.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { TimelineWindow, RoomMember } from \"matrix-js-sdk\"\nimport { MappedUser, Message } from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    public = \"public\",\n    private = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport { LoginPayload } from \"matrix-js-sdk\";\nimport { MappedRoom, MappedUser } from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams\n} from \"./types\"\nimport { appDomain } from \"./domain\"\nimport { CreateClientParams, AuthData } from \"./types\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport { createClientOptions, EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: createClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n","import {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const paginationDomain = root.domain(\"pagination\")\n","import { paginationDomain } from \"./domain\"\nimport { PaginateParams } from \"./types\"\n\nexport const $paginateForwardPending = paginationDomain.store(false)\nexport const $paginateBackwardPending = paginationDomain.store(false)\nexport const $canPaginateBackward = paginationDomain.store(true)\nexport const $canPaginateForward = paginationDomain.store(true)\n\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\nexport const onPaginateForwardDone = paginationDomain.event<void>()\nexport const paginateForward = paginationDomain.event<PaginateParams>()\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import { MatrixEvent, RoomMember, User, Room } from \"matrix-js-sdk\"\nimport { checkIsDirect, client } from \"@/index\"\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.getSender(),\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership()\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = (cl.getAccountData(\n        DIRECT_EVENT as EventType) as MatrixEvent\n    )?.getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = (roomId: string): Promise<void> => {\n    const cl = client()\n    const { creator } = (cl.getRoom(roomId)?.currentState\n        .getStateEvents(\n            \"m.room.create\" as EventType,\n            undefined as any\n        ) as any )[0]?.getContent()\n    const prevData = (cl.getAccountData(\n        DIRECT_EVENT as EventType\n    ) as MatrixEvent)?.getContent() as any\n    const prevRoomsId = prevData[creator] ?? []\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { combine } from \"effector\"\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { RoomWithActivity } from \"@/types\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse, RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\nimport { $currentRoomId, $timelineWindow } from \"./public\"\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\n\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\nimport { paginationDomain } from \"./domain\"\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\n\nexport const paginateRoomFx = paginationDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n","import { guard, sample } from \"effector\"\nimport { $currentRoomId, MessageResponse } from \"@/room\"\nimport { paginateRoomFx } from \"@/room-pagination/private\"\nimport { loadRoomFx } from \"@/room/private\"\nimport { UpdateMessagesFxParams } from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const updateMessages = messagesDomain.event<void>()\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import { forward } from \"effector\"\nimport {\n    EventType,\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    LoginPayload,\n} from \"matrix-js-sdk\"\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { AuthData } from \"./types\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport { updateMessages } from \"@/room-messages/private\"\nimport { roomMessage } from \"@/room-messages\"\nimport { directRoomCreated, roomCreated } from \"@/room\"\nimport { UserNotFound } from \"@/errors\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId() as string)\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = (room.currentState\n            .getStateEvents(\n                \"m.room.create\" as EventType, \n                undefined as any\n            ) as any)[0]?.getContent()?.isDirect\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    }: LoginPayload = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(() => client().logout())\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import matrix, {\n    Room,\n    TimelineWindow,\n    MatrixEvent,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport { attach, forward, guard, sample } from \"effector\"\nimport {\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    $loadFilter,\n    getRoomByIdFx,\n    getRoomMembers,\n    getRoomMembersFx,\n    initRoomFx,\n    loadRoomFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $timelineWindow,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    onRoomLoaded,\n    createRoomFx,\n    getAllUsersFx,\n    inviteUserFx,\n    kickUserRoomFx,\n    renameRoomFx,\n    joinRoomFx,\n    createDirectRoomFx,\n    clearCurrentRoomState,\n    $myPowerLevel,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForRedact,\n    $requiredPowerLevelForDefaultState,\n    $currentRoom,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n} from \"./public\"\nimport { LoadRoomFxParams, Visibility } from \"./types\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getRoomByIdFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getRoomByIdFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = (\n        room.currentState\n            .getStateEvents(\"m.room.power_levels\", \"\") as MatrixEvent[])[0]\n        .getContent() as any\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            // TODO: fix me\n            const event = new MatrixEvent(result as any)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n","import { attach, forward, guard, sample } from \"effector\"\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\nimport { paginateForwardFx } from \"@/room-pagination/private\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx\n} from \"./public\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport {\n    RoomNotFound,\n    EventNotFound,\n    ClientNotInitialized,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n","import { combine, forward, guard } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    $currentRoomId,\n    $loadRoomFxPending,\n    loadRoom\n} from \"@/room\"\nimport { $loadFilter } from \"@/room/private\"\nimport { setMessages } from \"@/room-messages/private\"\nimport { getMessages } from \"@/utils\"\nimport {\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    paginateBackward,\n    paginateForward,\n    onPaginateForwardDone\n} from \"./public\"\nimport { TimelineWindowUndefined } from \"@/errors\"\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","MsgType","clientStore","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","messageBatchInterval","callbacksStore","createClient","options","ms","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","getSender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","getIsDirectRoomsIds","directRooms","getAccountData","_cl$getAccountData","Object","values","flatMap","setDirectRoom","creator","_cl$getRoom","currentState","getStateEvents","_cl$getRoom$currentSt2","prevData","_cl$getAccountData2","prevRoomsId","setAccountData","$loadFilter","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","getRoomByIdFx","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","timeout","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","MatrixEvent","senderId","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","is_direct","creation_content","reason","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
>>>>>>> baa0096 (fix toMessage sender type)
=======
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/room/types.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { TimelineWindow, RoomMember } from \"matrix-js-sdk\"\r\nimport { MappedUser, Message } from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    public = \"public\",\r\n    private = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n","import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport { LoginPayload } from \"matrix-js-sdk\";\r\nimport { MappedRoom, MappedUser } from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams\r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\nimport { CreateClientParams, AuthData } from \"./types\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === \"join\") ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport { createClientOptions, EventListener } from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: createClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        clientStore = null as any\r\n    }\r\n}\r\n","import {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\n\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, void, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, void, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const paginationDomain = root.domain(\"pagination\")\r\n","import { paginationDomain } from \"./domain\"\r\nimport { PaginateParams } from \"./types\"\r\n\r\nexport const $paginateForwardPending = paginationDomain.store(false)\r\nexport const $paginateBackwardPending = paginationDomain.store(false)\r\nexport const $canPaginateBackward = paginationDomain.store(true)\r\nexport const $canPaginateForward = paginationDomain.store(true)\r\n\r\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\r\nexport const onPaginateForwardDone = paginationDomain.event<void>()\r\nexport const paginateForward = paginationDomain.event<PaginateParams>()\r\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\n","import { MatrixEvent, RoomMember, User, Room } from \"matrix-js-sdk\"\r\nimport { checkIsDirect, client } from \"@/index\"\r\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n} from \"./types\"\r\n\r\nfunction getMappedContent(event: MatrixEvent): MessageContent {\r\n    const matrixContent = event.getContent() as MessageContent\r\n    return {...matrixContent}\r\n}\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId(),\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership()\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n    const lastMessage = mergedMessageEvents.length ?\r\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\r\n    const isDirect = checkIsDirect(room.roomId)\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\r\n    }\r\n}\r\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport { mergeMessageEvents } from \"./mappers\"\r\nimport { client } from \"./matrix-client\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow) {\r\n    return timelineWindow\r\n        .getEvents()\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n        .reduce(mergeMessageEvents, [])\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null =>\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\nexport const getIsDirectRoomsIds = ():string[] => {\r\n    const cl = client()\r\n    const directRooms = (cl.getAccountData(\r\n        DIRECT_EVENT as EventType) as MatrixEvent\r\n    )?.getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width !== undefined ? width : null,\r\n        height !== undefined ? height : null,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\r\n    )\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = (roomId: string): Promise<void> => {\r\n    const cl = client()\r\n    const { creator } = (cl.getRoom(roomId)?.currentState\r\n        .getStateEvents(\r\n            \"m.room.create\" as EventType,\r\n            undefined as any\r\n        ) as any )[0]?.getContent()\r\n    const prevData = (cl.getAccountData(\r\n        DIRECT_EVENT as EventType\r\n    ) as MatrixEvent)?.getContent() as any\r\n    const prevRoomsId = prevData[creator] ?? []\r\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n","import { combine } from \"effector\"\r\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\r\nimport { RoomWithActivity } from \"@/types\"\r\nimport {\r\n    InitRoomParams,\r\n    LoadRoomFxParams,\r\n    MappedRoomMember,\r\n    MessageResponse, RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport { $currentRoomId, $timelineWindow } from \"./public\"\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\n\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomMembersFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach } from \"effector\"\r\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\r\nimport { paginationDomain } from \"./domain\"\r\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\r\n\r\nexport const paginateRoomFx = paginationDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n","import { guard, sample } from \"effector\"\r\nimport { $currentRoomId, MessageResponse } from \"@/room\"\r\nimport { paginateRoomFx } from \"@/room-pagination/private\"\r\nimport { loadRoomFx } from \"@/room/private\"\r\nimport { UpdateMessagesFxParams } from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n","import { forward } from \"effector\"\r\nimport {\r\n    EventType,\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    LoginPayload,\r\n} from \"matrix-js-sdk\"\r\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\nimport { AuthData } from \"./types\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport { updateMessages } from \"@/room-messages/private\"\r\nimport { roomMessage } from \"@/room-messages\"\r\nimport { directRoomCreated, roomCreated } from \"@/room\"\r\nimport { UserNotFound } from \"@/errors\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {\r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId() as string)\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = (room.currentState\r\n            .getStateEvents(\r\n                \"m.room.create\" as EventType, \r\n                undefined as any\r\n            ) as any)[0]?.getContent()?.isDirect\r\n\r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n])\r\n\r\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    }: LoginPayload = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use(() => client().logout())\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const { store } = client()\r\n    if (store) await store.startup()\r\n    await client().startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import matrix, {\r\n    Room,\r\n    TimelineWindow,\r\n    MatrixEvent,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport { attach, forward, guard, sample } from \"effector\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    $loadFilter,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    getRoomMembersFx,\r\n    initRoomFx,\r\n    loadRoomFx,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    onRoomLoaded,\r\n    createRoomFx,\r\n    getAllUsersFx,\r\n    inviteUserFx,\r\n    kickUserRoomFx,\r\n    renameRoomFx,\r\n    joinRoomFx,\r\n    createDirectRoomFx,\r\n    clearCurrentRoomState,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForRedact,\r\n    $requiredPowerLevelForDefaultState,\r\n    $currentRoom,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n} from \"./public\"\r\nimport { LoadRoomFxParams, Visibility } from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotFound\r\n} from \"@/errors\"\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getRoomByIdFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getRoomByIdFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = (\r\n        room.currentState\r\n            .getStateEvents(\"m.room.power_levels\", \"\") as MatrixEvent[])[0]\r\n        .getContent() as any\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetRoomMembersFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return Object.values(room.currentState.members)\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    await timelineWindow.load(initialEventId, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const membersCache: { [id: string]: RoomMember } = {}\r\n    const searchResponse = await client().search({\r\n        body: {\r\n            search_categories: {\r\n                room_events: {\r\n                    search_term: term,\r\n                    keys: [\"content.body\"],\r\n                    filter: {\r\n                        rooms: [roomId],\r\n                    },\r\n                    order_by: orderBy,\r\n                },\r\n            },\r\n        },\r\n    })\r\n    return searchResponse\r\n        .search_categories\r\n        .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n            const event = new MatrixEvent(result as any)\r\n            const senderId = event.getSender()\r\n            if (membersCache[senderId] === undefined) {\r\n                membersCache[senderId] = room.getMember(senderId)\r\n            }\r\n            event.sender = membersCache[senderId]\r\n            return toMessage(event)\r\n        })\r\n})\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    await client().invite(roomId, userId)\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n","import { attach, forward, guard, sample } from \"effector\"\r\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\r\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\r\nimport { paginateForwardFx } from \"@/room-pagination/private\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx\r\n} from \"./public\"\r\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\r\nimport {\r\n    RoomNotFound,\r\n    EventNotFound,\r\n    ClientNotInitialized,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        updateMessages,\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nsendMessageFx.use(({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => client().sendMessage(roomId, content, txnId))\r\neditMessageFx.use(({\r\n    roomId, eventId, body, txnId,\r\n}) => client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n","import { combine, forward, guard } from \"effector\"\r\nimport matrix from \"matrix-js-sdk\"\r\nimport {\r\n    $currentRoomId,\r\n    $loadRoomFxPending,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { $loadFilter } from \"@/room/private\"\r\nimport { setMessages } from \"@/room-messages/private\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx\r\n} from \"./private\"\r\nimport {\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    onPaginateForwardDone\r\n} from \"./public\"\r\nimport { TimelineWindowUndefined } from \"@/errors\"\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n      && !backwardPaginationPending\r\n      && !forwardPaginationPending\r\n      && !roomLoading\r\n)\r\n\r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n\r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n\r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n\r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\r\n    }\r\n})\r\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","MsgType","clientStore","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","messageBatchInterval","callbacksStore","createClient","options","ms","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","getIsDirectRoomsIds","directRooms","getAccountData","_cl$getAccountData","Object","values","flatMap","setDirectRoom","creator","_cl$getRoom","currentState","getStateEvents","_cl$getRoom$currentSt2","prevData","_cl$getAccountData2","prevRoomsId","setAccountData","$loadFilter","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","getRoomByIdFx","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","timeout","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","is_direct","creation_content","reason","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
>>>>>>> d0011ae (fix sender)
=======
{"version":3,"file":"matrix-effector.cjs.js","sources":["../src/room/types.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts"],"sourcesContent":["import { TimelineWindow, RoomMember } from \"matrix-js-sdk\"\nimport { MappedUser, Message } from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    public = \"public\",\n    private = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport { LoginPayload } from \"matrix-js-sdk\";\nimport { MappedRoom, MappedUser } from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams\n} from \"./types\"\nimport { appDomain } from \"./domain\"\nimport { CreateClientParams, AuthData } from \"./types\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport { createClientOptions, EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: createClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n","import {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const paginationDomain = root.domain(\"pagination\")\n","import { paginationDomain } from \"./domain\"\nimport { PaginateParams } from \"./types\"\n\nexport const $paginateForwardPending = paginationDomain.store(false)\nexport const $paginateBackwardPending = paginationDomain.store(false)\nexport const $canPaginateBackward = paginationDomain.store(true)\nexport const $canPaginateForward = paginationDomain.store(true)\n\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\nexport const onPaginateForwardDone = paginationDomain.event<void>()\nexport const paginateForward = paginationDomain.event<PaginateParams>()\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import { MatrixEvent, RoomMember, User, Room } from \"matrix-js-sdk\"\nimport { checkIsDirect, client } from \"@/index\"\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership()\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = (cl.getAccountData(\n        DIRECT_EVENT as EventType) as MatrixEvent\n    )?.getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = (\n    roomId: string,\n    interlocutor?: string\n): Promise<void> => {\n    const cl = client()\n    const { creator } = (cl.getRoom(roomId)?.currentState\n        .getStateEvents(\n            \"m.room.create\" as EventType,\n            undefined as any\n        ) as any )[0]?.getContent()\n    const prevData = (cl.getAccountData(\n        DIRECT_EVENT as EventType\n    ) as MatrixEvent)?.getContent() as any\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(interlocutor) {\n        return cl.setAccountData(DIRECT_EVENT as EventType, {\n            ...prevData,\n            [interlocutor]: [roomId]\n        })\n    }\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { combine } from \"effector\"\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { RoomWithActivity } from \"@/types\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse, RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\nimport { $currentRoomId, $timelineWindow } from \"./public\"\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\n\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\nimport { paginationDomain } from \"./domain\"\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\n\nexport const paginateRoomFx = paginationDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n","import { guard, sample } from \"effector\"\nimport { $currentRoomId, MessageResponse } from \"@/room\"\nimport { paginateRoomFx } from \"@/room-pagination/private\"\nimport { loadRoomFx } from \"@/room/private\"\nimport { UpdateMessagesFxParams } from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const updateMessages = messagesDomain.event<void>()\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import { forward } from \"effector\"\nimport {\n    EventType,\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    LoginPayload,\n} from \"matrix-js-sdk\"\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { AuthData } from \"./types\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport { updateMessages } from \"@/room-messages/private\"\nimport { roomMessage } from \"@/room-messages\"\nimport { directRoomCreated, roomCreated } from \"@/room\"\nimport { UserNotFound } from \"@/errors\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId() as string)\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = (room.currentState\n            .getStateEvents(\n                \"m.room.create\" as EventType, \n                undefined as any\n            ) as any)[0]?.getContent()?.isDirect\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    }: LoginPayload = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(() => client().logout())\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import matrix, {\n    Room,\n    TimelineWindow,\n    MatrixEvent,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport { attach, forward, guard, sample } from \"effector\"\nimport {\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { client } from \"@/matrix-client\"\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    $loadFilter,\n    getRoomByIdFx,\n    getRoomMembers,\n    getRoomMembersFx,\n    initRoomFx,\n    loadRoomFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $timelineWindow,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    onRoomLoaded,\n    createRoomFx,\n    getAllUsersFx,\n    inviteUserFx,\n    kickUserRoomFx,\n    renameRoomFx,\n    joinRoomFx,\n    createDirectRoomFx,\n    clearCurrentRoomState,\n    $myPowerLevel,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForRedact,\n    $requiredPowerLevelForDefaultState,\n    $currentRoom,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    findDirectRoomByUserIdFx\n} from \"./public\"\nimport { LoadRoomFxParams, Visibility } from \"./types\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getRoomByIdFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getRoomByIdFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = (\n        room.currentState\n            .getStateEvents(\"m.room.power_levels\", \"\") as MatrixEvent[])[0]\n        .getContent() as any\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            // TODO: fix me\n            const event = new MatrixEvent(result as any)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = (cl.getAccountData(\n        DIRECT_EVENT) as any\n    )?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n","import { attach, forward, guard, sample } from \"effector\"\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\nimport { paginateForwardFx } from \"@/room-pagination/private\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx\n} from \"./public\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport {\n    RoomNotFound,\n    EventNotFound,\n    ClientNotInitialized,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n","import { combine, forward, guard } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    $currentRoomId,\n    $loadRoomFxPending,\n    loadRoom\n} from \"@/room\"\nimport { $loadFilter } from \"@/room/private\"\nimport { setMessages } from \"@/room-messages/private\"\nimport { getMessages } from \"@/utils\"\nimport {\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    paginateBackward,\n    paginateForward,\n    onPaginateForwardDone\n} from \"./public\"\nimport { TimelineWindowUndefined } from \"@/errors\"\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","MsgType","clientStore","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","messageBatchInterval","callbacksStore","createClient","options","ms","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","getIsDirectRoomsIds","directRooms","getAccountData","_cl$getAccountData","Object","values","flatMap","setDirectRoom","interlocutor","creator","_cl$getRoom","currentState","getStateEvents","_cl$getRoom$currentSt2","prevData","_cl$getAccountData2","prevRoomsId","setAccountData","$loadFilter","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","getRoomByIdFx","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","forward","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","timeout","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","is_direct","creation_content","reason","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}
>>>>>>> b139ee8 (add findDirectRoomByUserIdFx and fix setDirectRoom)
