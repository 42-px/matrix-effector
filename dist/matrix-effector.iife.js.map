{"version":3,"file":"matrix-effector.iife.js","sources":["../src/domain.ts","../src/public.ts","../src/matrix-client.ts","../src/utils.ts","../src/private.ts","../src/mappers.ts","../src/constants.ts","../src/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { TimelineWindow } from \"matrix-js-sdk\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    InitRoomParams,\n    LoadRoomParams,\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    LoginPayload,\n    MappedRoom,\n    MappedUser,\n    Message,\n    MessageEvent,\n    PaginateParams,\n    ReadAllMessagesParams,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload,\n    SendMessagePayload,\n    StartClientParams\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\n\n\nexport const $currentRoomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = matrixDomain.store(false)\nexport const $paginateForwardPending = matrixDomain.store(false)\nexport const $paginateBackwardPending = matrixDomain.store(false)\nexport const $isLive = matrixDomain.store<boolean | null>(null)\nexport const $canPaginateBackward = matrixDomain.store(true)\nexport const $canPaginateForward = matrixDomain.store(true)\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const onRoomInitialized = matrixDomain.event()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateForward = matrixDomain.event<PaginateParams>()\nexport const paginateBackward = matrixDomain.event<PaginateParams>()\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    PaginateRoomFxParams\n} from \"./types\"\n\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n} from \"./types\"\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: event.getContent(),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: event.getContent(),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { attach, combine, forward, guard, sample } from \"effector\"\nimport matrix, { RoomMember, TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    searchRoomMessagesFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBackward,\n    paginateForward,\n    roomMessage,\n    $currentRoomId,\n    $isLive,\n    $messages,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $timelineWindow,\n    $loadRoomFxPending,\n    $canPaginateBackward,\n    $canPaginateForward,\n    onRoomInitialized\n} from \"./public\"\nimport { paginateRoomFx, loadRoomFx, initRoomFx } from \"./private\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    LoadRoomFxParams,\n    PaginateParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\n\nconst paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n\nconst paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nconst $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$currentRoomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})\nforward({\n    from: paginateForwardFx.pending,\n    to: $paginateForwardPending,\n})\nforward({\n    from: paginateBackwardFx.pending,\n    to: $paginateBackwardPending,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomFx\n})\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\ngetLoggedUserFx.use(() => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    return {\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        const size = messages.length - initialWindowSize\n        const eventsRetrieved: boolean = await timelineWindow\n            .paginate(matrix.EventTimeline.BACKWARDS, size)\n        if (eventsRetrieved) {\n            messages = timelineWindow\n                .getEvents()\n                .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                    .includes(event.getType()))\n                .reduce(mergeMessageEvents, [])\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages =  timelineWindow.getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n"],"names":["matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","$currentRoomId","store","$timelineWindow","$messages","$loadRoomFxPending","$paginateForwardPending","$paginateBackwardPending","$isLive","$canPaginateBackward","$canPaginateForward","roomMessage","event","onInitialSync","onCachedState","onSync","initRoom","onRoomInitialized","loadRoom","paginateForward","paginateBackward","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","checkIsDirect","roomId","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","initRoomFx","loadRoomFx","paginateRoomFx","toMessage","originalEventId","undefined","getId","content","sender","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","room","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","RoomNotFound","createCustomError","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","paginateBackwardFx","attach","source","mapParams","params","timelineWindow","direction","paginateForwardFx","$loadFilter","combine","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","_","doneData","reset","setMessages","guard","sample","done","currentRoomId","result","filter","getMappedRooms","getRooms","map","messages","isLive","canPaginateBackward","canPaginateForward","from","pending","to","clock","fn","initialEventId","initialWindowSize","target","use","cl","loggedUserId","getUserId","user","getUser","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","initialSyncLimit","login","async","startup","startClient","term","getRoom","membersCache","search","body","search_categories","room_events","search_term","keys","rooms","results","MatrixEvent","senderId","getSender","getMember","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","getType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","reduce","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","canPaginate","size","paginate","EventTimeline","BACKWARDS","makeRequest","requestLimit","dir","FORWARDS","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","ms","throttle","timeout","batchEvents","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","opts"],"mappings":"yIAEO,MAAMA,EAAeC,eAAa,UCwB5BC,EAAoBF,EAC5BG,SACQC,EAAiBJ,EACzBG,SACQE,EAAcL,EAAaG,SAC3BG,EAAgBN,EACxBG,SACQI,EAAeP,EAAaG,SAC5BK,EAAuBR,EAC/BG,SACQM,EAAgBT,EACxBG,SACQO,EAAgBV,EACxBG,SACQQ,EAAkBX,EAC1BG,SACQS,EAAoBZ,EAC5BG,SACQU,EAA2Bb,EACnCG,SACQW,EAAgBd,EACxBG,SACQY,EAAkBf,EAC1BG,SAGQa,EAAiBhB,EACzBiB,MAAyC,MACjCC,EAAkBlB,EAAaiB,MAA6B,MAC5DE,EAAYnB,EAAaiB,MAAiB,IAC1CG,EAAqBpB,EAAaiB,OAAM,GACxCI,EAA0BrB,EAAaiB,OAAM,GAC7CK,EAA2BtB,EAAaiB,OAAM,GAC9CM,EAAUvB,EAAaiB,MAAsB,MAC7CO,EAAuBxB,EAAaiB,OAAM,GAC1CQ,EAAsBzB,EAAaiB,OAAM,GAEzCS,EAAc1B,EAAa2B,QAG3BC,EAAgB5B,EAAa2B,QAC7BE,EAAgB7B,EAAa2B,QAC7BG,EAAS9B,EAAa2B,QAGtBI,EAAW/B,EAAa2B,QACxBK,EAAoBhC,EAAa2B,QACjCM,EAAWjC,EAAa2B,QACxBO,EAAkBlC,EAAa2B,QAC/BQ,EAAmBnC,EAAa2B,QCxE7C,IAAIS,EACAC,EACJ,MAAMC,EAAkC,GAC3BC,EAAS,KACbH,IACDA,EAAcI,UAAOC,aAAaJ,GAClCC,EAAeI,SAAQ,EAAEC,EAAWC,MAChCR,EAAYS,GAAGF,EAAWC,OAG3BR,GAQEU,EAAiBC,IAC1BT,EAAeU,QAAQD,IC+BdE,EAAiBC,IAG1B,MAAMC,EAAcZ,IAASa,eAAe,YACtCC,EAAeF,EACfG,OAAOC,OAAOJ,EAAYK,cAC1B,GACN,IAAIC,EAA2B,GAC/B,IAAK,MAAMC,KAAkBL,EACzBI,EAAiB,IAAIA,KAAmBC,GAE5C,QAAID,EAAeE,SAAST,ICvDnBU,EAAa5D,EACrBG,SACQ0D,EAAa7D,EACrBG,SACQ2D,EAAiB9D,EACzBG,kBCcW4D,EACZpC,EACAqC,GAEA,MAAO,CACHA,qBAAqCC,IAApBD,EACbA,EACArC,EAAMuC,QACVC,QAASxC,EAAM6B,aACfY,OAAQzC,EAAMyC,OACdC,eAAgB1C,EAAM2C,UACtBC,OAAQC,QAAQ7C,EAAM8C,oBACtBC,SAAU/C,EAAMgD,uBAIRC,EAAaC,GACzB,MAAO,CACH3B,OAAQ2B,EAAK3B,OACb4B,KAAMD,EAAKC,KACXC,QAASF,EAAKE,kBAINC,EACZC,EACAtD,GAEA,OAAIA,EAAMuD,WAAW,cAAgBvD,EAAMwD,eAG3CF,EAAIjC,KAAKe,EAAUpC,IAFRsD,ECzDR,MAAMG,EAAqB,iBACrBC,EAAuB,mBC2D9BC,GAAeC,oBAAkB,gBACjCC,GAA0BD,oBAAkB,2BAC5CE,GAAgBF,oBAAkB,iBAClCG,GAAuBH,oBAAkB,wBAEzCI,GAAqBC,SAAO,CAC9BC,OAAQ,CAAC7E,EAAgBE,GACzBf,OAAQ2D,EACRgC,UAAW,CAACC,GAAyB7C,EAAQ8C,OACzC9C,OAAQA,EACR8C,eAAgBA,EAChBC,UAAW,cACRF,MAILG,GAAoBN,SAAO,CAC7BC,OAAQ,CAAC7E,EAAgBE,GACzBf,OAAQ2D,EACRgC,UAAW,CAACC,GAAyB7C,EAAQ8C,OACzC9C,OAAQA,EACR8C,eAAgBA,EAChBC,UAAW,aACRF,MAILI,GAAcC,UAChBpF,EACAE,GACA,CAACgC,EAAQ8C,IAAmBxB,QAAQtB,IAAWsB,QAAQwB,KAErDK,GAAkBD,UACpBD,GACA7E,EACAD,EACAD,GACA,CACIkF,EACAC,EACAC,EACAC,IACCH,IACCC,IACAC,IACAC,IAGVzF,EAAe6B,GAAGd,GAAU,CAAC2E,GAAKxD,OAAAA,KAAaA,IAC/ChC,EACK2B,GAAGe,EAAW+C,UAAU,CAACD,EAAGV,IAAmBA,IAC/CY,MAAM5F,GAEX,MAAM6F,GAAcC,QAAM,CACtBjB,OAAQkB,SACJ/F,EACA,CAAC6C,EAAWmD,KAAMlD,EAAekD,OACjC,CACIC,GAEIlB,QAAU7C,OAAAA,GACVgE,OAAAA,OAEJD,cAAAA,EACA/D,OAAAA,KACGgE,MAGXC,OAAQ,EAAGF,cAAAA,EAAe/D,OAAAA,KAAa+D,IAAkB/D,IA6J7D,SAASkE,KACL,OAAO7E,IAAS8E,WAAWC,IAAI1C,UA5JnCzD,EACK0B,GAAGgE,IAAa,CAACH,GAAKa,SAAAA,KAAeA,IACrCX,MAAM5F,GACXO,EACKsB,GAAGgE,IAAa,CAACH,GAAKc,OAAAA,KAAaA,IACnCZ,MAAM5F,GACXQ,EACKqB,GAAGgE,IAAa,CAACH,GAAKe,oBAAAA,KAA0BA,IAChDb,MAAM,CAAC3E,EAAUjB,IACtBS,EACKoB,GAAGgE,IAAa,CAACH,GAAKgB,mBAAAA,KAAyBA,IAC/Cd,MAAM,CAAC3E,EAAUjB,cACd,CACJ2G,KAAM9D,EAAW+D,QACjBC,GAAIzG,cAEA,CACJuG,KAAMzB,GAAkB0B,QACxBC,GAAIxG,cAEA,CACJsG,KAAMhC,GAAmBiC,QACzBC,GAAIvG,cAEA,CACJqG,KAAMZ,SAAO,CACTlB,OAAQ3E,EACR4G,MAAOlE,EAAWoD,KAElBe,GAAI,SAERF,GAAI7F,YAGF,CACF6D,OAAQkB,SACJ,CAAC/F,EAAgBE,GACjBe,GACA,EACIiB,EACA8C,IAEAgC,eAAAA,EACAC,kBAAAA,OAEA/E,OAAQA,EACR8C,eAAgBA,EAChBgC,eAAAA,EACAC,kBAAAA,MAGRd,OAAQhB,GACR+B,OAAQrE,YAEN,CACFgC,OAAQ1D,EACRgF,OAAQd,GACR6B,OAAQvC,aAEN,CACFE,OAAQ3D,EACRiF,OAAQd,GACR6B,OAAQhC,eAEJ,CACJyB,KAAM5F,EACN8F,GAAIjE,IAER7C,EAAgBoH,KAAI,KAChB,MAAMC,EAAK7F,IACX,IAAK6F,EAAI,OAAO,KAChB,MAAMC,EAAeD,EAAGE,YACxB,IAAKD,EAAc,OAAO,KAC1B,MAAME,EAAOH,EAAGI,QAAQH,GACxB,OAAKE,EACE,CACHE,OAAQF,EAAKE,OACbC,gBAAiBH,EAAKG,gBACtBC,YAAaJ,EAAKI,YAClBC,cAAeL,EAAKK,cACpBC,eAAgBN,EAAKM,eACrBC,SAAUP,EAAKO,UAPD,kBAUd,CACJnB,KAAMzH,EAAkB8G,KAAKM,KAAI,MAASyB,iBAAkB,OAC5DlB,GAAIvH,IAERJ,EAAkBiI,KAAKpC,GAAWxD,IAASyG,MDxNV,mBCwNmCjD,KACpE3F,EAAe+H,KAAKpC,GAAWxD,IAASyG,MDxNV,gBCwNgCjD,KAC9D1F,EAAY8H,KAAIc,UACZ,MAAMhI,MAAEA,GAAUsB,IAClB,GAAItB,EAAO,OAAOA,EAAMiI,aAE5B5I,EAAc6H,KAAKpC,GAAWxD,IAAS4G,YAAYpD,KACnDvF,EAAqB2H,KAAIc,OAASG,KAAAA,EAAMlG,OAAAA,MACpC,MAAM2B,EAAOtC,IAAS8G,QAAQnG,GAC9B,IAAK2B,EAAM,MAAM,IAAIS,GACrB,MAAMgE,EAA6C,GAcnD,aAb6B/G,IAASgH,OAAO,CACzCC,KAAM,CACFC,kBAAmB,CACfC,YAAa,CACTC,YAAaP,EACbQ,KAAM,CAAC,gBACPzC,OAAQ,CACJ0C,MAAO,CAAC3G,UAOvBuG,kBACAC,YAAYI,QAAQxC,KAAI,EAAGJ,OAAAA,MACxB,MAAMvF,EAAQ,IAAIoI,cAAY7C,GACxB8C,EAAWrI,EAAMsI,YAKvB,YAJ+BhG,IAA3BqF,EAAaU,KACbV,EAAaU,GAAYnF,EAAKqF,UAAUF,IAE5CrI,EAAMyC,OAASkF,EAAaU,GACrBjG,EAAUpC,SAG7BlB,EAAc0H,KAAI,EACdjF,OAAAA,EACAiB,QAAAA,EACAgG,MAAAA,KACE5H,IAAS6H,YAAYlH,EAAQiB,EAASgG,KAC5CzJ,EAAcyH,KAAI,EACdjF,OAAAA,EAAQmH,QAAAA,EAASb,KAAAA,EAAMW,MAAAA,KACrB5H,IAAS6H,YACXlH,EACA,CACIoH,gBAAiB,CACbC,QAAS,SAAUf,KAAAA,GAEvBgB,eAAgB,CACZC,SAAU,YACVC,SAAUL,GAEdE,QAAW,SACXf,KAAQ,IAEZW,KAEJxJ,EAAgBwH,KAAIc,OAChB/F,OAAAA,EAAQmH,QAAAA,EAASM,OAAAA,MAEjB,MAAMtI,EAAUsI,EAAS,CAAEA,OAAAA,QAAW1G,EAEtC,MAAO,CACHoG,eAFc9H,IAASqI,YAAY1H,EAAQmH,OAASpG,EAAW5B,IAElDqI,aAMrB5H,EAAc,CACV,CACI,gBACA,CACInB,EACAkD,EACAgG,EACAC,EACAC,KAEA,MAAMC,EAAYrJ,EAAMsJ,UACpBD,IAAc5F,GACX4F,IAAc3F,IAEZwF,GAAqBE,EAAKG,WAC3BxJ,WFtSWC,GAC3B,MAAMwJ,EAAwB,CAC1Bd,QAAS1I,EAAMuC,QAEfC,QAASxC,EAAM6B,aACfa,eAAgB1C,EAAM2C,UACtBpB,OAAQvB,EAAMyJ,YACdhH,OAAQzC,EAAMyC,OACdiH,KAAM1J,EAAMsJ,UACZK,UAAW3J,EAAMwD,cACjBT,SAAU/C,EAAMgD,aAChB4G,QAAS/G,QAAQ7C,EAAMuD,eAK3B,OAHIvD,EAAM6J,kBACNL,EAAQM,eAAiB9J,EAAM+J,mBAE5BP,EEsRqBQ,CAAehK,MAI3C,CAAC,OAAQ,CAACiK,EAAOC,KACb,GAAc,aAAVD,EAKJ,GAAc,YAAVA,GAAqC,aAAdC,EAK3B,GAAc,YAAVD,GAAqC,YAAdC,OAA3B,CACI,MAAMhC,EAAQzC,KACdtF,EAAO+H,OAPX,CACI,MAAMA,EAAQzC,KACdxF,EAAciI,OAPlB,CACI,MAAMA,EAAQzC,KACdvF,EAAcgI,QAe1BjJ,EAAkBuH,KAAI,EAAGjF,OAAAA,EAAQmH,QAAAA,MAC7B,MAAMxF,EAAOtC,IAAS8G,QAAQnG,GAC9B,IAAK2B,EAAM,MAAM,IAAIS,GACrB,MAAMwG,EAAUjH,EAAKkH,cAAc1B,GACnC,IAAKyB,EAAS,MAAM,IAAIrG,GAExB,OAAOlD,IAASyJ,mBAAmB9I,EAAQmH,EAASyB,MAExDjL,EAAyBsH,KAAK0B,IAC1B,MAAMzB,EAAK7F,IACX,IAAK6F,EAAI,MAAM,IAAI1C,GAEnB,OAAOmE,EAAMvC,KAAKzC,UACd,MAAMoH,EAAa7D,EAAGiB,QAAQxE,EAAK3B,QACnC,IAAK+I,EAAY,MAAM,IAAI3G,GAC3B,MAAM4G,EAASD,EAAWE,kBAAkBC,YAC5C,IAAIC,EAAc,EAClB,IAAK,IAAIC,EAAIJ,EAAOK,OAAS,EAAGD,GAAK,GAC7BA,IAAMJ,EAAOK,OAPN,GAMyBD,IAAK,CAEzC,MAAM3K,EAAQuK,EAAOI,GAGrB,GAFmBL,EACdO,iBAAiBpE,EAAGE,YAAuB3G,EAAMuC,SAElD,MAEJmI,GAAe,EAEnB,MAAMI,EAAsBP,EACvB/E,QAAQxF,GAAU,CAACyD,EAAoBC,GACnC1B,SAAShC,EAAMsJ,aACnByB,OAAO1H,EAAoB,IAC1B2H,EAAcF,EAAoBF,OACpCE,EAAoBA,EAAoBF,OAAS,QAAKtI,EACpD2I,EAAW3J,EAAcgJ,EAAW/I,QACpC2J,EAASD,EACTX,EAAW/B,UAAU+B,EAAWa,iBAChC,KAEN,MAAO,IACAjI,EACHwH,YAAAA,EACAM,YAAAA,EACAC,SAAAA,EACAG,aAAcF,MAAAA,SAAAA,EAAQpE,OAGtBuE,SAAUH,EACJrI,kBAAQqI,EAAOtE,2BAAMG,sBACrBzE,EACNgJ,eAAiBhB,EAAmBiB,gCAIhD3M,EAAa4H,KAAI,IAAM5F,IAAS4K,eAChCtJ,EAAWsE,KAAIc,OACXjD,eAAAA,EACAgC,eAAAA,EACAC,kBAAAA,MAEA,IAAKjC,EAAgB,MAAM,IAAIR,SACzBQ,EAAeoH,KAAKpF,EAAgBC,GAC1C,MAAMP,EAAqB1B,EAAeqH,YAAY,KACtD,IAAI9F,EAAWvB,EACVoG,YACAjF,QAAQxF,GAAU,CAACyD,EAAoBC,GACnC1B,SAAShC,EAAMsJ,aACnByB,OAAO1H,EAAoB,IAEhC,GAAIiD,GAAqBV,EAASgF,OAAStE,EAAmB,CAC1D,MAAMqF,EAAO/F,EAASgF,OAAStE,QACQjC,EAClCuH,SAAS/K,UAAOgL,cAAcC,UAAWH,KAE1C/F,EAAWvB,EACNoG,YACAjF,QAAQxF,GAAU,CAACyD,EAAoBC,GACnC1B,SAAShC,EAAMsJ,aACnByB,OAAO1H,EAAoB,KAGxC,MAAO,CACHuC,SAAAA,EACAC,QAASE,EACTA,mBAAAA,EACAD,oBAAqBzB,EAAeqH,YAAY,SAIxDvJ,EAAeqE,KAAIc,OACfjD,eAAAA,EACAC,UAAAA,EACAqH,KAAAA,EACAI,YAAAA,EACAC,aAAAA,MAEA,IAAK3H,EAAgB,MAAM,IAAIR,GAC/B,MAAMoI,EAAoB,YAAd3H,EACRzD,UAAOgL,cAAcK,SACrBrL,UAAOgL,cAAcC,gBACnBzH,EACDuH,SAASK,EAAKN,EAAMI,EAAaC,GACtC,MAAMjG,EAAqB1B,EAAeqH,YAAY,KAKtD,MAAO,CACH9F,SALcvB,EAAeoG,YAC5BjF,QAAQxF,GAAU,CAACyD,EAAoBC,GACnC1B,SAAShC,EAAMsJ,aACnByB,OAAO1H,EAAoB,IAG5BwC,QAASE,EACTA,mBAAoBA,EACpBD,oBAAqBzB,EAAeqH,YAAY,SAIxDvM,EAAcqH,KAAKjF,IACf,MAAM2B,EAAOtC,IAAS8G,QAAQnG,GAC9B,IAAK2B,EAAM,MAAM,IAAIS,GACrB,gBF3XuBT,GACvB,MAAO,CACHiJ,iBAAkBjJ,EAAKkJ,wBEyXpBC,CAAWnJ,MAGtBjB,EAAWuE,KAAIc,OAAS/F,OAAAA,MACpB,MAAMkF,EAAK7F,IACLsC,EAAOtC,IAAS8G,QAAQnG,GAC9B,IAAK2B,EAAM,MAAM,IAAIS,GACrB,MAAM2I,EAAcpJ,EAAKqJ,2BACzB,OAAO,IAAI1L,UAAO2L,eAAe/F,EAAI6F,igBN7XHG,GAClCC,WAAS,CAAExI,OAAQ/D,EAAQwM,QAASF,6BANDA,GACnCG,cAAY7M,EAAa0M,wGEvCS,EAClClL,OAAAA,EACAuF,OAAAA,EACA+F,MAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAC,aAAAA,GAAe,MAEf,MAAM9J,EAAOtC,IAAS8G,QAAQnG,GAC9B,IAAK2B,EACD,OAAO,KAEX,MAAM+J,EAAc/J,EAAKqF,UAAUzB,GACnC,OAAKmG,EAGEA,EAAYC,aACftM,IAASuM,mBACTN,EACAC,EACAC,EACAC,GACA,GARO,wDAjCmB,EAC9BvK,OAAAA,EACAoK,MAAAA,EACAC,OAAAA,EACAC,aAAAA,EACAC,aAAAA,GAAe,EACfI,iBAAAA,GAAmB,KAEnB3K,GAAUA,EAAOyK,aACXzK,EAAOyK,aACLtM,IAASuM,mBACTN,EACAC,EACAC,EACAC,EACAI,GAEF,8ODRNC,IAEA3M,EAAU2M"}