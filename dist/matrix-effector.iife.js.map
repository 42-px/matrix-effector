{"version":3,"file":"matrix-effector.iife.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/verification/types.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/verification/domain.ts","../src/verification/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/idbHelper.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/crypto/cryptoCallbacks.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts","../src/verification/private.ts","../src/verification/init.ts"],"sourcesContent":["export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    EventType,\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport enum Presence {\n    online = \"online\",\n    offline = \"offline\", \n    unavailable = \"unavailable\",\n} \n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    isVerified: boolean\n    presence: Presence\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n    seen?: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n    powerlevels: RoomPowerLevelsContent\n    myPowerLevel: number\n    canKick: boolean\n    canBan: boolean\n    canInvite: boolean\n    canSendEvents: {\n        canChangeRoomAvatar: boolean\n        canChangeHistoryVisivility: boolean\n        canChangeRoomName: boolean\n        canChangeRoomPowerLevels: boolean\n        canChangeCanonicalAlias: boolean\n        canChangeRoomEncryption: boolean\n        canChangeRoomTobstone: boolean\n        canChangeRoomServerAcl: boolean\n    }\n    canRedact: boolean\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n\ntype EventPowerLevels = {\n    [EventType.RoomCanonicalAlias]: number\n    [EventType.RoomAvatar]: number\n    [EventType.RoomEncryption]: number\n    [EventType.RoomHistoryVisibility]: number\n    [EventType.RoomName]: number\n    [EventType.RoomPowerLevels]: number\n    [EventType.RoomServerAcl]: number\n    [EventType.RoomTombstone]: number\n}\n\nexport type RoomPowerLevelsContent = {\n    ban: number\n    events: EventPowerLevels\n    users: {\n        [key in string]: number \n    }\n    redact: number\n    kick: number\n    invite: number\n    state_default: number\n    users_default: number\n    events_default: number\n}\n\nexport enum UserRole {\n    admin = \"Admin\",\n    moderator = \"Moderator\"\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\nexport const getProfileInfoFx = appDomain\n    .effect<string, MappedUser, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message,\n    UserRole\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n  role?: UserRole\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type InviteUsersParams = {\n    roomId: string\n    usersIds: string[]\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n\nexport type SendTypingParams = {\n    roomId: string\n    isTyping: boolean\n  }\n\nexport type MyDeviceInfo =  {\n    verified: boolean\n    deviceId: string\n    displayName: string | null\n}\n","import {\n    TimelineWindow,\n    Room,\n    RoomMember,\n    User\n} from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixMembershipType,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse,\n    SendTypingParams,\n    InviteUsersParams,\n    MyDeviceInfo,\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $typingMembers = roomDomain\n    .store<{[key in string]: RoomMember[]}>({})\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.join) ?? []\n    )\nexport const $currentRoomInvitedMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === MatrixMembershipType.invite\n        ) ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const clearTypingMember = roomDomain.event<void>()\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const findDirectRoomByUserIdFx = roomDomain\n    .effect<string, MappedRoom, Error>()\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const sendTypingFx = roomDomain\n    .effect<SendTypingParams, void, Error>()\nexport const getMembersByRoomIdFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const getRoomMemberFx = roomDomain\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\n\nexport const getUserDevicesFx = roomDomain\n    .effect<string, MyDeviceInfo[], Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        // clientStore.clearStores()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName as any, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { VerificationRequest, IVerificationChannel } from \"matrix-js-sdk\"\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n\nexport type OnVerificationRequestFxParams = {\n  request: MyVerificationRequest\n  currentRequest: MyVerificationRequest | null\n}\n\n// eslint-disable-next-line max-len\nexport type MyVerificationRequest = VerificationRequest<IVerificationChannel> & {\n  id: string\n}\n\nexport type StartVerificationDeviceParams = {\n  userId: string\n  deviceId: string\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\nexport const $currentRoomUnreadMessageCount = messagesDomain\n    .store<number | null>(null)\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const d = root.domain(\"profile\")\n","import { d } from \"./domain\"\n\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\n\n","import { createDomain } from \"effector\"\n\nexport const verificationDomain = createDomain(\"verificationDomain\")\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    StartVerificationDeviceParams, \n} from \"./types\"\n\ntype DeviceIsVerified = boolean\n\nexport const $currentVerificationEvent = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const setCurrentVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelVerificationEventFx = verificationDomain\n    .effect<MyVerificationRequest, MyVerificationRequest, Error>()\n\n\nexport const $verificationEvents = verificationDomain\n    .store<MyVerificationRequest[]>([])\n\nexport const onVerificationRequest = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const startSASVerification = verificationDomain\n    .event<void>()\n\nexport const confirmSASVerification = verificationDomain\n    .event<void>()\n\n\nexport const $deviceIsVerified = verificationDomain\n    .store<DeviceIsVerified | null>(null)\n\nexport const onUpdateDeviceList = verificationDomain\n    .event<string[]>()\n\nexport const checkMyDeviceVerificationFx = verificationDomain\n    .effect<void, boolean, Error>()\n\n\nexport const startVerificationDevice = verificationDomain\n    .event<StartVerificationDeviceParams>()\n\nexport const startMyDeviceVerificationFx = verificationDomain\n    .effect<void, void, Error>()\n\ntype UserId = string\n\nexport const startVerificationUser = verificationDomain\n    .event<UserId>()\n\nexport const onRequestAccept = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const onRequestCancel = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const cancelAllRequests = verificationDomain\n    .event<void>()\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\nexport const CantInviteUsers = \n  createCustomError(\"CantInviteUsers\")\nexport const NotEnoughPermissions = \n  createCustomError(\"NotEnoughPermissions\")\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room,\n    EventType\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { StateEventsContent } from \"./app/types\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType,\n    RoomPowerLevelsContent,\n    UserRole\n} from \"./types\"\n\nexport const toMessageSeen = (\n    message: Message,\n    myUserId: string,\n    room: Room\n): Message => {\n    message.seen = room.getJoinedMembers().some((member) => {\n        if (member.userId === myUserId) return false\n        return room\n            .hasUserReadEvent(member.userId, message.originalEventId)\n    })\n    return message\n}\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = (): string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId() as string,\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => {\n    const cl = client()\n    return {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n        isVerified: cl.checkUserTrust(user.userId).isCrossSigningVerified(),\n    }\n}\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    let role = undefined\n    if (roomMember.powerLevel === 100) {\n        role = UserRole.admin\n    } else if (roomMember.powerLevel === 50) {\n        role = UserRole.moderator\n    }\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n        role,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    const powerLevelsContent = matrixRoom.currentState\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\n        .getContent<RoomPowerLevelsContent>()\n\n    const isDirect = Boolean(matrixRoom.currentState\n        .getStateEvents(\n            EventType.RoomCreate, \n            \"\"\n        )?.getContent<StateEventsContent>()?.isDirect)\n\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\n    const myUserId = cl.getUserId()\n\n    if (lastMessage) {\n        if (lastMessage.sender.userId !== myUserId) {\n            lastMessage.seen = matrixRoom\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \n        } else {\n            lastMessage = toMessageSeen(\n                lastMessage,\n                myUserId,\n                matrixRoom\n            )\n        }\n    }\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\n        powerlevels: powerLevelsContent,\n        myPowerLevel,\n        canBan: myPowerLevel >= powerLevelsContent.ban,\n        canKick: myPowerLevel >= powerLevelsContent.kick,\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\n        canSendEvents: {\n            canChangeHistoryVisivility: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomHistoryVisibility]\n            ),\n            canChangeRoomAvatar: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\n            ),\n            canChangeRoomName: (\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\n            ),\n            canChangeRoomPowerLevels: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomPowerLevels]\n            ),\n            canChangeCanonicalAlias: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomCanonicalAlias]\n            ),\n            canChangeRoomEncryption: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomEncryption]\n            ),\n            canChangeRoomServerAcl: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomServerAcl]\n            ),\n            canChangeRoomTobstone: (\n                myPowerLevel >= powerLevelsContent\n                    .events[EventType.RoomTombstone]\n            )\n        }\n    }\n}\n","import { EventType, Room, TimelineWindow } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport {\n    mergeMessageEvents,\n    toMessageSeen\n} from \"./mappers\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams,\n    Message,\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\n    const messages = timelineWindow.getEvents()\n        .filter((event) => (\n            [\n                ROOM_MESSAGE_EVENT,\n                ROOM_REDACTION_EVENT\n            ].includes(event.getType())))\n        .reduce(mergeMessageEvents, [])\n    const cl = client()\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\n    const room = cl.getRoom(roomId as string)\n    if (!room) throw new RoomNotFound()\n    const myMessages = []\n    const otherMessages = []\n    const myUserId = cl.getUserId()\n    let findFirstSeenOtherMessage = false\n    let findFirstSeenMyMessage = false\n    for (let i = messages.length - 1; i >= 0; i--) {\n        if (messages[i].sender.userId === myUserId) {\n            myMessages.push(messages[i])\n        } else {\n            otherMessages.push(messages[i])\n        }\n    }\n    myMessages.forEach((message) => {\n        if (findFirstSeenMyMessage) {\n            message.seen = true\n        } else {\n            message = toMessageSeen(message, myUserId, room)\n            findFirstSeenMyMessage = Boolean(message.seen)\n        }\n    })\n    otherMessages.forEach((message) => {\n        if (findFirstSeenOtherMessage) {\n            message.seen = true\n        } else {\n            message.seen = room\n                .hasUserReadEvent(myUserId, message.originalEventId)\n            findFirstSeenOtherMessage = message.seen\n        }\n    })\n    return messages\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (\n    roomId: string,\n    companion?: string\n): Promise<{}> => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const { creator } = room.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        ).getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n\n    if(companion) {\n        return await cl.setAccountData(DIRECT_EVENT, {\n            ...prevData,\n            [companion]: [roomId]\n        })\n        \n    }\n    return await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n\nexport const uid = (): string => ( \n    `id${Date.now().toString(36)}${Math.random().toString(36).substring(2)}`\n)\n","// just *accessing* indexedDB throws an exception in firefox with\n\n// indexeddb disabled.\nlet indexedDB: IDBFactory\ntry {\n    indexedDB = window.indexedDB\n} catch (e) {\n    // nothing to show\n}\n\n\n/* Simple wrapper functions around IndexedDB.\n */\n\nlet idb: IDBDatabase|null = null\n\nasync function IdbInit(): Promise<void> {\n    if (!indexedDB) {\n        throw new Error(\"IndexedDB not available\")\n    }\n    idb = await new Promise((resolve, reject) => {\n        const request = indexedDB.open(\"indexdb-name-to-hold-account-data\", 1)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n        request.onupgradeneeded = (event) => {\n            const db = request.result\n            db.createObjectStore(\"pickleKey\")\n            db.createObjectStore(\"account\")\n        }\n    })\n}\n\nexport const IdbLoad = async (\n    table: string,\n    key: string | string[],\n): Promise<any> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readonly\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.get(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve(request.result) }\n    })\n}\n\nexport const IdbSave = async (\n    table: string,\n    key: string | string[],\n    data: any,\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.put(data, key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n\nexport const IdbDelete = async (\n    table: string,\n    key: string | string[],\n): Promise<void> => {\n    if (!idb) {\n        await IdbInit()\n    }\n    return new Promise((resolve, reject) => {\n        const txn = idb!.transaction([table], \"readwrite\")\n        txn.onerror = reject\n\n        const objectStore = txn.objectStore(table)\n        const request = objectStore.delete(key)\n        request.onerror = reject\n        request.onsuccess = (event) => { resolve() }\n    })\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { cryptoDomain } from \"./domain\"\n\nexport const $isKeyBackupEnabled = cryptoDomain\n    .store<boolean | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const onCrossSigningKeyChange = cryptoDomain\n    .event<void>()\n","import { \n    decodeRecoveryKey, \n    deriveKey, \n    DeviceTrustLevel, \n    encodeBase64, \n    encodeUnpaddedBase64, \n    ICryptoCallbacks, \n    ISecretStorageKeyInfo \n} from \"matrix-js-sdk\"\nimport { client } from \"@/matrix-client\"\nimport { IdbLoad, IdbSave } from \"./idbHelper\"\n\nconst secretStorageBeingAccessed = false\nconst secretStorageKeys: Record<string, Uint8Array> = {}\nconst secretStorageKeyInfo: Record<string, ISecretStorageKeyInfo> = {}\n\nlet dehydrationCache: {\n    key?: Uint8Array\n    keyInfo?: ISecretStorageKeyInfo\n} = {}\n\nfunction isCachingAllowed(): boolean {\n    return secretStorageBeingAccessed\n}\n\nfunction cacheSecretStorageKey(\n    keyId: string,\n    keyInfo: ISecretStorageKeyInfo,\n    key: Uint8Array,\n): void {\n    if (isCachingAllowed()) {\n        secretStorageKeys[keyId] = key\n        secretStorageKeyInfo[keyId] = keyInfo\n    }\n}\n\nfunction makeInputToKey(\n    keyInfo: ISecretStorageKeyInfo,\n): (\n  keyParams: { passphrase: string; recoveryKey: string }\n) => Promise<Uint8Array> {\n    return async ({ passphrase, recoveryKey }) => {\n        if (passphrase) {\n            return deriveKey(\n                passphrase,\n                keyInfo.passphrase.salt,\n                keyInfo.passphrase.iterations,\n            )\n        } else {\n            return decodeRecoveryKey(recoveryKey)\n        }\n    }\n}\n\nasync function getSecretStorageKey(\n    { keys: keyInfos }: { keys: Record<string, ISecretStorageKeyInfo> },\n): Promise<any> {\n    const cli = client()\n    let keyId = await cli.getDefaultSecretStorageKeyId() as string\n    let keyInfo: any\n    if(!keyInfos) {\n        return [\"\", new Uint8Array()]\n    }\n    if (keyId) {\n        // use the default SSSS key if set\n        keyInfo = keyInfos[keyId]\n        if (!keyInfo) {\n            // if the default key is not available, pretend the default key\n            // isn't set\n            keyId = \"\"\n        }\n    }\n    console.log(\"keyid\", keyInfos[keyId])\n    if (!keyId) {\n        // if no default SSSS key is set, fall back to a heuristic of using the\n        // only available key, if only one key is set\n        const keyInfoEntries = Object.entries(keyInfos)\n        if (keyInfoEntries.length > 1) {\n            throw new Error(\"Multiple storage key requests not implemented\")\n        }\n        if(keyInfoEntries[0]) {\n            keyId = keyInfoEntries[0][0]\n            keyInfo = keyInfoEntries[0][1]\n        }\n    }\n\n    // Check the in-memory cache\n    if (isCachingAllowed() && secretStorageKeys[keyId]) {\n        return [keyId, secretStorageKeys[keyId]]\n    }\n\n    if (dehydrationCache.key) {\n        if (\n            await client().checkSecretStorageKey(dehydrationCache.key, keyInfo)\n        ) {\n            cacheSecretStorageKey(keyId, keyInfo, dehydrationCache.key)\n            return [keyId, dehydrationCache.key]\n        }\n    }\n\n    const inputToKey = makeInputToKey(keyInfo)\n\n    const recoveryKey = await client().createRecoveryKeyFromPassphrase(\"----\")\n    const key = await inputToKey(\n        // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n        // @ts-ignore\n        {passphrase: \"\", recoveryKey: recoveryKey?.keyInfo?.pubkey}\n    )\n    // console.log(recoveryKey);\n    // const key = recoveryKey.keyInfo?.key;\n\n    console.log(\"GOT IT\", key, keyId)\n    // Save to cache to avoid future prompts in the current session\n    cacheSecretStorageKey(keyId, keyInfo, key)\n    if(keyId && key) {\n        return [keyId, key]\n    }\n        \n    return [\"\", new Uint8Array()]\n    \n}\n\nexport async function getDehydrationKey(\n    keyInfo: ISecretStorageKeyInfo,\n): Promise<Uint8Array> {\n    const inputToKey = makeInputToKey(keyInfo)\n    const key = await inputToKey({ passphrase: \"\", recoveryKey: \"\"})\n\n    // need to copy the key because rehydration (unpickling) will clobber it\n    dehydrationCache = { key: new Uint8Array(key), keyInfo }\n\n    return key\n}\n\n\nasync function onSecretRequested(\n    userId: string,\n    deviceId: string,\n    requestId: string,\n    name: string,\n    deviceTrust: DeviceTrustLevel,\n): Promise<string> {\n    console.log(\n        \"onSecretRequested\", userId, deviceId, requestId, name, deviceTrust\n    )\n    const cl = client()\n    if (userId !== cl.getUserId()) {\n        return \"\"\n    }\n    if (!deviceTrust || !deviceTrust.isVerified()) {\n        console.log(`Ignoring secret request from untrusted device ${deviceId}`)\n        return \"\"\n    }\n    if (\n        name === \"m.cross_signing.master\" ||\n        name === \"m.cross_signing.self_signing\" ||\n        name === \"m.cross_signing.user_signing\"\n    ) {\n        const callbacks = cl.getCrossSigningCacheCallbacks()\n        if (!callbacks.getCrossSigningKeyCache) return \"\"\n        const keyId = name.replace(\"m.cross_signing.\", \"\")\n        const key = await callbacks.getCrossSigningKeyCache(keyId)\n        if (!key) {\n            console.log(\n                `${keyId} requested by ${deviceId}, but not found in cache`\n            )\n        }\n        return key && encodeBase64(key)\n    } else if (name === \"m.megolm_backup.v1\") {\n        const key = await cl.crypto.getSessionBackupPrivateKey()\n        if (!key) {\n            console.log(\n                // eslint-disable-next-line max-len\n                `session backup key requested by ${deviceId}, but not found in cache`,\n            )\n        }\n        if(key) {\n            return encodeBase64(key)\n        }\n    }\n    console.log(\"onSecretRequested didn't recognise the secret named \", name)\n    return \"\"\n}\n\nexport const crossSigningCallbacks: ICryptoCallbacks = {\n    getSecretStorageKey,\n    cacheSecretStorageKey,\n    onSecretRequested,\n    getDehydrationKey,\n}\n\nexport const GetPickleKey = \n  async (userId: string, deviceId: string): Promise<string | null> => {\n      if (!window.crypto || !window.crypto.subtle) {\n          return null\n      }\n      let data\n      try {\n          data = await IdbLoad(\"pickleKey\", [userId, deviceId])\n      } catch (e) {\n          console.log(\"idbLoad for pickleKey failed\", e)\n      }\n      if (!data) {\n          return null\n      }\n      if (!data.encrypted || !data.iv || !data.cryptoKey) {\n          console.log(\"Badly formatted pickle key\")\n          return null\n      }\n\n      const additionalData = new Uint8Array(userId.length + deviceId.length + 1)\n      for (let i = 0; i < userId.length; i++) {\n          additionalData[i] = userId.charCodeAt(i)\n      }\n      additionalData[userId.length] = 124 // \"|\"\n      for (let i = 0; i < deviceId.length; i++) {\n          additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n      }\n\n      try {\n          const key = await crypto.subtle.decrypt(\n              { name: \"AES-GCM\", iv: data.iv, additionalData }, data.cryptoKey,\n              data.encrypted,\n          )\n          return encodeUnpaddedBase64(key)\n      } catch (e) {\n          console.log(\"Error decrypting pickle key\")\n          return null\n      }\n  }\n\nexport const CreatePickleKey = \n  async (userId: string, deviceId: string): Promise<string | null> => {\n      if (!window.crypto || !window.crypto.subtle) {\n          return null\n      }\n      const crypto = window.crypto\n      const randomArray = new Uint8Array(32)\n      crypto.getRandomValues(randomArray)\n      const cryptoKey = await crypto.subtle.generateKey(\n          { name: \"AES-GCM\", length: 256 }, false, [\"encrypt\", \"decrypt\"],\n      )\n      const iv = new Uint8Array(32)\n      crypto.getRandomValues(iv)\n\n      const additionalData = new Uint8Array(userId.length + deviceId.length + 1)\n      for (let i = 0; i < userId.length; i++) {\n          additionalData[i] = userId.charCodeAt(i)\n      }\n      additionalData[userId.length] = 124 // \"|\"\n      for (let i = 0; i < deviceId.length; i++) {\n          additionalData[userId.length + 1 + i] = deviceId.charCodeAt(i)\n      }\n\n      const encrypted = await crypto.subtle.encrypt(\n          { name: \"AES-GCM\", iv, additionalData }, cryptoKey, randomArray,\n      )\n\n      try {\n          await IdbSave(\n              \"pickleKey\", [userId, deviceId], { encrypted, iv, cryptoKey }\n          )\n      } catch (e) {\n          return null\n      }\n      return encodeUnpaddedBase64(randomArray)\n  }\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    EventType,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    toggleTypingUser\n} from \"@/room\"\nimport { \n    checkBackupKeyFx,\n    initCryptoFx, onCrossSigningKeyChange, \n} from \"@/crypto\"\nimport {\n    onVerificationRequest, \n    MyVerificationRequest,\n    onUpdateDeviceList,\n} from \"@/verification\"\nimport { UserNotFound } from \"@/errors\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx,\n    getProfileInfoFx,\n} from \"./public\"\nimport { uid } from \"@/utils\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {            \n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = Boolean(room.currentState\n            .getStateEvents(\n                EventType.RoomCreate,\n                \"\"\n            )?.getContent<StateEventsContent>()?.isDirect)\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", async (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            await client().uploadKeys()\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            updateMessages()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => {\n            onRoomMemberUpdate(member)\n            toggleTypingUser(member)\n        }\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"crossSigning.keysChanged\",\n        onCrossSigningKeyChange\n    ],\n    [\n        \"crypto.roomKeyRequest\",\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\n    ],\n    [\n        \"crypto.roomKeyRequestCancellation\",\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\n    ],\n    [\n        \"crypto.secrets.requestCancelled\",\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\n    ],\n    [\n        \"crypto.suggestKeyRestore\",\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\n    ],\n    [\n        \"crypto.verification.request.unknown\",\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\n    ],\n    [\n        \"crypto.verification.request\", (\n            request: MyVerificationRequest\n        ) => {\n            request.id = uid()\n            onVerificationRequest(request)\n        }\n    ],\n    [\n        \"crypto.warning\",\n        (...args) => console.warn(\"crypto.warning\", args)\n    ],\n    [\n        \"crypto.keyBackupStatus\",\n        checkBackupKeyFx\n    ],\n    [\n        \"crypto.willUpdateDevices\",\n        (userIds: string[], initialFetch?: boolean) => {\n            // If we didn't know about *any* devices before (ie. it's fresh login),\n            // then they are all pre-existing devices, so ignore this and set the\n            // devicesAtStart list to the devices that we see after the fetch.\n            if (initialFetch) return\n            onUpdateDeviceList(userIds)\n        }\n    ],\n    [\"crypto.devicesUpdated\", onUpdateDeviceList],\n    [\"deviceVerificationChanged\", onUpdateDeviceList],\n    [\"userTrustStatusChanged\", onUpdateDeviceList]\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    } = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const cl = client()\n    const { store } = cl\n    if (store) await store.startup()\n    await initCryptoFx()\n    await cl.startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n\ngetProfileInfoFx.use( async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId)\n    if (!user) throw new UserNotFound()\n    return toMappedUser(user)\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { client } from \"../matrix-client\"\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\n\nupdateDisplayNameFx.use(async (newDisplayName) => {\n    await client().setDisplayName(newDisplayName)\n})\n\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\n    await client().setAvatarUrl(newAvatarUrl)\n})\n\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport {\n    InitRoomParams,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    EventType,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\n\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport { DIRECT_EVENT } from \"@/constants\"\nimport { \n    CantInviteUsers,\n    ClientNotInitialized,\n    NotEnoughPermissions,\n    RoomNotFound, \n    TimelineWindowUndefined,\n    UserNotFound \n} from \"@/errors\"\nimport { getMessages, setDirectRoom } from \"@/utils\"\n\nimport {\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n    findDirectRoomByUserIdFx,\n    $typingMembers,\n    clearTypingMember,\n    toggleTypingUser,\n    getRoomByIdFx,\n    getRoomMembers,\n    sendTypingFx,\n    getMembersByRoomIdFx,\n    inviteUsersFx,\n    getRoomMemberFx,\n    getUserDevicesFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\nconst TYPING_SERVER_TIMEOUT = 5000\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\nconst getRoomMembersFx = attach({\n    effect: getMembersByRoomIdFx\n})\n\nconst getCurrentRoomFx = attach({\n    effect: getRoomByIdFx\n})\n$typingMembers\n    .on(toggleTypingUser, (members, member) => {\n        if(member.typing) {\n            if (members[member.roomId]) {\n                return {\n                    ...members,\n                    [member.roomId]: [...members[member.roomId], member] \n                }\n            } \n            return {\n                ...members,\n                [member.roomId]: [member] \n            }\n        } \n        if (members[member.roomId]) {\n            if (members[member.roomId].length > 1) {\n                const filteredUsers = members[member.roomId]\n                    .filter(({userId}) => userId !== member.userId)\n                return {\n                    ...members,\n                    [member.roomId]: [...filteredUsers] \n                }\n            }\n            delete members[member.roomId]\n            return {\n                ...members, \n            }\n        }\n    })\n    .reset(clearTypingMember)\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getCurrentRoomFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetMembersByRoomIdFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return room.getMembers()\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id, user.userId)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    const room = client().getRoom(roomId)\n    const isDirect = room?.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    try {\n        await client().invite(roomId, userId)\n        await client().sendSharedHistoryKeys(roomId, [userId])\n    } catch (e: any) {\n        if (e.httpStatus === 403) {\n            throw new NotEnoughPermissions(\n                \"Not enough permissions to invite users\"\n            )\n        }\n    }\n})\n\ninviteUsersFx.use( async ({usersIds, roomId}) => {\n    const room = client().getRoom(roomId)\n    const isDirect = room?.currentState\n        .getStateEvents(\n            EventType.RoomCreate,\n            \"\"\n        )?.getContent()?.isDirect\n    if (isDirect) {\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\n    }\n    for (const id of usersIds) {\n        try {\n            await client().invite(roomId, id)\n            await client().sendSharedHistoryKeys(roomId, [id])\n        } catch (e: any) {\n            if (e.httpStatus === 403) {\n                throw new NotEnoughPermissions()\n            }\n        }\n    }\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    if (cl.isRoomEncrypted(roomId)) {\n        await cl.setRoomEncryption(\n            cl.getUserId(),\n            { algorithm: \"m.megolm.v1.aes-sha2\" }\n        )\n        const members = (\n            await room.getEncryptionTargetMembers()\n        ).map((x: RoomMember) => x.userId)\n        await cl.downloadKeys(members)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n\nfindDirectRoomByUserIdFx.use((userId) => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\n    const roomId = directRooms[userId] && directRooms[userId][0]\n    if(!roomId) throw new RoomNotFound()\n    const room = cl.getRoom(roomId)\n    if(!room) throw new RoomNotFound()\n    return toMappedRoom(room)\n})\n\nsendTypingFx.use(async ({ roomId, isTyping }) => {\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\n})\n\ngetRoomMemberFx.use(({ roomId, userId }) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\n    const roomMember = matrixRoom?.getMember(userId)\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\n    return roomMember\n})\n\ngetUserDevicesFx.use(async (userId) => {\n    const cl = client()\n    // await cl.downloadKeys([userId], true)\n    const isMe = cl.getUserId() === userId\n    return cl.getStoredDevicesForUser(userId).map((device) => {\n        const deviceTrust = cl.checkDeviceTrust(userId, device.deviceId) \n        const verified = isMe \n            ? deviceTrust.isCrossSigningVerified() \n            : deviceTrust.isVerified()\n        return {\n            deviceId: device.deviceId,\n            displayName: device.getDisplayName(),\n            verified,\n        }\n    })\n\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach, guard, sample} from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\n    .effect<string, number, Error>()\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    debounce,\n    throttle\n} from \"patronum\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx,\n    updateCurrentRoomUnreadMessageCountFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward,\n    updateMessages,\n    $currentRoomUnreadMessageCount,\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst THROTTLE_MESSAGE_TIME = 800\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n\n$currentRoomUnreadMessageCount\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\n    .reset($currentRoomId)\n\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\n\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        throttle({\n            source: updateMessages,\n            timeout: THROTTLE_MESSAGE_TIME\n        }),\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nguard({\n    clock: $messages.updates,\n    source: $currentRoomId,\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\n    target: updateCurrentRoomUnreadMessageCountFx\n})\n\nsample({\n    clock: debounce({\n        source: sendMessageFx.done,\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\n    }),\n    fn: ({ params, result }) => ({\n        roomId: params.roomId,\n        eventId: result.event_id\n    }),\n    target: readAllMessagesFx\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const count = matrixRoom.getUnreadNotificationCount()\n    return count ?? 0\n})\n","import { cryptoDomain } from \"./domain\"\n\nexport const crossSigningChangeFx = cryptoDomain\n    .effect<void, void, Error>()\n","import { client } from \"@/matrix-client\"\nimport { checkMyDeviceVerificationFx } from \"@/verification\"\nimport { forward } from \"effector\"\nimport { crossSigningChangeFx } from \"./private\"\nimport { \n    $isKeyBackupEnabled,\n    checkBackupKeyFx, \n    initCryptoFx,\n    onCrossSigningKeyChange, \n} from \"./public\"\n\n$isKeyBackupEnabled\n    .on(checkBackupKeyFx.doneData, (_, isEnabled) => isEnabled)\n\nforward({\n    from: onCrossSigningKeyChange,\n    to: crossSigningChangeFx\n})\n\ncheckBackupKeyFx.use(async () => client().getKeyBackupEnabled())\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n    if (!cl.initCrypto) return\n\n    await cl.initCrypto()\n    // @TODO Убрать хардкод.\n    // Не нашел явной доки, но эта штука отвечает за то, \n    // можешь ли ты писать в конмату в которой находятся не верифицированные тобою девайсы\n    cl.setGlobalErrorOnUnknownDevices(false)\n    cl.setCryptoTrustCrossSignedDevices(true)\n    const backupInfo = await cl.getKeyBackupVersion()\n    if (backupInfo) {\n    // don't await, because this can take a long times\n        cl.restoreKeyBackupWithSecretStorage(backupInfo).then(console.log)\n    }\n    checkMyDeviceVerificationFx()\n})\n\ncrossSigningChangeFx.use(async () => {\n    const cl = client()\n    if (!(\n        await cl.doesServerSupportUnstableFeature(\n            \"org.matrix.e2e_cross_signing\"\n        )\n    )) return\n\n    if (!cl.isCryptoEnabled()) return\n    if (!cl.isInitialSyncComplete()) return\n\n    checkMyDeviceVerificationFx()\n})\n","import { verificationDomain } from \"./domain\"\nimport { \n    MyVerificationRequest, \n    OnVerificationRequestFxParams, \n    StartVerificationDeviceParams \n} from \"./types\"\n\n\nexport const startSASFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const confirmSASVerificationFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const onCancelVerificationEvent = verificationDomain\n    .event<MyVerificationRequest>()\n\nexport const updateVerificationPhase = verificationDomain\n    .event<void>()\n\nexport const updateDeviceVerification = verificationDomain\n    .event<boolean>()\n\nexport const onVerificationRequestFx = verificationDomain\n    .effect<OnVerificationRequestFxParams, MyVerificationRequest, Error>()\n\nexport const startVerificationDeviceFx = verificationDomain\n    .effect<StartVerificationDeviceParams, MyVerificationRequest, Error>()\n\ntype UserId = string\n\n\nexport const startVerificationUserFx = verificationDomain\n    .effect<UserId, MyVerificationRequest, Error>()\n\nexport const requestAcceptFx = verificationDomain\n    .effect<MyVerificationRequest, void, Error>()\n\nexport const cancelAllRequestsFx = verificationDomain\n    .effect<MyVerificationRequest[], void, Error>()\n","import { forward, sample, guard, attach } from \"effector\"\nimport { client } from \"@/matrix-client\"\nimport { VerificationRequestEvent } from \"matrix-js-sdk\"\nimport { MappedUser } from \"@/types\"\nimport { uid } from \"@/utils\"\nimport { createDirectRoomFx } from \"@/room\"\n\nimport { \n    updateVerificationPhase, \n    onCancelVerificationEvent,\n    confirmSASVerificationFx, \n    onVerificationRequestFx, \n    startSASFx, \n    updateDeviceVerification,\n    startVerificationDeviceFx,\n    startVerificationUserFx,\n    requestAcceptFx,\n    cancelAllRequestsFx,\n} from \"./private\"\nimport { \n    $currentVerificationEvent, \n    $deviceIsVerified, \n    $verificationEvents, \n    cancelVerificationEventFx,\n    checkMyDeviceVerificationFx,\n    confirmSASVerification,\n    startMyDeviceVerificationFx,\n    onVerificationRequest, \n    setCurrentVerificationEvent, \n    startSASVerification,\n    onUpdateDeviceList,\n    startVerificationDevice,\n    startVerificationUser,\n    onRequestAccept,\n    onRequestCancel,\n    cancelAllRequests, \n} from \"./public\"\nimport { MyVerificationRequest, Phase } from \"./types\"\n\nconst TEN_MINUTES = 36000\n\n$deviceIsVerified\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => ([\n        ...requests, req\n    ])))\n    .on(updateVerificationPhase, (requests) => [...requests])\n    .on(onCancelVerificationEvent, (requests, req) => requests\n        .filter((currentReq) => currentReq.id !== req.id)\n    )\n// @TODO When copying an object, access to private properties was lost\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => [req])\n    .on(onCancelVerificationEvent,\n        ([request], canceledReq) => (\n            request?.id === canceledReq.id ? [] : [request]\n        )\n    )\n    .on(updateVerificationPhase,\n        ([request]) => [request]\n    )\n\nforward({\n    from: checkMyDeviceVerificationFx.doneData,\n    to: updateDeviceVerification\n})\n\nforward({\n    from: onUpdateDeviceList,\n    to: checkMyDeviceVerificationFx\n})\n\nforward({\n    from: cancelVerificationEventFx.doneData,\n    to: onCancelVerificationEvent\n})\n\nforward({\n    from: startVerificationDevice,\n    to: startVerificationDeviceFx\n})\n\nforward({\n    from: startVerificationUser,\n    to: startVerificationUserFx \n})\n\nforward({\n    from: [\n        startVerificationUserFx.doneData, \n        startVerificationDeviceFx.doneData\n    ],\n    to: onVerificationRequest\n})\n\nforward({\n    from: onRequestAccept,\n    to: requestAcceptFx\n})\n\nforward({\n    from: onRequestCancel,\n    to: cancelVerificationEventFx\n})\n\nsample({\n    clock: onVerificationRequest,\n    source: $currentVerificationEvent,\n    fn: ([currentRequest], request) => ({\n        request, currentRequest\n    }),\n    target: onVerificationRequestFx\n})\n\nsample({\n    clock: cancelAllRequests,\n    source: $verificationEvents,\n    target: cancelAllRequestsFx\n})\n\nguard({\n    clock: confirmSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: confirmSASVerificationFx\n})\n\nguard({\n    clock: startSASVerification,\n    source: $currentVerificationEvent\n        .map(request => request.length ? request[0] : null),\n    filter: (req): req is MyVerificationRequest => Boolean(req),\n    target: startSASFx\n})\n\nonVerificationRequestFx.use(async ({request, currentRequest}) => {\n    const onChange = () => {\n        console.log(\"request UPDATE\")\n        if (request.accepting || request.phase === Phase.Ready) {\n            if (currentRequest && currentRequest?.id !== request.id) {\n                cancelVerificationEventFx(currentRequest)\n            }\n            updateVerificationPhase()\n            setCurrentVerificationEvent(request)\n        }\n\n        if (request.cancelled) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n            console.error(\"request.cancelled\", request.cancellationCode)\n        }\n        if (request.phase === Phase.Done) {\n            request.off(VerificationRequestEvent.Change, onChange)\n            onCancelVerificationEvent(request)\n        }\n\n        if (\n            request.phase === Phase.Started \n            && !(request.verifier as any).sasEvent\n        ) {\n            startSASFx(request)\n        }\n    }\n    request.on(VerificationRequestEvent.Change, onChange)\n    const phaseArray = [\n        Phase.Cancelled, \n        Phase.Done, \n        Phase.Requested, \n        Phase.Started\n    ]\n    if (!currentRequest && !phaseArray.includes(request.phase)) {\n        setCurrentVerificationEvent(request)\n        // if (\n        //     request.phase === Phase.Started \n        //   && !(request.verifier as any).sasEvent\n        // ) {\n        //     await startSASFx(request)\n        // }\n    }\n\n    return request\n})\n\nrequestAcceptFx.use(async (request) => {\n    await request.accept()\n})\n\nstartSASFx.use(async (request) => {\n    const verifier = request.beginKeyVerification(\"m.sas.v1\")\n    verifier.once(\"show_sas\", updateVerificationPhase)\n    verifier.once(\"cancel\", () => onCancelVerificationEvent(request))\n    await verifier.verify()\n})\n\ncancelVerificationEventFx.use(async (req) => {\n    await req.cancel()\n    return req\n})\n\nconfirmSASVerificationFx.use(async (currentRequest) => {\n    try {\n        await (currentRequest.verifier as any).sasEvent.confirm()\n    } finally {\n        updateVerificationPhase()\n    }\n})\n\ncheckMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const deviceId = cl.getDeviceId()\n    const userId = cl.getUserId()\n    await cl.downloadKeys([userId])\n    const isVerified = cl\n        .checkDeviceTrust(userId, deviceId).isCrossSigningVerified()\n    return isVerified\n})\n\nstartMyDeviceVerificationFx.use(async () => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(cl.getUserId()) as MyVerificationRequest\n    request.id = uid()\n    onVerificationRequest(request)\n})\n\nstartVerificationDeviceFx.use(async ({userId, deviceId}) => {\n    const cl = client()\n    const request = await cl\n        .requestVerification(userId, [deviceId]) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\nconst findOrCreateDirectRoomFx = attach({\n    effect: createDirectRoomFx\n})\n\nstartVerificationUserFx.use(async (userId) => {\n    const cl = client()\n    const user = cl.getUser(userId) as unknown as MappedUser\n    const dmRoom = await findOrCreateDirectRoomFx({ user })\n    const request = await cl\n        .requestVerificationDM(userId, dmRoom.roomId) as MyVerificationRequest\n    request.id = uid()\n    return request\n})\n\ncancelAllRequestsFx.use(async (requests) => {\n    requests.forEach(request => request.cancel())\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","getUserDevicesFx","clientStore","Phase","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","verificationDomain","$currentVerificationEvent","setCurrentVerificationEvent","cancelVerificationEventFx","$verificationEvents","onVerificationRequest","startSASVerification","confirmSASVerification","$deviceIsVerified","onUpdateDeviceList","checkMyDeviceVerificationFx","startVerificationDevice","startMyDeviceVerificationFx","startVerificationUser","onRequestAccept","onRequestCancel","cancelAllRequests","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","DIRECT_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","cl","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","isVerified","checkUserTrust","isCrossSigningVerified","toRoomWithActivity","maxHistory","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","indexedDB","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","uid","Date","now","toString","Math","random","substring","cryptoDomain","$isKeyBackupEnabled","checkBackupKeyFx","initCryptoFx","onCrossSigningKeyChange","window","e","idb","IdbInit","Error","Promise","resolve","reject","request","open","onerror","onsuccess","result","onupgradeneeded","db","createObjectStore","IdbLoad","table","key","txn","transaction","objectStore","get","IdbSave","data","put","dehydrationCache","cacheSecretStorageKey","keyId","keyInfo","makeInputToKey","passphrase","recoveryKey","deriveKey","salt","iterations","decodeRecoveryKey","keyInfos","keys","cli","getDefaultSecretStorageKeyId","Uint8Array","console","log","keyInfoEntries","Object","entries","checkSecretStorageKey","inputToKey","createRecoveryKeyFromPassphrase","_recoveryKey$keyInfo","pubkey","getDehydrationKey","deviceId","requestId","deviceTrust","getCrossSigningCacheCallbacks","getCrossSigningKeyCache","replace","encodeBase64","crypto","getSessionBackupPrivateKey","crossSigningCallbacks","getSecretStorageKey","onSecretRequested","GetPickleKey","subtle","encrypted","iv","cryptoKey","additionalData","charCodeAt","decrypt","encodeUnpaddedBase64","CreatePickleKey","randomArray","getRandomValues","generateKey","encrypt","getMappedRooms","getRooms","from","done","initialSyncLimit","to","toStartOfTimeline","removed","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","args","id","warn","userIds","initialFetch","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_room$currentState$ge3","_room$currentState$ge4","_context7","reason","setRoomName","joinRoom","isRoomEncrypted","setRoomEncryption","algorithm","getEncryptionTargetMembers","x","downloadKeys","leave","_cl$getAccountData","isTyping","sendTyping","isMe","getStoredDevicesForUser","device","checkDeviceTrust","verified","getDisplayName","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","guard","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","crossSigningChangeFx","isEnabled","getKeyBackupEnabled","initCrypto","setGlobalErrorOnUnknownDevices","setCryptoTrustCrossSignedDevices","getKeyBackupVersion","backupInfo","restoreKeyBackupWithSecretStorage","doesServerSupportUnstableFeature","isCryptoEnabled","isInitialSyncComplete","startSASFx","confirmSASVerificationFx","onCancelVerificationEvent","updateVerificationPhase","updateDeviceVerification","onVerificationRequestFx","startVerificationDeviceFx","startVerificationUserFx","requestAcceptFx","cancelAllRequestsFx","requests","req","currentReq","canceledReq","currentRequest","onChange","accepting","phase","Ready","cancelled","off","VerificationRequestEvent","Change","cancellationCode","Done","Started","verifier","sasEvent","phaseArray","Cancelled","Requested","accept","beginKeyVerification","once","verify","cancel","confirm","getDeviceId","requestVerification","findOrCreateDirectRoomFx","dmRoom","requestVerificationDM","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}