{"version":3,"file":"matrix-effector.iife.js","sources":["../src/room/types.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/types/index.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts"],"sourcesContent":["import {\n    TimelineWindow,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport {\n    MappedUser,\n    Message\n} from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    \"public\" = \"public\",\n    \"private\" = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport {\n    MappedRoom,\n    MappedUser,\n    MatrixLoginPayload\n} from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams,\n    CreateClientParams, \n    AuthData \n} from \"./types\"\nimport { appDomain } from \"./domain\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import {\n    TimelineWindow,\n    Room,\n    User,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport { combine } from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams,\n    LoadRoomFxParams,\n    MessageResponse\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\nexport const leaveRoomFx = roomDomain\n    .effect<string, void, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import {\n    ICreateClientOpts,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    RoomSummary,\n    SearchOrderBy,\n    User,\n} from \"matrix-js-sdk\"\nimport { MessageContent } from \"./content\"\nexport * from \"./content\"\n\nexport type MappedUser = Pick<User,\n    \"avatarUrl\" |\n    \"userId\" |\n    \"currentlyActive\" |\n    \"displayName\" |\n    \"lastActiveAgo\" |\n    \"lastPresenceTs\"\n> & {\n    presence: \"online\" | \"offline\" | \"unavailable\"\n}\nexport interface EventPayload {\n    event: MatrixEvent\n    room: Room\n}\n\nexport interface SearchRoomMessagesPayload {\n    roomId: string\n    term: string\n    orderBy?: SearchOrderBy\n}\n\nexport type MessageEvent = {\n    eventId: string\n    content: MessageContent\n    originServerTs: Date | null\n    roomId: string\n    sender: RoomMember\n    type: string\n    relatedEventId?: string\n    redaction: boolean\n    redacted: boolean\n    editing: boolean\n}\nexport type Message = {\n    originalEventId: string\n    content: MessageContent\n    sender: RoomMember\n    originServerTs: Date | null\n    edited: boolean\n    redacted: boolean\n}\n\nexport enum MatrixMembershipType {\n    leave = \"leave\",\n    invite = \"invite\",\n    ban = \"ban\",\n    join = \"join\",\n    knock = \"knock\",\n}\n\nexport type MappedRoom = {\n    roomId: string\n    name: string\n    summary: RoomSummary\n    myMembership: MatrixMembershipType | null\n}\n\nexport interface RoomWithActivity extends MappedRoom {\n    unreadCount: number\n    lastMessage?: Message\n    isDirect: boolean\n    directUserId?: string\n    isOnline?: boolean\n    lastActivityTS: number\n}\n\nexport type EventListener = [string, (...args: any[]) => void]\n\nexport type GetSenderAvatarParams = {\n    sender: RoomMember\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n    allowDirectLinks?: boolean\n}\n\nexport type GetRoomMemberAvatarParams = {\n    roomId: string\n    userId: string\n    width: number\n    height: number\n    resizeMethod: \"crop\" | \"scale\"\n    allowDefault?: boolean\n}\n\nexport type RoomInfo = {\n    roomMembersCount: number\n} \n\nexport type MxcUrlToHttpParams = {\n    mxcUrl: string\n    width?: number\n    height?: number\n    resizeMethod?: \"crop\" | \"scale\"\n    allowDirectLinks?: boolean\n}\n\nexport type CreateClientOptions = {\n    options: ICreateClientOpts\n    messageBatchInterval?: number\n}\n\nexport type MatrixLoginPayload = {\n    user_id: string\n    device_id: string\n    access_token: string\n    well_known?: string\n}\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport {\n    CreateClientOptions,\n    EventListener\n} from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: CreateClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n","import { ISendEventResponse } from \"matrix-js-sdk\"\nimport {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview,\n    PaginateParams,\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const updateMessages = messagesDomain.event<void>()\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\nexport const onPaginateForwardDone = messagesDomain.event<void>()\nexport const paginateForward = messagesDomain.event<PaginateParams>()\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\n\nexport const $paginateForwardPending = messagesDomain.store(false)\nexport const $paginateBackwardPending = messagesDomain.store(false)\nexport const $canPaginateBackward = messagesDomain.store(true)\nexport const $canPaginateForward = messagesDomain.store(true)\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import {\n    MatrixEvent,\n    RoomMember,\n    User,\n    Room\n} from \"matrix-js-sdk\"\nimport {\n    DIRECT_EVENT,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"./constants\"\nimport { client } from \"@/matrix-client\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n    MatrixMembershipType\n} from \"./types\"\n\n\nconst getMappedContent = (event: MatrixEvent) => (\n    event.getContent<MessageContent>()\n)\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership() as MatrixMembershipType\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null => (\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n)\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width,\n        height,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks,\n    )\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = async (roomId: string): Promise<void> => {\n    const cl = client()\n    const { creator } = cl.getRoom(roomId).currentState\n        .getStateEvents(\n            \"m.room.create\",\n        )[0].getContent()\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\n    const prevRoomsId = prevData[creator] ?? []\n    await cl.setAccountData(DIRECT_EVENT, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { forward } from \"effector\"\nimport {\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n} from \"matrix-js-sdk\"\nimport {\n    toMappedRoom,\n    toMappedUser,\n    toMessage\n} from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport {\n    roomMessage,\n    updateMessages\n} from \"@/room-messages\"\nimport {\n    directRoomCreated,\n    roomCreated,\n    onRoomMemberUpdate,\n    onRoomUserUpdate\n} from \"@/room\"\nimport { MatrixLoginPayload} from \"@/types\"\nimport {\n    AuthData,\n    StateEventsContent\n} from \"./types\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx\n} from \"./public\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId())\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = room.currentState\n            .getStateEvents(\n                \"m.room.create\"\n            )[0]?.getContent<StateEventsContent>()?.isDirect\n               \n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use( async (params) =>\n    await client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    }: MatrixLoginPayload = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use( async () => {\n    await client().logout()\n})\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { RoomWithActivity } from \"@/types\"\nimport {\n    InitRoomParams,\n    MappedRoomMember,\n    RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\n\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import matrix, {\n    Direction,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    SearchOrderBy,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport {\n    attach,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport {\n    getIsDirectRoomsIds,\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport {\n    getMessages,\n    setDirectRoom\n} from \"@/utils\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\nimport {\n    getRoomByIdFx,\n    getRoomMembersFx,\n    initRoomFx,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    getRoomMembers,\n    $currentRoom,\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $myPowerLevel,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForDefaultState,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForRedact,\n    $timelineWindow,\n    clearCurrentRoomState,\n    createDirectRoomFx,\n    createRoomFx,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    getAllUsersFx,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    inviteUserFx,\n    joinRoomFx,\n    kickUserRoomFx,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    onRoomLoaded,\n    renameRoomFx,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    leaveRoomFx,\n    $loadFilter,\n    loadRoomFx,\n} from \"./public\"\nimport {\n    LoadRoomFxParams,\n    Visibility\n} from \"./types\"\n\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getRoomByIdFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getRoomByIdFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = room.currentState\n        .getStateEvents(\"m.room.power_levels\", \"\")\n        .getContent()\n\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    // @TODO fix optional type\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const membersCache: { [id: string]: RoomMember } = {}\n        const searchResponse = await client().search({\n            body: {\n                search_categories: {\n                    room_events: {\n                        search_term: term,\n                        keys: [\"content.body\"],\n                        filter: {\n                            rooms: [roomId],\n                        },\n                        order_by: orderBy,\n                    },\n                },\n            },\n        })\n        return searchResponse\n            .search_categories\n            .room_events.results.map(({ result }) => {\n            // TODO: fix me\n                const event = new MatrixEvent(result)\n                const senderId = event.getSender()\n                if (membersCache[senderId] === undefined) {\n                    membersCache[senderId] = room\n                        .getMember(senderId) as RoomMember\n                }\n                event.sender = membersCache[senderId]\n                return toMessage(event)\n            })\n    })\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n\nleaveRoomFx.use( async (roomId) => {\n    await client().leave(roomId)\n})\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { guard, sample } from \"effector\"\nimport {\n    $currentRoomId,\n    $timelineWindow,\n    loadRoomFx,\n    MessageResponse\n} from \"@/room\"\nimport {\n    UpdateMessagesFxParams,\n    PaginateParams,\n    PaginateRoomFxParams\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const paginateRoomFx = messagesDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import {\n    attach,\n    combine,\n    forward,\n    guard,\n    sample\n} from \"effector\"\nimport matrix, {\n    Direction,\n    EventStatus,\n    IContent,\n    MatrixEvent,\n    TimelineWindow\n} from \"matrix-js-sdk\"\nimport {\n    client,\n    createRoomMessageBatch\n} from \"@/matrix-client\"\nimport {\n    $currentRoomId,\n    $isLive,\n    $loadFilter,\n    $loadRoomFxPending,\n    $timelineWindow,\n    loadRoom\n} from \"@/room\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport {\n    setMessages,\n    updateMessagesFx,\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx,\n    updateMessages,\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    onPaginateForwardDone,\n    paginateBackward,\n    paginateForward\n} from \"./public\"\nimport {\n    DeleteMessageResult,\n    UploadContentResult\n} from \"./types\"\nimport {\n    ClientNotInitialized,\n    EventNotFound,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n          && !backwardPaginationPending\n          && !forwardPaginationPending\n          && !roomLoading\n)\n    \n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n    \nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n    \nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n    \nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use( async ({\n    roomId,\n    content,\n    txnId\n}) => await client().sendMessage(roomId, content as IContent, txnId))\n\neditMessageFx.use( async ({\n    roomId, eventId, body, txnId,\n}) => await client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n\n    await client()\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: undefined })\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n    \npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\n    }\n})\n\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","MsgType","MatrixMembershipType","clientStore","messagesDomain","$messages","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","DIRECT_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","getIsDirectRoomsIds","directRooms","getAccountData","Object","values","flatMap","room","checkIsDirect","includes","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","getType","reduce","lastMessage","isDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","setDirectRoom","currentState","getStateEvents","creator","prevData","prevRoomsId","setAccountData","getMappedRooms","getRooms","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","getRoomByIdFx","initRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","sample","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","_cl$getRoom","is_direct","creation_content","reason","setRoomName","joinRoom","leave","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","guard","currentRoomId","roomMessageBatch","loadNewMessagesFx","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"8IA6DYA,EAKAC,4CChECC,EAAOC,eAAa,QCApBC,EAAYF,EAAKG,OAAO,OCaxBC,EAAgBF,EAAUG,QAC1BC,EAAgBJ,EAAUG,QAC1BE,EAASL,EAAUG,QAInBG,EAAoBN,EAC5BO,SACQC,EAAiBR,EACzBO,SACQE,EAAcT,EAAUO,SACxBG,EAAgBV,EACxBO,SACQI,EAAkBX,EAC1BO,SACQK,EAAeZ,EAAUO,SACzBM,EAAWb,EAAUO,SACrBO,EAAiBd,EACzBO,SACQQ,EAAkBf,EAC1BO,SCjCQS,EAAqBlB,EAAKG,OAAO,gBCMjCgB,EAAyBD,EACjCT,SACQW,EAA8BF,EACtCT,SACQY,EAA+BH,EACvCT,SACQa,EAA2BJ,EACnCT,SCbQc,EAAavB,EAAKG,OAAO,QCmCzBqB,EAAUD,EAAWE,MAAsB,MAC3CC,EAAqBH,EAAWE,OAAe,GAC/CE,EAAsBJ,EAC9BE,MAAiC,MACzBG,EAAiBL,EACzBE,MAAyC,MACjCI,EAAeN,EAAWE,MAA+B,MACzDK,EAAwBP,EAAWlB,QACnC0B,EAAkBR,EAAWE,MAA6B,MAC1DO,EAAgBT,EAAWE,MAAc,GAEzCQ,EAA6BV,EACrCE,MAjBkC,IAkB1BS,EAA+BX,EACvCE,MArBoC,IAsB5BU,EAA4BZ,EACpCE,MAtBiC,IAuBzBW,EAAsCb,EAC9CE,MAtBgD,GAuBxCY,EAA+Bd,EACvCE,MAtBoC,IAuB5Ba,GAAqCf,EAC7CE,MAzB+C,IA2BvCc,GAA4BZ,EACpCa,KACG,SAACC,0BAAYA,MAAAA,SAAAA,EAASC,QAClB,SAACC,SAAiC,SAAtBA,EAAOC,6BAA0B,MAG5CC,GAAWC,UACpBd,EAAeC,GACf,SAACc,EAAGC,UAAMD,GAAKC,KAENC,GAAaH,UACtBd,EAAeE,GACf,SAACa,EAAGC,UAAMD,GAAKC,KAENE,GAAUJ,UACnBd,EAAeG,GACf,SAACY,EAAGC,UAAMD,GAAKC,KAENG,GAAuBL,UAChCd,EAAeI,GACf,SAACW,EAAGC,UAAMD,GAAKC,KAENI,GAAaN,UACtBd,EAAeK,GACf,SAACU,EAAGC,UAAMD,GAAKC,KAENK,GAAsBP,UAC/Bd,EAAeM,IACf,SAACS,EAAGC,UAAMD,GAAKC,KAGNM,GAAcR,UACvBlB,EACAG,GACA,SAACwB,EAAQC,UAAmBC,QAAQF,IAAWE,QAAQD,MAG9CE,GAAmBnC,EAAWlB,QAC9BsD,GAAqBpC,EAAWlB,QAChCuD,GAAiBrC,EAAWlB,QAC5BwD,GAAWtC,EAAWlB,QACtByD,GAAqBvC,EAAWlB,QAChC0D,GAAoBxC,EAAWlB,QAC/B2D,GAAsBzC,EAAWlB,QACjC4D,GAAe1C,EAAWlB,QAC1B6D,GAAW3C,EAAWlB,QACtB8D,GAAiB5C,EAAWlB,QAC5B+D,GAAkB7C,EAAWlB,QAC7BgE,GAAoB9C,EAAWlB,QAC/BiE,GAAc/C,EAAWlB,QAEzBkE,GAAuBhD,EAC/Bd,SACQ+D,GAA2BjD,EACnCd,SACQgE,GAAgBlD,EACxBd,SACQiE,GAAgBnD,EACxBd,SACQkE,GAAepD,EACvBd,SACQmE,GAAqBrD,EAC7Bd,SACQoE,GAAetD,EAAWd,SAC1BqE,GAAiBvD,EAAWd,SAC5BsE,GAAexD,EAAWd,SAC1BuE,GAAazD,EACrBd,SACQwE,GAAc1D,EACtBd,SACQyE,GAAa3D,EACrBd,8BPvEOX,EAAAA,eAAAA,kCAERA,qCAGQC,EAAAA,WAAAA,wDAERA,6BACAA,2BQnEG,ICFKoF,GCsDAC,GC9CRC,GHNSC,GAAiBtF,EAAKG,OAAO,YIgB7BoF,GAAYD,GAAe7D,MAAiB,IAE5C+D,GAAiBF,GAAejF,QAChCoF,GAAcH,GAAejF,QAC7BqF,GAAoBJ,GAAejF,QACnCsF,GAAmBL,GAAejF,QAClCuF,GAAyBN,GAAejF,QACxCwF,GAAwBP,GAAejF,QACvCyF,GAAkBR,GAAejF,QACjC0F,GAAmBT,GAAejF,QAElC2F,GAA0BV,GAAe7D,OAAM,GAC/CwE,GAA2BX,GAAe7D,OAAM,GAChDyE,GAAuBZ,GAAe7D,OAAM,GAC5C0E,GAAsBb,GAAe7D,OAAM,GAE3C2E,GAAgBd,GACxB7E,SACQ4F,GAAgBf,GACxB7E,SACQ6F,GAAkBhB,GAC1B7E,SACQ8F,GAAoBjB,GAC5B7E,SACQ+F,GAA0BlB,GAClC7E,SACQgG,GAAkBnB,GAC1B7E,SACQiG,GAAkBpB,GAC1B7E,2BH/CO0E,GAAAA,YAAAA,+BAEVA,kCACAA,mBACAA,iBACAA,mBACAA,qBACAA,iBACAA,mBACAA,wDC6CUC,GAAAA,yBAAAA,0CAERA,mBACAA,aACAA,eACAA,iBClDJ,IAAIuB,GAAuB,IACrBC,GAAkC,GAE3BC,GAAgB,WACrBxB,KACAA,GAAYyB,qBACZzB,GAAc,OAIT0B,GAAe,gBACvBC,IAAAA,QAA+BC,IAAtBN,qBAEVE,UACWK,IAAPD,IAAkBN,GAAuBM,GAC7C5B,GAAc8B,UAAOJ,aAAaC,GAClCJ,GAAeQ,SAAQ,iCAAEC,OAAWC,OAChCjC,GAAYkC,GAAGF,EAAWC,OAGrBE,GAAS,kBAAoBnC,IAE7BoC,GAAgB,SAACC,GAC1Bd,GAAee,WAAff,aAAuBc,KAGdE,GAAyB,kBAC3BC,cAAYpC,GAAakB,KEpCvBmB,GAAqB,iBACrBC,GAAuB,mBAGvBC,GAAe,WCFfC,GAAgBC,oBAAkB,iBAClCC,GAAeD,oBAAkB,gBACjCE,GAAuBF,oBAAkB,wBACzCG,GACXH,oBAAkB,2BACPI,GAAeJ,oBAAkB,gBACjCK,GAAkBL,oBAAkB,8lBCkBjD,IAAMM,GAAmB,SAACnI,UACtBA,EAAMoI,cAGGC,GAAsB,eAEzBC,EADKnB,KACYoB,eAAeZ,IAAcS,oBAC7CE,GAAeE,OAAOC,OAAOH,GAAaI,SAAQ,SAACC,UAASA,MAG1DC,GAAgB,SAAC1F,UAC1BmF,KAAsBQ,SAAS3F,aAqBnB4F,GACZ9I,EACA+I,OAEMC,EAAWhJ,EAAMiJ,oBAChB,CACHF,qBAAqClC,IAApBkC,EACbA,EACA/I,EAAMkJ,QACVC,QAAShB,GAAiBnI,GAC1BoJ,OAAQpJ,EAAMoJ,OACdC,eAAgBrJ,EAAMsJ,UACtBC,OAA4C,eAAnCP,MAAAA,SAAAA,EAAgB,UACzBQ,SAAUxJ,EAAMyJ,cAAgBzJ,EAAM0J,wBAI9BC,GAAahB,SAClB,CACHzF,OAAQyF,EAAKzF,OACb0G,KAAMjB,EAAKiB,KACXC,QAASlB,EAAKkB,QACdC,aAAcnB,EAAKoB,4BAIXC,GACZC,EACAjK,UAEIA,EAAMkK,WAAW,cAAgBlK,EAAM0J,eAG3CO,EAAI3C,KAAKwB,GAAU9I,IAFRiK,EAYR,IAAME,GAAe,SAACC,SACzB,CACIC,UAAWD,EAAKC,UAChBC,OAAQF,EAAKE,OACbC,gBAAiBH,EAAKG,gBACtBC,YAAaJ,EAAKI,YAClBC,cAAeL,EAAKK,cACpBC,eAAgBN,EAAKM,eACrBC,SAAUP,EAAKO,oBAqBPC,GACZjC,SACAkC,yDAAa,GAEPC,EAAK3D,KACL4D,EAAaD,EAAGE,QAAQrC,EAAKzF,YAC9B6H,EAAY,MAAM,IAAIjD,WACrBmD,EAASF,EAAWG,kBAAkBC,YACxCC,EAAc,EACTC,EAAIJ,EAAOK,OAAS,EAAGD,GAAK,GAC7BA,IAAMJ,EAAOK,OAAST,EADUQ,IAAK,KAEnCrL,EAAQiL,EAAOI,GACfE,EAAaR,EACdS,iBAAiBV,EAAGW,YAAuBzL,EAAMkJ,YAClDqC,QAGJH,GAAe,MAEbM,EAAsBT,EACvB5I,QAAO,SAACrC,SAAU,CAACyH,GAAoBC,IACnCmB,SAAS7I,EAAM2L,cACnBC,OAAO5B,GAAoB,IAC1B6B,EAAcH,EAAoBJ,OACpCI,EAAoBA,EAAoBJ,OAAS,QAAKzE,EACpDiF,EAAWlD,GAAcD,EAAKzF,QAC9B6I,EAASD,EACTf,EAAWiB,UAAUjB,EAAWkB,iBAChC,qBAGCtD,OACHyC,YAAAA,EACAS,YAAAA,EACAC,SAAAA,EACAI,aAAcH,MAAAA,SAAAA,EAAQzB,OAGtB6B,SAAUJ,EACJ3I,kBAAQ2I,EAAO3B,yBAAPgC,EAAa7B,sBACrB1D,EACNwF,eAAiBtB,EAAmBuB,+mBC7J5BC,GAAYpJ,UACjBA,EACFgI,YACA9I,QAAO,SAACrC,SAAU,CAACyH,GAAoBC,IACnCmB,SAAS7I,EAAM2L,cACnBC,OAAO5B,GAAoB,QA0EvBwC,8CAAgB,WAAOtJ,iGAC1B4H,EAAK3D,OACS2D,EAAGE,QAAQ9H,GAAQuJ,aAClCC,eACG,iBACF,GAAGtE,aAHDuE,IAAAA,QAIFC,EAAW9B,EAAGvC,eAAeZ,IAAcS,aAC3CyE,YAAcD,EAASD,kBAAY,YACnC7B,EAAGgC,eAAenF,YACjBiF,mBACFD,sBAAcE,IAAa3J,wGC5CpC,SAAS6J,YACE5F,KAAS6F,WAAW7K,IAAIwH,cAN3B,CACJsD,KAAM9M,EAAkB+M,KAAK/K,KAAI,iBAAO,CAAEgL,iBAAkB,OAC5DC,GAAI7M,IAOR6G,GAAc,CACV,CACI,gBACA,SACIpH,EACA2I,EACA0E,EACAC,EACAC,OAEMC,EAAYxN,EAAM2L,UACpB6B,IAAc/F,IACX+F,IAAc9F,KAEZ2F,GAAqBE,EAAKE,WAC3BrI,GAAY0D,GAAU9I,MAItC,CAAC,OAAQ,SAAC2I,WACAmC,EAAK3D,KACLiD,EAAOzB,EAAKqD,UAAUlB,EAAGW,aAC3BrB,GAA4B,WAApBA,EAAK7H,wBAEAoG,EAAK8D,aACjBC,eACG,iBACF,2BAHWgB,EAGPtF,iCAHOuF,EAG2B7B,UAGxC9H,GAAkB2E,GAElB1E,GAAY0E,MAGpB,CAAC,wBAAyB,kBAAMxD,OAChC,CAAC,OAAQ,SAACyI,EAAOC,MACC,aAAVD,KAKU,YAAVA,GAAqC,aAAdC,KAKb,YAAVD,GAAqC,YAAdC,YACjBC,EAAQf,KACd7M,EAAO4N,YANDA,EAAQf,KACdhN,EAAc+N,YANRA,EAAQf,KACd9M,EAAc6N,MActB,CACI,oBACA,SAACC,EAAGH,EAAOtL,UAAuBgB,GAAmBhB,KAEzD,CACI,sBACA,SAACyL,EAAGH,EAAOtL,UAAuBgB,GAAmBhB,KAEzD,CACI,wBACA,SAACyL,EAAGzL,UAAuBgB,GAAmBhB,KAElD,CACI,kBACA,SAACyL,EAAGzL,UAAuBgB,GAAmBhB,KAElD,CACI,wBACA,SAACyL,EAAGzL,UAAuBgB,GAAmBhB,KAElD,CACI,oBACA,SAACyL,EAAGzL,UAAuBgB,GAAmBhB,KAElD,CACI,iBACA,SAACyL,EAAG3D,UAAe/G,GAAiB+G,KAExC,CACI,gBACA,SAAC2D,EAAG3D,UAAe/G,GAAiB+G,KAExC,CACI,mBACA,SAAC2D,EAAG3D,UAAe/G,GAAiB+G,OAI5CjK,EAAkB6N,+CAAK,WAAOC,0FACpB9G,KAAS+G,MJzJc,mBIyJWD,6IAE5C5N,EAAe2N,+CAAI,WAAOC,0GACCE,gBAChBF,EAAOG,oCACV,CACIC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACC,KJ/JJ,gBI+J0BC,MAAOT,EAAOS,wBAJ5DC,kBAYwBA,EAASC,8BAJnCC,IAAAA,QACAC,IAAAA,aACAC,IAAAA,UACAC,IAAAA,6BAEG,CACH1E,OAAQuE,EACRI,YAAaH,EACbI,SAAUH,EACVI,UAAWH,uGAInB1O,EAAY0N,8BAAI,iGACM7G,OAAV/F,IAAAA,gDACUA,EAAMgO,uDAG5B7O,EAAcyN,KAAI,SAACC,UAAW9G,KAASkI,YAAYpB,MAEnDvN,EAASsN,8BAAK,oGACJ7G,KAASmI,qDAGnB7O,EAAauN,KAAI,kBAAM7G,KAASoI,gBAEhC/O,EAAgBwN,8BAAI,qGACVlD,EAAK3D,8CACK,gBACVqI,EAAe1E,EAAGW,qDACE,gBACpBrB,EAAOU,EAAG2E,QAAQD,4CACN,iBACZE,EAAavF,GAAaC,IAGhBC,WAAcqF,EAAWlF,8CACXM,EAAG6E,eAAeH,WAAtCI,SACNF,EAAWrF,UAAYuF,EAAYC,WACnCH,EAAWlF,YAAcoF,EAAYE,6CAElCJ,gDAGX/O,EAAeqN,+CAAI,oGAEX+B,IAAAA,mBACAC,IAAAA,kBAGJtJ,GAAaqJ,KACK5I,OAAV/F,IAAAA,uCACSA,EAAMgO,iCACjBjI,KAASkI,YAAYW,qGAG/BpP,EAAgBoN,8BAAI,+FACVlD,EAAK3D,sEAEL2D,EAAGwE,0CACHxE,EAAG1J,0BAAH6O,EAAUC,uBAChBpF,EAAGyE,aACH/I,iDC3NJ1F,EAAuBkN,KAAI,kBAChB7G,KAASgJ,kBAGpBpP,EAA4BiN,+CAAI,WAAOoC,mGAEzBjJ,KAASkJ,mBACXD,EAAQE,MACRF,EAAQG,KACRH,EAAQI,OAGRJ,EAAQK,sEAGZC,QAAQC,MAAM,4CACdD,QAAQC,iIAKhB3P,EAA6BgN,+CAAI,WAAOoC,gGAEhCM,QAAQC,MAAM,kCACMxJ,KAASgJ,6BAAvBS,SACNF,QAAQC,MAAMC,EAAMC,OAAOlI,eACrBxB,KAAS2J,mBACXV,EAAQE,MACRF,EAAQG,KACRH,EAAQI,OACRJ,EAAQW,kEAGZL,QAAQC,MAAM,0CACdD,QAAQC,6HAIhB1P,EAAyB+M,+CAAI,WAAMoC,0FACzBjJ,KAAS6J,eACXZ,EAAQE,MACRF,EAAQG,KACRH,EAAQI,0GC1CT,IAAMS,GAAgB/P,EACxBd,SACQ8Q,GAAahQ,EACrBd,SACQ+Q,GAAmBjQ,EAC3Bd,SACQgR,GAAqBlQ,EAC7Bd,SACQiR,GAAoCnQ,EAC5Cd,olBC2EL,IAAMkR,GAAmBC,SAAO,CAAEnR,OAAQyE,KACpC2M,GAAoBD,SAAO,CAAEnR,OAAQyE,KACrC4M,GAAoBF,SAAO,CAAEnR,OAAQyE,KAErC6M,GAA0BC,WAAS,CACrCC,OAAQrO,GACRsO,QAAS,ilBAGbtQ,EACK2F,GAAG1D,IAAU,SAACsO,cAAK5O,UACnB6O,MAAMtQ,GACXD,EACK0F,GAAG+J,GAAce,UAAU,SAACF,EAAGnJ,UAASA,KACxCoJ,MAAMtQ,GACXC,EACKwF,GAAGgK,GAAWc,UAAU,SAACF,EAAG3O,UAAmBA,KAC/C4O,MAAMxQ,GACXD,EACK4F,GAAGiK,GAAiBa,UAAU,SAACF,EAAGG,UAAUA,KAC5CF,MAAMxQ,GACXI,EACKuF,GAAGkK,GAAmBY,UAAU,SAACF,EAAGI,UAAeA,KACnDH,MAAMxQ,GACXK,EACKsF,GAAGmK,GAAkCW,UAClC,SAACF,EAAGK,UAAgBA,EAAYC,QACnCL,MAAMxQ,GACXO,EACKoF,GAAGmK,GAAkCW,UAClC,SAACF,EAAGK,UAAgBA,EAAYE,OACnCN,MAAMxQ,GACXM,EACKqF,GAAGmK,GAAkCW,UAClC,SAACF,EAAGK,UAAgBA,EAAYG,UACnCP,MAAMxQ,GACXQ,EACKmF,GAAGmK,GAAkCW,UAClC,SAACF,EAAGK,UAAgBA,EAAYI,iBACnCR,MAAMxQ,GACXS,EACKkF,GAAGmK,GAAkCW,UAClC,SAACF,EAAGK,UAAgBA,EAAYK,UACnCT,MAAMxQ,GACXU,GACKiF,GAAGmK,GAAkCW,UAClC,SAACF,EAAGK,UAAgBA,EAAYM,gBACnCV,MAAMxQ,aAEH,CACJ0L,KAAMpI,GAAW6N,QACjBtF,GAAI/L,cAEA,CACJ4L,KAAMzJ,GACN4J,GAAI8D,eAEA,CACJjE,KAAMqE,GAAiBpE,KACvBE,GAAI3J,eAEA,CACJwJ,KAAM0F,SAAO,CACTf,OAAQlQ,EACRkR,MAAO1B,GAAWhE,KAElB2F,GAAI,eAERzF,GAAI1J,eAEA,CACJuJ,KAAMuE,GAAkBtE,KACxBE,GAAIzJ,eAEA,CACJsJ,KAAMwE,GAAkBvE,KACxBE,GAAIxJ,aAGF,CACFgP,MAAOrR,EACPc,OAAQe,QACR0P,OAAQ7B,aAGN,CACFW,OAAQrQ,EACRc,OAAQ,SAACa,UAAWE,QAAQF,IAC5B4P,OAAQvP,aAEN,CACFqP,MAAOvP,GACPuO,OAAQtQ,EACRe,OAAQ,SAAC0Q,EAAoB3I,UAAShH,QAClC2P,MAAAA,SAAAA,EAAoBC,MAAM,SAAC1Q,UACvBA,EAAOgI,SAAWF,EAAKE,YAE/BwI,OAAQvP,aAEN,CACFqP,MAAOtP,GACPsO,OAAQrQ,EACRc,OAAQ,SAACa,EAAQZ,UAAWY,IAAWZ,EAAOY,QAC9C4P,OAAQvP,aAEN,CACFqO,OAAQrQ,EACRqR,MAAOlB,GACPrP,OAAQe,QACR0P,OAAQ3B,aAEN,CACFS,OAAQe,SACJ,CAACpR,EAAgBG,GACjBmC,IACA,mCACIX,OACAC,OAEA8P,IAAAA,eACAC,IAAAA,sBACAC,kCACqB,CACrBjQ,OAAQA,EACRC,eAAgBA,EAChB8P,eAAAA,EACAC,kBAAAA,EACAC,uCAN8B,iBAStC9Q,OAAQY,GACR6P,OAAQrB,aAEN,CACFG,OAAQe,SACJ,CAACpR,EAAgBG,GACjBqC,IACA,yCAMyB,CACrBb,YACAC,oBACA8P,iBALAA,eAMAC,oBALAA,kBAMAC,4BAA6B,eAGrC9Q,OAAQY,GACR6P,OAAQtB,aAEN,CACFI,OAAQe,SACJ,CAACpR,EAAgBG,GACjBoC,IACA,uCAGyB,CACrBZ,YACAC,oBACAgQ,4BAA6B,eAGrC9Q,OAAQY,GACR6P,OAAQxB,aAGN,CACFsB,MAAOrR,EACPc,OAAQe,QACR0P,OAAQ,CAAC1B,GAAoBC,MAGjCD,GAAmBpD,KAAI,SAAC9K,OACd4H,EAAK3D,KACLwB,EAAOmC,EAAGE,QAAQ9H,GAClBoH,EAASQ,EAAGW,gBACbnB,EAAQ,MAAM,IAAIrC,OACjBmC,EAAOzB,EAAKqD,UAAU1B,OACvBF,EAAM,MAAM,IAAInC,UACdmC,EAAK8H,cAGhBb,GAAkCrD,KAAI,SAAC9K,mBAG7BkQ,EAFKjM,KACK6D,QAAQ9H,GACSuJ,aAC5BC,eAAe,sBAAuB,IACtCtE,mBAEE,CACHgK,eAAMgB,EAAmBhB,oBbhQM,GaiQ/BC,cAAKe,EAAmBf,mBblQM,GamQ9BC,iBAAQc,EAAmBd,sBbpQM,GaqQjCC,wBAAea,EAAmBC,8BblQW,EaoQ7CZ,uBAAcW,EAAmBE,6BbnQW,GaqQ5Cd,iBAAQY,EAAmBZ,sBbpQM,OawQzCrB,GAAiBnD,KAAI,SAAC9K,OACZyF,EAAOxB,KAAS6D,QAAQ9H,OACzByF,EAAM,MAAM,IAAIb,UACdU,OAAOC,OAAOE,EAAK8D,aAAarK,SAClCD,KAAI,SAACG,OACI8H,EAAOjD,KAASsI,QAAQnN,EAAOgI,YAChCF,EAAM,MAAM,IAAInC,mBL/L7BsL,EACAnJ,SAEO,CACH7H,WAAYgR,EAAWhR,WACvBqH,KAAM2J,EAAW3J,KACjBsI,WAAYqB,EAAWrB,WACvBsB,eAAgBD,EAAWC,eAC3BC,eAAgBF,EAAWE,eAC3BvQ,OAAQqQ,EAAWrQ,OACnBwQ,OAAQH,EAAWG,OACnBtJ,KAAMD,GAAaC,GACnBE,OAAQiJ,EAAWjJ,QKoLRqJ,CAAmBrR,EAAQ8H,SAI9ChG,GAAc4J,KAAI,SAAC9K,OACTyF,EAAOxB,KAAS6D,QAAQ9H,OACzByF,EAAM,MAAM,IAAIb,mBLzNEa,SAChB,CACHiL,iBAAkBjL,EAAKkL,wBKwNpBC,CAAWnL,MAGtBuI,GAAWlD,+CAAI,oGAAS9K,IAAAA,OACd4H,EAAK3D,KACLwB,EAAOxB,KAAS6D,QAAQ9H,yBACb,IAAI4E,iBACfiM,EAAcpL,EAAKqL,6CAClB,IAAIlN,UAAOmN,eAAenJ,EAAIiJ,sGAGzClP,GAAWmJ,+CAAI,4GACX7K,IAAAA,eACA8P,IAAAA,eACAC,IAAAA,kBACAC,IAAAA,4BAEKhQ,wBAAsB,IAAI6E,0BAEzB7E,EAAe+Q,KAAKjB,EAA0BC,aAC9CiB,EAAqBhR,EAAeiR,YAAYC,YAAUC,SAC5DC,EAAWhI,GAAYpJ,KAEvB+P,GAAqBqB,EAASjJ,OAAS4H,uBAEjCsB,EAAOtB,EAAoBqB,EAASjJ,OACN,aAAhC6H,oCACwBhQ,EACnBsR,SAAS3N,UAAO4N,cAAcC,UAAWH,WAD9CI,kDAGwBzR,EACnBsR,SAAS3N,UAAO4N,cAAcG,SAAUL,WAD7CI,iBAGAA,IACAL,EAAWhI,GAAYpJ,qCAGxB,CACHoR,SAAAA,EACAO,QAASX,EACTA,mBAAAA,EACAY,oBAAqB5R,EAAeiR,YAAYC,YAAUW,+GAIlE7Q,GAAyB6J,KAAI,SAACF,OACf3G,KACF,MAAM,IAAIY,UACZ+F,EAAM3L,KAAI,SAACwG,UAASiC,GAAmBjC,SAGlDzE,GACK8J,+CAAI,0GAASiH,IAAAA,KAAM/R,IAAAA,WAAQgS,QAAAA,aAAUC,gBAAcC,OAC1CzM,EAAOxB,KAAS6D,QAAQ9H,yBACb,IAAI4E,iBACfuN,EAA6C,YACtBlO,KAASmO,OAAO,CACzChH,KAAM,CACFiH,kBAAmB,CACfC,YAAa,CACTC,YAAaR,EACbS,KAAM,CAAC,gBACPrT,OAAQ,CACJyL,MAAO,CAAC5K,IAEZyS,SAAUT,qBATpBU,2BAcCA,EACFL,kBACAC,YAAYK,QAAQ1T,KAAI,gBAAG2T,IAAAA,OAElB9V,EAAQ,IAAI+V,cAAYD,GACxBE,EAAWhW,EAAMiW,wBACQpP,IAA3BwO,EAAaW,KACbX,EAAaW,GAAYrN,EACpBqD,UAAUgK,IAEnBhW,EAAMoJ,OAASiM,EAAaW,GACrBlN,GAAU9I,yGAIjCqE,GAAc2J,KAAI,kBAAM7G,KAAS+O,WAAW/T,IAAIgI,OAEhD7F,GAAa0J,+CAAI,kHACbpE,IAAAA,KACA0I,IAAAA,OACA6D,IAAAA,eACAC,aAAAA,aAAe,KACfC,IAAAA,OAEM1P,EAAU,CACZiD,KAAAA,EACA0I,OAAAA,EACA6D,WAAAA,EACAG,cAAeF,EAAajU,KAAI,SAACyL,mBAC1BA,OACH2I,UAAW3I,EAAM4I,SACjBA,cAAU3P,OAEdwP,OAAAA,YAIsBlP,KAASsP,WAAW9P,0BAAtC+P,IAAAA,0BAED,CAAExT,OAAQwT,sGAGrBnS,GAAmByJ,+CAAK,gHAAQ5D,IAAAA,KAAMiM,IAAAA,WAAQD,aAAAA,aAAe,KACnDtL,EAAK3D,KACLwP,EAAWtO,OACXuO,EAAaD,EAAS3D,MACxB,SAAC9P,0BAAW4H,EAAGE,QAAQ9H,uBAAX2T,EAAoBpK,aAAarK,QAAQgI,EAAKE,qDAEvC,CAAEpH,OAAQ0T,kBAE3BjQ,EAAU,CACZmQ,WAAW,EACXxE,OAAQ,CAAClI,EAAKE,QACd6L,WAAY1W,qBACZ6W,cAAeF,EAAajU,KAAI,SAACyL,mBAC1BA,OACH2I,UAAW3I,EAAM4I,SACjBA,cAAU3P,OAEdwP,OAAAA,EACAU,iBAAkB,CACdjL,UAAU,EACVa,QAAS7B,EAAGW,uBAGMX,EAAG2L,WAAW9P,0BAAhC+P,IAAAA,kBACFlK,GAAckK,oCAEb,CAAExT,OAAQwT,uGAGrBlS,GAAawJ,+CAAK,oGAAQ1D,IAAAA,OAAQpH,IAAAA,gBACxBiE,KAASmL,OAAOpP,EAAQoH,qGAGlC7F,GAAeuJ,+CAAK,sGAAS9K,IAAAA,OAAQoH,IAAAA,OAAQ0M,IAAAA,gBACnC7P,KAASiL,KAAKlP,EAAQoH,EAAQ0M,qGAGxCtS,GAAasJ,+CAAK,oGAAQ9K,IAAAA,OAAQ0G,IAAAA,cACxBzC,KAAS8P,YAAY/T,EAAQ0G,qGAGvCjF,GAAWqJ,+CAAK,0GAAQ9K,IAAAA,WAAQ4I,SAAAA,gBACtBhB,EAAK3D,cACQ2D,EAAGoM,SAAShU,aAAzByF,UACFmD,kCACMU,GAActJ,mCAEjB0H,GAAmBjB,GAAahB,uGAG3CsI,GAAcjD,KAAI,SAAC9K,OACT6H,EAAa5D,KAAS6D,QAAQ9H,UAC/B6H,EACEH,GAAmBjB,GAAaoB,IADf,QAI5BnG,GAAYoJ,+CAAK,WAAO9K,0FACdiE,KAASgQ,MAAMjU,qGCldlB,IAAMkU,GAAiBnS,GACzB7E,SAEQiX,GAAqB9F,SAAO,CACrCK,OAAQ,CAACrQ,EAAgBG,GACzBtB,OAAQgX,GACRE,UAAW,SAACrJ,qCACR/K,YACAC,oBACAoU,UAAW,YACRtJ,MAIEuJ,GAAoBjG,SAAO,CACpCK,OAAQ,CAACrQ,EAAgBG,GACzBtB,OAAQgX,GACRE,UAAW,SAACrJ,qCACR/K,YACAC,oBACAoU,UAAW,WACRtJ,MAIEwJ,GAAmBxS,GAC3B7E,SAGQsX,GAAcC,QAAM,CAC7B/F,OAAQe,SACJpR,EACA,CAACsD,GAAWqI,KAAMkK,GAAelK,KAAMuK,GAAiBvK,OACxD,SACI0K,gBAKAA,cAAAA,EACA1U,SAJI+K,OAAU/K,UACV4S,WAOZzT,OAAQ,qBAAGuV,kBAAe1U,UCQxB2U,GAAmBtQ,KAEnBuQ,GAAoBvG,SAAO,CAC7BnR,OAAQoX,GACRF,UAAW,kBAA4C,CACnD9C,OADUD,SACKjJ,WAIvBpG,GACKgC,GAAGwQ,IAAa,SAAC5F,cAAKyC,YACtBxC,MAAMxQ,GACXJ,EACK+F,GAAGwQ,IAAa,SAAC5F,cAAKgD,UACtB/C,MAAMxQ,GAGX,IAAMwW,GAAkBtV,UACpBQ,GACA2C,GACAD,GACAtE,GACA,SACI2W,EACAC,EACAC,EACAC,UACCH,IACKC,IACAC,IACAC,YAGdvS,GACKsB,GAAGmQ,GAAmB3E,SAAS,SAACZ,EAAGG,UAAUA,KAC7CF,MAAMxQ,GACXoE,GACKuB,GAAGsQ,GAAkB9E,SAAS,SAACZ,EAAGG,UAAUA,KAC5CF,MAAMxQ,GACXsE,GACKqB,GAAGwQ,IAAa,SAAC5F,cAAKiD,uBACtBhD,MAAM,CAAClO,GAAUtC,IACtBuE,GACKoB,GAAGwQ,IAAa,SAAC5F,cAAKqC,sBACtBpC,MAAM,CAAClO,GAAUtC,cAEd,CACJ0L,KAAMoK,GAAmBnK,KACzBE,GAAI7H,eAGA,CACJ0H,KAAMuK,GAAkBtK,KACxBE,GAAI5H,aAGF,CACFoM,OAAQlM,GACRrD,OAAQ0V,GACRjF,OAAQuE,aAEN,CACFzF,OAAQnM,GACRpD,OAAQ0V,GACRjF,OAAQ0E,eAGJ,CACJvK,KAAM0F,SACFzN,GACA4S,GAAkB5K,MAClB,SAAC4E,cAAK7D,OAAoBsG,YAE9BnH,GAAI/H,eAGA,CACJ4H,KAAM4K,GAAiB1V,KAAI,SAACoS,SAAc,CAAEA,SAAAA,MAC5CnH,GAAI0K,aAEF,CACFlG,OAAQe,SACJ,CAACpR,EAAgBG,GACjByD,IACA,iCAAEjC,aAA6B,CAC3BC,oBACAD,OAAQA,MAGhBb,OAAQX,EAAgBS,KAAI,SAAAgB,UAAkBC,QAAQD,MACtD2P,OAAQ2E,KAGZ1R,GAAciI,+CAAK,sGACf9K,IAAAA,OACAiG,IAAAA,QACAiP,IAAAA,eACQjR,KAASkR,YAAYnV,EAAQiG,EAAqBiP,6IAE9DpS,GAAcgI,+CAAK,wGACf9K,IAAAA,OAAQoV,IAAAA,QAAShK,IAAAA,KAAM8J,IAAAA,eACfjR,KAASkR,YACjBnV,EACA,iBACqB,CACbqV,QAAS,SAAUjK,KAAAA,kBAEP,CACZkK,SAAU,YACVC,SAAUH,WAEH,cACH,IAEZF,6IAEJnS,GAAgB+H,+CAAI,0GAChB9K,IAAAA,OAAQoV,IAAAA,QAAStB,IAAAA,OAEXrQ,EAAUqQ,EAAS,CAAEA,OAAAA,QAAWnQ,WACpBM,KAASuR,YAAYxV,EAAQoV,OAASzR,EAAWF,iBAA7DgS,2BACC,CACHL,QAASK,EAAIF,6GAGrBvS,GAAkB8H,+CAAI,oGAAS9K,IAAAA,OAAQoV,IAAAA,QAC7B3P,EAAOxB,KAAS6D,QAAQ9H,yBACb,IAAI4E,aACf8Q,EAAUjQ,EAAKkQ,cAAcP,yBACf,IAAI1Q,0BAGlBT,KACD2R,mBAAmB5V,EAAQoV,EAASM,EAAS,CAAEG,YAAQlS,sGAEhET,GAAgB4H,KAAI,gBAChBgL,IAAAA,KACApP,IAAAA,KACAqP,IAAAA,gBACAC,IAAAA,eACAC,IAAAA,YACA1K,IAAAA,KAGM2K,EADKjS,KACQkS,cAAcL,EAAM,CACnCpP,KAAAA,EACAqP,gBAAAA,EACAxK,KAAAA,EACAyK,eAAAA,EACAC,YAAAA,EACAG,gBAAiB,gBAAGC,IAAAA,OAAQC,IAAAA,MAKxBlU,GAAiB,CAAE0T,KAAAA,EAAMO,OAAAA,EAAQC,MAAAA,OAGnC1D,EAA8B,CAAEsD,QAAAA,UAClCA,EAAQK,QAAO3D,EAAO2D,MAAQL,EAAQK,OACnC3D,KAGXzP,GAAgB2H,KAAI,gBAAE0L,IAAAA,IAAKC,IAAAA,OAAI9H,QAAAA,aAAU,aAC9B,IAAI+H,SAAQ,SAACC,GAChB1S,KAAS2S,cAAcJ,EAAKC,GACvBI,KAAKF,UACC,kBAAKA,EAAQ,UAAWH,OACnCM,YAAW,WACPH,EAAQ,UAAWH,MACpB7H,SAiBX1L,GAAwB6H,KAAI,gBAAGsK,IAAAA,QAASpV,IAAAA,OAC9B4H,EAAK3D,SACN2D,EAAI,MAAM,IAAI/C,OACbY,EAAOmC,EAAGE,QAAQ9H,OACnByF,EAAM,MAAM,IAAIb,OACfmS,EAAUtR,EAAKkQ,cAAcP,OAC9B2B,EAAS,MAAM,IAAIrS,OAClB0C,EAASQ,EAAGW,gBACbnB,EAAQ,MAAM,IAAIpC,OACjBgS,EAAYvR,EAAK8D,aAClB0N,yBAAyBF,EAAS3P,IAE3B,sBADJ2P,EAAQtO,UAEVyO,EA1BV,SAAwBH,MAChBA,EAAQI,SAAWC,cAAYC,WACT,mBAAtBN,EAAQtO,WACRsO,EAAQxQ,oBAED,MAELN,EAAU8Q,EAAQO,qBACjBjC,EAAWpP,EAAXoP,eACa,WAAZA,GAAoC,YAAZA,IAC5BnV,QAAQ+F,EAAQmF,OAAiC,iBAAjBnF,EAAQmF,MACxC2L,EAAQhE,cAAgB9O,KAASsE,YAerBgP,CAAeR,SACxB,CACHC,UAAAA,EACAE,QAAAA,MAGR3C,GAAiBzJ,KAAI,gBAAG7K,IAAAA,eACdgR,EAAqBhR,EAAeiR,YAAYC,YAAUC,eACzD,CACHC,SAAUhI,GAAYpJ,GACtB2R,QAASX,EACTA,mBAAoBA,EACpBY,oBAAqB5R,EAAeiR,YAAYC,YAAUW,cAIlEoC,GAAepJ,+CAAI,4GACf7K,IAAAA,eACAoU,IAAAA,UACA/C,IAAAA,KACAkG,IAAAA,YACAC,IAAAA,aAEKxX,wBAAsB,IAAI6E,iBACzB4S,EAAoB,YAAdrD,EACRzQ,UAAO4N,cAAcG,SACrB/N,UAAO4N,cAAcC,mBACnBxR,EACDsR,SAASmG,EAAKpG,EAAMkG,EAAaC,iBAChCxG,EAAqBhR,EAAeiR,YAAYC,YAAUC,SAC1DC,EAAWhI,GAAYpJ,qBACtB,CACHoR,SAAAA,EACAO,QAASX,EACTA,mBAAoBA,EACpBY,oBAAqB5R,EAAeiR,YAAYC,YAAUW,0/BfhR5B,+BADG,6BAEF,+BAGE,2CAFY,yCACD,2JJhBf,SAACpO,UAClCiU,WAAS,CAAEjJ,OAAQ1R,EAAQ2R,QAASjL,oSauBF,gBAClC1D,IAAAA,OACAoH,IAAAA,OACAwQ,IAAAA,MACAC,IAAAA,OACAC,IAAAA,iBACAC,aAAAA,gBAEMtS,EAAOxB,KAAS6D,QAAQ9H,OACzByF,SACM,SAELuS,EAAcvS,EAAKqD,UAAU1B,UAC9B4Q,EAGEA,EAAYC,aACfhU,KAASiU,mBACTN,EACAC,EACAC,EACAC,GACA,GARO,6EAlCmB,gBAC9B7R,IAAAA,OACA0R,IAAAA,MACAC,IAAAA,OACAC,IAAAA,iBACAC,aAAAA,oBACAI,iBAAAA,uBAEAjS,GAAUA,EAAO+R,aACX/R,EAAO+R,aACLhU,KAASiU,mBACTN,EACAC,EACAC,EACAC,EACAI,GAEF,6BA6C0B,iBACxB,CACJC,sBAAgBnU,KAASiU,+CACzBG,QAAS,CACLC,+BAA0BrU,KAASsU,wTAnBnB,gBACxBC,IAAAA,OACAZ,IAAAA,MACAC,IAAAA,OACAC,IAAAA,aACAK,IAAAA,wBAEAlU,KAASwU,aACLD,EACAZ,EACAC,OACiBlU,IAAjBmU,EAA6BA,EAAe,QAC5CK"}