{"version":3,"file":"matrix-effector.iife.js","sources":["../src/room/types.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/types/content.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/room-pagination/domain.ts","../src/room-pagination/public.ts","../src/constants.ts","../src/errors.ts","../src/mappers.ts","../src/utils.ts","../src/room/private.ts","../src/room-pagination/private.ts","../src/room-messages/private.ts","../src/app/init.ts","../src/notifications/init.ts","../src/room/init.ts","../src/room-messages/init.ts","../src/room-pagination/init.ts","../src/index.ts"],"sourcesContent":["import { TimelineWindow, RoomMember } from \"matrix-js-sdk\"\nimport { MappedUser, Message } from \"@/types\"\n\nexport type InitRoomParams = {\n    roomId: string\n}\nexport type LoadRoomFxParams = {\n    roomId: string\n    timelineWindow: TimelineWindow\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\n}\nexport type MappedRoomMember = Pick<RoomMember,\n  \"membership\" |\n  \"name\" |\n  \"powerLevel\" |\n  \"powerLevelNorm\" |\n  \"rawDisplayName\" |\n  \"roomId\" |\n  \"typing\" |\n  \"userId\"\n> & {\n  user: MappedUser\n}\nexport type MessageResponse = {\n    messages: Message[]\n    isLive: boolean\n    canPaginateForward: boolean\n    canPaginateBackward: boolean\n}\nexport type LoadRoomParams = {\n    initialEventId?: string\n    initialWindowSize?: number\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\n}\nexport type GoToMessageParams = {\n    initialEventId: string\n    initialWindowSize?: number\n}\n\nexport interface CreateRoomParams {\n    name: string\n    invite: string[]\n    visibility: Visibility\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport interface CreateDirectRoomParams {\n    user: MappedUser\n    initialState?: InitialState[]\n    preset?: Preset\n}\n\nexport enum Visibility {\n    public = \"public\",\n    private = \"private\"\n}\n\nexport enum Preset {\n    trustedPrivateChat = \"trusted_private_chat\",\n    privateChat = \"private_chat\",\n    publicChat = \"public_chat\"\n}\n\nexport interface InitialState {\n    content: Object\n    stateKey: string\n    type: string\n}\n\nexport type InviteUserParams = {\n    roomId: string\n    userId: string\n}\n\nexport type KickUserParams = {\n    roomId: string\n    userId: string\n    reason?: string\n}\n\nexport type RenameRoomParams = {\n    roomId: string\n    name: string\n}\n\nexport type RoomPowerLevels = {\n    ban: number\n    kick: number\n    invite: number\n    defaultEvents: number\n    redact: number\n    stateDefault: number\n}\n","import { createDomain } from \"effector\"\n\nexport const root = createDomain(\"root\")\n","import { root } from \"@/root\"\n\nexport const appDomain = root.domain(\"app\")\n","import { throttle } from \"patronum/throttle\"\nimport { LoginPayload } from \"matrix-js-sdk\";\nimport { MappedRoom, MappedUser } from \"@/types\"\nimport {\n    LoginByPasswordParams,\n    LoginByTokenParams,\n    StartClientParams\n} from \"./types\"\nimport { appDomain } from \"./domain\"\nimport { CreateClientParams, AuthData } from \"./types\"\n\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\nexport const onCachedState = appDomain.event<MappedRoom[]>()\nexport const onSync = appDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const loginByPasswordFx = appDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = appDomain\n    .effect<LoginByTokenParams, AuthData, Error>()\nexport const initStoreFx = appDomain.effect<void, void, Error>()\nexport const startClientFx = appDomain\n    .effect<StartClientParams, void, Error>()\nexport const getLoggedUserFx = appDomain\n    .effect<void, MappedUser | null, Error>()\nexport const stopClientFx = appDomain.effect<void, void, Error>()\nexport const logoutFx = appDomain.effect<void, void, Error>()\nexport const createClientFx = appDomain\n    .effect<CreateClientParams, void, Error>()\nexport const destroyClientFx = appDomain\n    .effect<void, void, Error>()\n","import { root } from \"@/root\"\n\nexport const notificationDomain = root.domain(\"notification\")\n","import { notificationDomain } from \"./domain\"\nimport {\n    DeleteNotificationsRuleEnabledParams,\n    NotificationRulesResult,\n    SetNotificationsRuleEnabledParams,\n    SetNotificationsRuleParams\n} from \"./types\"\n\nexport const getNotificationRulesFx = notificationDomain\n    .effect<void, NotificationRulesResult, Error>()\nexport const setNotificationRuleActionFx = notificationDomain\n    .effect<SetNotificationsRuleParams, void, Error>()\nexport const setNotificationRuleEnabledFx = notificationDomain\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\nexport const deleteNotificationRuleFx = notificationDomain\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\n","import { root } from \"@/root\"\n\nexport const roomDomain = root.domain(\"room\")\n","import { TimelineWindow, Room } from \"matrix-js-sdk\"\nimport {combine} from \"effector\"\nimport {\n    MappedRoom,\n    MappedUser,\n    Message,\n    RoomInfo,\n    RoomWithActivity,\n    SearchRoomMessagesPayload\n} from \"@/types\"\nimport { roomDomain } from \"./domain\"\nimport {\n    GoToMessageParams,\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoomMember,\n    CreateRoomParams,\n    InviteUserParams, \n    KickUserParams, \n    RenameRoomParams,\n    CreateDirectRoomParams\n} from \"./types\"\n\nexport const DEFAULT_INVITE_POWERLEVEL = 50\nexport const DEFAULT_BAN_POWERLEVEL = 50\nexport const DEFAULT_KICK_POWERLEVEL = 50\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\nexport const DEFAULT_REDACT_POWERLEVEL = 50\n\nexport const $isLive = roomDomain.store<boolean | null>(null)\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\nexport const $currentRoomMembers = roomDomain\n    .store<MappedRoomMember[] | null>(null)\nexport const $currentRoomId = roomDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\nexport const clearCurrentRoomState = roomDomain.event()\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\nexport const $myPowerLevel = roomDomain.store<number>(0)\n\nexport const $requiredPowerLevelForKick = roomDomain\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\nexport const $requiredPowerLevelForInvite = roomDomain\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\nexport const $requiredPowerLevelForBan = roomDomain\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\nexport const $requiredPowerLevelForRedact = roomDomain\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\nexport const $requiredPowerLevelForDefaultState = roomDomain\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\n\nexport const $currentJoinedRoomMembers = $currentRoomMembers\n    .map(\n        (members) => members?.filter(\n            (member) => member.membership === \"join\") ?? []\n    )\n\nexport const $canKick = combine(\n    $myPowerLevel, $requiredPowerLevelForKick,\n    (m, r) => m >= r\n)\nexport const $canInvite = combine(\n    $myPowerLevel, $requiredPowerLevelForInvite,\n    (m, r) => m >= r\n)\nexport const $canBan = combine(\n    $myPowerLevel, $requiredPowerLevelForBan,\n    (m, r) => m >= r\n)\nexport const $canSendDefaultEvent = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\n    (m, r) => m >= r\n)\nexport const $canRedact = combine(\n    $myPowerLevel, $requiredPowerLevelForRedact,\n    (m, r) => m >= r\n)\nexport const $canSetDefaultState = combine(\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\n    (m, r) => m >= r\n)\n\nexport const initRoom = roomDomain.event<InitRoomParams>()\nexport const liveTimelineLoaded = roomDomain.event<void>()\nexport const onRoomInitialized = roomDomain.event<void>()\nexport const loadRoomMessageDone = roomDomain.event<void>()\nexport const onRoomLoaded = roomDomain.event<void>()\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\nexport const toLiveTimeline = roomDomain.event<void>()\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\nexport const directRoomCreated = roomDomain.event<Room>()\nexport const roomCreated = roomDomain.event<Room>()\n\nexport const searchRoomMessagesFx = roomDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const getRoomsWithActivitiesFx = roomDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = roomDomain\n    .effect<string, RoomInfo, Error>()\nexport const getAllUsersFx = roomDomain\n    .effect<void, MappedUser[], Error>()\nexport const createRoomFx = roomDomain\n    .effect<CreateRoomParams, { roomId: string }, Error>()\nexport const createDirectRoomFx = roomDomain\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\nexport const joinRoomFx = roomDomain\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\n","import { root } from \"@/root\"\n\nexport const messagesDomain = root.domain(\"messages\")\n","export enum MsgType {\n  Audio = \"m.audio\",\n  BadEncrypted = \"m.bad.encrypted\",\n  Emote = \"m.emote\",\n  File = \"m.file\",\n  Image = \"m.image\",\n  Notice = \"m.notice\",\n  Text = \"m.text\",\n  Video = \"m.video\",\n  Location = \"m.location\"\n}\nexport type Relation = {\n  \"m.in_reply_to\"?: {\n    event_id: string\n  }\n}\n\nexport type TextContent = {\n  body:\tstring\n  msgtype: MsgType.Text\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Text\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n\nexport type EmoteContent = {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format:\tstring\n  formatted_body: string\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Emote\n  format?:\tundefined\n  formatted_body?: undefined\n  [customProperty: string]: any\n}\n\nexport type NoticeContent = {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format:\tstring\n  formatted_body: string\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Notice\n  format?:\tundefined\n  formatted_body?: undefined\n  \"m.relates_to\"?: Relation\n  [customProperty: string]: any\n}\n// TODO clarify\nexport type EncryptedFile = any\nexport type ThumbnailInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n}\nexport type ImageInfo = {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type ImageContent = {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Image\n  info?: ImageInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type FileInfo = {\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type FileContent = {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.File\n  filename?: string\n  info: FileInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type AudioInfo = {\n  duration: number\n  mimetype:\tstring\n  size:\tnumber\n}\nexport type AudioContent = {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: AudioInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\nexport type LocationInfo = {\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  thumbnail_url?: undefined\n  thumbnail_file:\tEncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type LocationContent = {\n  body:\tstring\n  msgtype: MsgType.Location\n  geo_uri: string\n  info?: LocationInfo\n  [customProperty: string]: any\n}\nexport type VideoInfo = {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url: string\n  thumbnail_file?: undefined\n  thumbnail_info: ThumbnailInfo\n} | {\n  duration: number\n  h: number\n  w: number\n  mimetype: string\n  size: number\n  thumbnail_url?: undefined\n  thumbnail_file: EncryptedFile\n  thumbnail_info: ThumbnailInfo\n}\nexport type VideoContent = {\n  body:\tstring\n  msgtype: MsgType.Video\n  info?: VideoInfo\n  url: string\n  file?: undefined\n  [customProperty: string]: any\n} | {\n  body:\tstring\n  msgtype: MsgType.Audio\n  info?: VideoInfo\n  url?: undefined\n  file: EncryptedFile\n  [customProperty: string]: any\n}\n\nexport type BadEncryptedContent = {\n  body:\tstring\n  msgtype: MsgType.BadEncrypted\n  [customProperty: string]: any\n}\n\nexport type MessageContent = AudioContent |\n  BadEncryptedContent |\n  EmoteContent |\n  FileContent |\n  ImageContent |\n  NoticeContent |\n  TextContent |\n  VideoContent |\n  LocationContent |\n  Record<string, never>\n","import { batchEvents } from \"@42px/effector-extra\"\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\nimport { roomMessage } from \"./room-messages\"\nimport { createClientOptions, EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet messageBatchInterval = 500\nconst callbacksStore: EventListener[] = []\n\nexport const createClient = (\n    {options, messageBatchInterval: ms}: createClientOptions\n): void => {\n    destroyClient()\n    if (ms !== undefined) messageBatchInterval = ms\n    clientStore = matrix.createClient(options)\n    callbacksStore.forEach(([eventName, cb]) => {\n        clientStore.on(eventName, cb)\n    })\n}\nexport const client = (): MatrixClient => clientStore\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n\nexport const createRoomMessageBatch = () => {\n    return batchEvents(roomMessage, messageBatchInterval)\n}\n\nexport const destroyClient = () => {\n    if (clientStore) {\n        clientStore.removeAllListeners()\n        clientStore = null as any\n    }\n}\n","import {\n    CheckEventPermissionsParams,\n    DeleteMessagePayload,\n    EditMessagePayload,\n    EventPermissions,\n    ReadAllMessagesParams,\n    SendMessagePayload,\n    UploadContentParams,\n    UploadProgress,\n    UrlPreview\n} from \"./types\"\nimport { messagesDomain } from \"./domain\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport { Message } from \"@/types\"\n\nexport const $messages = messagesDomain.store<Message[]>([])\n\nexport const roomMessage = messagesDomain.event<Message>()\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\n\nexport const sendMessageFx = messagesDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = messagesDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = messagesDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const readAllMessagesFx = messagesDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const checkEventPermissionsFx = messagesDomain\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\nexport const uploadContentFx = messagesDomain\n    .effect<UploadContentParams, UploadContentResult, Error>()\nexport const getUrlPreviewFx = messagesDomain\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\n","import { root } from \"@/root\"\n\nexport const paginationDomain = root.domain(\"pagination\")\n","import { paginationDomain } from \"./domain\"\nimport { PaginateParams } from \"./types\"\n\nexport const $paginateForwardPending = paginationDomain.store(false)\nexport const $paginateBackwardPending = paginationDomain.store(false)\nexport const $canPaginateBackward = paginationDomain.store(true)\nexport const $canPaginateForward = paginationDomain.store(true)\n\nexport const onPaginateBackwardDone = paginationDomain.event<void>()\nexport const onPaginateForwardDone = paginationDomain.event<void>()\nexport const paginateForward = paginationDomain.event<PaginateParams>()\nexport const paginateBackward = paginationDomain.event<PaginateParams>()\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\nexport const DIRECT_EVENT = \"m.direct\"\n","import { createCustomError } from \"@42px/custom-errors\"\n\nexport const EventNotFound = createCustomError(\"EventNotFound\")\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\nexport const TimelineWindowUndefined = \n  createCustomError(\"TimelineWindowUndefined\")\nexport const UserNotFound = createCustomError(\"UserNotFound\")\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\n","import { MatrixEvent, RoomMember, User, Room } from \"matrix-js-sdk\"\nimport { checkIsDirect, client } from \"@/index\"\nimport { ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT } from \"./constants\"\nimport { RoomNotFound } from \"./errors\"\nimport { MappedRoomMember } from \"./room\"\nimport {\n    Message,\n    MessageEvent,\n    MappedRoom,\n    RoomInfo,\n    MessageContent,\n    MappedUser,\n    RoomWithActivity,\n} from \"./types\"\n\nfunction getMappedContent(event: MatrixEvent): MessageContent {\n    const matrixContent = event.getContent() as MessageContent\n    return {...matrixContent}\n}\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: getMappedContent(event),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    const relation = event.getRelation()\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: getMappedContent(event),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\n        redacted: event.isRedacted() || event.isRedaction(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n        myMembership: room.getMyMembership()\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n\nexport const toMappedUser = (user: User): MappedUser => (\n    {\n        avatarUrl: user.avatarUrl,\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence as any,\n    }\n)\n\nexport function toMappedRoomMember(\n    roomMember: RoomMember,\n    user: User\n): MappedRoomMember {\n    return {\n        membership: roomMember.membership,\n        name: roomMember.name,\n        powerLevel: roomMember.powerLevel,\n        powerLevelNorm: roomMember.powerLevelNorm,\n        rawDisplayName: roomMember.rawDisplayName,\n        roomId: roomMember.roomId,\n        typing: roomMember.typing,\n        user: toMappedUser(user),\n        userId: roomMember.userId,\n    }\n}\n\nexport function toRoomWithActivity(\n    room: MappedRoom, \n    maxHistory = 99\n): RoomWithActivity {\n    const cl = client()\n    const matrixRoom = cl.getRoom(room.roomId)\n    if (!matrixRoom) throw new RoomNotFound()\n    const events = matrixRoom.getLiveTimeline().getEvents()\n    let unreadCount = 0\n    for (let i = events.length - 1; i >= 0; i--) {\n        if (i === events.length - maxHistory) break\n        const event = events[i]\n        const isReadUpTo = matrixRoom\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\n        if (isReadUpTo) {\n            break\n        }\n        unreadCount += 1\n    }\n    const mergedMessageEvents = events\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    const lastMessage = mergedMessageEvents.length ?\n        mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n    const isDirect = checkIsDirect(room.roomId)\n    const DMUser = isDirect\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n        : null\n\n    return {\n        ...room,\n        unreadCount,\n        lastMessage,\n        isDirect,\n        directUserId: DMUser?.userId,\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n        isOnline: DMUser\n            ? Boolean(DMUser.user?.currentlyActive)\n            : undefined,\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n    }\n}\n","import { EventType, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { \n    DIRECT_EVENT, \n    ROOM_MESSAGE_EVENT, \n    ROOM_REDACTION_EVENT \n} from \"./constants\"\nimport { mergeMessageEvents } from \"./mappers\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams,\n    MxcUrlToHttpParams\n} from \"./types\"\n\nexport function getMessages(timelineWindow: TimelineWindow) {\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\nexport const getIsDirectRoomsIds = ():string[] => {\n    const cl = client()\n    const directRooms = (cl.getAccountData(\n        DIRECT_EVENT as EventType) as MatrixEvent\n    )?.getContent()\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\n}\n\nexport const mxcUrlToHttp = ({\n    mxcUrl,\n    width,\n    height,\n    resizeMethod,\n    allowDirectLinks,\n}: MxcUrlToHttpParams): string | null => \n    client().mxcUrlToHttp(\n        mxcUrl,\n        width !== undefined ? width : null,\n        height !== undefined ? height : null,\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\n        allowDirectLinks !== undefined ? allowDirectLinks : null,\n    )\n\nexport const checkIsDirect = (roomId: string): boolean => (\n    getIsDirectRoomsIds().includes(roomId))\n\n\nexport const getUploadCredentials = () => {\n    return ({\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\n        headers: {\n            Authorization : `Bearer ${client().getAccessToken()}`\n        },\n    })\n}\n\nexport const setDirectRoom = (roomId: string): Promise<void> => {\n    const cl = client()\n    const { creator } = (cl.getRoom(roomId)?.currentState\n        .getStateEvents(\n            \"m.room.create\" as EventType,\n            undefined as any\n        ) as any )[0]?.getContent()\n    const prevData = (cl.getAccountData(\n        DIRECT_EVENT as EventType\n    ) as MatrixEvent)?.getContent() as any\n    const prevRoomsId = prevData[creator] ?? []\n    return cl.setAccountData(DIRECT_EVENT as EventType, {\n        ...prevData,\n        [creator]: [...prevRoomsId, roomId]\n    })\n}\n","import { combine } from \"effector\"\nimport { RoomMember, TimelineWindow, User } from \"matrix-js-sdk\"\nimport { RoomWithActivity } from \"@/types\"\nimport {\n    InitRoomParams,\n    LoadRoomFxParams,\n    MappedRoomMember,\n    MessageResponse, RoomPowerLevels\n} from \"./types\"\nimport { roomDomain } from \"./domain\"\nimport { $currentRoomId, $timelineWindow } from \"./public\"\n\nexport const $loadFilter = combine(\n    $currentRoomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\n\nexport const onRoomUserUpdate = roomDomain.event<User>()\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\nexport const getRoomMembers = roomDomain.event<void>()\n\nexport const getRoomByIdFx = roomDomain\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\nexport const initRoomFx = roomDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\nexport const loadRoomFx = roomDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const getRoomMembersFx = roomDomain\n    .effect<string, MappedRoomMember[], Error>()\nexport const updatePowerLevelFx = roomDomain\n    .effect<string, number, Error>()\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\n    .effect<string, RoomPowerLevels, Error>()\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { attach } from \"effector\"\nimport { $currentRoomId, $timelineWindow, MessageResponse } from \"@/room\"\nimport { paginationDomain } from \"./domain\"\nimport { PaginateParams, PaginateRoomFxParams } from \"./types\"\n\nexport const paginateRoomFx = paginationDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\n\nexport const paginateBackwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"backward\" as const,\n        ...params,\n    })\n})\n    \nexport const paginateForwardFx = attach({\n    source: [$currentRoomId, $timelineWindow],\n    effect: paginateRoomFx,\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\n        roomId: roomId as string,\n        timelineWindow: timelineWindow as TimelineWindow,\n        direction: \"forward\" as const,\n        ...params,\n    })\n})\n","import { guard, sample } from \"effector\"\nimport { $currentRoomId, MessageResponse } from \"@/room\"\nimport { paginateRoomFx } from \"@/room-pagination/private\"\nimport { loadRoomFx } from \"@/room/private\"\nimport { UpdateMessagesFxParams } from \"./types\"\nimport { messagesDomain } from \"./domain\"\n\nexport const updateMessages = messagesDomain.event<void>()\n\nexport const updateMessagesFx = messagesDomain\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\n\n// Race ellimination\nexport const setMessages = guard({\n    source: sample(\n        $currentRoomId,\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\n        (\n            currentRoomId,\n            { \n                params: { roomId },\n                result,\n            }) => ({\n            currentRoomId,\n            roomId,\n            ...result,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n","import { forward } from \"effector\"\nimport {\n    EventType,\n    User,\n    MatrixEvent,\n    Room,\n    RoomMember,\n    LoginPayload,\n} from \"matrix-js-sdk\"\nimport { toMappedRoom, toMappedUser, toMessage } from \"@/mappers\"\nimport {\n    client,\n    createClient,\n    destroyClient,\n    onClientEvent,\n} from \"@/matrix-client\"\nimport { onRoomMemberUpdate, onRoomUserUpdate } from \"@/room/private\"\nimport {\n    getLoggedUserFx,\n    initStoreFx,\n    loginByPasswordFx,\n    loginByTokenFx,\n    logoutFx,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    startClientFx,\n    stopClientFx,\n    createClientFx,\n    destroyClientFx\n} from \"./public\"\nimport { AuthData } from \"./types\"\nimport {\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT\n} from \"@/constants\"\nimport { updateMessages } from \"@/room-messages/private\"\nimport { roomMessage } from \"@/room-messages\"\nimport { directRoomCreated, roomCreated } from \"@/room\"\n\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\n\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\n\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessage(event))\n                }\n            }\n        }],\n    [\"Room\", (room: Room) => {\n        const cl = client()\n        const user = room.getMember(cl.getUserId() as string)\n        if (user && user.membership !== \"invite\") return\n\n        const isDirect = (room.currentState\n            .getStateEvents(\n                \"m.room.create\" as EventType, \n                undefined as any\n            ) as any)[0]?.getContent()?.isDirect\n\n        if (isDirect) {\n            directRoomCreated(room)\n        } else {\n            roomCreated(room)\n        }\n    }],\n    [\"Room.localEchoUpdated\", () => updateMessages()],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n    [\n        \"RoomState.members\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomState.newMember\",\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.membership\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.name\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.powerLevel\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"RoomMember.typing\",\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\n    ],\n    [\n        \"User.avatarUrl\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.presence\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n    [\n        \"User.displayName\",\n        (e, user: User) => onRoomUserUpdate(user)\n    ],\n])\n\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\n\nloginByTokenFx.use(async (params): Promise<AuthData> => {\n    const response = await fetch(\n        `${params.baseUrl}/_matrix/client/r0/login`,\n        { \n            method: \"POST\", \n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \n        }\n    )\n    const { \n        user_id,\n        access_token,\n        device_id,\n        well_known\n    }: LoginPayload = await response.json()\n    return { \n        userId: user_id, \n        accessToken: access_token,\n        deviceId: device_id,\n        wellKnown: well_known\n    }\n})\n\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\n\nstartClientFx.use((params) => client().startClient(params))\n\nlogoutFx.use(() => client().logout())\n\nstopClientFx.use(() => client().stopClient())\n\ngetLoggedUserFx.use(async () => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    const mappedUser = toMappedUser(user)\n    // FixMe: Необъяснимое поведение получения юзера через getUser\n    // Аватар и дисплейнейм не приходят, и приходится получать \n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\n        mappedUser.displayName = profileInfo.displayname as string\n    }\n    return mappedUser\n})\n\ncreateClientFx.use(async (\n    {\n        createClientParams,\n        startClientParams\n    }\n) => {\n    createClient(createClientParams)\n    const { store } = client()\n    if (store) await store.startup()\n    await client().startClient(startClientParams)\n})\n\ndestroyClientFx.use(async () => {\n    const cl = client()\n    if (!cl) return\n    await cl.logout() \n    await cl.store?.deleteAllData()\n    cl.stopClient()\n    destroyClient()\n})\n","import { client } from \"@/matrix-client\"\nimport {\n    getNotificationRulesFx,\n    setNotificationRuleActionFx,\n    setNotificationRuleEnabledFx,\n    deleteNotificationRuleFx\n} from \"./public\"\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\n\ngetNotificationRulesFx.use(() => {\n    return client().getPushRules() as Promise<NotificationRulesResult>\n})\n\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\n    try {\n        await client().setPushRuleActions(\n            payload.scope, \n            payload.kind, \n            payload.ruleId, \n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\n            // типы - убрать as any\n            payload.actions as any\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleAction.Fx\")\n        console.error(err)\n        throw err\n    }\n})\n\nsetNotificationRuleEnabledFx.use(async (payload) => {\n    try {\n        console.error(\"Getting push rules...\")\n        const rules = await client().getPushRules() as any\n        console.error(rules.global.room)\n        await client().setPushRuleEnabled(\n            payload.scope,\n            payload.kind,\n            payload.ruleId,\n            payload.enabled\n        )\n    } catch (err) {\n        console.error(\"Error while setNotificationRuleEnabled\")\n        console.error(err)\n    }\n})\n\ndeleteNotificationRuleFx.use(async(payload) => {\n    await client().deletePushRule(\n        payload.scope,\n        payload.kind,\n        payload.ruleId\n    )\n})\n","import matrix, {\n    Room,\n    TimelineWindow,\n    MatrixEvent,\n    RoomMember\n} from \"matrix-js-sdk\"\nimport { debounce } from \"patronum/debounce\"\nimport { attach, forward, guard, sample } from \"effector\"\nimport {\n    toMappedRoom,\n    toMappedRoomMember,\n    toMappedUser,\n    toMessage,\n    toRoomInfo,\n    toRoomWithActivity\n} from \"@/mappers\"\nimport { client } from \"@/matrix-client\"\nimport {  } from \"@/types\"\nimport { getIsDirectRoomsIds, getMessages, setDirectRoom } from \"@/utils\"\nimport {\n    $loadFilter,\n    getRoomByIdFx,\n    getRoomMembers,\n    getRoomMembersFx,\n    initRoomFx,\n    loadRoomFx,\n    onRoomMemberUpdate,\n    onRoomUserUpdate,\n    updatePowerLevelFx,\n    updateRequiredPowerLevelForRoomFx,\n} from \"./private\"\nimport {\n    $currentRoomId,\n    $currentRoomMembers,\n    $loadRoomFxPending,\n    $timelineWindow,\n    getRoomInfoFx,\n    getRoomsWithActivitiesFx,\n    initRoom,\n    liveTimelineLoaded,\n    loadRoom,\n    loadRoomMessage,\n    loadRoomMessageDone,\n    onRoomInitialized,\n    searchRoomMessagesFx,\n    toLiveTimeline,\n    onRoomLoaded,\n    createRoomFx,\n    getAllUsersFx,\n    inviteUserFx,\n    kickUserRoomFx,\n    renameRoomFx,\n    joinRoomFx,\n    createDirectRoomFx,\n    clearCurrentRoomState,\n    $myPowerLevel,\n    $requiredPowerLevelForKick,\n    $requiredPowerLevelForBan,\n    $requiredPowerLevelForInvite,\n    $requiredPowerLevelForDefaultEvents,\n    $requiredPowerLevelForRedact,\n    $requiredPowerLevelForDefaultState,\n    $currentRoom,\n    DEFAULT_KICK_POWERLEVEL,\n    DEFAULT_BAN_POWERLEVEL,\n    DEFAULT_INVITE_POWERLEVEL,\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n    DEFAULT_REDACT_POWERLEVEL,\n} from \"./public\"\nimport { LoadRoomFxParams, Visibility } from \"./types\"\nimport {\n    ClientNotInitialized,\n    RoomNotFound,\n    TimelineWindowUndefined,\n    UserNotFound\n} from \"@/errors\"\n\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\n\nconst getRoomMembersDebounced = debounce({\n    source: getRoomMembers,\n    timeout: 500\n})\n\n$currentRoomId\n    .on(initRoom, (_, { roomId }) => roomId)\n    .reset(clearCurrentRoomState)\n$currentRoom\n    .on(getRoomByIdFx.doneData, (_, room) => room)\n    .reset(clearCurrentRoomState)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($currentRoomId)\n$currentRoomMembers\n    .on(getRoomMembersFx.doneData, (_, value) => value)\n    .reset($currentRoomId)\n$myPowerLevel\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\n    .reset($currentRoomId)\n$requiredPowerLevelForKick\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.kick)\n    .reset($currentRoomId)\n$requiredPowerLevelForBan\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.ban)\n    .reset($currentRoomId)\n$requiredPowerLevelForInvite\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.invite)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultEvents\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.defaultEvents)\n    .reset($currentRoomId)\n$requiredPowerLevelForRedact\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.redact)\n    .reset($currentRoomId)\n$requiredPowerLevelForDefaultState\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\n        (_, powerLevels) => powerLevels.stateDefault)\n    .reset($currentRoomId)\n\nforward({\n    from: loadRoomFx.pending,\n    to: $loadRoomFxPending,\n})    \nforward({\n    from: initRoom,\n    to: initRoomFx,\n})\nforward({\n    from: toLiveTimelineFx.done,\n    to: liveTimelineLoaded,\n})\nforward({\n    from: sample({\n        source: $timelineWindow,\n        clock: initRoomFx.done,\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\n        fn: () => {},\n    }),\n    to: onRoomInitialized,\n})\nforward({\n    from: loadRoomMessageFx.done,\n    to: loadRoomMessageDone,\n})\nforward({\n    from: loadInitialRoomFx.done,\n    to: onRoomLoaded,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: getRoomByIdFx,\n})    \n\nguard({\n    source: $currentRoomId,\n    filter: (roomId) => Boolean(roomId),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomUserUpdate,\n    source: $currentRoomMembers,\n    filter: (currentRoomMembers, user) => Boolean(\n        currentRoomMembers?.find(((member) => \n            member.userId === user.userId\n        ))),\n    target: getRoomMembers,\n})\nguard({\n    clock: onRoomMemberUpdate,\n    source: $currentRoomId,\n    filter: (roomId, member) => roomId === member.roomId,\n    target: getRoomMembers,\n})\nguard({\n    source: $currentRoomId,\n    clock: getRoomMembersDebounced,\n    filter: Boolean,\n    target: getRoomMembersFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection = \"BACKWARD\"\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection\n        })\n    ),\n    filter: $loadFilter,\n    target: loadInitialRoomFx\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        loadRoomMessage,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            initialEventId,\n            initialWindowSize,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: loadRoomMessageFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        toLiveTimeline,\n        ([\n            roomId,\n            timelineWindow\n        ]): LoadRoomFxParams => ({\n            roomId: roomId as string,\n            timelineWindow: timelineWindow as TimelineWindow,\n            loadAdditionalDataDirection: \"BACKWARD\"\n        })\n    ),\n    filter: $loadFilter,\n    target: toLiveTimelineFx,\n})\n\nguard({\n    clock: $currentRoomId,\n    filter: Boolean,\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\n})\n\nupdatePowerLevelFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotFound()\n    const user = room.getMember(userId)\n    if (!user) throw new UserNotFound()\n    return user.powerLevel\n})\n\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\n    const cl = client()\n    const room = cl.getRoom(roomId) as Room\n    const powerLevelsContent  = (\n        room.currentState\n            .getStateEvents(\"m.room.power_levels\", \"\") as MatrixEvent[])[0]\n        .getContent() as any\n    return {\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\n        defaultEvents: powerLevelsContent.events_default ??\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\n        stateDefault: powerLevelsContent.state_default ??\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\n    }\n})\n\ngetRoomMembersFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return Object.values(room.currentState.members)\n        .map((member) => {\n            const user = client().getUser(member.userId)\n            if (!user) throw new UserNotFound()\n            return toMappedRoomMember(member, user)\n        })\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize,\n    loadAdditionalDataDirection\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    let messages = getMessages(timelineWindow)\n    // дозагрузка сообщений если пришло меньше чем ожидали\n    if (initialWindowSize && messages.length < initialWindowSize) {\n        let eventsRetrieved: boolean\n        const size = initialWindowSize - messages.length\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\n        } else {\n            eventsRetrieved = await timelineWindow\n                .paginate(matrix.EventTimeline.FORWARDS, size)\n        }\n        if (eventsRetrieved) {\n            messages = getMessages(timelineWindow)\n        }\n    }\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    return rooms.map((room) => toRoomWithActivity(room))\n})\n\nsearchRoomMessagesFx.use(async ({ term, roomId, orderBy = \"rank\" }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                    order_by: orderBy,\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            // TODO: fix me\n            const event = new MatrixEvent(result as any)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\n\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\n\ncreateRoomFx.use(async ({\n    name, \n    invite, \n    visibility, \n    initialState = [], \n    preset\n}) => {\n    const options = {\n        name, \n        invite,\n        visibility,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n    }\n\n    // TODO: fix me\n    const { room_id } = await client().createRoom(options as any)\n\n    return { roomId: room_id } \n})\n\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\n    const cl = client()\n    const roomsIds = getIsDirectRoomsIds()\n    const findRoomId = roomsIds.find(\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\n    )\n    if (findRoomId) return { roomId: findRoomId }\n    \n    const options = {\n        is_direct: true, \n        invite: [user.userId],\n        visibility: Visibility.private,\n        initial_state: initialState.map((state) => ({ \n            ...state,\n            state_key: state.stateKey,\n            stateKey: undefined,\n        })),\n        preset,\n        creation_content: {\n            isDirect: true,\n            creator: cl.getUserId() \n        }\n    }\n    const { room_id } = await cl.createRoom(options as any)\n    await setDirectRoom(room_id)\n\n    return { roomId: room_id }\n})\n\ninviteUserFx.use( async ({userId, roomId}) => {\n    await client().invite(roomId, userId)\n})\n\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\n    await client().kick(roomId, userId, reason)\n})\n\nrenameRoomFx.use( async ({roomId, name}) => {\n    await client().setRoomName(roomId, name)\n})\n\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\n    const cl = client()\n    const room = await cl.joinRoom(roomId)\n    if (isDirect) {\n        await setDirectRoom(roomId)\n    }\n    return toRoomWithActivity(toMappedRoom(room))\n})\n\ngetRoomByIdFx.use((roomId) => {\n    const matrixRoom = client().getRoom(roomId)\n    if (!matrixRoom) return null\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\n})\n","import { attach, forward, guard, sample } from \"effector\"\nimport { EventStatus, MatrixEvent, TimelineWindow } from \"matrix-js-sdk\"\nimport { client, createRoomMessageBatch } from \"@/matrix-client\"\nimport { $currentRoomId, $isLive, $timelineWindow } from \"@/room\"\nimport { paginateForwardFx } from \"@/room-pagination/private\"\nimport { Message } from \"@/types\"\nimport { getMessages } from \"@/utils\"\nimport { setMessages, updateMessages, updateMessagesFx } from \"./private\"\nimport {\n    $messages,\n    checkEventPermissionsFx,\n    deleteMessageFx,\n    editMessageFx,\n    getUrlPreviewFx,\n    newMessagesLoaded,\n    onUploadProgress,\n    readAllMessagesFx,\n    sendMessageFx,\n    uploadContentFx\n} from \"./public\"\nimport { DeleteMessageResult, UploadContentResult } from \"./types\"\nimport {\n    RoomNotFound,\n    EventNotFound,\n    ClientNotInitialized,\n    UserNotLoggedIn\n} from \"@/errors\"\n\nconst roomMessageBatch = createRoomMessageBatch()\n\nconst loadNewMessagesFx = attach({\n    effect: paginateForwardFx,\n    mapParams: ({ messages }: { messages: Message[] }) => ({\n        size: messages.length,\n    }) \n})\n\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($currentRoomId)\n$isLive\n    .on(setMessages, (_, { isLive }) => isLive)\n    .reset($currentRoomId)\n\nforward({\n    from: sample(\n        $messages,\n        loadNewMessagesFx.done,\n        (_, { params }) => params.messages\n    ),\n    to: newMessagesLoaded\n})\n    \nforward({\n    from: roomMessageBatch.map((messages) => ({ messages })),\n    to: loadNewMessagesFx,\n})\nguard({\n    source: sample(\n        [$currentRoomId, $timelineWindow],\n        updateMessages,\n        ([roomId, timelineWindow]) => ({\n            timelineWindow: timelineWindow as TimelineWindow,\n            roomId: roomId as string\n        })\n    ),\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\n    target: updateMessagesFx,\n})\n\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\nuploadContentFx.use(({\n    file,\n    name,\n    includeFilename,\n    onlyContentUri,\n    rawResponse,\n    type,\n}) => {\n    const cl = client()\n    const promise = cl.uploadContent(file, {\n        name,\n        includeFilename,\n        type,\n        onlyContentUri,\n        rawResponse,\n        progressHandler: ({ loaded, total }: {\n            loaded: number\n            total: number\n        }) => {\n            // warning: loosing event scope\n            onUploadProgress({ file, loaded, total }) \n        },\n    } as any) as any\n    const result: UploadContentResult = { promise }\n    if (promise.abort) result.abort = promise.abort\n    return result\n})\n\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\n    return new Promise((resolve)=>{\n        client().getUrlPreview(url, ts)\n            .then(resolve)\n            .catch(()=> resolve({\"og:url\": url}))\n        setTimeout(()=>{\n            resolve({\"og:url\": url})\n        }, timeout)\n    })\n})\n\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\n    if (mxEvent.status === EventStatus.CANCELLED ||\n        mxEvent.getType() !== \"m.room.message\" ||\n        mxEvent.isRedacted()\n    ) {\n        return false\n    }\n    const content = mxEvent.getOriginalContent()\n    const {msgtype} = content\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\n        Boolean(content.body) && typeof content.body === \"string\" &&\n        mxEvent.getSender() === client().getUserId()\n}\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const room = cl.getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const mxEvent = room.findEventById(eventId)\n    if (!mxEvent) throw new EventNotFound()\n    const userId = cl.getUserId()\n    if (!userId) throw new UserNotLoggedIn()\n    const canRedact = room.currentState\n        .maySendRedactionForEvent(mxEvent, userId) &&\n            mxEvent.getType() as string !==\n                \"m.room.server_acl\"   // missing in DT types\n    const canEdit = canEditContent(mxEvent)\n    return {\n        canRedact,\n        canEdit,\n    }\n})\nupdateMessagesFx.use(({ timelineWindow }) => {\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    return {\n        messages: getMessages(timelineWindow),\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n","import { combine, forward, guard } from \"effector\"\nimport matrix from \"matrix-js-sdk\"\nimport {\n    $currentRoomId,\n    $loadRoomFxPending,\n    loadRoom\n} from \"@/room\"\nimport { $loadFilter } from \"@/room/private\"\nimport { setMessages } from \"@/room-messages/private\"\nimport { getMessages } from \"@/utils\"\nimport {\n    paginateBackwardFx,\n    paginateForwardFx,\n    paginateRoomFx\n} from \"./private\"\nimport {\n    $canPaginateBackward,\n    $canPaginateForward,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    onPaginateBackwardDone,\n    paginateBackward,\n    paginateForward,\n    onPaginateForwardDone\n} from \"./public\"\nimport { TimelineWindowUndefined } from \"@/errors\"\n\nconst $paginateFilter = combine(\n    $loadFilter,\n    $paginateBackwardPending,\n    $paginateForwardPending,\n    $loadRoomFxPending,\n    (\n        canLoad,\n        backwardPaginationPending,\n        forwardPaginationPending,\n        roomLoading,\n    ) => canLoad\n      && !backwardPaginationPending\n      && !forwardPaginationPending\n      && !roomLoading\n)\n\n$paginateBackwardPending\n    .on(paginateBackwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$paginateForwardPending\n    .on(paginateForwardFx.pending, (_, value) => value)\n    .reset($currentRoomId)\n$canPaginateBackward\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\n    .reset([loadRoom, $currentRoomId])\n$canPaginateForward\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\n    .reset([loadRoom, $currentRoomId])\n\nforward({\n    from: paginateBackwardFx.done,\n    to: onPaginateBackwardDone,\n})\n\nforward({\n    from: paginateForwardFx.done,\n    to: onPaginateForwardDone,\n})\n\nguard({\n    source: paginateBackward,\n    filter: $paginateFilter,\n    target: paginateBackwardFx\n})\nguard({\n    source: paginateForward,\n    filter: $paginateFilter,\n    target: paginateForwardFx\n})\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const canPaginateForward = timelineWindow.canPaginate(\"f\")\n    const messages = getMessages(timelineWindow)\n    return {\n        messages,\n        isLive: !canPaginateForward,\n        canPaginateForward: canPaginateForward,\n        canPaginateBackward: timelineWindow.canPaginate(\"b\")\n    }\n})\n","export {\n    Room,\n    LoginPayload,\n    MatrixEvent,\n    RoomMember,\n} from \"matrix-js-sdk\"\nexport * from \"./app\"\nexport * from \"./notifications\"\nexport * from \"./room\"\nexport * from \"./room-messages\"\nexport * from \"./room-pagination\"\nexport * from \"./types\"\nexport * from \"./matrix-client\"\nexport {\n    checkIsDirect,\n    getRoomMemberAvatarUrl,\n    getSenderAvatarUrl,\n    getUploadCredentials,\n    mxcUrlToHttp,\n} from \"./utils\"\n\nimport \"./init\"\n\nconsole.log(\"updated matrix effector\")\n"],"names":["Visibility","Preset","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","kickUserRoomFx","renameRoomFx","joinRoomFx","MsgType","clientStore","messagesDomain","$messages","roomMessage","newMessagesLoaded","onUploadProgress","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","paginationDomain","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","messageBatchInterval","callbacksStore","createClient","options","ms","destroyClient","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","removeAllListeners","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","DIRECT_EVENT","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","getMappedContent","getContent","toMessage","originalEventId","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","room","roomId","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","isReadUpTo","hasUserReadEvent","getUserId","mergedMessageEvents","includes","getType","reduce","lastMessage","isDirect","checkIsDirect","DMUser","getMember","guessDMUserId","directUserId","isOnline","Boolean","_DMUser$user","lastActivityTS","getLastActiveTimestamp","getMessages","timelineWindow","getIsDirectRoomsIds","directRooms","getAccountData","_cl$getAccountData","Object","values","flatMap","setDirectRoom","creator","_cl$getRoom","currentState","getStateEvents","_cl$getRoom$currentSt2","prevData","_cl$getAccountData2","prevRoomsId","setAccountData","$loadFilter","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","getRoomByIdFx","initRoomFx","loadRoomFx","getRoomMembersFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","paginateRoomFx","paginateBackwardFx","attach","source","mapParams","params","direction","paginateForwardFx","updateMessages","updateMessagesFx","setMessages","guard","sample","done","currentRoomId","result","getMappedRooms","getRooms","from","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","e","use","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","deviceId","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","console","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","toLiveTimelineFx","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","timeout","_","reset","doneData","value","powerLevel","powerLevels","kick","ban","invite","defaultEvents","redact","stateDefault","pending","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","powerLevelsContent","events_default","state_default","roomMember","powerLevelNorm","rawDisplayName","typing","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","messages","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","term","orderBy","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","roomsIds","findRoomId","is_direct","creation_content","reason","setRoomName","joinRoom","roomMessageBatch","loadNewMessagesFx","txnId","sendMessage","eventId","msgtype","rel_type","event_id","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","canRedact","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","makeRequest","requestLimit","dir","log","throttle","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"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"}