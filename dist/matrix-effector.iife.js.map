{"version":3,"file":"matrix-effector.iife.js","sources":["../src/types/content.ts","../src/types/index.ts","../src/root.ts","../src/app/domain.ts","../src/app/public.ts","../src/notifications/domain.ts","../src/notifications/public.ts","../src/room/domain.ts","../src/room/types.ts","../src/room/public.ts","../src/room-messages/domain.ts","../src/matrix-client.ts","../src/room-messages/public.ts","../src/profile/domain.ts","../src/profile/public.ts","../src/errors.ts","../src/constants.ts","../src/mappers.ts","../src/utils.ts","../src/crypto/types.ts","../src/crypto/domain.ts","../src/crypto/public.ts","../src/app/init.ts","../src/notifications/init.ts","../src/profile/init.ts","../src/room/private.ts","../src/room/init.ts","../src/room-messages/private.ts","../src/room-messages/init.ts","../src/crypto/private.ts","../src/crypto/init.ts"],"sourcesContent":["export enum MsgType {\r\n  Audio = \"m.audio\",\r\n  BadEncrypted = \"m.bad.encrypted\",\r\n  Emote = \"m.emote\",\r\n  File = \"m.file\",\r\n  Image = \"m.image\",\r\n  Notice = \"m.notice\",\r\n  Text = \"m.text\",\r\n  Video = \"m.video\",\r\n  Location = \"m.location\"\r\n}\r\nexport type Relation = {\r\n  \"m.in_reply_to\"?: {\r\n    event_id: string\r\n  }\r\n}\r\n\r\nexport type TextContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Text\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type EmoteContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format:\tstring\r\n  formatted_body: string\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Emote\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type NoticeContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format:\tstring\r\n  formatted_body: string\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Notice\r\n  format?:\tundefined\r\n  formatted_body?: undefined\r\n  \"m.relates_to\"?: Relation\r\n  [customProperty: string]: any\r\n}\r\n// TODO clarify\r\nexport type EncryptedFile = any\r\nexport type ThumbnailInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n}\r\nexport type ImageInfo = {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type ImageContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Image\r\n  info?: ImageInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type FileInfo = {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type FileContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.File\r\n  filename?: string\r\n  info: FileInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type AudioInfo = {\r\n  duration: number\r\n  mimetype:\tstring\r\n  size:\tnumber\r\n}\r\nexport type AudioContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: AudioInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\nexport type LocationInfo = {\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  thumbnail_url?: undefined\r\n  thumbnail_file:\tEncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type LocationContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Location\r\n  geo_uri: string\r\n  info?: LocationInfo\r\n  [customProperty: string]: any\r\n}\r\nexport type VideoInfo = {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url: string\r\n  thumbnail_file?: undefined\r\n  thumbnail_info: ThumbnailInfo\r\n} | {\r\n  duration: number\r\n  h: number\r\n  w: number\r\n  mimetype: string\r\n  size: number\r\n  thumbnail_url?: undefined\r\n  thumbnail_file: EncryptedFile\r\n  thumbnail_info: ThumbnailInfo\r\n}\r\nexport type VideoContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.Video\r\n  info?: VideoInfo\r\n  url: string\r\n  file?: undefined\r\n  [customProperty: string]: any\r\n} | {\r\n  body:\tstring\r\n  msgtype: MsgType.Audio\r\n  info?: VideoInfo\r\n  url?: undefined\r\n  file: EncryptedFile\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type BadEncryptedContent = {\r\n  body:\tstring\r\n  msgtype: MsgType.BadEncrypted\r\n  [customProperty: string]: any\r\n}\r\n\r\nexport type MessageContent = AudioContent |\r\n  BadEncryptedContent |\r\n  EmoteContent |\r\n  FileContent |\r\n  ImageContent |\r\n  NoticeContent |\r\n  TextContent |\r\n  VideoContent |\r\n  LocationContent |\r\n  Record<string, never>\r\n","import {\r\n    EventType,\r\n    ICreateClientOpts,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    RoomSummary,\r\n    SearchOrderBy,\r\n    User,\r\n} from \"matrix-js-sdk\"\r\nimport { MessageContent } from \"./content\"\r\nexport * from \"./content\"\r\n\r\nexport enum Presence {\r\n    online = \"online\",\r\n    offline = \"offline\", \r\n    unavailable = \"unavailable\",\r\n} \r\n\r\nexport type MappedUser = Pick<User,\r\n    \"avatarUrl\" |\r\n    \"userId\" |\r\n    \"currentlyActive\" |\r\n    \"displayName\" |\r\n    \"lastActiveAgo\" |\r\n    \"lastPresenceTs\"\r\n> & {\r\n    presence: Presence\r\n}\r\nexport interface EventPayload {\r\n    event: MatrixEvent\r\n    room: Room\r\n}\r\n\r\nexport interface SearchRoomMessagesPayload {\r\n    roomId: string\r\n    term: string\r\n    orderBy?: SearchOrderBy\r\n}\r\n\r\nexport type MessageEvent = {\r\n    eventId: string\r\n    content: MessageContent\r\n    originServerTs: Date | null\r\n    roomId: string\r\n    sender: RoomMember\r\n    type: string\r\n    relatedEventId?: string\r\n    redaction: boolean\r\n    redacted: boolean\r\n    editing: boolean\r\n}\r\nexport type Message = {\r\n    originalEventId: string\r\n    content: MessageContent\r\n    sender: RoomMember\r\n    originServerTs: Date | null\r\n    edited: boolean\r\n    redacted: boolean\r\n    seen?: boolean\r\n}\r\n\r\nexport enum MatrixMembershipType {\r\n    leave = \"leave\",\r\n    invite = \"invite\",\r\n    ban = \"ban\",\r\n    join = \"join\",\r\n    knock = \"knock\",\r\n}\r\n\r\nexport type MappedRoom = {\r\n    roomId: string\r\n    name: string\r\n    summary: RoomSummary\r\n    myMembership: MatrixMembershipType | null\r\n}\r\n\r\nexport interface RoomWithActivity extends MappedRoom {\r\n    unreadCount: number\r\n    lastMessage?: Message\r\n    isDirect: boolean\r\n    directUserId?: string\r\n    isOnline?: boolean\r\n    lastActivityTS: number\r\n    powerlevels: RoomPowerLevelsContent\r\n    myPowerLevel: number\r\n    canKick: boolean\r\n    canBan: boolean\r\n    canInvite: boolean\r\n    canSendEvents: {\r\n        canChangeRoomAvatar: boolean\r\n        canChangeHistoryVisivility: boolean\r\n        canChangeRoomName: boolean\r\n        canChangeRoomPowerLevels: boolean\r\n        canChangeCanonicalAlias: boolean\r\n        canChangeRoomEncryption: boolean\r\n        canChangeRoomTobstone: boolean\r\n        canChangeRoomServerAcl: boolean\r\n    }\r\n    canRedact: boolean\r\n}\r\n\r\nexport type EventListener = [string, (...args: any[]) => void]\r\n\r\nexport type GetSenderAvatarParams = {\r\n    sender: RoomMember\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type GetRoomMemberAvatarParams = {\r\n    roomId: string\r\n    userId: string\r\n    width: number\r\n    height: number\r\n    resizeMethod: \"crop\" | \"scale\"\r\n    allowDefault?: boolean\r\n}\r\n\r\nexport type RoomInfo = {\r\n    roomMembersCount: number\r\n} \r\n\r\nexport type MxcUrlToHttpParams = {\r\n    mxcUrl: string\r\n    width?: number\r\n    height?: number\r\n    resizeMethod?: \"crop\" | \"scale\"\r\n    allowDirectLinks?: boolean\r\n}\r\n\r\nexport type CreateClientOptions = {\r\n    options: ICreateClientOpts\r\n    messageBatchInterval?: number\r\n}\r\n\r\nexport type MatrixLoginPayload = {\r\n    user_id: string\r\n    device_id: string\r\n    access_token: string\r\n    well_known?: string\r\n}\r\n\r\ntype EventPowerLevels = {\r\n    [EventType.RoomCanonicalAlias]: number\r\n    [EventType.RoomAvatar]: number\r\n    [EventType.RoomEncryption]: number\r\n    [EventType.RoomHistoryVisibility]: number\r\n    [EventType.RoomName]: number\r\n    [EventType.RoomPowerLevels]: number\r\n    [EventType.RoomServerAcl]: number\r\n    [EventType.RoomTombstone]: number\r\n}\r\n\r\nexport type RoomPowerLevelsContent = {\r\n    ban: number\r\n    events: EventPowerLevels\r\n    users: {\r\n        [key in string]: number \r\n    }\r\n    redact: number\r\n    kick: number\r\n    invite: number\r\n    state_default: number\r\n    users_default: number\r\n    events_default: number\r\n}\r\n\r\nexport enum UserRole {\r\n    admin = \"Admin\",\r\n    moderator = \"Moderator\"\r\n}\r\n","import { createDomain } from \"effector\"\r\n\r\nexport const root = createDomain(\"root\")\r\n","import { root } from \"@/root\"\r\n\r\nexport const appDomain = root.domain(\"app\")\r\n","import { throttle } from \"patronum/throttle\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixLoginPayload\r\n} from \"@/types\"\r\nimport {\r\n    LoginByPasswordParams,\r\n    LoginByTokenParams,\r\n    StartClientParams,\r\n    CreateClientParams, \r\n    AuthData \r\n} from \"./types\"\r\nimport { appDomain } from \"./domain\"\r\n\r\nexport const onInitialSync = appDomain.event<MappedRoom[]>()\r\nexport const onCachedState = appDomain.event<MappedRoom[]>()\r\nexport const onSync = appDomain.event<MappedRoom[]>()\r\nexport const createOnSyncThrottled = (ms: number) =>\r\n    throttle({ source: onSync, timeout: ms})\r\n\r\nexport const loginByPasswordFx = appDomain\r\n    .effect<LoginByPasswordParams, MatrixLoginPayload, Error>()\r\nexport const loginByTokenFx = appDomain\r\n    .effect<LoginByTokenParams, AuthData, Error>()\r\nexport const initStoreFx = appDomain.effect<void, void, Error>()\r\nexport const startClientFx = appDomain\r\n    .effect<StartClientParams, void, Error>()\r\nexport const getLoggedUserFx = appDomain\r\n    .effect<void, MappedUser | null, Error>()\r\nexport const stopClientFx = appDomain.effect<void, void, Error>()\r\nexport const logoutFx = appDomain.effect<void, void, Error>()\r\nexport const createClientFx = appDomain\r\n    .effect<CreateClientParams, void, Error>()\r\nexport const destroyClientFx = appDomain\r\n    .effect<void, void, Error>()\r\nexport const getProfileInfoFx = appDomain\r\n    .effect<string, MappedUser, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const notificationDomain = root.domain(\"notification\")\r\n","import { notificationDomain } from \"./domain\"\r\nimport {\r\n    DeleteNotificationsRuleEnabledParams,\r\n    NotificationRulesResult,\r\n    SetNotificationsRuleEnabledParams,\r\n    SetNotificationsRuleParams\r\n} from \"./types\"\r\n\r\nexport const getNotificationRulesFx = notificationDomain\r\n    .effect<void, NotificationRulesResult, Error>()\r\nexport const setNotificationRuleActionFx = notificationDomain\r\n    .effect<SetNotificationsRuleParams, void, Error>()\r\nexport const setNotificationRuleEnabledFx = notificationDomain\r\n    .effect<SetNotificationsRuleEnabledParams, void, Error>()\r\nexport const deleteNotificationRuleFx = notificationDomain\r\n    .effect<DeleteNotificationsRuleEnabledParams, void, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const roomDomain = root.domain(\"room\")\r\n","import {\r\n    TimelineWindow,\r\n    RoomMember\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    MappedUser,\r\n    Message,\r\n    UserRole\r\n} from \"@/types\"\r\n\r\nexport type InitRoomParams = {\r\n    roomId: string\r\n}\r\nexport type LoadRoomFxParams = {\r\n    roomId: string\r\n    timelineWindow: TimelineWindow\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type MappedRoomMember = Pick<RoomMember,\r\n  \"membership\" |\r\n  \"name\" |\r\n  \"powerLevel\" |\r\n  \"powerLevelNorm\" |\r\n  \"rawDisplayName\" |\r\n  \"roomId\" |\r\n  \"typing\" |\r\n  \"userId\"\r\n> & {\r\n  user: MappedUser\r\n  role?: UserRole\r\n}\r\nexport type MessageResponse = {\r\n    messages: Message[]\r\n    isLive: boolean\r\n    canPaginateForward: boolean\r\n    canPaginateBackward: boolean\r\n}\r\nexport type LoadRoomParams = {\r\n    initialEventId?: string\r\n    initialWindowSize?: number\r\n    loadAdditionalDataDirection?: \"BACKWARD\" | \"FORWARD\"\r\n}\r\nexport type GoToMessageParams = {\r\n    initialEventId: string\r\n    initialWindowSize?: number\r\n}\r\n\r\nexport interface CreateRoomParams {\r\n    name: string\r\n    invite: string[]\r\n    visibility: Visibility\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport interface CreateDirectRoomParams {\r\n    user: MappedUser\r\n    initialState?: InitialState[]\r\n    preset?: Preset\r\n}\r\n\r\nexport enum Visibility {\r\n    \"public\" = \"public\",\r\n    \"private\" = \"private\"\r\n}\r\n\r\nexport enum Preset {\r\n    trustedPrivateChat = \"trusted_private_chat\",\r\n    privateChat = \"private_chat\",\r\n    publicChat = \"public_chat\"\r\n}\r\n\r\nexport interface InitialState {\r\n    content: Object\r\n    stateKey: string\r\n    type: string\r\n}\r\n\r\nexport type InviteUserParams = {\r\n    roomId: string\r\n    userId: string\r\n}\r\n\r\nexport type InviteUsersParams = {\r\n    roomId: string\r\n    usersIds: string[]\r\n}\r\n\r\nexport type KickUserParams = {\r\n    roomId: string\r\n    userId: string\r\n    reason?: string\r\n}\r\n\r\nexport type RenameRoomParams = {\r\n    roomId: string\r\n    name: string\r\n}\r\n\r\nexport type RoomPowerLevels = {\r\n    ban: number\r\n    kick: number\r\n    invite: number\r\n    defaultEvents: number\r\n    redact: number\r\n    stateDefault: number\r\n}\r\n\r\nexport type SendTypingParams = {\r\n    roomId: string\r\n    isTyping: boolean\r\n  }\r\n","import {\r\n    TimelineWindow,\r\n    Room,\r\n    RoomMember,\r\n    User\r\n} from \"matrix-js-sdk\"\r\nimport {combine} from \"effector\"\r\nimport {\r\n    MappedRoom,\r\n    MappedUser,\r\n    MatrixMembershipType,\r\n    Message,\r\n    RoomInfo,\r\n    RoomWithActivity,\r\n    SearchRoomMessagesPayload\r\n} from \"@/types\"\r\nimport { roomDomain } from \"./domain\"\r\nimport {\r\n    GoToMessageParams,\r\n    InitRoomParams,\r\n    LoadRoomParams,\r\n    MappedRoomMember,\r\n    CreateRoomParams,\r\n    InviteUserParams, \r\n    KickUserParams, \r\n    RenameRoomParams,\r\n    CreateDirectRoomParams,\r\n    LoadRoomFxParams,\r\n    MessageResponse,\r\n    SendTypingParams,\r\n    InviteUsersParams\r\n} from \"./types\"\r\n\r\nexport const DEFAULT_INVITE_POWERLEVEL = 50\r\nexport const DEFAULT_BAN_POWERLEVEL = 50\r\nexport const DEFAULT_KICK_POWERLEVEL = 50\r\nexport const DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL = 0\r\nexport const DEFAULT_SET_DEFAULT_STATE_POWERLEVEL = 50\r\nexport const DEFAULT_REDACT_POWERLEVEL = 50\r\n\r\nexport const $isLive = roomDomain.store<boolean | null>(null)\r\nexport const $loadRoomFxPending = roomDomain.store<boolean>(false)\r\nexport const $currentRoomMembers = roomDomain\r\n    .store<MappedRoomMember[] | null>(null)\r\nexport const $currentRoomId = roomDomain\r\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\r\nexport const $currentRoom = roomDomain.store<RoomWithActivity | null>(null)\r\nexport const clearCurrentRoomState = roomDomain.event()\r\nexport const $timelineWindow = roomDomain.store<TimelineWindow | null>(null)\r\nexport const $myPowerLevel = roomDomain.store<number>(0)\r\n\r\nexport const $typingMembers = roomDomain\r\n    .store<{[key in string]: RoomMember[]}>({})\r\n\r\nexport const $requiredPowerLevelForKick = roomDomain\r\n    .store<number>(DEFAULT_KICK_POWERLEVEL)\r\nexport const $requiredPowerLevelForInvite = roomDomain\r\n    .store<number>(DEFAULT_INVITE_POWERLEVEL)\r\nexport const $requiredPowerLevelForBan = roomDomain\r\n    .store<number>(DEFAULT_BAN_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultEvents = roomDomain\r\n    .store<number>(DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL)\r\nexport const $requiredPowerLevelForRedact = roomDomain\r\n    .store<number>(DEFAULT_REDACT_POWERLEVEL)\r\nexport const $requiredPowerLevelForDefaultState = roomDomain\r\n    .store<number>(DEFAULT_SET_DEFAULT_STATE_POWERLEVEL)\r\n\r\nexport const $currentJoinedRoomMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.join) ?? []\r\n    )\r\nexport const $currentRoomInvitedMembers = $currentRoomMembers\r\n    .map(\r\n        (members) => members?.filter(\r\n            (member) => member.membership === MatrixMembershipType.invite\r\n        ) ?? []\r\n    )\r\n\r\nexport const $canKick = combine(\r\n    $myPowerLevel, $requiredPowerLevelForKick,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canInvite = combine(\r\n    $myPowerLevel, $requiredPowerLevelForInvite,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canBan = combine(\r\n    $myPowerLevel, $requiredPowerLevelForBan,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSendDefaultEvent = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultEvents,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canRedact = combine(\r\n    $myPowerLevel, $requiredPowerLevelForRedact,\r\n    (m, r) => m >= r\r\n)\r\nexport const $canSetDefaultState = combine(\r\n    $myPowerLevel, $requiredPowerLevelForDefaultState,\r\n    (m, r) => m >= r\r\n)\r\n\r\nexport const $loadFilter = combine(\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\r\n)\r\n\r\nexport const clearTypingMember = roomDomain.event<void>()\r\nexport const toggleTypingUser = roomDomain.event<RoomMember>()\r\nexport const onRoomUserUpdate = roomDomain.event<User>()\r\nexport const onRoomMemberUpdate = roomDomain.event<RoomMember>()\r\nexport const getRoomMembers = roomDomain.event<void>()\r\nexport const initRoom = roomDomain.event<InitRoomParams>()\r\nexport const liveTimelineLoaded = roomDomain.event<void>()\r\nexport const onRoomInitialized = roomDomain.event<void>()\r\nexport const loadRoomMessageDone = roomDomain.event<void>()\r\nexport const onRoomLoaded = roomDomain.event<void>()\r\nexport const loadRoom = roomDomain.event<LoadRoomParams>()\r\nexport const toLiveTimeline = roomDomain.event<void>()\r\nexport const loadRoomMessage = roomDomain.event<GoToMessageParams>()\r\nexport const directRoomCreated = roomDomain.event<Room>()\r\nexport const roomCreated = roomDomain.event<Room>()\r\n\r\nexport const findDirectRoomByUserIdFx = roomDomain\r\n    .effect<string, MappedRoom, Error>()\r\nexport const searchRoomMessagesFx = roomDomain\r\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\r\nexport const getRoomsWithActivitiesFx = roomDomain\r\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\r\nexport const getRoomInfoFx = roomDomain\r\n    .effect<string, RoomInfo, Error>()\r\nexport const getAllUsersFx = roomDomain\r\n    .effect<void, MappedUser[], Error>()\r\nexport const createRoomFx = roomDomain\r\n    .effect<CreateRoomParams, { roomId: string }, Error>()\r\nexport const createDirectRoomFx = roomDomain\r\n    .effect<CreateDirectRoomParams, { roomId: string }, Error>()\r\nexport const inviteUserFx = roomDomain.effect<InviteUserParams, void, Error>()\r\nexport const inviteUsersFx = roomDomain.effect<InviteUsersParams, void, Error>()\r\nexport const kickUserRoomFx = roomDomain.effect<KickUserParams, void, Error>()\r\nexport const renameRoomFx = roomDomain.effect<RenameRoomParams, void, Error>()\r\nexport const joinRoomFx = roomDomain\r\n    .effect<{roomId: string; isDirect?: boolean}, RoomWithActivity, Error>()\r\nexport const leaveRoomFx = roomDomain\r\n    .effect<string, void, Error>()\r\nexport const loadRoomFx = roomDomain\r\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\r\nexport const getRoomByIdFx = roomDomain\r\n    .effect<RoomWithActivity[\"roomId\"], RoomWithActivity | null, Error>()\r\nexport const sendTypingFx = roomDomain\r\n    .effect<SendTypingParams, void, Error>()\r\nexport const getMembersByRoomIdFx = roomDomain\r\n    .effect<string, MappedRoomMember[], Error>()\r\nexport const getRoomMemberFx = roomDomain\r\n    .effect<{roomId: string; userId: string}, RoomMember, Error>()\r\n","import { root } from \"@/root\"\r\n\r\nexport const messagesDomain = root.domain(\"messages\")\r\n","import { batchEvents } from \"@42px/effector-extra\"\r\nimport matrix, { MatrixClient } from \"matrix-js-sdk\"\r\nimport { roomMessage } from \"./room-messages\"\r\nimport {\r\n    CreateClientOptions,\r\n    EventListener\r\n} from \"./types\"\r\n\r\nlet clientStore: MatrixClient\r\nlet messageBatchInterval = 500\r\nconst callbacksStore: EventListener[] = []\r\n\r\nexport const destroyClient = () => {\r\n    if (clientStore) {\r\n        clientStore.removeAllListeners()\r\n        // clientStore.clearStores()\r\n        clientStore = null as any\r\n    }\r\n}\r\n\r\nexport const createClient = (\r\n    {options, messageBatchInterval: ms}: CreateClientOptions\r\n): void => {\r\n    destroyClient()\r\n    if (ms !== undefined) messageBatchInterval = ms\r\n    clientStore = matrix.createClient(options)\r\n    callbacksStore.forEach(([eventName, cb]) => {\r\n        clientStore.on(eventName, cb)\r\n    })\r\n}\r\nexport const client = (): MatrixClient => clientStore\r\n\r\nexport const onClientEvent = (callbacks: EventListener[]): void => {\r\n    callbacksStore.push(...callbacks)\r\n}\r\n\r\nexport const createRoomMessageBatch = () => {\r\n    return batchEvents(roomMessage, messageBatchInterval)\r\n}\r\n","import { ISendEventResponse } from \"matrix-js-sdk\"\r\nimport {\r\n    CheckEventPermissionsParams,\r\n    DeleteMessagePayload,\r\n    EditMessagePayload,\r\n    EventPermissions,\r\n    ReadAllMessagesParams,\r\n    SendMessagePayload,\r\n    UploadContentParams,\r\n    UploadProgress,\r\n    UrlPreview,\r\n    PaginateParams,\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\nimport { Message } from \"@/types\"\r\n\r\nexport const $messages = messagesDomain.store<Message[]>([])\r\nexport const $currentRoomUnreadMessageCount = messagesDomain\r\n    .store<number | null>(null)\r\n\r\nexport const updateMessages = messagesDomain.event<void>()\r\nexport const roomMessage = messagesDomain.event<Message>()\r\nexport const newMessagesLoaded = messagesDomain.event<Message[]>()\r\nexport const onUploadProgress = messagesDomain.event<UploadProgress>()\r\nexport const onPaginateBackwardDone = messagesDomain.event<void>()\r\nexport const onPaginateForwardDone = messagesDomain.event<void>()\r\nexport const paginateForward = messagesDomain.event<PaginateParams>()\r\nexport const paginateBackward = messagesDomain.event<PaginateParams>()\r\n\r\nexport const $paginateForwardPending = messagesDomain.store(false)\r\nexport const $paginateBackwardPending = messagesDomain.store(false)\r\nexport const $canPaginateBackward = messagesDomain.store(true)\r\nexport const $canPaginateForward = messagesDomain.store(true)\r\n\r\nexport const sendMessageFx = messagesDomain\r\n    .effect<SendMessagePayload, ISendEventResponse, Error>()\r\nexport const editMessageFx = messagesDomain\r\n    .effect<EditMessagePayload, ISendEventResponse, Error>()\r\nexport const deleteMessageFx = messagesDomain\r\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\r\nexport const readAllMessagesFx = messagesDomain\r\n    .effect<ReadAllMessagesParams, void, Error>()\r\nexport const checkEventPermissionsFx = messagesDomain\r\n    .effect<CheckEventPermissionsParams, EventPermissions, Error>()\r\nexport const uploadContentFx = messagesDomain\r\n    .effect<UploadContentParams, UploadContentResult, Error>()\r\nexport const getUrlPreviewFx = messagesDomain\r\n    .effect<{url: string; ts: number; timeout?: number}, UrlPreview, Error >()\r\n","import { root } from \"@/root\"\r\n\r\nexport const d = root.domain(\"profile\")\r\n","import { d } from \"./domain\"\r\n\r\nexport const updateDisplayNameFx = d.effect<string, void, Error>()\r\nexport const updateAvatarUrlFx = d.effect<string, void, Error>()\r\n\r\n","import { createCustomError } from \"@42px/custom-errors\"\r\n\r\nexport const EventNotFound = createCustomError(\"EventNotFound\")\r\nexport const RoomNotFound = createCustomError(\"RoomNotFound\")\r\nexport const ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\r\nexport const TimelineWindowUndefined = \r\n  createCustomError(\"TimelineWindowUndefined\")\r\nexport const UserNotFound = createCustomError(\"UserNotFound\")\r\nexport const UserNotLoggedIn = createCustomError(\"UserNotLoggedIn\")\r\nexport const CantInviteUsers = \r\n  createCustomError(\"CantInviteUsers\")\r\nexport const NotEnoughPermissions = \r\n  createCustomError(\"NotEnoughPermissions\")\r\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\r\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\r\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\r\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\r\nexport const DIRECT_EVENT = \"m.direct\"\r\n","import {\r\n    MatrixEvent,\r\n    RoomMember,\r\n    User,\r\n    Room,\r\n    EventType\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    DIRECT_EVENT,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"./constants\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { StateEventsContent } from \"./app/types\"\r\nimport { MappedRoomMember } from \"./room\"\r\nimport {\r\n    Message,\r\n    MessageEvent,\r\n    MappedRoom,\r\n    RoomInfo,\r\n    MessageContent,\r\n    MappedUser,\r\n    RoomWithActivity,\r\n    MatrixMembershipType,\r\n    RoomPowerLevelsContent,\r\n    UserRole\r\n} from \"./types\"\r\n\r\nexport const toMessageSeen = (\r\n    message: Message,\r\n    myUserId: string,\r\n    room: Room\r\n): Message => {\r\n    message.seen = room.getJoinedMembers().some((member) => {\r\n        if (member.userId === myUserId) return false\r\n        return room\r\n            .hasUserReadEvent(member.userId, message.originalEventId)\r\n    })\r\n    return message\r\n}\r\n\r\nconst getMappedContent = (event: MatrixEvent) => (\r\n    event.getContent<MessageContent>()\r\n)\r\n\r\nexport const getIsDirectRoomsIds = (): string[] => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    return directRooms && Object.values(directRooms).flatMap((room) => room)\r\n}\r\n\r\nexport const checkIsDirect = (roomId: string): boolean => (\r\n    getIsDirectRoomsIds().includes(roomId))\r\n\r\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\r\n    const payload: MessageEvent = {\r\n        eventId: event.getId(),\r\n        // если есть клиентская агрегация, то этот метод отдает последний контент\r\n        content: getMappedContent(event),\r\n        originServerTs: event.getDate(),\r\n        roomId: event.getRoomId() as string,\r\n        sender: event.sender,\r\n        type: event.getType(),\r\n        redaction: event.isRedaction(),\r\n        redacted: event.isRedacted(),\r\n        editing: Boolean(event.isRelation()),\r\n    }\r\n    if (event.hasAssocation()) {\r\n        payload.relatedEventId = event.getAssociatedId()\r\n    }\r\n    return payload\r\n}\r\n\r\nexport function toMessage(\r\n    event: MatrixEvent,\r\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\r\n): Message {\r\n    const relation = event.getRelation()\r\n    return {\r\n        originalEventId: originalEventId !== undefined ?\r\n            originalEventId :\r\n            event.getId(),\r\n        content: getMappedContent(event),\r\n        sender: event.sender,\r\n        originServerTs: event.getDate(),\r\n        edited: (relation as any)?.[\"rel_type\"] === \"m.replace\",\r\n        redacted: event.isRedacted() || event.isRedaction(),\r\n    }\r\n}\r\n\r\nexport function toMappedRoom(room: Room): MappedRoom {\r\n    return {\r\n        roomId: room.roomId,\r\n        name: room.name,\r\n        summary: room.summary,\r\n        myMembership: room.getMyMembership() as MatrixMembershipType\r\n    }\r\n}\r\n\r\nexport function mergeMessageEvents(\r\n    acc: Message[],\r\n    event: MatrixEvent\r\n): Message[] {\r\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\r\n        return acc\r\n    }\r\n    acc.push(toMessage(event))\r\n    return acc\r\n}\r\n\r\nexport function toRoomInfo(room: Room): RoomInfo {\r\n    return {\r\n        roomMembersCount: room.getJoinedMemberCount()\r\n    }\r\n}\r\n\r\nexport const toMappedUser = (user: User): MappedUser => (\r\n    {\r\n        avatarUrl: user.avatarUrl,\r\n        userId: user.userId,\r\n        currentlyActive: user.currentlyActive,\r\n        displayName: user.displayName,\r\n        lastActiveAgo: user.lastActiveAgo,\r\n        lastPresenceTs: user.lastPresenceTs,\r\n        presence: user.presence as any,\r\n    }\r\n)\r\n\r\nexport function toMappedRoomMember(\r\n    roomMember: RoomMember,\r\n    user: User\r\n): MappedRoomMember {\r\n    let role = undefined\r\n    if (roomMember.powerLevel === 100) {\r\n        role = UserRole.admin\r\n    } else if (roomMember.powerLevel === 50) {\r\n        role = UserRole.moderator\r\n    }\r\n    return {\r\n        membership: roomMember.membership,\r\n        name: roomMember.name,\r\n        powerLevel: roomMember.powerLevel,\r\n        powerLevelNorm: roomMember.powerLevelNorm,\r\n        rawDisplayName: roomMember.rawDisplayName,\r\n        roomId: roomMember.roomId,\r\n        typing: roomMember.typing,\r\n        user: toMappedUser(user),\r\n        userId: roomMember.userId,\r\n        role,\r\n    }\r\n}\r\n\r\nexport function toRoomWithActivity(\r\n    room: MappedRoom, \r\n    maxHistory = 99\r\n): RoomWithActivity {\r\n    const cl = client()\r\n    const matrixRoom = cl.getRoom(room.roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const events = matrixRoom.getLiveTimeline().getEvents()\r\n    const powerLevelsContent = matrixRoom.currentState\r\n        .getStateEvents(EventType.RoomPowerLevels, \"\")\r\n        .getContent<RoomPowerLevelsContent>()\r\n\r\n    const isDirect = Boolean(matrixRoom.currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate, \r\n            \"\"\r\n        )?.getContent<StateEventsContent>()?.isDirect)\r\n\r\n    let unreadCount = 0\r\n    for (let i = events.length - 1; i >= 0; i--) {\r\n        if (i === events.length - maxHistory) break\r\n        const event = events[i]\r\n        const isReadUpTo = matrixRoom\r\n            .hasUserReadEvent(cl.getUserId() as string, event.getId())\r\n        if (isReadUpTo) {\r\n            break\r\n        }\r\n        unreadCount += 1\r\n    }\r\n    const mergedMessageEvents = events\r\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\r\n            .includes(event.getType()))\r\n\r\n    const lastEvent = mergedMessageEvents[mergedMessageEvents.length - 1]\r\n    let lastMessage = lastEvent ? toMessage(lastEvent) : undefined\r\n    const myUserId = cl.getUserId()\r\n\r\n    if (lastMessage) {\r\n        if (lastMessage.sender.userId !== myUserId) {\r\n            lastMessage.seen = matrixRoom\r\n                .hasUserReadEvent(myUserId, lastMessage.originalEventId) \r\n        } else {\r\n            lastMessage = toMessageSeen(\r\n                lastMessage,\r\n                myUserId,\r\n                matrixRoom\r\n            )\r\n        }\r\n    }\r\n    const DMUser = isDirect\r\n        ? matrixRoom.getMember(matrixRoom.guessDMUserId())\r\n        : null\r\n\r\n    // Если у тебя нет прав в комнате, то тебя не будет в списке юзеров. \r\n    const myPowerLevel = powerLevelsContent.users[myUserId] ?? 0\r\n    return {\r\n        ...room,\r\n        unreadCount,\r\n        lastMessage,\r\n        isDirect,\r\n        directUserId: DMUser?.userId,\r\n        // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\r\n        // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\r\n        isOnline: DMUser\r\n            ? Boolean(DMUser.user?.currentlyActive)\r\n            : undefined,\r\n        lastActivityTS: (matrixRoom as any).getLastActiveTimestamp(),\r\n        powerlevels: powerLevelsContent,\r\n        myPowerLevel,\r\n        canBan: myPowerLevel >= powerLevelsContent.ban,\r\n        canKick: myPowerLevel >= powerLevelsContent.kick,\r\n        canInvite: myPowerLevel >= powerLevelsContent.invite,\r\n        canRedact: myPowerLevel >= powerLevelsContent.redact,\r\n        canSendEvents: {\r\n            canChangeHistoryVisivility: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomHistoryVisibility]\r\n            ),\r\n            canChangeRoomAvatar: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomAvatar]\r\n            ),\r\n            canChangeRoomName: (\r\n                myPowerLevel >= powerLevelsContent.events[EventType.RoomName]\r\n            ),\r\n            canChangeRoomPowerLevels: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomPowerLevels]\r\n            ),\r\n            canChangeCanonicalAlias: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomCanonicalAlias]\r\n            ),\r\n            canChangeRoomEncryption: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomEncryption]\r\n            ),\r\n            canChangeRoomServerAcl: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomServerAcl]\r\n            ),\r\n            canChangeRoomTobstone: (\r\n                myPowerLevel >= powerLevelsContent\r\n                    .events[EventType.RoomTombstone]\r\n            )\r\n        }\r\n    }\r\n}\r\n","import { EventType, TimelineWindow } from \"matrix-js-sdk\"\r\nimport { client } from \"./matrix-client\"\r\nimport { MappedRoomMember } from \"./room/types\"\r\nimport { RoomNotFound } from \"./errors\"\r\nimport { \r\n    DIRECT_EVENT, \r\n    ROOM_MESSAGE_EVENT, \r\n    ROOM_REDACTION_EVENT \r\n} from \"./constants\"\r\nimport {\r\n    mergeMessageEvents,\r\n    toMessageSeen\r\n} from \"./mappers\"\r\nimport {\r\n    GetRoomMemberAvatarParams,\r\n    GetSenderAvatarParams,\r\n    MxcUrlToHttpParams,\r\n    Message,\r\n} from \"./types\"\r\n\r\nexport function getMessages(timelineWindow: TimelineWindow): Message[] {\r\n    const messages = timelineWindow.getEvents()\r\n        .filter((event) => (\r\n            [\r\n                ROOM_MESSAGE_EVENT,\r\n                ROOM_REDACTION_EVENT\r\n            ].includes(event.getType())))\r\n        .reduce(mergeMessageEvents, [])\r\n    const cl = client()\r\n    const roomId = timelineWindow.getEvents()[0].getRoomId()\r\n    const room = cl.getRoom(roomId as string)\r\n    if (!room) throw new RoomNotFound()\r\n    const myMessages = []\r\n    const otherMessages = []\r\n    const myUserId = cl.getUserId()\r\n    let findFirstSeenOtherMessage = false\r\n    let findFirstSeenMyMessage = false\r\n    for (let i = messages.length - 1; i >= 0; i--) {\r\n        if (messages[i].sender.userId === myUserId) {\r\n            myMessages.push(messages[i])\r\n        } else {\r\n            otherMessages.push(messages[i])\r\n        }\r\n    }\r\n    myMessages.forEach((message) => {\r\n        if (findFirstSeenMyMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message = toMessageSeen(message, myUserId, room)\r\n            findFirstSeenMyMessage = Boolean(message.seen)\r\n        }\r\n    })\r\n    otherMessages.forEach((message) => {\r\n        if (findFirstSeenOtherMessage) {\r\n            message.seen = true\r\n        } else {\r\n            message.seen = room\r\n                .hasUserReadEvent(myUserId, message.originalEventId)\r\n            findFirstSeenOtherMessage = message.seen\r\n        }\r\n    })\r\n    return messages\r\n}\r\n\r\nexport const getSenderAvatarUrl = ({\r\n    sender,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true,\r\n    allowDirectLinks = false\r\n}: GetSenderAvatarParams): string | null => (\r\n    sender && sender.getAvatarUrl\r\n        ? sender.getAvatarUrl(\r\n            client().getHomeserverUrl(),\r\n            width,\r\n            height,\r\n            resizeMethod,\r\n            allowDefault,\r\n            allowDirectLinks\r\n        )\r\n        : null\r\n)\r\n\r\nexport const getRoomMemberAvatarUrl = ({\r\n    roomId,\r\n    userId,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDefault = true\r\n}: GetRoomMemberAvatarParams): string | null => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) {\r\n        return null\r\n    }\r\n    const otherMember = room.getMember(userId)\r\n    if (!otherMember) {\r\n        return null\r\n    }\r\n    return otherMember.getAvatarUrl(\r\n        client().getHomeserverUrl(),\r\n        width,\r\n        height,\r\n        resizeMethod,\r\n        allowDefault,\r\n        true\r\n    )\r\n}\r\n\r\n\r\nexport const mxcUrlToHttp = ({\r\n    mxcUrl,\r\n    width,\r\n    height,\r\n    resizeMethod,\r\n    allowDirectLinks,\r\n}: MxcUrlToHttpParams): string | null => \r\n    client().mxcUrlToHttp(\r\n        mxcUrl,\r\n        width,\r\n        height,\r\n        resizeMethod !== undefined ? resizeMethod : \"scale\",\r\n        allowDirectLinks,\r\n    )\r\n\r\nexport const getUploadCredentials = () => {\r\n    return ({\r\n        endpointUrl: `${client().getHomeserverUrl()}/_matrix/media/r0/upload`,\r\n        headers: {\r\n            Authorization : `Bearer ${client().getAccessToken()}`\r\n        },\r\n    })\r\n}\r\n\r\nexport const setDirectRoom = async (\r\n    roomId: string,\r\n    companion?: string\r\n): Promise<{}> => {\r\n    const cl = client()\r\n    const { creator } = cl.getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        ).getContent()\r\n    const prevData = cl.getAccountData(DIRECT_EVENT).getContent()\r\n    const prevRoomsId = prevData[creator] ?? []\r\n\r\n    if(companion) {\r\n        return await cl.setAccountData(DIRECT_EVENT, {\r\n            ...prevData,\r\n            [companion]: [roomId]\r\n        })\r\n        \r\n    }\r\n    return await cl.setAccountData(DIRECT_EVENT, {\r\n        ...prevData,\r\n        [creator]: [...prevRoomsId, roomId]\r\n    })\r\n}\r\n","import {\n    VerificationRequest,\n} from \"matrix-js-sdk/lib/crypto/verification/request/VerificationRequest\"\n\n\nexport type SetDeviceVerifiedFx = {\n  userId: string\n  deviceId: string\n} \n\nexport type CurrentVerificationRequest = {\n  challenge: string\n  cancelPromise: Promise<VerificationRequest>\n  accept: (challengeMatches: boolean) => void\n  cancel: () => void\n}\n// When importing Phase from matrix-js-sdk, the build crashes because of cyclic dependencies\nexport enum Phase {\n  Unsent = 1,\n  Requested,\n  Ready,\n  Started,\n  Cancelled,\n  Done,\n}\n","import { root } from \"@/root\"\n\nexport const cryptoDomain = root.domain(\"cryptoDomain\")\n","import { \n    VerificationRequest \n} from \"matrix-js-sdk/lib/crypto/verification/request/VerificationRequest\"\nimport { cryptoDomain } from \"./domain\"\nimport { SetDeviceVerifiedFx } from \"./types\"\n\ntype DeviceIsVerifired = boolean\n\nexport const $deviceIsVerifired = cryptoDomain\n    .store<DeviceIsVerifired | null>(null)\n\nexport const checkBackupKeyFx = cryptoDomain\n    .effect<void, boolean | null, Error>() \n\nexport const initCryptoFx = cryptoDomain\n    .effect<void, void, Error>()\n\nexport const setDeviceVerifiedFx = cryptoDomain\n    .effect<SetDeviceVerifiedFx, void, Error>()\n\nexport const setMyDeviceVerifiedFx = cryptoDomain\n    .effect<void, DeviceIsVerifired, Error>()\n\nexport const $currentVerificationEvent = cryptoDomain\n    .store<VerificationRequest | null>(null)\n\nexport const setCurrentVerificationEvent = cryptoDomain\n    .event<VerificationRequest>()\n\nexport const $verificationEvents = cryptoDomain\n    .store<VerificationRequest[]>([])\n\nexport const onVerificationRequestFx = cryptoDomain\n    .effect<VerificationRequest, VerificationRequest, Error>()\n\nexport const updateDeviceVerification = cryptoDomain\n    .event<boolean>()\n","import { forward } from \"effector\"\r\nimport {\r\n    User,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    EventType,\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    toMappedRoom,\r\n    toMappedUser,\r\n    toMessage\r\n} from \"@/mappers\"\r\nimport {\r\n    client,\r\n    createClient,\r\n    destroyClient,\r\n    onClientEvent,\r\n} from \"@/matrix-client\"\r\nimport {\r\n    LOGIN_BY_PASSWORD,\r\n    LOGIN_BY_TOKEN,\r\n    ROOM_MESSAGE_EVENT,\r\n    ROOM_REDACTION_EVENT\r\n} from \"@/constants\"\r\nimport {\r\n    roomMessage,\r\n    updateMessages\r\n} from \"@/room-messages\"\r\nimport {\r\n    directRoomCreated,\r\n    roomCreated,\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    toggleTypingUser\r\n} from \"@/room\"\r\nimport { initCryptoFx, onVerificationRequestFx } from \"@/crypto\"\r\nimport { UserNotFound } from \"@/errors\"\r\nimport {\r\n    AuthData,\r\n    StateEventsContent\r\n} from \"./types\"\r\nimport {\r\n    getLoggedUserFx,\r\n    initStoreFx,\r\n    loginByPasswordFx,\r\n    loginByTokenFx,\r\n    logoutFx,\r\n    onCachedState,\r\n    onInitialSync,\r\n    onSync,\r\n    startClientFx,\r\n    stopClientFx,\r\n    createClientFx,\r\n    destroyClientFx,\r\n    getProfileInfoFx,\r\n} from \"./public\"\r\n\r\nforward({\r\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\r\n    to: startClientFx,\r\n})\r\n\r\nfunction getMappedRooms() {\r\n    return client().getRooms().map(toMappedRoom)\r\n}\r\n\r\nonClientEvent([\r\n    [\r\n        \"Room.timeline\",\r\n        (\r\n            event: MatrixEvent,\r\n            room: Room,\r\n            toStartOfTimeline: boolean,\r\n            removed,\r\n            data\r\n        ) => {            \r\n            const eventType = event.getType()\r\n            if (eventType === ROOM_MESSAGE_EVENT\r\n                || eventType === ROOM_REDACTION_EVENT\r\n            ) {\r\n                if (!toStartOfTimeline && data.liveEvent) {\r\n                    roomMessage(toMessage(event))\r\n                }\r\n            }\r\n        }],\r\n    [\"Room\", (room: Room) => {\r\n        const cl = client()\r\n        const user = room.getMember(cl.getUserId())\r\n        if (user && user.membership !== \"invite\") return\r\n\r\n        const isDirect = Boolean(room.currentState\r\n            .getStateEvents(\r\n                EventType.RoomCreate,\r\n                \"\"\r\n            )?.getContent<StateEventsContent>()?.isDirect)\r\n               \r\n        if (isDirect) {\r\n            directRoomCreated(room)\r\n        } else {\r\n            roomCreated(room)\r\n        }\r\n    }],\r\n    [\"Room.localEchoUpdated\", () => updateMessages()],\r\n    [\"sync\", async (state, prevState) => {\r\n        if (state === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onCachedState(rooms)\r\n            await client().uploadKeys()\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\r\n            const rooms = getMappedRooms()\r\n            onInitialSync(rooms)\r\n            return\r\n        }\r\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\r\n            const rooms = getMappedRooms()\r\n            updateMessages()\r\n            onSync(rooms)\r\n            return\r\n        }\r\n    }],\r\n    [\r\n        \"RoomState.members\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomState.newMember\",\r\n        (e, state, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.membership\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.name\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.powerLevel\",\r\n        (e, member: RoomMember) => onRoomMemberUpdate(member)\r\n    ],\r\n    [\r\n        \"RoomMember.typing\",\r\n        (e, member: RoomMember) => {\r\n            onRoomMemberUpdate(member)\r\n            toggleTypingUser(member)\r\n        }\r\n    ],\r\n    [\r\n        \"User.avatarUrl\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.presence\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"User.displayName\",\r\n        (e, user: User) => onRoomUserUpdate(user)\r\n    ],\r\n    [\r\n        \"crossSigning.keysChanged\",\r\n        (...args) => console.log(\"crossSigning.keysChanged\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequest\",\r\n        (...args) => console.log(\"crypto.roomKeyRequest\", args)\r\n    ],\r\n    [\r\n        \"crypto.roomKeyRequestCancellation\",\r\n        (...args) => console.log(\"crypto.roomKeyRequestCancellation\", args)\r\n    ],\r\n    [\r\n        \"crypto.secrets.requestCancelled\",\r\n        (...args) => console.log(\"crypto.secrets.requestCancelled\", args)\r\n    ],\r\n    [\r\n        \"crypto.suggestKeyRestore\",\r\n        (...args) => console.log(\"crypto.suggestKeyRestore\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request.unknown\",\r\n        (...args) => console.log(\"crypto.verification.request.unknown\", args)\r\n    ],\r\n    [\r\n        \"crypto.verification.request\",\r\n        onVerificationRequestFx\r\n    ],\r\n    [\r\n        \"crypto.warning\",\r\n        (...args) => console.log(\"crypto.warning\", args)\r\n    ],\r\n    [\r\n        \"crypto.willUpdateDevices\",\r\n        (userIds: string[], initialFetch?: boolean) => {\r\n            // If we didn't know about *any* devices before (ie. it's fresh login),\r\n            // then they are all pre-existing devices, so ignore this and set the\r\n            // devicesAtStart list to the devices that we see after the fetch.\r\n            if (initialFetch) return\r\n            console.log(userIds)\r\n            const cl = client()\r\n            const myUserId = cl.getUserId()\r\n            if (userIds.includes(myUserId)) {\r\n                console.log(\r\n                    cl.getStoredDevicesForUser(myUserId).map(d => d.deviceId)\r\n                )\r\n            }\r\n        }\r\n    ],\r\n    [\r\n        \"crypto.devicesUpdated\",\r\n        (userIds: string[]) => {\r\n            const cl = client()\r\n            console.log(userIds)\r\n            if (!userIds.includes(cl.getUserId())) return\r\n        }\r\n    ]\r\n])\r\n\r\nloginByPasswordFx.use( async (params) =>\r\n    await client().login(LOGIN_BY_PASSWORD, params))\r\n\r\nloginByTokenFx.use(async (params): Promise<AuthData> => {\r\n    const response = await fetch(\r\n        `${params.baseUrl}/_matrix/client/r0/login`,\r\n        { \r\n            method: \"POST\", \r\n            body: JSON.stringify({type: LOGIN_BY_TOKEN, token: params.token }) \r\n        }\r\n    )\r\n    const { \r\n        user_id,\r\n        access_token,\r\n        device_id,\r\n        well_known\r\n    } = await response.json()\r\n    return { \r\n        userId: user_id, \r\n        accessToken: access_token,\r\n        deviceId: device_id,\r\n        wellKnown: well_known\r\n    }\r\n})\r\n\r\ninitStoreFx.use(async () => {\r\n    const { store } = client()\r\n    if (store) return store.startup()\r\n})\r\n\r\nstartClientFx.use((params) => client().startClient(params))\r\n\r\nlogoutFx.use( async () => {\r\n    await client().logout()\r\n})\r\n\r\nstopClientFx.use(() => client().stopClient())\r\n\r\ngetLoggedUserFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return null\r\n    const loggedUserId = cl.getUserId()\r\n    if (!loggedUserId) return null\r\n    const user = cl.getUser(loggedUserId)\r\n    if (!user) return null\r\n    const mappedUser = toMappedUser(user)\r\n    // FixMe: Необъяснимое поведение получения юзера через getUser\r\n    // Аватар и дисплейнейм не приходят, и приходится получать \r\n    if (!mappedUser.avatarUrl || !mappedUser.displayName) {\r\n        const profileInfo = await cl.getProfileInfo(loggedUserId)\r\n        mappedUser.avatarUrl = profileInfo.avatar_url as string\r\n        mappedUser.displayName = profileInfo.displayname as string\r\n    }\r\n    return mappedUser\r\n})\r\n\r\ncreateClientFx.use(async (\r\n    {\r\n        createClientParams,\r\n        startClientParams\r\n    }\r\n) => {\r\n    createClient(createClientParams)\r\n    const cl = client()\r\n    const { store } = cl\r\n    if (store) await store.startup()\r\n    await initCryptoFx()\r\n    await cl.startClient(startClientParams)\r\n})\r\n\r\ndestroyClientFx.use(async () => {\r\n    const cl = client()\r\n    if (!cl) return\r\n    await cl.logout() \r\n    await cl.store?.deleteAllData()\r\n    cl.stopClient()\r\n    destroyClient()\r\n})\r\n\r\ngetProfileInfoFx.use( async (userId) => {\r\n    const cl = client()\r\n    const user = cl.getUser(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return toMappedUser(user)\r\n})\r\n","import { client } from \"@/matrix-client\"\r\nimport {\r\n    getNotificationRulesFx,\r\n    setNotificationRuleActionFx,\r\n    setNotificationRuleEnabledFx,\r\n    deleteNotificationRuleFx\r\n} from \"./public\"\r\nimport { NotificationRulesResult, SetNotificationsRuleParams } from \"./types\"\r\n\r\ngetNotificationRulesFx.use(() => {\r\n    return client().getPushRules() as Promise<NotificationRulesResult>\r\n})\r\n\r\nsetNotificationRuleActionFx.use(async (payload: SetNotificationsRuleParams) => {\r\n    try {\r\n        await client().setPushRuleActions(\r\n            payload.scope, \r\n            payload.kind, \r\n            payload.ruleId, \r\n            // FixMe: Если в будущем в matrix-js-sdk пофиксят\r\n            // типы - убрать as any\r\n            payload.actions as any\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleAction.Fx\")\r\n        console.error(err)\r\n        throw err\r\n    }\r\n})\r\n\r\nsetNotificationRuleEnabledFx.use(async (payload) => {\r\n    try {\r\n        console.error(\"Getting push rules...\")\r\n        const rules = await client().getPushRules() as any\r\n        console.error(rules.global.room)\r\n        await client().setPushRuleEnabled(\r\n            payload.scope,\r\n            payload.kind,\r\n            payload.ruleId,\r\n            payload.enabled\r\n        )\r\n    } catch (err) {\r\n        console.error(\"Error while setNotificationRuleEnabled\")\r\n        console.error(err)\r\n    }\r\n})\r\n\r\ndeleteNotificationRuleFx.use(async(payload) => {\r\n    await client().deletePushRule(\r\n        payload.scope,\r\n        payload.kind,\r\n        payload.ruleId\r\n    )\r\n})\r\n","import { client } from \"../matrix-client\"\r\nimport { updateDisplayNameFx, updateAvatarUrlFx } from \"./public\"\r\n\r\nupdateDisplayNameFx.use(async (newDisplayName) => {\r\n    await client().setDisplayName(newDisplayName)\r\n})\r\n\r\nupdateAvatarUrlFx.use(async (newAvatarUrl) => {\r\n    await client().setAvatarUrl(newAvatarUrl)\r\n})\r\n\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport {\r\n    InitRoomParams,\r\n    RoomPowerLevels\r\n} from \"./types\"\r\nimport { roomDomain } from \"./domain\"\r\n\r\nexport const initRoomFx = roomDomain\r\n    .effect<InitRoomParams, TimelineWindow, Error>()\r\nexport const updatePowerLevelFx = roomDomain\r\n    .effect<string, number, Error>()\r\nexport const updateRequiredPowerLevelForRoomFx = roomDomain\r\n    .effect<string, RoomPowerLevels, Error>()\r\n","import matrix, {\r\n    Direction,\r\n    EventType,\r\n    MatrixEvent,\r\n    Room,\r\n    RoomMember,\r\n    SearchOrderBy,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport { debounce } from \"patronum/debounce\"\r\nimport {\r\n    attach,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport {\r\n    getIsDirectRoomsIds,\r\n    toMappedRoom,\r\n    toMappedRoomMember,\r\n    toMappedUser,\r\n    toMessage,\r\n    toRoomInfo,\r\n    toRoomWithActivity\r\n} from \"@/mappers\"\r\nimport { client } from \"@/matrix-client\"\r\nimport { DIRECT_EVENT } from \"@/constants\"\r\nimport { \r\n    CantInviteUsers,\r\n    ClientNotInitialized,\r\n    NotEnoughPermissions,\r\n    RoomNotFound, \r\n    TimelineWindowUndefined,\r\n    UserNotFound \r\n} from \"@/errors\"\r\nimport { getMessages, setDirectRoom } from \"@/utils\"\r\nimport {\r\n    initRoomFx,\r\n    updatePowerLevelFx,\r\n    updateRequiredPowerLevelForRoomFx,\r\n} from \"./private\"\r\nimport {\r\n    onRoomMemberUpdate,\r\n    onRoomUserUpdate,\r\n    $currentRoom,\r\n    $currentRoomId,\r\n    $currentRoomMembers,\r\n    $loadRoomFxPending,\r\n    $myPowerLevel,\r\n    $requiredPowerLevelForBan,\r\n    $requiredPowerLevelForDefaultEvents,\r\n    $requiredPowerLevelForDefaultState,\r\n    $requiredPowerLevelForInvite,\r\n    $requiredPowerLevelForKick,\r\n    $requiredPowerLevelForRedact,\r\n    $timelineWindow,\r\n    clearCurrentRoomState,\r\n    createDirectRoomFx,\r\n    createRoomFx,\r\n    DEFAULT_BAN_POWERLEVEL,\r\n    DEFAULT_INVITE_POWERLEVEL,\r\n    DEFAULT_KICK_POWERLEVEL,\r\n    DEFAULT_REDACT_POWERLEVEL,\r\n    DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n    DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n    getAllUsersFx,\r\n    getRoomInfoFx,\r\n    getRoomsWithActivitiesFx,\r\n    initRoom,\r\n    inviteUserFx,\r\n    joinRoomFx,\r\n    kickUserRoomFx,\r\n    liveTimelineLoaded,\r\n    loadRoom,\r\n    loadRoomMessage,\r\n    loadRoomMessageDone,\r\n    onRoomInitialized,\r\n    onRoomLoaded,\r\n    renameRoomFx,\r\n    searchRoomMessagesFx,\r\n    toLiveTimeline,\r\n    leaveRoomFx,\r\n    $loadFilter,\r\n    loadRoomFx,\r\n    findDirectRoomByUserIdFx,\r\n    $typingMembers,\r\n    clearTypingMember,\r\n    toggleTypingUser,\r\n    getRoomByIdFx,\r\n    getRoomMembers,\r\n    sendTypingFx,\r\n    getMembersByRoomIdFx,\r\n    inviteUsersFx,\r\n    getRoomMemberFx\r\n} from \"./public\"\r\nimport {\r\n    LoadRoomFxParams,\r\n    Visibility\r\n} from \"./types\"\r\n\r\nconst TYPING_SERVER_TIMEOUT = 5000\r\n\r\nconst toLiveTimelineFx = attach({ effect: loadRoomFx })\r\nconst loadRoomMessageFx = attach({ effect: loadRoomFx })\r\nconst loadInitialRoomFx = attach({ effect: loadRoomFx })\r\n\r\nconst getRoomMembersDebounced = debounce({\r\n    source: getRoomMembers,\r\n    timeout: 500\r\n})\r\n\r\nconst getRoomMembersFx = attach({\r\n    effect: getMembersByRoomIdFx\r\n})\r\n\r\nconst getCurrentRoomFx = attach({\r\n    effect: getRoomByIdFx\r\n})\r\n$typingMembers\r\n    .on(toggleTypingUser, (members, member) => {\r\n        if(member.typing) {\r\n            if (members[member.roomId]) {\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...members[member.roomId], member] \r\n                }\r\n            } \r\n            return {\r\n                ...members,\r\n                [member.roomId]: [member] \r\n            }\r\n        } \r\n        if (members[member.roomId]) {\r\n            if (members[member.roomId].length > 1) {\r\n                const filteredUsers = members[member.roomId]\r\n                    .filter(({userId}) => userId !== member.userId)\r\n                return {\r\n                    ...members,\r\n                    [member.roomId]: [...filteredUsers] \r\n                }\r\n            }\r\n            delete members[member.roomId]\r\n            return {\r\n                ...members, \r\n            }\r\n        }\r\n    })\r\n    .reset(clearTypingMember)\r\n\r\n$currentRoomId\r\n    .on(initRoom, (_, { roomId }) => roomId)\r\n    .reset(clearCurrentRoomState)\r\n$currentRoom\r\n    .on(getCurrentRoomFx.doneData, (_, room) => room)\r\n    .reset(clearCurrentRoomState)\r\n$timelineWindow\r\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\r\n    .reset($currentRoomId)\r\n$currentRoomMembers\r\n    .on(getRoomMembersFx.doneData, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$myPowerLevel\r\n    .on(updatePowerLevelFx.doneData, (_, powerLevel) => powerLevel)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForKick\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.kick)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForBan\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.ban)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForInvite\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.invite)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultEvents\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.defaultEvents)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForRedact\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.redact)\r\n    .reset($currentRoomId)\r\n$requiredPowerLevelForDefaultState\r\n    .on(updateRequiredPowerLevelForRoomFx.doneData,\r\n        (_, powerLevels) => powerLevels.stateDefault)\r\n    .reset($currentRoomId)\r\n\r\nforward({\r\n    from: loadRoomFx.pending,\r\n    to: $loadRoomFxPending,\r\n})    \r\nforward({\r\n    from: initRoom,\r\n    to: initRoomFx,\r\n})\r\nforward({\r\n    from: toLiveTimelineFx.done,\r\n    to: liveTimelineLoaded,\r\n})\r\nforward({\r\n    from: sample({\r\n        source: $timelineWindow,\r\n        clock: initRoomFx.done,\r\n        // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n        fn: () => {},\r\n    }),\r\n    to: onRoomInitialized,\r\n})\r\nforward({\r\n    from: loadRoomMessageFx.done,\r\n    to: loadRoomMessageDone,\r\n})\r\nforward({\r\n    from: loadInitialRoomFx.done,\r\n    to: onRoomLoaded,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: getCurrentRoomFx,\r\n})    \r\n\r\nguard({\r\n    source: $currentRoomId,\r\n    filter: (roomId) => Boolean(roomId),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomUserUpdate,\r\n    source: $currentRoomMembers,\r\n    filter: (currentRoomMembers, user) => Boolean(\r\n        currentRoomMembers?.find(((member) => \r\n            member.userId === user.userId\r\n        ))),\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    clock: onRoomMemberUpdate,\r\n    source: $currentRoomId,\r\n    filter: (roomId, member) => roomId === member.roomId,\r\n    target: getRoomMembers,\r\n})\r\nguard({\r\n    source: $currentRoomId,\r\n    clock: getRoomMembersDebounced,\r\n    filter: Boolean,\r\n    target: getRoomMembersFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoom,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection = \"BACKWARD\"\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadInitialRoomFx\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        loadRoomMessage,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ], {\r\n            initialEventId,\r\n            initialWindowSize,\r\n        }): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            initialEventId,\r\n            initialWindowSize,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: loadRoomMessageFx,\r\n})\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        toLiveTimeline,\r\n        ([\r\n            roomId,\r\n            timelineWindow\r\n        ]): LoadRoomFxParams => ({\r\n            roomId: roomId as string,\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            loadAdditionalDataDirection: \"BACKWARD\"\r\n        })\r\n    ),\r\n    filter: $loadFilter,\r\n    target: toLiveTimelineFx,\r\n})\r\n\r\nguard({\r\n    clock: $currentRoomId,\r\n    filter: Boolean,\r\n    target: [updatePowerLevelFx, updateRequiredPowerLevelForRoomFx]\r\n})\r\n\r\nupdatePowerLevelFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotFound()\r\n    const user = room.getMember(userId)\r\n    if (!user) throw new UserNotFound()\r\n    return user.powerLevel\r\n})\r\n\r\nupdateRequiredPowerLevelForRoomFx.use((roomId) => {\r\n    const cl = client()\r\n    const room = cl.getRoom(roomId) as Room\r\n    const powerLevelsContent  = room.currentState\r\n        .getStateEvents(\"m.room.power_levels\", \"\")\r\n        .getContent()\r\n\r\n    return {\r\n        kick: powerLevelsContent.kick ?? DEFAULT_KICK_POWERLEVEL,\r\n        ban: powerLevelsContent.ban ?? DEFAULT_BAN_POWERLEVEL,\r\n        invite: powerLevelsContent.invite ?? DEFAULT_INVITE_POWERLEVEL,\r\n        defaultEvents: powerLevelsContent.events_default ??\r\n            DEFAULT_SEND_DEFAULT_EVENT_POWERLEVEL,\r\n        stateDefault: powerLevelsContent.state_default ??\r\n            DEFAULT_SET_DEFAULT_STATE_POWERLEVEL,\r\n        redact: powerLevelsContent.redact ?? DEFAULT_REDACT_POWERLEVEL\r\n    }\r\n})\r\n\r\ngetMembersByRoomIdFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return room.getMembers()\r\n        .map((member) => {\r\n            const user = client().getUser(member.userId)\r\n            if (!user) throw new UserNotFound()\r\n            return toMappedRoomMember(member, user)\r\n        })\r\n})\r\n\r\ngetRoomInfoFx.use((roomId) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    return toRoomInfo(room)\r\n})\r\n\r\ninitRoomFx.use(async ({ roomId }) => {\r\n    const cl = client()\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const timelineSet = room.getUnfilteredTimelineSet()\r\n    return new matrix.TimelineWindow(cl, timelineSet)\r\n})\r\n\r\nloadRoomFx.use(async ({\r\n    timelineWindow,\r\n    initialEventId,\r\n    initialWindowSize,\r\n    loadAdditionalDataDirection\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    // @TODO fix optional type\r\n    await timelineWindow.load(initialEventId as string, initialWindowSize)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    let messages = getMessages(timelineWindow)\r\n    // дозагрузка сообщений если пришло меньше чем ожидали\r\n    if (initialWindowSize && messages.length < initialWindowSize) {\r\n        let eventsRetrieved: boolean\r\n        const size = initialWindowSize - messages.length\r\n        if (loadAdditionalDataDirection === \"BACKWARD\") {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.BACKWARDS, size)\r\n        } else {\r\n            eventsRetrieved = await timelineWindow\r\n                .paginate(matrix.EventTimeline.FORWARDS, size)\r\n        }\r\n        if (eventsRetrieved) {\r\n            messages = getMessages(timelineWindow)\r\n        }\r\n    }\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\ngetRoomsWithActivitiesFx.use((rooms) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    return rooms.map((room) => toRoomWithActivity(room))\r\n})\r\n\r\nsearchRoomMessagesFx\r\n    .use(async ({ term, roomId, orderBy = SearchOrderBy.Rank }) => {\r\n        const room = client().getRoom(roomId)\r\n        if (!room) throw new RoomNotFound()\r\n        const membersCache: { [id: string]: RoomMember } = {}\r\n        const searchResponse = await client().search({\r\n            body: {\r\n                search_categories: {\r\n                    room_events: {\r\n                        search_term: term,\r\n                        keys: [\"content.body\"],\r\n                        filter: {\r\n                            rooms: [roomId],\r\n                        },\r\n                        order_by: orderBy,\r\n                    },\r\n                },\r\n            },\r\n        })\r\n        return searchResponse\r\n            .search_categories\r\n            .room_events.results.map(({ result }) => {\r\n            // TODO: fix me\r\n                const event = new MatrixEvent(result)\r\n                const senderId = event.getSender()\r\n                if (membersCache[senderId] === undefined) {\r\n                    membersCache[senderId] = room\r\n                        .getMember(senderId) as RoomMember\r\n                }\r\n                event.sender = membersCache[senderId]\r\n                return toMessage(event)\r\n            })\r\n    })\r\n\r\ngetAllUsersFx.use(() => client().getUsers().map(toMappedUser))\r\n\r\ncreateRoomFx.use(async ({\r\n    name, \r\n    invite, \r\n    visibility, \r\n    initialState = [], \r\n    preset\r\n}) => {\r\n    const options = {\r\n        name, \r\n        invite,\r\n        visibility,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n    }\r\n\r\n    // TODO: fix me\r\n    const { room_id } = await client().createRoom(options as any)\r\n\r\n    return { roomId: room_id } \r\n})\r\n\r\ncreateDirectRoomFx.use( async ({user, preset, initialState = []}) => {\r\n    const cl = client()\r\n    const roomsIds = getIsDirectRoomsIds()\r\n    const findRoomId = roomsIds.find(\r\n        (roomId) => cl.getRoom(roomId)?.currentState.members[user.userId]\r\n    )\r\n    if (findRoomId) return { roomId: findRoomId }\r\n    \r\n    const options = {\r\n        is_direct: true, \r\n        invite: [user.userId],\r\n        visibility: Visibility.private,\r\n        initial_state: initialState.map((state) => ({ \r\n            ...state,\r\n            state_key: state.stateKey,\r\n            stateKey: undefined,\r\n        })),\r\n        preset,\r\n        creation_content: {\r\n            isDirect: true,\r\n            creator: cl.getUserId() \r\n        }\r\n    }\r\n    const { room_id } = await cl.createRoom(options as any)\r\n    await setDirectRoom(room_id, user.userId)\r\n\r\n    return { roomId: room_id }\r\n})\r\n\r\ninviteUserFx.use( async ({userId, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    try {\r\n        await client().invite(roomId, userId)\r\n        await client().sendSharedHistoryKeys(roomId, [userId])\r\n    } catch (e: any) {\r\n        if (e.httpStatus === 403) {\r\n            throw new NotEnoughPermissions(\r\n                \"Not enough permissions to invite users\"\r\n            )\r\n        }\r\n    }\r\n})\r\n\r\ninviteUsersFx.use( async ({usersIds, roomId}) => {\r\n    const isDirect = client().getRoom(roomId).currentState\r\n        .getStateEvents(\r\n            EventType.RoomCreate,\r\n            \"\"\r\n        )?.getContent()?.isDirect\r\n    if (isDirect) {\r\n        throw new CantInviteUsers(\"Can't invite users into a direct room\")\r\n    }\r\n    for (const id of usersIds) {\r\n        try {\r\n            await client().invite(roomId, id)\r\n            await client().sendSharedHistoryKeys(roomId, [id])\r\n        } catch (e: any) {\r\n            if (e.httpStatus === 403) {\r\n                throw new NotEnoughPermissions()\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nkickUserRoomFx.use( async ({ roomId, userId, reason }) => {\r\n    await client().kick(roomId, userId, reason)\r\n})\r\n\r\nrenameRoomFx.use( async ({roomId, name}) => {\r\n    await client().setRoomName(roomId, name)\r\n})\r\n\r\njoinRoomFx.use( async ({roomId, isDirect = false}) => {\r\n    const cl = client()\r\n    const room = await cl.joinRoom(roomId)\r\n    if (isDirect) {\r\n        await setDirectRoom(roomId)\r\n    }\r\n    return toRoomWithActivity(toMappedRoom(room))\r\n})\r\n\r\ngetRoomByIdFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) return null\r\n    return toRoomWithActivity(toMappedRoom(matrixRoom))\r\n})\r\n\r\nleaveRoomFx.use( async (roomId) => {\r\n    await client().leave(roomId)\r\n})\r\n\r\nfindDirectRoomByUserIdFx.use((userId) => {\r\n    const cl = client()\r\n    const directRooms = cl.getAccountData(DIRECT_EVENT)?.getContent()\r\n    const roomId = directRooms[userId] && directRooms[userId][0]\r\n    if(!roomId) throw new RoomNotFound()\r\n    const room = cl.getRoom(roomId)\r\n    if(!room) throw new RoomNotFound()\r\n    return toMappedRoom(room)\r\n})\r\n\r\nsendTypingFx.use(async ({ roomId, isTyping }) => {\r\n    await client().sendTyping(roomId, isTyping, TYPING_SERVER_TIMEOUT)\r\n})\r\n\r\ngetRoomMemberFx.use(({ roomId, userId }) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound(`${roomId} room not found`)\r\n    const roomMember = matrixRoom?.getMember(userId)\r\n    if (!roomMember) throw new UserNotFound(`${userId} room member not found`)\r\n    return roomMember\r\n})\r\n","import { TimelineWindow } from \"matrix-js-sdk\"\r\nimport { attach, guard, sample} from \"effector\"\r\nimport {\r\n    $currentRoomId,\r\n    $timelineWindow,\r\n    loadRoomFx,\r\n    MessageResponse\r\n} from \"@/room\"\r\nimport {\r\n    UpdateMessagesFxParams,\r\n    PaginateParams,\r\n    PaginateRoomFxParams\r\n} from \"./types\"\r\nimport { messagesDomain } from \"./domain\"\r\n\r\nexport const paginateRoomFx = messagesDomain\r\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\r\n\r\nexport const paginateBackwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"backward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n    \r\nexport const paginateForwardFx = attach({\r\n    source: [$currentRoomId, $timelineWindow],\r\n    effect: paginateRoomFx,\r\n    mapParams: (params: PaginateParams, [roomId, timelineWindow]) => ({\r\n        roomId: roomId as string,\r\n        timelineWindow: timelineWindow as TimelineWindow,\r\n        direction: \"forward\" as const,\r\n        ...params,\r\n    })\r\n})\r\n\r\nexport const updateMessagesFx = messagesDomain\r\n    .effect<UpdateMessagesFxParams, MessageResponse, Error>()\r\n\r\n// Race ellimination\r\nexport const setMessages = guard({\r\n    source: sample(\r\n        $currentRoomId,\r\n        [loadRoomFx.done, paginateRoomFx.done, updateMessagesFx.done],\r\n        (\r\n            currentRoomId,\r\n            { \r\n                params: { roomId },\r\n                result,\r\n            }) => ({\r\n            currentRoomId,\r\n            roomId,\r\n            ...result,\r\n        })\r\n    ),\r\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\r\n})\r\n\r\nexport const updateCurrentRoomUnreadMessageCountFx = messagesDomain\r\n    .effect<string, number, Error>()\r\n","import {\r\n    attach,\r\n    combine,\r\n    forward,\r\n    guard,\r\n    sample\r\n} from \"effector\"\r\nimport matrix, {\r\n    Direction,\r\n    EventStatus,\r\n    IContent,\r\n    MatrixEvent,\r\n    TimelineWindow\r\n} from \"matrix-js-sdk\"\r\nimport {\r\n    debounce,\r\n    throttle\r\n} from \"patronum\"\r\nimport {\r\n    client,\r\n    createRoomMessageBatch\r\n} from \"@/matrix-client\"\r\nimport {\r\n    $currentRoomId,\r\n    $isLive,\r\n    $loadFilter,\r\n    $loadRoomFxPending,\r\n    $timelineWindow,\r\n    loadRoom\r\n} from \"@/room\"\r\nimport { Message } from \"@/types\"\r\nimport { getMessages } from \"@/utils\"\r\nimport {\r\n    setMessages,\r\n    updateMessagesFx,\r\n    paginateBackwardFx,\r\n    paginateForwardFx,\r\n    paginateRoomFx,\r\n    updateCurrentRoomUnreadMessageCountFx\r\n} from \"./private\"\r\nimport {\r\n    $messages,\r\n    checkEventPermissionsFx,\r\n    deleteMessageFx,\r\n    editMessageFx,\r\n    getUrlPreviewFx,\r\n    newMessagesLoaded,\r\n    onUploadProgress,\r\n    readAllMessagesFx,\r\n    sendMessageFx,\r\n    uploadContentFx,\r\n    $canPaginateBackward,\r\n    $canPaginateForward,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    onPaginateBackwardDone,\r\n    onPaginateForwardDone,\r\n    paginateBackward,\r\n    paginateForward,\r\n    updateMessages,\r\n    $currentRoomUnreadMessageCount,\r\n} from \"./public\"\r\nimport {\r\n    DeleteMessageResult,\r\n    UploadContentResult\r\n} from \"./types\"\r\nimport {\r\n    ClientNotInitialized,\r\n    EventNotFound,\r\n    RoomNotFound,\r\n    TimelineWindowUndefined,\r\n    UserNotLoggedIn\r\n} from \"@/errors\"\r\n\r\nconst THROTTLE_MESSAGE_TIME = 800\r\nconst DEBOUNCE_READ_MESSAGE_TIME = 500\r\n\r\nconst roomMessageBatch = createRoomMessageBatch()\r\n\r\nconst loadNewMessagesFx = attach({\r\n    effect: paginateForwardFx,\r\n    mapParams: ({ messages }: { messages: Message[] }) => ({\r\n        size: messages.length,\r\n    }) \r\n})\r\n\r\n$messages\r\n    .on(setMessages, (_, { messages }) => messages)\r\n    .reset($currentRoomId)\r\n\r\n$currentRoomUnreadMessageCount\r\n    .on(updateCurrentRoomUnreadMessageCountFx.doneData, (_, count) => count)\r\n    .reset($currentRoomId)\r\n\r\n$isLive\r\n    .on(setMessages, (_, { isLive }) => isLive)\r\n    .reset($currentRoomId)\r\n\r\n\r\nconst $paginateFilter = combine(\r\n    $loadFilter,\r\n    $paginateBackwardPending,\r\n    $paginateForwardPending,\r\n    $loadRoomFxPending,\r\n    (\r\n        canLoad,\r\n        backwardPaginationPending,\r\n        forwardPaginationPending,\r\n        roomLoading,\r\n    ) => canLoad\r\n          && !backwardPaginationPending\r\n          && !forwardPaginationPending\r\n          && !roomLoading\r\n)\r\n    \r\n$paginateBackwardPending\r\n    .on(paginateBackwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$paginateForwardPending\r\n    .on(paginateForwardFx.pending, (_, value) => value)\r\n    .reset($currentRoomId)\r\n$canPaginateBackward\r\n    .on(setMessages, (_, { canPaginateBackward }) => canPaginateBackward)\r\n    .reset([loadRoom, $currentRoomId])\r\n$canPaginateForward\r\n    .on(setMessages, (_, { canPaginateForward }) => canPaginateForward)\r\n    .reset([loadRoom, $currentRoomId])\r\n    \r\nforward({\r\n    from: paginateBackwardFx.done,\r\n    to: onPaginateBackwardDone,\r\n})\r\n    \r\nforward({\r\n    from: paginateForwardFx.done,\r\n    to: onPaginateForwardDone,\r\n})\r\n    \r\nguard({\r\n    source: paginateBackward,\r\n    filter: $paginateFilter,\r\n    target: paginateBackwardFx\r\n})\r\nguard({\r\n    source: paginateForward,\r\n    filter: $paginateFilter,\r\n    target: paginateForwardFx\r\n})\r\n\r\nforward({\r\n    from: sample(\r\n        $messages,\r\n        loadNewMessagesFx.done,\r\n        (_, { params }) => params.messages\r\n    ),\r\n    to: newMessagesLoaded\r\n})\r\n    \r\nforward({\r\n    from: roomMessageBatch.map((messages) => ({ messages })),\r\n    to: loadNewMessagesFx,\r\n})\r\n\r\nguard({\r\n    source: sample(\r\n        [$currentRoomId, $timelineWindow],\r\n        throttle({\r\n            source: updateMessages,\r\n            timeout: THROTTLE_MESSAGE_TIME\r\n        }),\r\n        ([roomId, timelineWindow]) => ({\r\n            timelineWindow: timelineWindow as TimelineWindow,\r\n            roomId: roomId as string\r\n        })\r\n    ),\r\n    filter: $timelineWindow.map(timelineWindow => Boolean(timelineWindow)),\r\n    target: updateMessagesFx,\r\n})\r\n\r\nguard({\r\n    clock: $messages.updates,\r\n    source: $currentRoomId,\r\n    filter: (currentRoomId): currentRoomId is string => Boolean(currentRoomId),\r\n    target: updateCurrentRoomUnreadMessageCountFx\r\n})\r\n\r\nsample({\r\n    clock: debounce({\r\n        source: sendMessageFx.done,\r\n        timeout: DEBOUNCE_READ_MESSAGE_TIME,\r\n    }),\r\n    fn: ({ params, result }) => ({\r\n        roomId: params.roomId,\r\n        eventId: result.event_id\r\n    }),\r\n    target: readAllMessagesFx\r\n})\r\n\r\nsendMessageFx.use( async ({\r\n    roomId,\r\n    content,\r\n    txnId\r\n}) => await client().sendMessage(roomId, content as IContent, txnId))\r\n\r\neditMessageFx.use( async ({\r\n    roomId, eventId, body, txnId,\r\n}) => await client().sendMessage(\r\n    roomId,\r\n    {\r\n        \"m.new_content\": {\r\n            msgtype: \"m.text\", body,\r\n        },\r\n        \"m.relates_to\": {\r\n            rel_type: \"m.replace\",\r\n            event_id: eventId,\r\n        },\r\n        \"msgtype\": \"m.text\",\r\n        \"body\": \"\",\r\n    },\r\n    txnId,\r\n))\r\ndeleteMessageFx.use(async ({\r\n    roomId, eventId, reason,\r\n}): Promise<DeleteMessageResult> => {\r\n    const options = reason ? { reason } : undefined\r\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\r\n    return {\r\n        eventId: res.event_id,\r\n    }\r\n})\r\nreadAllMessagesFx.use(async ({ roomId, eventId }) => {\r\n    const room = client().getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const rrEvent = room.findEventById(eventId)\r\n    if (!rrEvent) throw new EventNotFound()\r\n    // Kludge - typings fix\r\n\r\n    await client()\r\n        .setRoomReadMarkers(roomId, eventId, rrEvent, { hidden: false })\r\n})\r\nuploadContentFx.use(({\r\n    file,\r\n    name,\r\n    includeFilename,\r\n    onlyContentUri,\r\n    rawResponse,\r\n    type,\r\n}) => {\r\n    const cl = client()\r\n    const promise = cl.uploadContent(file, {\r\n        name,\r\n        includeFilename,\r\n        type,\r\n        onlyContentUri,\r\n        rawResponse,\r\n        progressHandler: ({ loaded, total }: {\r\n            loaded: number\r\n            total: number\r\n        }) => {\r\n            // warning: loosing event scope\r\n            onUploadProgress({ file, loaded, total }) \r\n        },\r\n    } as any) as any\r\n    const result: UploadContentResult = { promise }\r\n    if (promise.abort) result.abort = promise.abort\r\n    return result\r\n})\r\n\r\ngetUrlPreviewFx.use(({url, ts, timeout = 5000}) => {\r\n    return new Promise((resolve)=>{\r\n        client().getUrlPreview(url, ts)\r\n            .then(resolve)\r\n            .catch(()=> resolve({\"og:url\": url}))\r\n        setTimeout(()=>{\r\n            resolve({\"og:url\": url})\r\n        }, timeout)\r\n    })\r\n})\r\n\r\nfunction canEditContent(mxEvent: MatrixEvent): boolean {\r\n    if (mxEvent.status === EventStatus.CANCELLED ||\r\n        mxEvent.getType() !== \"m.room.message\" ||\r\n        mxEvent.isRedacted()\r\n    ) {\r\n        return false\r\n    }\r\n    const content = mxEvent.getOriginalContent()\r\n    const {msgtype} = content\r\n    return (msgtype === \"m.text\" || msgtype === \"m.emote\") &&\r\n        Boolean(content.body) && typeof content.body === \"string\" &&\r\n        mxEvent.getSender() === client().getUserId()\r\n}\r\ncheckEventPermissionsFx.use(({ eventId, roomId }) => {\r\n    const cl = client()\r\n    if (!cl) throw new ClientNotInitialized()\r\n    const room = cl.getRoom(roomId)\r\n    if (!room) throw new RoomNotFound()\r\n    const mxEvent = room.findEventById(eventId)\r\n    if (!mxEvent) throw new EventNotFound()\r\n    const userId = cl.getUserId()\r\n    if (!userId) throw new UserNotLoggedIn()\r\n    const canRedact = room.currentState\r\n        .maySendRedactionForEvent(mxEvent, userId) &&\r\n            mxEvent.getType() as string !==\r\n                \"m.room.server_acl\"   // missing in DT types\r\n    const canEdit = canEditContent(mxEvent)\r\n    return {\r\n        canRedact,\r\n        canEdit,\r\n    }\r\n})\r\nupdateMessagesFx.use(({ timelineWindow }) => {\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    return {\r\n        messages: getMessages(timelineWindow),\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n    \r\npaginateRoomFx.use(async ({\r\n    timelineWindow,\r\n    direction,\r\n    size,\r\n    makeRequest,\r\n    requestLimit,\r\n}) => {\r\n    if (!timelineWindow) throw new TimelineWindowUndefined()\r\n    const dir = direction === \"forward\" ?\r\n        matrix.EventTimeline.FORWARDS :\r\n        matrix.EventTimeline.BACKWARDS\r\n    await timelineWindow\r\n        .paginate(dir, size, makeRequest, requestLimit)\r\n    const canPaginateForward = timelineWindow.canPaginate(Direction.Forward)\r\n    const messages = getMessages(timelineWindow)\r\n    return {\r\n        messages,\r\n        isLive: !canPaginateForward,\r\n        canPaginateForward: canPaginateForward,\r\n        canPaginateBackward: timelineWindow.canPaginate(Direction.Backward)\r\n    }\r\n})\r\n\r\n\r\nupdateCurrentRoomUnreadMessageCountFx.use((roomId) => {\r\n    const matrixRoom = client().getRoom(roomId)\r\n    if (!matrixRoom) throw new RoomNotFound()\r\n    const count = matrixRoom.getUnreadNotificationCount()\r\n    return count ?? 0\r\n})\r\n","\nimport {\n    VerificationRequest \n} from \"matrix-js-sdk/lib/crypto/verification/request/VerificationRequest\"\nimport { cryptoDomain } from \"./domain\"\n\nexport const onCancelVerificationRequest = cryptoDomain\n    .event<VerificationRequest>()\n\n","import { client } from \"@/matrix-client\"\nimport { forward } from \"effector\"\nimport { onCancelVerificationRequest } from \"./private\"\nimport { \n    $currentVerificationEvent,\n    $verificationEvents,\n    onVerificationRequestFx,\n    checkBackupKeyFx, \n    initCryptoFx, \n    setDeviceVerifiedFx,\n    $deviceIsVerifired,\n    updateDeviceVerification,\n    setMyDeviceVerifiedFx,\n    setCurrentVerificationEvent\n} from \"./public\"\nimport { Phase } from \"./types\"\n\n$deviceIsVerifired\n    .on(updateDeviceVerification, (_, isVerified) => isVerified)\n\n$verificationEvents\n    .on(onVerificationRequestFx.doneData, ((requests, req) => [\n        ...requests, req\n    ]))\n    .on(onCancelVerificationRequest, (state, req) => state\n        .filter((currentReq) => currentReq !== req)\n    )\n\n$currentVerificationEvent\n    .on(setCurrentVerificationEvent, (_, req) => req)\n    .on(onCancelVerificationRequest, \n        (request, canceledReq) => request === canceledReq ? null : request\n    )\n\nforward({\n    from: setMyDeviceVerifiedFx.doneData,\n    to: updateDeviceVerification\n})\n\ncheckBackupKeyFx.use(async () => client().getKeyBackupEnabled())\n\ninitCryptoFx.use(async () => {\n    const cl = client()\n    if (!cl.initCrypto) return\n    await cl.initCrypto()\n    // @TODO Убрать хардкод. Настройка ручной верификации каждой сессии\n    cl.setCryptoTrustCrossSignedDevices(false)\n    const deviceId = cl.getDeviceId()\n    // const backupInfo = await cl.getKeyBackupVersion()\n    // if (backupInfo) {\n    // don't await, because this can take a long times\n    // cl.restoreKeyBackupWithSecretStorage(backupInfo).then(console.log)\n    // }\n    const userId = cl.getUserId()\n    cl.downloadKeys([userId])\n    const device = cl.getStoredDevice(  \n        userId, deviceId\n    )\n    if (device.isUnverified()) {\n        cl.requestVerification(userId)\n        // startVerivication(currentVerificationRequest)\n        // setDeviceVerifiedFx({deviceId, userId})\n    }\n    updateDeviceVerification(device.isVerified())\n})\n\nsetMyDeviceVerifiedFx.use(async () => {\n    const cl = client()\n    const userId = cl.getUserId()\n    const deviceId = cl.getDeviceId()\n    await cl.setDeviceKnown(userId, deviceId, true)\n    await cl.setDeviceVerified(userId, deviceId, true)\n    return true\n} )\n\nsetDeviceVerifiedFx.use(async ({ userId, deviceId }) => {\n    const cl = client()\n    await cl.setDeviceKnown(userId, deviceId, true)\n    await cl.setDeviceVerified(userId, deviceId, true)\n})\n\nonVerificationRequestFx.use(async (request) => {\n    const cl = client()\n    \n    const onChange = () => {\n        console.log(\"request.accepting\", request)\n        if (request.accepting) {\n            onCancelVerificationRequest(request)\n            setCurrentVerificationEvent(request)\n        }\n        if (request.cancelled) {\n            request.off(\"change\", onChange)\n            onCancelVerificationRequest(request)\n        } else if (request.phase === Phase.Done) {\n            request.off(\"change\", onChange)\n            const publicKeysTrusted = cl.getCrossSigningId()\n            console.log(publicKeysTrusted ? Phase.Done : Phase.Requested)\n            onCancelVerificationRequest(request)\n        }\n    }\n\n    // await request.accept()\n    request.on(\"change\", onChange)\n    return request\n    // return {\n    //     challenge: [] as any,\n    //     accept(challengeMatches: boolean) {\n    //         if (!challengeMatches) {\n    //             sasEvent.mismatch()\n    //         } else {\n    //             sasEvent.confirm()\n    //         }\n    //         clearCurrentVerificationRequest()\n    //     },\n    //     cancel() {\n    //         if (!request.cancelled) {\n    //             sasEvent.cancel()\n    //             clearCurrentVerificationRequest()\n    //         }\n    //     },\n    //     cancelPromise: request.waitFor(() => {\n    //         console.log(\"request.cancelled\", request.cancelled)\n            \n    //         if (request.cancelled) {\n    //             clearCurrentVerificationRequest()\n    //         }\n    //         return  request.cancelled\n    //     }),\n    // }\n})\n"],"names":["MsgType","Presence","MatrixMembershipType","UserRole","root","createDomain","appDomain","domain","onInitialSync","event","onCachedState","onSync","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","getLoggedUserFx","stopClientFx","logoutFx","createClientFx","destroyClientFx","getProfileInfoFx","notificationDomain","getNotificationRulesFx","setNotificationRuleActionFx","setNotificationRuleEnabledFx","deleteNotificationRuleFx","Visibility","Preset","roomDomain","$isLive","store","$loadRoomFxPending","$currentRoomMembers","$currentRoomId","$currentRoom","clearCurrentRoomState","$timelineWindow","$myPowerLevel","$typingMembers","$requiredPowerLevelForKick","$requiredPowerLevelForInvite","$requiredPowerLevelForBan","$requiredPowerLevelForDefaultEvents","$requiredPowerLevelForRedact","$requiredPowerLevelForDefaultState","$currentJoinedRoomMembers","map","members","filter","member","membership","join","$currentRoomInvitedMembers","invite","$canKick","combine","m","r","$canInvite","$canBan","$canSendDefaultEvent","$canRedact","$canSetDefaultState","$loadFilter","roomId","timelineWindow","Boolean","clearTypingMember","toggleTypingUser","onRoomUserUpdate","onRoomMemberUpdate","getRoomMembers","initRoom","liveTimelineLoaded","onRoomInitialized","loadRoomMessageDone","onRoomLoaded","loadRoom","toLiveTimeline","loadRoomMessage","directRoomCreated","roomCreated","findDirectRoomByUserIdFx","searchRoomMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getAllUsersFx","createRoomFx","createDirectRoomFx","inviteUserFx","inviteUsersFx","kickUserRoomFx","renameRoomFx","joinRoomFx","leaveRoomFx","loadRoomFx","getRoomByIdFx","sendTypingFx","getMembersByRoomIdFx","getRoomMemberFx","clientStore","messagesDomain","$messages","$currentRoomUnreadMessageCount","updateMessages","roomMessage","newMessagesLoaded","onUploadProgress","onPaginateBackwardDone","onPaginateForwardDone","paginateForward","paginateBackward","$paginateForwardPending","$paginateBackwardPending","$canPaginateBackward","$canPaginateForward","sendMessageFx","editMessageFx","deleteMessageFx","readAllMessagesFx","checkEventPermissionsFx","uploadContentFx","getUrlPreviewFx","d","updateDisplayNameFx","updateAvatarUrlFx","messageBatchInterval","callbacksStore","destroyClient","removeAllListeners","createClient","options","ms","undefined","matrix","forEach","eventName","cb","on","client","onClientEvent","callbacks","push","createRoomMessageBatch","batchEvents","EventNotFound","createCustomError","RoomNotFound","ClientNotInitialized","TimelineWindowUndefined","UserNotFound","UserNotLoggedIn","CantInviteUsers","NotEnoughPermissions","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","DIRECT_EVENT","toMessageSeen","message","myUserId","room","seen","getJoinedMembers","some","userId","hasUserReadEvent","originalEventId","getMappedContent","getContent","toMessage","relation","getRelation","getId","content","sender","originServerTs","getDate","edited","redacted","isRedacted","isRedaction","toMappedRoom","name","summary","myMembership","getMyMembership","mergeMessageEvents","acc","isRelation","toMappedUser","user","avatarUrl","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","toRoomWithActivity","maxHistory","cl","matrixRoom","getRoom","events","getLiveTimeline","getEvents","powerLevelsContent","currentState","getStateEvents","EventType","RoomPowerLevels","isDirect","RoomCreate","_matrixRoom$currentSt","_matrixRoom$currentSt2","unreadCount","i","length","isReadUpTo","getUserId","mergedMessageEvents","includes","getType","lastEvent","lastMessage","DMUser","getMember","guessDMUserId","myPowerLevel","users","directUserId","isOnline","_DMUser$user","lastActivityTS","getLastActiveTimestamp","powerlevels","canBan","ban","canKick","kick","canInvite","canRedact","redact","canSendEvents","canChangeHistoryVisivility","RoomHistoryVisibility","canChangeRoomAvatar","RoomAvatar","canChangeRoomName","RoomName","canChangeRoomPowerLevels","canChangeCanonicalAlias","RoomCanonicalAlias","canChangeRoomEncryption","RoomEncryption","canChangeRoomServerAcl","RoomServerAcl","canChangeRoomTobstone","RoomTombstone","getMessages","messages","reduce","getRoomId","myMessages","otherMessages","findFirstSeenOtherMessage","findFirstSeenMyMessage","Phase","setDirectRoom","companion","creator","prevData","getAccountData","prevRoomsId","setAccountData","cryptoDomain","$deviceIsVerifired","checkBackupKeyFx","initCryptoFx","setDeviceVerifiedFx","setMyDeviceVerifiedFx","$currentVerificationEvent","setCurrentVerificationEvent","$verificationEvents","onVerificationRequestFx","updateDeviceVerification","getMappedRooms","getRooms","from","done","initialSyncLimit","to","toStartOfTimeline","removed","data","eventType","liveEvent","_room$currentState$ge","_room$currentState$ge2","state","prevState","rooms","uploadKeys","e","args","console","log","userIds","initialFetch","getStoredDevicesForUser","deviceId","use","params","login","fetch","baseUrl","method","body","JSON","stringify","type","token","response","json","user_id","access_token","device_id","well_known","accessToken","wellKnown","startup","startClient","logout","stopClient","loggedUserId","getUser","mappedUser","getProfileInfo","profileInfo","avatar_url","displayname","createClientParams","startClientParams","_cl$store","deleteAllData","getPushRules","payload","setPushRuleActions","scope","kind","ruleId","actions","error","rules","global","setPushRuleEnabled","enabled","deletePushRule","newDisplayName","setDisplayName","newAvatarUrl","setAvatarUrl","initRoomFx","updatePowerLevelFx","updateRequiredPowerLevelForRoomFx","toLiveTimelineFx","attach","loadRoomMessageFx","loadInitialRoomFx","getRoomMembersDebounced","debounce","source","timeout","getRoomMembersFx","getCurrentRoomFx","typing","filteredUsers","reset","_","doneData","value","powerLevel","powerLevels","defaultEvents","stateDefault","pending","sample","clock","fn","target","currentRoomMembers","find","initialEventId","initialWindowSize","loadAdditionalDataDirection","events_default","state_default","getMembers","roomMember","role","admin","moderator","powerLevelNorm","rawDisplayName","toMappedRoomMember","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","load","canPaginateForward","canPaginate","Direction","Forward","size","paginate","EventTimeline","BACKWARDS","eventsRetrieved","FORWARDS","isLive","canPaginateBackward","Backward","term","orderBy","SearchOrderBy","Rank","membersCache","search","search_categories","room_events","search_term","keys","order_by","searchResponse","results","result","MatrixEvent","senderId","getSender","getUsers","visibility","initialState","preset","initial_state","state_key","stateKey","createRoom","room_id","directRooms","roomsIds","Object","values","flatMap","findRoomId","_cl$getRoom","is_direct","creation_content","_client$getRoom$curre","_client$getRoom$curre2","sendSharedHistoryKeys","_context6","httpStatus","usersIds","_client$getRoom$curre3","_client$getRoom$curre4","id","_context7","reason","setRoomName","joinRoom","leave","_cl$getAccountData","isTyping","sendTyping","paginateRoomFx","paginateBackwardFx","mapParams","direction","paginateForwardFx","updateMessagesFx","setMessages","guard","currentRoomId","updateCurrentRoomUnreadMessageCountFx","roomMessageBatch","loadNewMessagesFx","count","$paginateFilter","canLoad","backwardPaginationPending","forwardPaginationPending","roomLoading","throttle","updates","eventId","event_id","txnId","sendMessage","msgtype","rel_type","redactEvent","res","rrEvent","findEventById","setRoomReadMarkers","hidden","file","includeFilename","onlyContentUri","rawResponse","promise","uploadContent","progressHandler","loaded","total","abort","url","ts","Promise","resolve","getUrlPreview","then","setTimeout","mxEvent","maySendRedactionForEvent","canEdit","status","EventStatus","CANCELLED","getOriginalContent","canEditContent","makeRequest","requestLimit","dir","getUnreadNotificationCount","onCancelVerificationRequest","isVerified","requests","req","currentReq","request","canceledReq","getKeyBackupEnabled","initCrypto","setCryptoTrustCrossSignedDevices","getDeviceId","downloadKeys","device","getStoredDevice","isUnverified","requestVerification","setDeviceKnown","setDeviceVerified","onChange","accepting","cancelled","off","phase","Done","publicKeysTrusted","getCrossSigningId","Requested","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","endpointUrl","headers","Authorization","getAccessToken","mxcUrl","mxcUrlToHttp"],"mappings":"gJAAYA,ECaAC,EAiDAC,EA6GAC,4CCzKCC,EAAOC,eAAa,QCApBC,EAAYF,EAAKG,OAAO,OCaxBC,EAAgBF,EAAUG,QAC1BC,EAAgBJ,EAAUG,QAC1BE,EAASL,EAAUG,QAInBG,EAAoBN,EAC5BO,SACQC,EAAiBR,EACzBO,SACQE,EAAcT,EAAUO,SACxBG,EAAgBV,EACxBO,SACQI,EAAkBX,EAC1BO,SACQK,EAAeZ,EAAUO,SACzBM,EAAWb,EAAUO,SACrBO,EAAiBd,EACzBO,SACQQ,EAAkBf,EAC1BO,SACQS,EAAmBhB,EAC3BO,SCnCQU,EAAqBnB,EAAKG,OAAO,gBCMjCiB,EAAyBD,EACjCV,SACQY,EAA8BF,EACtCV,SACQa,EAA+BH,EACvCV,SACQc,EAA2BJ,EACnCV,2BNfOb,EAAAA,YAAAA,+BAEVA,iCACAA,kBACAA,gBACAA,kBACAA,oBACAA,gBACAA,kBACAA,2CCIUC,EAAAA,aAAAA,gCAERA,oBACAA,2DA8CQC,EAAAA,yBAAAA,0CAERA,kBACAA,YACAA,cACAA,mCAwGQC,EAAAA,aAAAA,8BAERA,wBM3KG,IC6DKyB,EAKAC,EDlECC,EAAa1B,EAAKG,OAAO,QEsCzBwB,EAAUD,EAAWE,MAAsB,MAC3CC,EAAqBH,EAAWE,OAAe,GAC/CE,EAAsBJ,EAC9BE,MAAiC,MACzBG,EAAiBL,EACzBE,MAAyC,MACjCI,EAAeN,EAAWE,MAA+B,MACzDK,EAAwBP,EAAWrB,QACnC6B,EAAkBR,EAAWE,MAA6B,MAC1DO,GAAgBT,EAAWE,MAAc,GAEzCQ,GAAiBV,EACzBE,MAAuC,IAE/BS,GAA6BX,EACrCE,MApBkC,IAqB1BU,GAA+BZ,EACvCE,MAxBoC,IAyB5BW,GAA4Bb,EACpCE,MAzBiC,IA0BzBY,GAAsCd,EAC9CE,MAzBgD,GA0BxCa,GAA+Bf,EACvCE,MAzBoC,IA0B5Bc,GAAqChB,EAC7CE,MA5B+C,IA8BvCe,GAA4Bb,EACpCc,KACG,SAACC,0BAAYA,MAAAA,SAAAA,EAASC,QAClB,SAACC,UAAWA,EAAOC,aAAelD,uBAAqBmD,uBAAS,MAE/DC,GAA6BpB,EACrCc,KACG,SAACC,0BAAYA,MAAAA,SAAAA,EAASC,QAClB,SAACC,UAAWA,EAAOC,aAAelD,uBAAqBqD,yBACtD,MAGAC,GAAWC,UACpBlB,GAAeE,IACf,SAACiB,EAAGC,UAAMD,GAAKC,KAENC,GAAaH,UACtBlB,GAAeG,IACf,SAACgB,EAAGC,UAAMD,GAAKC,KAENE,GAAUJ,UACnBlB,GAAeI,IACf,SAACe,EAAGC,UAAMD,GAAKC,KAENG,GAAuBL,UAChClB,GAAeK,IACf,SAACc,EAAGC,UAAMD,GAAKC,KAENI,GAAaN,UACtBlB,GAAeM,IACf,SAACa,EAAGC,UAAMD,GAAKC,KAENK,GAAsBP,UAC/BlB,GAAeO,IACf,SAACY,EAAGC,UAAMD,GAAKC,KAGNM,GAAcR,UACvBtB,EACAG,GACA,SAAC4B,EAAQC,UAAmBC,QAAQF,IAAWE,QAAQD,MAG9CE,GAAoBvC,EAAWrB,QAC/B6D,GAAmBxC,EAAWrB,QAC9B8D,GAAmBzC,EAAWrB,QAC9B+D,GAAqB1C,EAAWrB,QAChCgE,GAAiB3C,EAAWrB,QAC5BiE,GAAW5C,EAAWrB,QACtBkE,GAAqB7C,EAAWrB,QAChCmE,GAAoB9C,EAAWrB,QAC/BoE,GAAsB/C,EAAWrB,QACjCqE,GAAehD,EAAWrB,QAC1BsE,GAAWjD,EAAWrB,QACtBuE,GAAiBlD,EAAWrB,QAC5BwE,GAAkBnD,EAAWrB,QAC7ByE,GAAoBpD,EAAWrB,QAC/B0E,GAAcrD,EAAWrB,QAEzB2E,GAA2BtD,EACnCjB,SACQwE,GAAuBvD,EAC/BjB,SACQyE,GAA2BxD,EACnCjB,SACQ0E,GAAgBzD,EACxBjB,SACQ2E,GAAgB1D,EACxBjB,SACQ4E,GAAe3D,EACvBjB,SACQ6E,GAAqB5D,EAC7BjB,SACQ8E,GAAe7D,EAAWjB,SAC1B+E,GAAgB9D,EAAWjB,SAC3BgF,GAAiB/D,EAAWjB,SAC5BiF,GAAehE,EAAWjB,SAC1BkF,GAAajE,EACrBjB,SACQmF,GAAclE,EACtBjB,SACQoF,GAAanE,EACrBjB,SACQqF,GAAgBpE,EACxBjB,SACQsF,GAAerE,EACvBjB,SACQuF,GAAuBtE,EAC/BjB,SACQwF,GAAkBvE,EAC1BjB,8BD9FOe,EAAAA,eAAAA,kCAERA,qCAGQC,EAAAA,WAAAA,wDAERA,6BACAA,2BErEG,ICMHyE,GDNSC,GAAiBnG,EAAKG,OAAO,YEgB7BiG,GAAYD,GAAevE,MAAiB,IAC5CyE,GAAiCF,GACzCvE,MAAqB,MAEb0E,GAAiBH,GAAe9F,QAChCkG,GAAcJ,GAAe9F,QAC7BmG,GAAoBL,GAAe9F,QACnCoG,GAAmBN,GAAe9F,QAClCqG,GAAyBP,GAAe9F,QACxCsG,GAAwBR,GAAe9F,QACvCuG,GAAkBT,GAAe9F,QACjCwG,GAAmBV,GAAe9F,QAElCyG,GAA0BX,GAAevE,OAAM,GAC/CmF,GAA2BZ,GAAevE,OAAM,GAChDoF,GAAuBb,GAAevE,OAAM,GAC5CqF,GAAsBd,GAAevE,OAAM,GAE3CsF,GAAgBf,GACxB1F,SACQ0G,GAAgBhB,GACxB1F,SACQ2G,GAAkBjB,GAC1B1F,SACQ4G,GAAoBlB,GAC5B1F,SACQ6G,GAA0BnB,GAClC1F,SACQ8G,GAAkBpB,GAC1B1F,SACQ+G,GAAkBrB,GAC1B1F,SC/CQgH,GAAIzH,EAAKG,OAAO,WCAhBuH,GAAsBD,GAAEhH,SACxBkH,GAAoBF,GAAEhH,SHM/BmH,GAAuB,IACrBC,GAAkC,GAE3BC,GAAgB,WACrB5B,KACAA,GAAY6B,qBAEZ7B,GAAc,OAIT8B,GAAe,gBACvBC,IAAAA,QAA+BC,IAAtBN,qBAEVE,UACWK,IAAPD,IAAkBN,GAAuBM,GAC7ChC,GAAckC,UAAOJ,aAAaC,GAClCJ,GAAeQ,SAAQ,iCAAEC,OAAWC,OAChCrC,GAAYsC,GAAGF,EAAWC,OAGrBE,GAAS,kBAAoBvC,IAE7BwC,GAAgB,SAACC,GAC1Bd,GAAee,WAAff,aAAuBc,KAGdE,GAAyB,kBAC3BC,cAAYvC,GAAaqB,KInCvBmB,GAAgBC,oBAAkB,iBAClCC,GAAeD,oBAAkB,gBACjCE,GAAuBF,oBAAkB,wBACzCG,GACXH,oBAAkB,2BACPI,GAAeJ,oBAAkB,gBACjCK,GAAkBL,oBAAkB,mBACpCM,GACXN,oBAAkB,mBACPO,GACXP,oBAAkB,wBCZPQ,GAAqB,iBACrBC,GAAuB,mBAGvBC,GAAe,slBCyBrB,IAAMC,GAAgB,SACzBC,EACAC,EACAC,UAEAF,EAAQG,KAAOD,EAAKE,mBAAmBC,MAAK,SAAClH,UACrCA,EAAOmH,SAAWL,GACfC,EACFK,iBAAiBpH,EAAOmH,OAAQN,EAAQQ,oBAE1CR,GAGLS,GAAmB,SAAChK,UACtBA,EAAMiK,uBA+BMC,GACZlK,EACA+J,OAEMI,EAAWnK,EAAMoK,oBAChB,CACHL,qBAAqCjC,IAApBiC,EACbA,EACA/J,EAAMqK,QACVC,QAASN,GAAiBhK,GAC1BuK,OAAQvK,EAAMuK,OACdC,eAAgBxK,EAAMyK,UACtBC,OAA4C,eAAnCP,MAAAA,SAAAA,EAAgB,UACzBQ,SAAU3K,EAAM4K,cAAgB5K,EAAM6K,wBAI9BC,GAAarB,SAClB,CACHhG,OAAQgG,EAAKhG,OACbsH,KAAMtB,EAAKsB,KACXC,QAASvB,EAAKuB,QACdC,aAAcxB,EAAKyB,4BAIXC,GACZC,EACApL,UAEIA,EAAMqL,WAAW,cAAgBrL,EAAM6K,eAG3CO,EAAI7C,KAAK2B,GAAUlK,IAFRoL,EAYR,IAAME,GAAe,SAACC,SACzB,CACIC,UAAWD,EAAKC,UAChB3B,OAAQ0B,EAAK1B,OACb4B,gBAAiBF,EAAKE,gBACtBC,YAAaH,EAAKG,YAClBC,cAAeJ,EAAKI,cACpBC,eAAgBL,EAAKK,eACrBC,SAAUN,EAAKM,oBA4BPC,GACZrC,eACAsC,yDAAa,GAEPC,EAAK5D,KACL6D,EAAaD,EAAGE,QAAQzC,EAAKhG,YAC9BwI,EAAY,MAAM,IAAIrD,WACrBuD,EAASF,EAAWG,kBAAkBC,YACtCC,EAAqBL,EAAWM,aACjCC,eAAeC,YAAUC,gBAAiB,IAC1CzC,aAEC0C,EAAWhJ,kBAAQsI,EAAWM,aAC/BC,eACGC,YAAUG,WACV,4BAHiBC,EAIlB5C,iCAJkB6C,EAIgBH,UAErCI,EAAc,EACTC,EAAIb,EAAOc,OAAS,EAAGD,GAAK,GAC7BA,IAAMb,EAAOc,OAASlB,EADUiB,IAAK,KAEnChN,EAAQmM,EAAOa,GACfE,EAAajB,EACdnC,iBAAiBkC,EAAGmB,YAAuBnN,EAAMqK,YAClD6C,QAGJH,GAAe,MAEbK,EAAsBjB,EACvB1J,QAAO,SAACzC,SAAU,CAACmJ,GAAoBC,IACnCiE,SAASrN,EAAMsN,cAElBC,EAAYH,EAAoBA,EAAoBH,OAAS,GAC/DO,EAAcD,EAAYrD,GAAUqD,QAAazF,EAC/C0B,EAAWwC,EAAGmB,YAEhBK,IACIA,EAAYjD,OAAOV,SAAWL,EAC9BgE,EAAY9D,KAAOuC,EACdnC,iBAAiBN,EAAUgE,EAAYzD,iBAE5CyD,EAAclE,GACVkE,EACAhE,EACAyC,QAINwB,EAASd,EACTV,EAAWyB,UAAUzB,EAAW0B,iBAChC,KAGAC,YAAetB,EAAmBuB,MAAMrE,kBAAa,kBAEpDC,OACHsD,YAAAA,EACAS,YAAAA,EACAb,SAAAA,EACAmB,aAAcL,MAAAA,SAAAA,EAAQ5D,OAGtBkE,SAAUN,EACJ9J,kBAAQ8J,EAAOlC,yBAAPyC,EAAavC,sBACrB3D,EACNmG,eAAiBhC,EAAmBiC,yBACpCC,YAAa7B,EACbsB,aAAAA,EACAQ,OAAQR,GAAgBtB,EAAmB+B,IAC3CC,QAASV,GAAgBtB,EAAmBiC,KAC5CC,UAAWZ,GAAgBtB,EAAmBxJ,OAC9C2L,UAAWb,GAAgBtB,EAAmBoC,OAC9CC,cAAe,CACXC,2BACIhB,GAAgBtB,EACXH,OAAOM,YAAUoC,uBAE1BC,oBACIlB,GAAgBtB,EAAmBH,OAAOM,YAAUsC,YAExDC,kBACIpB,GAAgBtB,EAAmBH,OAAOM,YAAUwC,UAExDC,yBACItB,GAAgBtB,EACXH,OAAOM,YAAUC,iBAE1ByC,wBACIvB,GAAgBtB,EACXH,OAAOM,YAAU2C,oBAE1BC,wBACIzB,GAAgBtB,EACXH,OAAOM,YAAU6C,gBAE1BC,uBACI3B,GAAgBtB,EACXH,OAAOM,YAAU+C,eAE1BC,sBACI7B,GAAgBtB,EACXH,OAAOM,YAAUiD,smBC3OtBC,GAAYjM,OAClBkM,EAAWlM,EAAe2I,YAC3B5J,QAAO,SAACzC,SACL,CACImJ,GACAC,IACFiE,SAASrN,EAAMsN,cACpBuC,OAAO1E,GAAoB,IAC1Ba,EAAK5D,KACL3E,EAASC,EAAe2I,YAAY,GAAGyD,YACvCrG,EAAOuC,EAAGE,QAAQzI,OACnBgG,EAAM,MAAM,IAAIb,WACfmH,EAAa,GACbC,EAAgB,GAChBxG,EAAWwC,EAAGmB,YAChB8C,GAA4B,EAC5BC,GAAyB,EACpBlD,EAAI4C,EAAS3C,OAAS,EAAGD,GAAK,EAAGA,IAClC4C,EAAS5C,GAAGzC,OAAOV,SAAWL,EAC9BuG,EAAWxH,KAAKqH,EAAS5C,IAEzBgD,EAAczH,KAAKqH,EAAS5C,WAGpC+C,EAAW/H,SAAQ,SAACuB,GACZ2G,EACA3G,EAAQG,MAAO,GAEfH,EAAUD,GAAcC,EAASC,EAAUC,GAC3CyG,EAAyBvM,QAAQ4F,EAAQG,UAGjDsG,EAAchI,SAAQ,SAACuB,GACf0G,EACA1G,EAAQG,MAAO,GAEfH,EAAQG,KAAOD,EACVK,iBAAiBN,EAAUD,EAAQQ,iBACxCkG,EAA4B1G,EAAQG,SAGrCkG,MC5CCO,GDsHCC,8CAAgB,WACzB3M,EACA4M,6FAEMrE,EAAK5D,OACS4D,EAAGE,QAAQzI,GAAQ8I,aAClCC,eACGC,YAAUG,WACV,IACF3C,aAJEqG,IAAAA,QAKFC,EAAWvE,EAAGwE,eAAenH,IAAcY,aAC3CwG,YAAcF,EAASD,kBAAY,IAEtCD,kCACcrE,EAAG0E,eAAerH,YACxBkH,mBACFF,EAAY,CAAC5M,8EAITuI,EAAG0E,eAAerH,YACxBkH,mBACFD,sBAAcG,IAAahN,2GE3JvBkN,GAAehR,EAAKG,OAAO,gBCM3B8Q,GAAqBD,GAC7BpP,MAAgC,MAExBsP,GAAmBF,GAC3BvQ,SAEQ0Q,GAAeH,GACvBvQ,SAEQ2Q,GAAsBJ,GAC9BvQ,SAEQ4Q,GAAwBL,GAChCvQ,SAEQ6Q,GAA4BN,GACpCpP,MAAkC,MAE1B2P,GAA8BP,GACtC3Q,QAEQmR,GAAsBR,GAC9BpP,MAA6B,IAErB6P,GAA0BT,GAClCvQ,SAEQiR,GAA2BV,GACnC3Q,QC2BL,SAASsR,YACElJ,KAASmJ,WAAWhP,IAAIuI,oBH/CvBqF,GAAAA,UAAAA,mCAEVA,+BACAA,uBACAA,2BACAA,+BACAA,+BGmCM,CACJqB,KAAMrR,EAAkBsR,KAAKlP,KAAI,iBAAO,CAAEmP,iBAAkB,OAC5DC,GAAIpR,IAOR8H,GAAc,CACV,CACI,gBACA,SACIrI,EACAyJ,EACAmI,EACAC,EACAC,OAEMC,EAAY/R,EAAMsN,UACpByE,IAAc5I,IACX4I,IAAc3I,KAEZwI,GAAqBE,EAAKE,WAC3B9L,GAAYgE,GAAUlK,MAItC,CAAC,OAAQ,SAACyJ,WACAuC,EAAK5D,KACLmD,EAAO9B,EAAKiE,UAAU1B,EAAGmB,aAC3B5B,GAA4B,WAApBA,EAAK5I,aAEAgB,kBAAQ8F,EAAK8C,aACzBC,eACGC,YAAUG,WACV,4BAHiBqF,EAIlBhI,iCAJkBiI,EAIgBvF,UAGrClI,GAAkBgF,GAElB/E,GAAY+E,MAGpB,CAAC,wBAAyB,kBAAMxD,OAChC,CAAC,kDAAQ,WAAOkM,EAAOC,uFACL,aAAVD,yBACME,EAAQf,KACdrR,EAAcoS,YACRjK,KAASkK,wDAGL,YAAVH,GAAqC,aAAdC,0BACjBC,EAAQf,KACdvR,EAAcsS,iCAGJ,YAAVF,GAAqC,YAAdC,0BACjBC,EAAQf,KACdrL,KACA/F,EAAOmS,2HAIf,CACI,oBACA,SAACE,EAAGJ,EAAOzP,UAAuBqB,GAAmBrB,KAEzD,CACI,sBACA,SAAC6P,EAAGJ,EAAOzP,UAAuBqB,GAAmBrB,KAEzD,CACI,wBACA,SAAC6P,EAAG7P,UAAuBqB,GAAmBrB,KAElD,CACI,kBACA,SAAC6P,EAAG7P,UAAuBqB,GAAmBrB,KAElD,CACI,wBACA,SAAC6P,EAAG7P,UAAuBqB,GAAmBrB,KAElD,CACI,oBACA,SAAC6P,EAAG7P,GACAqB,GAAmBrB,GACnBmB,GAAiBnB,KAGzB,CACI,iBACA,SAAC6P,EAAGhH,UAAezH,GAAiByH,KAExC,CACI,gBACA,SAACgH,EAAGhH,UAAezH,GAAiByH,KAExC,CACI,mBACA,SAACgH,EAAGhH,UAAezH,GAAiByH,KAExC,CACI,2BACA,sCAAIiH,2BAAAA,yBAASC,QAAQC,IAAI,2BAA4BF,KAEzD,CACI,wBACA,sCAAIA,2BAAAA,yBAASC,QAAQC,IAAI,wBAAyBF,KAEtD,CACI,oCACA,sCAAIA,2BAAAA,yBAASC,QAAQC,IAAI,oCAAqCF,KAElE,CACI,kCACA,sCAAIA,2BAAAA,yBAASC,QAAQC,IAAI,kCAAmCF,KAEhE,CACI,2BACA,sCAAIA,2BAAAA,yBAASC,QAAQC,IAAI,2BAA4BF,KAEzD,CACI,sCACA,sCAAIA,2BAAAA,yBAASC,QAAQC,IAAI,sCAAuCF,KAEpE,CACI,8BACApB,IAEJ,CACI,iBACA,sCAAIoB,2BAAAA,yBAASC,QAAQC,IAAI,iBAAkBF,KAE/C,CACI,2BACA,SAACG,EAAmBC,OAIZA,GACJH,QAAQC,IAAIC,OACN3G,EAAK5D,KACLoB,EAAWwC,EAAGmB,YAChBwF,EAAQtF,SAAS7D,IACjBiJ,QAAQC,IACJ1G,EAAG6G,wBAAwBrJ,GAAUjH,KAAI,SAAA6E,UAAKA,EAAE0L,gBAKhE,CACI,wBACA,SAACH,OACS3G,EAAK5D,KACXqK,QAAQC,IAAIC,GACPA,EAAQtF,SAASrB,EAAGmB,iBAKrChN,EAAkB4S,+CAAK,WAAOC,0FACpB5K,KAAS6K,MN5Nc,mBM4NWD,6IAE5C3S,EAAe0S,+CAAI,WAAOC,0GACCE,gBAChBF,EAAOG,oCACV,CACIC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CAACC,KNlOJ,gBMkO0BC,MAAOT,EAAOS,wBAJ5DC,kBAYIA,EAASC,8BAJfC,IAAAA,QACAC,IAAAA,aACAC,IAAAA,UACAC,IAAAA,6BAEG,CACHlK,OAAQ+J,EACRI,YAAaH,EACbf,SAAUgB,EACVG,UAAWF,uGAInBzT,EAAYyS,8BAAI,iGACM3K,OAAV7G,IAAAA,gDACUA,EAAM2S,uDAG5B3T,EAAcwS,KAAI,SAACC,UAAW5K,KAAS+L,YAAYnB,MAEnDtS,EAASqS,8BAAK,oGACJ3K,KAASgM,qDAGnB3T,EAAasS,KAAI,kBAAM3K,KAASiM,gBAEhC7T,EAAgBuS,8BAAI,qGACV/G,EAAK5D,8CACK,gBACVkM,EAAetI,EAAGmB,qDACE,gBACpB5B,EAAOS,EAAGuI,QAAQD,4CACN,iBACZE,EAAalJ,GAAaC,IAGhBC,WAAcgJ,EAAW9I,8CACXM,EAAGyI,eAAeH,WAAtCI,SACNF,EAAWhJ,UAAYkJ,EAAYC,WACnCH,EAAW9I,YAAcgJ,EAAYE,6CAElCJ,gDAGX7T,EAAeoS,+CAAI,oGAEX8B,IAAAA,mBACAC,IAAAA,kBAGJnN,GAAakN,GACP7I,EAAK5D,OACH7G,EAAUyK,EAAVzK,uCACSA,EAAM2S,iCACjBpD,6BACA9E,EAAGmI,YAAYW,sGAGzBlU,EAAgBmS,8BAAI,+FACV/G,EAAK5D,sEAEL4D,EAAGoI,0CACHpI,EAAGzK,0BAAHwT,EAAUC,uBAChBhJ,EAAGqI,aACH5M,iDAGJ5G,EAAiBkS,+CAAK,WAAOlJ,qFACnBmC,EAAK5D,KACLmD,EAAOS,EAAGuI,QAAQ1K,yBACP,IAAId,mCACduC,GAAaC,sGCvSxBxK,EAAuBgS,KAAI,kBAChB3K,KAAS6M,kBAGpBjU,EAA4B+R,+CAAI,WAAOmC,mGAEzB9M,KAAS+M,mBACXD,EAAQE,MACRF,EAAQG,KACRH,EAAQI,OAGRJ,EAAQK,sEAGZ9C,QAAQ+C,MAAM,4CACd/C,QAAQ+C,iIAKhBvU,EAA6B8R,+CAAI,WAAOmC,gGAEhCzC,QAAQ+C,MAAM,kCACMpN,KAAS6M,6BAAvBQ,SACNhD,QAAQ+C,MAAMC,EAAMC,OAAOjM,eACrBrB,KAASuN,mBACXT,EAAQE,MACRF,EAAQG,KACRH,EAAQI,OACRJ,EAAQU,kEAGZnD,QAAQ+C,MAAM,0CACd/C,QAAQ+C,6HAIhBtU,EAAyB6R,+CAAI,WAAMmC,0FACzB9M,KAASyN,eACXX,EAAQE,MACRF,EAAQG,KACRH,EAAQI,0GChDhBjO,GAAoB0L,+CAAI,WAAO+C,0FACrB1N,KAAS2N,eAAeD,qGAGlCxO,GAAkByL,+CAAI,WAAOiD,0FACnB5N,KAAS6N,aAAaD,qGCDzB,IAAME,GAAa7U,EACrBjB,SACQ+V,GAAqB9U,EAC7BjB,SACQgW,GAAoC/U,EAC5CjB,4mDCwFL,IAEMiW,GAAmBC,SAAO,CAAElW,OAAQoF,KACpC+Q,GAAoBD,SAAO,CAAElW,OAAQoF,KACrCgR,GAAoBF,SAAO,CAAElW,OAAQoF,KAErCiR,GAA0BC,WAAS,CACrCC,OAAQ3S,GACR4S,QAAS,MAGPC,GAAmBP,SAAO,CAC5BlW,OAAQuF,KAGNmR,GAAmBR,SAAO,CAC5BlW,OAAQqF,glBAEZ1D,GACKoG,GAAGtE,IAAkB,SAACrB,EAASE,MACzBA,EAAOqU,cACFvU,EAAQE,EAAOe,iBAERjB,mBACFE,EAAOe,2BAAajB,EAAQE,EAAOe,UAASf,eAI9CF,mBACFE,EAAOe,OAAS,CAACf,QAGtBF,EAAQE,EAAOe,QAAS,IACpBjB,EAAQE,EAAOe,QAAQwJ,OAAS,EAAG,KAC7B+J,EAAgBxU,EAAQE,EAAOe,QAChChB,QAAO,qBAAEoH,SAAuBnH,EAAOmH,0BAErCrH,mBACFE,EAAOe,iBAAauT,mBAGtBxU,EAAQE,EAAOe,cAEfjB,OAIdyU,MAAMrT,IAEXlC,EACKyG,GAAGlE,IAAU,SAACiT,cAAKzT,UACnBwT,MAAMrV,GACXD,EACKwG,GAAG2O,GAAiBK,UAAU,SAACD,EAAGzN,UAASA,KAC3CwN,MAAMrV,GACXC,EACKsG,GAAG+N,GAAWiB,UAAU,SAACD,EAAGxT,UAAmBA,KAC/CuT,MAAMvV,GACXD,EACK0G,GAAG0O,GAAiBM,UAAU,SAACD,EAAGE,UAAUA,KAC5CH,MAAMvV,GACXI,GACKqG,GAAGgO,GAAmBgB,UAAU,SAACD,EAAGG,UAAeA,KACnDJ,MAAMvV,GACXM,GACKmG,GAAGiO,GAAkCe,UAClC,SAACD,EAAGI,UAAgBA,EAAY/I,QACnC0I,MAAMvV,GACXQ,GACKiG,GAAGiO,GAAkCe,UAClC,SAACD,EAAGI,UAAgBA,EAAYjJ,OACnC4I,MAAMvV,GACXO,GACKkG,GAAGiO,GAAkCe,UAClC,SAACD,EAAGI,UAAgBA,EAAYxU,UACnCmU,MAAMvV,GACXS,GACKgG,GAAGiO,GAAkCe,UAClC,SAACD,EAAGI,UAAgBA,EAAYC,iBACnCN,MAAMvV,GACXU,GACK+F,GAAGiO,GAAkCe,UAClC,SAACD,EAAGI,UAAgBA,EAAY5I,UACnCuI,MAAMvV,GACXW,GACK8F,GAAGiO,GAAkCe,UAClC,SAACD,EAAGI,UAAgBA,EAAYE,gBACnCP,MAAMvV,aAEH,CACJ8P,KAAMhM,GAAWiS,QACjB9F,GAAInQ,cAEA,CACJgQ,KAAMvN,GACN0N,GAAIuE,eAEA,CACJ1E,KAAM6E,GAAiB5E,KACvBE,GAAIzN,eAEA,CACJsN,KAAMkG,SAAO,CACTf,OAAQ9U,EACR8V,MAAOzB,GAAWzE,KAElBmG,GAAI,eAERjG,GAAIxN,eAEA,CACJqN,KAAM+E,GAAkB9E,KACxBE,GAAIvN,eAEA,CACJoN,KAAMgF,GAAkB/E,KACxBE,GAAItN,aAGF,CACFsT,MAAOjW,EACPe,OAAQkB,QACRkU,OAAQf,aAGN,CACFH,OAAQjV,EACRe,OAAQ,SAACgB,UAAWE,QAAQF,IAC5BoU,OAAQ7T,aAEN,CACF2T,MAAO7T,GACP6S,OAAQlV,EACRgB,OAAQ,SAACqV,EAAoBvM,UAAS5H,QAClCmU,MAAAA,SAAAA,EAAoBC,MAAM,SAACrV,UACvBA,EAAOmH,SAAW0B,EAAK1B,YAE/BgO,OAAQ7T,aAEN,CACF2T,MAAO5T,GACP4S,OAAQjV,EACRe,OAAQ,SAACgB,EAAQf,UAAWe,IAAWf,EAAOe,QAC9CoU,OAAQ7T,aAEN,CACF2S,OAAQjV,EACRiW,MAAOlB,GACPhU,OAAQkB,QACRkU,OAAQhB,aAEN,CACFF,OAAQe,SACJ,CAAChW,EAAgBG,GACjByC,IACA,mCACIb,OACAC,OAEAsU,IAAAA,eACAC,IAAAA,sBACAC,kCACqB,CACrBzU,OAAQA,EACRC,eAAgBA,EAChBsU,eAAAA,EACAC,kBAAAA,EACAC,uCAN8B,iBAStCzV,OAAQe,GACRqU,OAAQrB,aAEN,CACFG,OAAQe,SACJ,CAAChW,EAAgBG,GACjB2C,IACA,yCAMyB,CACrBf,YACAC,oBACAsU,iBALAA,eAMAC,oBALAA,kBAMAC,4BAA6B,eAGrCzV,OAAQe,GACRqU,OAAQtB,aAEN,CACFI,OAAQe,SACJ,CAAChW,EAAgBG,GACjB0C,IACA,uCAGyB,CACrBd,YACAC,oBACAwU,4BAA6B,eAGrCzV,OAAQe,GACRqU,OAAQxB,aAGN,CACFsB,MAAOjW,EACPe,OAAQkB,QACRkU,OAAQ,CAAC1B,GAAoBC,MAGjCD,GAAmBpD,KAAI,SAACtP,OACduI,EAAK5D,KACLqB,EAAOuC,EAAGE,QAAQzI,GAClBoG,EAASmC,EAAGmB,gBACbtD,EAAQ,MAAM,IAAId,OACjBwC,EAAO9B,EAAKiE,UAAU7D,OACvB0B,EAAM,MAAM,IAAIxC,UACdwC,EAAK8L,cAGhBjB,GAAkCrD,KAAI,SAACtP,mBAG7B6I,EAFKlE,KACK8D,QAAQzI,GACS8I,aAC5BC,eAAe,sBAAuB,IACtCvC,mBAEE,CACHsE,eAAMjC,EAAmBiC,oBjB5SM,GiB6S/BF,cAAK/B,EAAmB+B,mBjB9SM,GiB+S9BvL,iBAAQwJ,EAAmBxJ,sBjBhTM,GiBiTjCyU,wBAAejL,EAAmB6L,8BjB9SW,EiBgT7CX,uBAAclL,EAAmB8L,6BjB/SW,GiBiT5C1J,iBAAQpC,EAAmBoC,sBjBhTM,OiBoTzC/I,GAAqBoN,KAAI,SAACtP,OAChBgG,EAAOrB,KAAS8D,QAAQzI,OACzBgG,EAAM,MAAM,IAAIb,UACda,EAAK4O,aACP9V,KAAI,SAACG,OACI6I,EAAOnD,KAASmM,QAAQ7R,EAAOmH,YAChC0B,EAAM,MAAM,IAAIxC,mBT9N7BuP,EACA/M,OAEIgN,OAAOzQ,SACmB,MAA1BwQ,EAAWjB,WACXkB,EAAO7Y,WAAS8Y,MACiB,KAA1BF,EAAWjB,aAClBkB,EAAO7Y,WAAS+Y,WAEb,CACH9V,WAAY2V,EAAW3V,WACvBoI,KAAMuN,EAAWvN,KACjBsM,WAAYiB,EAAWjB,WACvBqB,eAAgBJ,EAAWI,eAC3BC,eAAgBL,EAAWK,eAC3BlV,OAAQ6U,EAAW7U,OACnBsT,OAAQuB,EAAWvB,OACnBxL,KAAMD,GAAaC,GACnB1B,OAAQyO,EAAWzO,OACnB0O,KAAAA,GS4MWK,CAAmBlW,EAAQ6I,SAI9CzG,GAAciO,KAAI,SAACtP,OACTgG,EAAOrB,KAAS8D,QAAQzI,OACzBgG,EAAM,MAAM,IAAIb,mBTxPEa,SAChB,CACHoP,iBAAkBpP,EAAKqP,wBSuPpBC,CAAWtP,MAGtByM,GAAWnD,+CAAI,oGAAStP,IAAAA,OACduI,EAAK5D,KACLqB,EAAOrB,KAAS8D,QAAQzI,yBACb,IAAImF,iBACfoQ,EAAcvP,EAAKwP,6CAClB,IAAIlR,UAAOmR,eAAelN,EAAIgN,sGAGzCxT,GAAWuN,+CAAI,4GACXrP,IAAAA,eACAsU,IAAAA,eACAC,IAAAA,kBACAC,IAAAA,4BAEKxU,wBAAsB,IAAIoF,0BAEzBpF,EAAeyV,KAAKnB,EAA0BC,aAC9CmB,EAAqB1V,EAAe2V,YAAYC,YAAUC,SAC5D3J,EAAWD,GAAYjM,KAEvBuU,GAAqBrI,EAAS3C,OAASgL,uBAEjCuB,EAAOvB,EAAoBrI,EAAS3C,OACN,aAAhCiL,oCACwBxU,EACnB+V,SAAS1R,UAAO2R,cAAcC,UAAWH,WAD9CI,kDAGwBlW,EACnB+V,SAAS1R,UAAO2R,cAAcG,SAAUL,WAD7CI,iBAGAA,IACAhK,EAAWD,GAAYjM,qCAGxB,CACHkM,SAAAA,EACAkK,QAASV,EACTA,mBAAAA,EACAW,oBAAqBrW,EAAe2V,YAAYC,YAAUU,+GAIlEnV,GAAyBkO,KAAI,SAACV,OACfjK,KACF,MAAM,IAAIS,UACZwJ,EAAM9P,KAAI,SAACkH,UAASqC,GAAmBrC,SAGlD7E,GACKmO,+CAAI,0GAASkH,IAAAA,KAAMxW,IAAAA,WAAQyW,QAAAA,aAAUC,gBAAcC,OAC1C3Q,EAAOrB,KAAS8D,QAAQzI,yBACb,IAAImF,iBACfyR,EAA6C,YACtBjS,KAASkS,OAAO,CACzCjH,KAAM,CACFkH,kBAAmB,CACfC,YAAa,CACTC,YAAaR,EACbS,KAAM,CAAC,gBACPjY,OAAQ,CACJ4P,MAAO,CAAC5O,IAEZkX,SAAUT,qBATpBU,2BAcCA,EACFL,kBACAC,YAAYK,QAAQtY,KAAI,gBAAGuY,IAAAA,OAElB9a,EAAQ,IAAI+a,cAAYD,GACxBE,EAAWhb,EAAMib,wBACQnT,IAA3BuS,EAAaW,KACbX,EAAaW,GAAYvR,EACpBiE,UAAUsN,IAEnBhb,EAAMuK,OAAS8P,EAAaW,GACrB9Q,GAAUlK,yGAIjC+E,GAAcgO,KAAI,kBAAM3K,KAAS8S,WAAW3Y,IAAI+I,OAEhDtG,GAAa+N,+CAAI,kHACbhI,IAAAA,KACAjI,IAAAA,OACAqY,IAAAA,eACAC,aAAAA,aAAe,KACfC,IAAAA,OAEMzT,EAAU,CACZmD,KAAAA,EACAjI,OAAAA,EACAqY,WAAAA,EACAG,cAAeF,EAAa7Y,KAAI,SAAC4P,mBAC1BA,OACHoJ,UAAWpJ,EAAMqJ,SACjBA,cAAU1T,OAEduT,OAAAA,YAIsBjT,KAASqT,WAAW7T,0BAAtC8T,IAAAA,0BAED,CAAEjY,OAAQiY,sGAGrBzW,GAAmB8N,+CAAK,gHAAQxH,IAAAA,KAAM8P,IAAAA,WAAQD,aAAAA,aAAe,KACnDpP,EAAK5D,KTzaLuT,OAAAA,EAAAA,EADKvT,KACYoI,eAAenH,IAAcY,aS0a9C2R,ETzaCD,GAAeE,OAAOC,OAAOH,GAAaI,SAAQ,SAACtS,UAASA,OS0a7DuS,EAAaJ,EAAS7D,MACxB,SAACtU,0BAAWuI,EAAGE,QAAQzI,uBAAXwY,EAAoB1P,aAAa/J,QAAQ+I,EAAK1B,qDAEvC,CAAEpG,OAAQuY,kBAE3BpU,EAAU,CACZsU,WAAW,EACXpZ,OAAQ,CAACyI,EAAK1B,QACdsR,WAAYha,qBACZma,cAAeF,EAAa7Y,KAAI,SAAC4P,mBAC1BA,OACHoJ,UAAWpJ,EAAMqJ,SACjBA,cAAU1T,OAEduT,OAAAA,EACAc,iBAAkB,CACdxP,UAAU,EACV2D,QAAStE,EAAGmB,uBAGMnB,EAAGyP,WAAW7T,0BAAhC8T,IAAAA,kBACFtL,GAAcsL,EAASnQ,EAAK1B,yCAE3B,CAAEpG,OAAQiY,sCTpcc,IAEzBC,kESqcVzW,GAAa6N,+CAAK,oGAAQlJ,IAAAA,OAAQpG,IAAAA,mBACb2E,KAAS8D,QAAQzI,GAAQ8I,aACrCC,eACGC,YAAUG,WACV,4BAHSwP,EAIVnS,iCAJUoS,EAII1P,gCAEX,IAAI1D,GAAgB,yEAGpBb,KAAStF,OAAOW,EAAQoG,0BACxBzB,KAASkU,sBAAsB7Y,EAAQ,CAACoG,gEAEzB,MAAjB0S,KAAEC,kCACI,IAAItT,GACN,2JAMhB/D,GAAc4N,+CAAK,0GAAQ0J,IAAAA,SAAUhZ,IAAAA,mBAChB2E,KAAS8D,QAAQzI,GAAQ8I,aACrCC,eACGC,YAAUG,WACV,4BAHS8P,EAIVzS,iCAJU0S,EAIIhQ,gCAEX,IAAI1D,GAAgB,qDAEbwT,mEAANG,6BAEGxU,KAAStF,OAAOW,EAAQmZ,4BACxBxU,KAASkU,sBAAsB7Y,EAAQ,CAACmZ,iEAEzB,MAAjBC,KAAEL,kCACI,IAAItT,wQAM1B9D,GAAe2N,+CAAK,sGAAStP,IAAAA,OAAQoG,IAAAA,OAAQiT,IAAAA,gBACnC1U,KAASmG,KAAK9K,EAAQoG,EAAQiT,qGAGxCzX,GAAa0N,+CAAK,oGAAQtP,IAAAA,OAAQsH,IAAAA,cACxB3C,KAAS2U,YAAYtZ,EAAQsH,qGAGvCzF,GAAWyN,+CAAK,0GAAQtP,IAAAA,WAAQkJ,SAAAA,gBACtBX,EAAK5D,cACQ4D,EAAGgR,SAASvZ,aAAzBgG,UACFkD,kCACMyD,GAAc3M,mCAEjBqI,GAAmBhB,GAAarB,uGAG3ChE,GAAcsN,KAAI,SAACtP,OACTwI,EAAa7D,KAAS8D,QAAQzI,UAC/BwI,EACEH,GAAmBhB,GAAamB,IADf,QAI5B1G,GAAYwN,+CAAK,WAAOtP,0FACd2E,KAAS6U,MAAMxZ,qGAGzBkB,GAAyBoO,KAAI,SAAClJ,SACpBmC,EAAK5D,KACLuT,YAAc3P,EAAGwE,eAAenH,wBAAlB6T,EAAiCjT,aAC/CxG,EAASkY,EAAY9R,IAAW8R,EAAY9R,GAAQ,OACtDpG,EAAQ,MAAM,IAAImF,OAChBa,EAAOuC,EAAGE,QAAQzI,OACpBgG,EAAM,MAAM,IAAIb,UACbkC,GAAarB,MAGxB/D,GAAaqN,+CAAI,oGAAStP,IAAAA,OAAQ0Z,IAAAA,kBACxB/U,KAASgV,WAAW3Z,EAAQ0Z,EAjeR,uGAoe9BvX,GAAgBmN,KAAI,gBAAGtP,IAAAA,OAAQoG,IAAAA,OACrBoC,EAAa7D,KAAS8D,QAAQzI,OAC/BwI,EAAY,MAAM,IAAIrD,aAAgBnF,0BACrC6U,EAAarM,MAAAA,SAAAA,EAAYyB,UAAU7D,OACpCyO,EAAY,MAAM,IAAIvP,aAAgBc,oCACpCyO,KC9jBJ,IAAM+E,GAAiBvX,GACzB1F,SAEQkd,GAAqBhH,SAAO,CACrCK,OAAQ,CAACjV,EAAgBG,GACzBzB,OAAQid,GACRE,UAAW,SAACvK,qCACRvP,YACAC,oBACA8Z,UAAW,YACRxK,MAIEyK,GAAoBnH,SAAO,CACpCK,OAAQ,CAACjV,EAAgBG,GACzBzB,OAAQid,GACRE,UAAW,SAACvK,qCACRvP,YACAC,oBACA8Z,UAAW,WACRxK,MAIE0K,GAAmB5X,GAC3B1F,SAGQud,GAAcC,QAAM,CAC7BjH,OAAQe,SACJhW,EACA,CAAC8D,GAAWiM,KAAM4L,GAAe5L,KAAMiM,GAAiBjM,OACxD,SACIoM,gBAKAA,cAAAA,EACApa,SAJIuP,OAAUvP,UACVqX,WAOZrY,OAAQ,qBAAGob,kBAAepa,UAGjBqa,GAAwChY,GAChD1F,SCcC2d,GAAmBvV,KAEnBwV,GAAoB1H,SAAO,CAC7BlW,OAAQqd,GACRF,UAAW,kBAA4C,CACnD/D,OADU5J,SACK3C,WAIvBlH,GACKoC,GAAGwV,IAAa,SAACzG,cAAKtH,YACtBqH,MAAMvV,GAEXsE,GACKmC,GAAG2V,GAAsC3G,UAAU,SAACD,EAAG+G,UAAUA,KACjEhH,MAAMvV,GAEXJ,EACK6G,GAAGwV,IAAa,SAACzG,cAAK4C,UACtB7C,MAAMvV,GAGX,IAAMwc,GAAkBlb,UACpBQ,GACAkD,GACAD,GACAjF,GACA,SACI2c,EACAC,EACAC,EACAC,UACCH,IACKC,IACAC,IACAC,KAGd5X,GACKyB,GAAGmV,GAAmB7F,SAAS,SAACP,EAAGE,UAAUA,KAC7CH,MAAMvV,GACX+E,GACK0B,GAAGsV,GAAkBhG,SAAS,SAACP,EAAGE,UAAUA,KAC5CH,MAAMvV,GACXiF,GACKwB,GAAGwV,IAAa,SAACzG,cAAK6C,uBACtB9C,MAAM,CAAC3S,GAAU5C,IACtBkF,GACKuB,GAAGwV,IAAa,SAACzG,cAAKkC,sBACtBnC,MAAM,CAAC3S,GAAU5C,cAEd,CACJ8P,KAAM8L,GAAmB7L,KACzBE,GAAItL,eAGA,CACJmL,KAAMiM,GAAkBhM,KACxBE,GAAIrL,aAGF,CACFqQ,OAAQnQ,GACR/D,OAAQyb,GACRrG,OAAQyF,aAEN,CACF3G,OAAQpQ,GACR9D,OAAQyb,GACRrG,OAAQ4F,eAGJ,CACJjM,KAAMkG,SACF3R,GACAiY,GAAkBvM,MAClB,SAACyF,cAAKlE,OAAoBpD,YAE9B+B,GAAIxL,eAGA,CACJqL,KAAMuM,GAAiBxb,KAAI,SAACqN,SAAc,CAAEA,SAAAA,MAC5C+B,GAAIqM,aAGF,CACFrH,OAAQe,SACJ,CAAChW,EAAgBG,GACjB0c,WAAS,CACL5H,OAAQ1Q,GACR2Q,QA9FkB,OAgGtB,iCAAEnT,aAA6B,CAC3BC,oBACAD,OAAQA,MAGhBhB,OAAQZ,EAAgBU,KAAI,SAAAmB,UAAkBC,QAAQD,MACtDmU,OAAQ6F,aAGN,CACF/F,MAAO5R,GAAUyY,QACjB7H,OAAQjV,EACRe,OAAQ,SAACob,UAA2Cla,QAAQka,IAC5DhG,OAAQiG,cAGL,CACHnG,MAAOjB,WAAS,CACZC,OAAQ9P,GAAc4K,KACtBmF,QAlH2B,MAoH/BgB,GAAI,gBAAG5E,IAAAA,OAAQ8H,IAAAA,aAAc,CACzBrX,OAAQuP,EAAOvP,OACfgb,QAAS3D,EAAO4D,WAEpB7G,OAAQ7Q,KAGZH,GAAckM,+CAAK,sGACftP,IAAAA,OACA6G,IAAAA,QACAqU,IAAAA,eACQvW,KAASwW,YAAYnb,EAAQ6G,EAAqBqU,6IAE9D7X,GAAciM,+CAAK,wGACftP,IAAAA,OAAQgb,IAAAA,QAASpL,IAAAA,KAAMsL,IAAAA,eACfvW,KAASwW,YACjBnb,EACA,iBACqB,CACbob,QAAS,SAAUxL,KAAAA,kBAEP,CACZyL,SAAU,YACVJ,SAAUD,WAEH,cACH,IAEZE,6IAEJ5X,GAAgBgM,+CAAI,0GAChBtP,IAAAA,OAAQgb,IAAAA,QAAS3B,IAAAA,OAEXlV,EAAUkV,EAAS,CAAEA,OAAAA,QAAWhV,WACpBM,KAAS2W,YAAYtb,EAAQgb,OAAS3W,EAAWF,iBAA7DoX,2BACC,CACHP,QAASO,EAAIN,6GAGrB1X,GAAkB+L,+CAAI,oGAAStP,IAAAA,OAAQgb,IAAAA,QAC7BhV,EAAOrB,KAAS8D,QAAQzI,yBACb,IAAImF,aACfqW,EAAUxV,EAAKyV,cAAcT,yBACf,IAAI/V,0BAGlBN,KACD+W,mBAAmB1b,EAAQgb,EAASQ,EAAS,CAAEG,QAAQ,sGAEhElY,GAAgB6L,KAAI,gBAChBsM,IAAAA,KACAtU,IAAAA,KACAuU,IAAAA,gBACAC,IAAAA,eACAC,IAAAA,YACAhM,IAAAA,KAGMiM,EADKrX,KACQsX,cAAcL,EAAM,CACnCtU,KAAAA,EACAuU,gBAAAA,EACA9L,KAAAA,EACA+L,eAAAA,EACAC,YAAAA,EACAG,gBAAiB,gBAAGC,IAAAA,OAAQC,IAAAA,MAKxBzZ,GAAiB,CAAEiZ,KAAAA,EAAMO,OAAAA,EAAQC,MAAAA,OAGnC/E,EAA8B,CAAE2E,QAAAA,UAClCA,EAAQK,QAAOhF,EAAOgF,MAAQL,EAAQK,OACnChF,KAGX3T,GAAgB4L,KAAI,gBAAEgN,IAAAA,IAAKC,IAAAA,OAAIpJ,QAAAA,aAAU,aAC9B,IAAIqJ,SAAQ,SAACC,GAChB9X,KAAS+X,cAAcJ,EAAKC,GACvBI,KAAKF,UACC,kBAAKA,EAAQ,UAAWH,OACnCM,YAAW,WACPH,EAAQ,UAAWH,MACpBnJ,SAiBX3P,GAAwB8L,KAAI,gBAAG0L,IAAAA,QAAShb,IAAAA,OAC9BuI,EAAK5D,SACN4D,EAAI,MAAM,IAAInD,OACbY,EAAOuC,EAAGE,QAAQzI,OACnBgG,EAAM,MAAM,IAAIb,OACf0X,EAAU7W,EAAKyV,cAAcT,OAC9B6B,EAAS,MAAM,IAAI5X,OAClBmB,EAASmC,EAAGmB,gBACbtD,EAAQ,MAAM,IAAIb,OACjByF,EAAYhF,EAAK8C,aAClBgU,yBAAyBD,EAASzW,IAE3B,sBADJyW,EAAQhT,UAEVkT,EA1BV,SAAwBF,MAChBA,EAAQG,SAAWC,cAAYC,WACT,mBAAtBL,EAAQhT,WACRgT,EAAQ1V,oBAED,MAELN,EAAUgW,EAAQM,qBACjB/B,EAAWvU,EAAXuU,eACa,WAAZA,GAAoC,YAAZA,IAC5Blb,QAAQ2G,EAAQ+I,OAAiC,iBAAjB/I,EAAQ+I,MACxCiN,EAAQrF,cAAgB7S,KAAS+E,YAerB0T,CAAeP,SACxB,CACH7R,UAAAA,EACA+R,QAAAA,MAGR9C,GAAiB3K,KAAI,gBAAGrP,IAAAA,eACd0V,EAAqB1V,EAAe2V,YAAYC,YAAUC,eACzD,CACH3J,SAAUD,GAAYjM,GACtBoW,QAASV,EACTA,mBAAoBA,EACpBW,oBAAqBrW,EAAe2V,YAAYC,YAAUU,cAIlEqD,GAAetK,+CAAI,4GACfrP,IAAAA,eACA8Z,IAAAA,UACAhE,IAAAA,KACAsH,IAAAA,YACAC,IAAAA,aAEKrd,wBAAsB,IAAIoF,iBACzBkY,EAAoB,YAAdxD,EACRzV,UAAO2R,cAAcG,SACrB9R,UAAO2R,cAAcC,mBACnBjW,EACD+V,SAASuH,EAAKxH,EAAMsH,EAAaC,iBAChC3H,EAAqB1V,EAAe2V,YAAYC,YAAUC,SAC1D3J,EAAWD,GAAYjM,qBACtB,CACHkM,SAAAA,EACAkK,QAASV,EACTA,mBAAoBA,EACpBW,oBAAqBrW,EAAe2V,YAAYC,YAAUU,8GAKlE8D,GAAsC/K,KAAI,SAACtP,OACjCwI,EAAa7D,KAAS8D,QAAQzI,OAC/BwI,EAAY,MAAM,IAAIrD,OACrBqV,EAAQhS,EAAWgV,oCAClBhD,MAAAA,EAAAA,EAAS,KCvVb,IAAMiD,GAA8BvQ,GACtC3Q,eCUL4Q,GACKzI,GAAGkJ,IAA0B,SAAC6F,EAAGiK,UAAeA,KAErDhQ,GACKhJ,GAAGiJ,GAAwB+F,UAAW,SAACiK,EAAUC,6BAC3CD,IAAUC,OAEhBlZ,GAAG+Y,IAA6B,SAAC/O,EAAOkP,UAAQlP,EAC5C1P,QAAO,SAAC6e,UAAeA,IAAeD,QAG/CpQ,GACK9I,GAAG+I,IAA6B,SAACgG,EAAGmK,UAAQA,KAC5ClZ,GAAG+Y,IACA,SAACK,EAASC,UAAgBD,IAAYC,EAAc,KAAOD,eAG3D,CACJ/P,KAAMR,GAAsBmG,SAC5BxF,GAAIN,KAGRR,GAAiBkC,8BAAI,6GAAY3K,KAASqZ,mEAE1C3Q,GAAaiC,8BAAI,oGACP/G,EAAK5D,MACHsZ,4EACF1V,EAAG0V,oBAET1V,EAAG2V,kCAAiC,GAC9B7O,EAAW9G,EAAG4V,cAMd/X,EAASmC,EAAGmB,YAClBnB,EAAG6V,aAAa,CAAChY,KACXiY,EAAS9V,EAAG+V,gBACdlY,EAAQiJ,IAEDkP,gBACPhW,EAAGiW,oBAAoBpY,GAI3BwH,GAAyByQ,EAAOX,2DAGpCnQ,GAAsB+B,8BAAI,qGAChB/G,EAAK5D,KACLyB,EAASmC,EAAGmB,YACZ2F,EAAW9G,EAAG4V,uBACd5V,EAAGkW,eAAerY,EAAQiJ,GAAU,0BACpC9G,EAAGmW,kBAAkBtY,EAAQiJ,GAAU,oCACtC,+CAGX/B,GAAoBgC,+CAAI,sGAASlJ,IAAAA,OAAQiJ,IAAAA,SAC/B9G,EAAK5D,cACL4D,EAAGkW,eAAerY,EAAQiJ,GAAU,0BACpC9G,EAAGmW,kBAAkBtY,EAAQiJ,GAAU,qGAGjD1B,GAAwB2B,+CAAI,WAAOwO,yFACzBvV,EAAK5D,KAELga,EAAW,SAAXA,OACF3P,QAAQC,IAAI,oBAAqB6O,GAC7BA,EAAQc,YACRnB,GAA4BK,GAC5BrQ,GAA4BqQ,IAE5BA,EAAQe,UACRf,EAAQgB,IAAI,SAAUH,GACtBlB,GAA4BK,QACzB,GAAIA,EAAQiB,QAAUrS,QAAMsS,KAAM,CACrClB,EAAQgB,IAAI,SAAUH,OAChBM,EAAoB1W,EAAG2W,oBAC7BlQ,QAAQC,IAAIgQ,EAAoBvS,QAAMsS,KAAOtS,QAAMyS,WACnD1B,GAA4BK,KAKpCA,EAAQpZ,GAAG,SAAUia,qBACdb,+pCrBrE2B,+BADG,6BAEF,+BAGE,2CAFY,yCACD,wMLnBf,SAAC1Z,UAClC0W,WAAS,CAAE5H,OAAQzW,EAAQ0W,QAAS/O,oYciEF,gBAClCpE,IAAAA,OACAoG,IAAAA,OACAgZ,IAAAA,MACAC,IAAAA,OACAC,IAAAA,iBACAC,aAAAA,gBAEMvZ,EAAOrB,KAAS8D,QAAQzI,OACzBgG,SACM,SAELwZ,EAAcxZ,EAAKiE,UAAU7D,UAC9BoZ,EAGEA,EAAYC,aACf9a,KAAS+a,mBACTN,EACAC,EACAC,EACAC,GACA,GARO,kGAlCmB,gBAC9BzY,IAAAA,OACAsY,IAAAA,MACAC,IAAAA,OACAC,IAAAA,iBACAC,aAAAA,oBACAI,iBAAAA,uBAEA7Y,GAAUA,EAAO2Y,aACX3Y,EAAO2Y,aACL9a,KAAS+a,mBACTN,EACAC,EACAC,EACAC,EACAI,GAEF,6BA6C0B,iBACxB,CACJC,sBAAgBjb,KAAS+a,+CACzBG,QAAS,CACLC,+BAA0Bnb,KAASob,6VAnBnB,gBACxBC,IAAAA,OACAZ,IAAAA,MACAC,IAAAA,OACAC,IAAAA,aACAK,IAAAA,wBAEAhb,KAASsb,aACLD,EACAZ,EACAC,OACiBhb,IAAjBib,EAA6BA,EAAe,QAC5CK"}