{"version":3,"file":"matrix-effector.iife.js","sources":["../src/domain.ts","../src/effects.ts","../src/events.ts","../src/matrix-client.ts","../src/utils.ts","../src/mappers.ts","../src/constants.ts","../src/state.ts","../src/init.ts"],"sourcesContent":["import { createDomain } from \"effector\"\n\nexport const matrixDomain = createDomain(\"matrix\")\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    DeleteMessagePayload,\n    DeleteMessageResult,\n    EditMessagePayload,\n    LoginByPasswordParams,\n    LoginPayload,\n    SendMessagePayload,\n    StartClientParams,\n    Message,\n    LoginByTokenParams,\n    PaginateRoomFxParams,\n    SearchRoomMessagesPayload,\n    LoadRoomFxParams,\n    ReadAllMessagesParams,\n    RoomWithActivity,\n    MappedRoom,\n    RoomInfo,\n    MappedUser,\n    MessageResponse,\n    InitRoomParams,\n} from \"./types\"\n\nexport const loginByPasswordFx = matrixDomain\n    .effect<LoginByPasswordParams, LoginPayload, Error>()\nexport const loginByTokenFx = matrixDomain\n    .effect<LoginByTokenParams, LoginPayload, Error>()\nexport const initStoreFx = matrixDomain.effect<void, void, Error>()\nexport const startClientFx = matrixDomain\n    .effect<StartClientParams, void, Error>()\nexport const stopClientFx = matrixDomain.effect<void, void, Error>()\nexport const searchRoomMessagesFx = matrixDomain\n    .effect<SearchRoomMessagesPayload, Message[], Error>()\nexport const sendMessageFx = matrixDomain\n    .effect<SendMessagePayload, void, Error>()\nexport const editMessageFx = matrixDomain\n    .effect<EditMessagePayload, void, Error>()\nexport const deleteMessageFx = matrixDomain\n    .effect<DeleteMessagePayload, DeleteMessageResult, Error>()\nexport const loadRoomFx = matrixDomain\n    .effect<LoadRoomFxParams, MessageResponse, Error>()\nexport const paginateRoomFx = matrixDomain\n    .effect<PaginateRoomFxParams, MessageResponse, Error>()\nexport const readAllMessagesFx = matrixDomain\n    .effect<ReadAllMessagesParams, void, Error>()\nexport const getRoomsWithActivitiesFx = matrixDomain\n    .effect<MappedRoom[], RoomWithActivity[], Error>()\nexport const getRoomInfoFx = matrixDomain\n    .effect<string, RoomInfo, Error>()\nexport const getLoggedUserFx = matrixDomain\n    .effect<void, MappedUser | null, Error>()\nexport const initRoomFx = matrixDomain\n    .effect<InitRoomParams, TimelineWindow, Error>()\n","import { batchEvents } from \"@42px/effector-extra\"\nimport { throttle } from \"patronum/throttle\"\nimport { matrixDomain } from \"./domain\"\nimport {\n    InitRoomParams,\n    LoadRoomParams,\n    MappedRoom,\n    MessageEvent,\n    PaginateParams\n} from \"./types\"\n\nexport const roomMessage = matrixDomain.event<MessageEvent>()\nexport const createRoomMessageBatch = (ms: number) =>\n    batchEvents(roomMessage, ms)\nexport const onInitialSync = matrixDomain.event<MappedRoom[]>()\nexport const onCachedState = matrixDomain.event<MappedRoom[]>()\nexport const onSync = matrixDomain.event<MappedRoom[]>()\nexport const createOnSyncThrottled = (ms: number) =>\n    throttle({ source: onSync, timeout: ms})\n\nexport const initRoom = matrixDomain.event<InitRoomParams>()\nexport const loadRoom = matrixDomain.event<LoadRoomParams>()\nexport const paginateFront = matrixDomain.event<PaginateParams>()\nexport const paginateBack = matrixDomain.event<PaginateParams>()\n","import matrix, { CreateClientOption, MatrixClient } from \"matrix-js-sdk\"\nimport { EventListener } from \"./types\"\n\nlet clientStore: MatrixClient\nlet options: Parameters<typeof matrix.createClient>[0]\nconst callbacksStore: EventListener[] = []\nexport const client = (): MatrixClient => {\n    if (!clientStore) {\n        clientStore = matrix.createClient(options)\n        callbacksStore.forEach(([eventName, cb]) => {\n            clientStore.on(eventName, cb)\n        })\n    }\n    return clientStore\n}\nexport const prependClientParams = (\n    opts: string | CreateClientOption\n): void => {\n    options = opts\n}\n\nexport const onClientEvent = (callbacks: EventListener[]): void => {\n    callbacksStore.push(...callbacks)\n}\n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport { client } from \"./matrix-client\"\nimport {\n    GetRoomMemberAvatarParams,\n    GetSenderAvatarParams\n} from \"./types\"\n\nexport const getSenderAvatarUrl = ({\n    sender,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true,\n    allowDirectLinks = false\n}: GetSenderAvatarParams): string | null =>\n    sender && sender.getAvatarUrl\n        ? sender.getAvatarUrl(\n            client().getHomeserverUrl(),\n            width,\n            height,\n            resizeMethod,\n            allowDefault,\n            allowDirectLinks\n        )\n        : null\n\nexport const getRoomMemberAvatarUrl = ({\n    roomId,\n    userId,\n    width,\n    height,\n    resizeMethod,\n    allowDefault = true\n}: GetRoomMemberAvatarParams): string | null => {\n    const room = client().getRoom(roomId)\n    if (!room) {\n        return null\n    }\n    const otherMember = room.getMember(userId)\n    if (!otherMember) {\n        return null\n    }\n    return otherMember.getAvatarUrl(\n        client().getHomeserverUrl(),\n        width,\n        height,\n        resizeMethod,\n        allowDefault,\n        true\n    )\n}\n\n\nexport const checkIsDirect = (roomId: string): boolean => {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    const directEvent = client().getAccountData(\"m.direct\") as MatrixEvent\n    const aDirectRooms = directEvent\n        ? Object.values(directEvent.getContent())\n        : []\n    let summaryDirects: string[] = []\n    for (const accountDirects of aDirectRooms) {\n        summaryDirects = [...summaryDirects, ...accountDirects]\n    }\n    if (summaryDirects.includes(roomId)) return true\n    return false\n} \n","import { MatrixEvent } from \"matrix-js-sdk\"\nimport {\n    Message,\n    MessageEvent,\n    Room,\n    MappedRoom,\n    RoomInfo,\n} from \"./types\"\n\nexport function toMessageEvent(event: MatrixEvent): MessageEvent {\n    const payload: MessageEvent = {\n        eventId: event.getId(),\n        // если есть клиентская агрегация, то этот метод отдает последний контент\n        content: event.getContent(),\n        originServerTs: event.getDate(),\n        roomId: event.getRoomId(),\n        sender: event.sender,\n        type: event.getType(),\n        redaction: event.isRedaction(),\n        redacted: event.isRedacted(),\n        editing: Boolean(event.isRelation()),\n    }\n    if (event.hasAssocation()) {\n        payload.relatedEventId = event.getAssociatedId()\n    }\n    return payload\n}\n\nexport function toMessage(\n    event: MatrixEvent,\n    originalEventId?: MatrixEvent[\"event\"][\"event_id\"]\n): Message {\n    return {\n        originalEventId: originalEventId !== undefined ?\n            originalEventId :\n            event.getId(),\n        content: event.getContent(),\n        sender: event.sender,\n        originServerTs: event.getDate(),\n        edited: Boolean(event.replacingEventId()),\n        redacted: event.isRedacted(),\n    }\n}\n\nexport function toMappedRoom(room: Room): MappedRoom {\n    return {\n        roomId: room.roomId,\n        name: room.name,\n        summary: room.summary,\n    }\n}\n\nexport function mergeMessageEvents(\n    acc: Message[],\n    event: MatrixEvent\n): Message[] {\n    if (event.isRelation(\"m.replace\") || event.isRedaction()) {\n        return acc\n    }\n    acc.push(toMessage(event))\n    return acc\n}\n\nexport function toRoomInfo(room: Room): RoomInfo {\n    return {\n        roomMembersCount: room.getJoinedMemberCount()\n    }\n}\n","export const ROOM_MESSAGE_EVENT = \"m.room.message\"\nexport const ROOM_REDACTION_EVENT = \"m.room.redaction\"\nexport const LOGIN_BY_PASSWORD = \"m.login.password\"\nexport const LOGIN_BY_TOKEN = \"m.login.token\"\n","import { TimelineWindow } from \"matrix-js-sdk\"\nimport { matrixDomain } from \"./domain\"\nimport { loadRoomFx, paginateRoomFx } from \"./effects\"\nimport { Message, RoomWithActivity } from \"./types\"\n\nexport const $roomId = matrixDomain\n    .store<RoomWithActivity[\"roomId\"] | null>(null)\nexport const $timelineWindow = matrixDomain.store<TimelineWindow | null>(null)\nexport const $messages = matrixDomain.store<Message[]>([])\nexport const $loadRoomFxPending = loadRoomFx.pending\nexport const $paginateRoomFxPending = paginateRoomFx.pending\n","import { createCustomError } from \"@42px/custom-errors\"\nimport { combine, forward, guard, sample } from \"effector\"\nimport matrix, { RoomMember } from \"matrix-js-sdk\"\nimport {\n    initStoreFx,\n    loginByPasswordFx,\n    deleteMessageFx,\n    sendMessageFx,\n    startClientFx,\n    editMessageFx,\n    loginByTokenFx,\n    stopClientFx,\n    paginateRoomFx,\n    searchRoomMessagesFx,\n    loadRoomFx,\n    readAllMessagesFx,\n    getRoomsWithActivitiesFx,\n    getRoomInfoFx,\n    getLoggedUserFx,\n    initRoomFx\n} from \"./effects\"\nimport {\n    initRoom,\n    loadRoom,\n    onCachedState,\n    onInitialSync,\n    onSync,\n    paginateBack,\n    paginateFront,\n    roomMessage\n} from \"./events\"\nimport {\n    mergeMessageEvents,\n    toMappedRoom,\n    toMessage,\n    toMessageEvent,\n    toRoomInfo,\n} from \"./mappers\"\nimport { client, onClientEvent } from \"./matrix-client\"\nimport {\n    DeleteMessageResult,\n    Room,\n    MatrixEvent,\n    PaginateRoomFxParams,\n    LoadRoomFxParams,\n} from \"./types\"\nimport {\n    ROOM_MESSAGE_EVENT,\n    ROOM_REDACTION_EVENT,\n    LOGIN_BY_PASSWORD,\n    LOGIN_BY_TOKEN,\n} from \"./constants\"\nimport { checkIsDirect } from \"./utils\"\nimport { $messages, $roomId, $timelineWindow } from \"./state\"\n\nconst RoomNotFound = createCustomError(\"RoomNotFound\")\nconst TimelineWindowUndefined = createCustomError(\"TimelineWindowUndefined\")\nconst EventNotFound = createCustomError(\"EventNotFound\")\nconst ClientNotInitialized = createCustomError(\"ClientNotInitialized\")\n\n$roomId.on(initRoom, (_, { roomId }) => roomId)\n$timelineWindow\n    .on(initRoomFx.doneData, (_, timelineWindow) => timelineWindow)\n    .reset($roomId.updates)\n// Race ellimination\nconst setMessages = guard({\n    source: sample(\n        $roomId,\n        [loadRoomFx.done, paginateRoomFx.done],\n        (currentRoomId, { params: { roomId }, result: { messages }}) => ({\n            currentRoomId,\n            roomId,\n            messages,\n        })\n    ),\n    filter: ({ currentRoomId, roomId }) => currentRoomId === roomId\n})\n$messages\n    .on(setMessages, (_, { messages }) => messages)\n    .reset($roomId.updates)\n\n\nconst canLoad = combine(\n    $roomId,\n    $timelineWindow,\n    (roomId, timelineWindow) => Boolean(roomId) && Boolean(timelineWindow)\n)\nguard({\n    source: sample(\n        [$roomId, $timelineWindow],\n        loadRoom,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            initialEventId,\n            initialWindowSize,\n        }): LoadRoomFxParams => ({\n            roomId: roomId as any,\n            timelineWindow: timelineWindow as any,\n            initialEventId,\n            initialWindowSize\n        })\n    ),\n    filter: canLoad,\n    target: loadRoomFx\n})\nguard({\n    source: sample(\n        [$roomId, $timelineWindow],\n        paginateBack,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            size,\n            makeRequest,\n            requestLimit\n        }): PaginateRoomFxParams => ({\n            roomId: roomId as any,\n            timelineWindow: timelineWindow as any,\n            direction: \"backward\",\n            size,\n            makeRequest,\n            requestLimit,\n        })\n    ),\n    filter: canLoad,\n    target: paginateRoomFx\n})\nguard({\n    source: sample(\n        [$roomId, $timelineWindow],\n        paginateFront,\n        ([\n            roomId,\n            timelineWindow\n        ], {\n            size,\n            makeRequest,\n            requestLimit\n        }): PaginateRoomFxParams => ({\n            roomId: roomId as any,\n            timelineWindow: timelineWindow as any,\n            direction: \"forward\",\n            size,\n            makeRequest,\n            requestLimit,\n        })\n    ),\n    filter: canLoad,\n    target: paginateRoomFx\n})\ngetLoggedUserFx.use(() => {\n    const cl = client()\n    if (!cl) return null\n    const loggedUserId = cl.getUserId()\n    if (!loggedUserId) return null\n    const user = cl.getUser(loggedUserId)\n    if (!user) return null\n    return {\n        userId: user.userId,\n        currentlyActive: user.currentlyActive,\n        displayName: user.displayName,\n        lastActiveAgo: user.lastActiveAgo,\n        lastPresenceTs: user.lastPresenceTs,\n        presence: user.presence\n    }\n})\nforward({\n    from: loginByPasswordFx.done.map(() => ({ initialSyncLimit: 20 })),\n    to: startClientFx,\n})\nloginByPasswordFx.use((params) => client().login(LOGIN_BY_PASSWORD, params))\nloginByTokenFx.use((params) => client().login(LOGIN_BY_TOKEN, params))\ninitStoreFx.use(async () => {\n    const { store } = client()\n    if (store) return store.startup()\n})\nstartClientFx.use((params) => client().startClient(params))\nsearchRoomMessagesFx.use(async ({ term, roomId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const membersCache: { [id: string]: RoomMember } = {}\n    const searchResponse = await client().search({\n        body: {\n            search_categories: {\n                room_events: {\n                    search_term: term,\n                    keys: [\"content.body\"],\n                    filter: {\n                        rooms: [roomId],\n                    },\n                },\n            },\n        },\n    })\n    return searchResponse\n        .search_categories\n        .room_events.results.map(({ result }) => {\n            const event = new MatrixEvent(result)\n            const senderId = event.getSender()\n            if (membersCache[senderId] === undefined) {\n                membersCache[senderId] = room.getMember(senderId)\n            }\n            event.sender = membersCache[senderId]\n            return toMessage(event)\n        })\n})\nsendMessageFx.use(({\n    roomId,\n    content,\n    txnId\n}) => client().sendMessage(roomId, content, txnId))\neditMessageFx.use(({\n    roomId, eventId, body, txnId,\n}) => client().sendMessage(\n    roomId,\n    {\n        \"m.new_content\": {\n            msgtype: \"m.text\", body,\n        },\n        \"m.relates_to\": {\n            rel_type: \"m.replace\",\n            event_id: eventId,\n        },\n        \"msgtype\": \"m.text\",\n        \"body\": \"\",\n    },\n    txnId,\n))\ndeleteMessageFx.use(async ({\n    roomId, eventId, reason,\n}): Promise<DeleteMessageResult> => {\n    const options = reason ? { reason } : undefined\n    const res = await client().redactEvent(roomId, eventId, undefined, options)\n    return {\n        eventId: res.event_id,\n    }\n})\n/* getRoomTimelineFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (room) {\n        return room.timeline\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n    }\n    return []\n}) */\nfunction getMappedRooms() {\n    return client().getRooms().map(toMappedRoom)\n}\nonClientEvent([\n    [\n        \"Room.timeline\",\n        (\n            event: MatrixEvent,\n            room: Room,\n            toStartOfTimeline: boolean,\n            removed,\n            data\n        ) => {\n            const eventType = event.getType()\n            if (eventType === ROOM_MESSAGE_EVENT\n                || eventType === ROOM_REDACTION_EVENT\n            ) {\n                if (!toStartOfTimeline && data.liveEvent) {\n                    roomMessage(toMessageEvent(event))\n                }\n            }\n        }],\n    [\"sync\", (state, prevState) => {\n        if (state === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onCachedState(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"PREPARED\") {\n            const rooms = getMappedRooms()\n            onInitialSync(rooms)\n            return\n        }\n        if (state === \"SYNCING\" && prevState === \"SYNCING\") {\n            const rooms = getMappedRooms()\n            onSync(rooms)\n            return\n        }\n    }],\n])\nreadAllMessagesFx.use(({ roomId, eventId }) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const rrEvent = room.findEventById(eventId)\n    if (!rrEvent) throw new EventNotFound()\n    // Kludge - typings fix\n    return client().setRoomReadMarkers(roomId, eventId, rrEvent as any)\n})\ngetRoomsWithActivitiesFx.use((rooms) => {\n    const cl = client()\n    if (!cl) throw new ClientNotInitialized()\n    const maxHistory = 99\n    return rooms.map((room) => {\n        const matrixRoom = cl.getRoom(room.roomId)\n        if (!matrixRoom) throw new RoomNotFound()\n        const events = matrixRoom.getLiveTimeline().getEvents()\n        let unreadCount = 0\n        for (let i = events.length - 1; i >= 0; i--) {\n            if (i === events.length - maxHistory) break\n            const event = events[i]\n            const isReadUpTo = matrixRoom\n                .hasUserReadEvent(cl.getUserId() as string, event.getId())\n            if (isReadUpTo) {\n                break\n            }\n            unreadCount += 1\n        }\n        const mergedMessageEvents = events\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        const lastMessage = mergedMessageEvents.length ?\n            mergedMessageEvents[mergedMessageEvents.length - 1] : undefined\n        const isDirect = checkIsDirect(matrixRoom.roomId)\n        const DMUser = isDirect\n            ? matrixRoom.getMember(matrixRoom.guessDMUserId())\n            : null\n\n        return {\n            ...room,\n            unreadCount,\n            lastMessage,\n            isDirect,\n            directUserId: DMUser?.userId,\n            // ToDo: Разобраться, почему у для некоторых юзеров не прилетает объект user в DMUSER\n            // Гипотеза 1: Шифрованные чаты как-то с этим могут быть связаны\n            isOnline: DMUser\n                ? Boolean(DMUser.user?.currentlyActive)\n                : undefined,\n            lastActivityTS: (matrixRoom as any).getLastActiveTimestamp()\n        }\n    })\n})\nstopClientFx.use(() => client().stopClient())\n/* let timelineWindow: matrix.TimelineWindow | undefined\nlet timelineWindowRoom: matrix.Room | undefined */\n/* initTimelineWindowFx\n    .use(async ({ roomId, initialEventId, initialWindowSize }) => {\n        const cl = client()\n        const room = client().getRoom(roomId)\n        if (!room) throw new RoomNotFound()\n        const timelineSet = room.getUnfilteredTimelineSet()\n        timelineWindow = new matrix.TimelineWindow(cl, timelineSet)\n        await timelineWindow.load(initialEventId, initialWindowSize)\n        const windowEvents = timelineWindow.getEvents()\n        const isLive = !timelineWindow.canPaginate(\"f\")\n        timelineWindowRoom = room\n        const messages = windowEvents\n            .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n                .includes(event.getType()))\n            .reduce(mergeMessageEvents, [])\n        return {\n            messages,\n            isLive,\n            eventsRetrieved: true\n        }\n    }) */\nloadRoomFx.use(async ({\n    timelineWindow,\n    initialEventId,\n    initialWindowSize\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    await timelineWindow.load(initialEventId, initialWindowSize)\n    const isLive = !timelineWindow.canPaginate(\"f\")\n    const messages =  timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    return {\n        messages,\n        isLive,\n        eventsRetrieved: true\n    }\n})\n/* getTimelineWindowMessagesFx.use(() => {\n    if (!timelineWindow) return []\n    return timelineWindow\n        .getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n}) */\n\npaginateRoomFx.use(async ({\n    timelineWindow,\n    direction,\n    size,\n    makeRequest,\n    requestLimit,\n}) => {\n    if (!timelineWindow) throw new TimelineWindowUndefined()\n    const dir = direction === \"forward\" ?\n        matrix.EventTimeline.FORWARDS :\n        matrix.EventTimeline.BACKWARDS\n    const eventsRetrieved: boolean = await timelineWindow\n        .paginate(dir, size, makeRequest, requestLimit)\n    const isLive = !timelineWindow.canPaginate(\"f\")\n    const messages =  timelineWindow.getEvents()\n        .filter((event) => [ROOM_MESSAGE_EVENT, ROOM_REDACTION_EVENT]\n            .includes(event.getType()))\n        .reduce(mergeMessageEvents, [])\n    return {\n        messages,\n        isLive,\n        eventsRetrieved\n    }\n})\n\ngetRoomInfoFx.use((roomId) => {\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    return toRoomInfo(room)\n})\n\ninitRoomFx.use(async ({ roomId }) => {\n    const cl = client()\n    const room = client().getRoom(roomId)\n    if (!room) throw new RoomNotFound()\n    const timelineSet = room.getUnfilteredTimelineSet()\n    return new matrix.TimelineWindow(cl, timelineSet)\n})\n"],"names":["matrixDomain","createDomain","loginByPasswordFx","effect","loginByTokenFx","initStoreFx","startClientFx","stopClientFx","searchRoomMessagesFx","sendMessageFx","editMessageFx","deleteMessageFx","loadRoomFx","paginateRoomFx","readAllMessagesFx","getRoomsWithActivitiesFx","getRoomInfoFx","getLoggedUserFx","initRoomFx","roomMessage","event","onInitialSync","onCachedState","onSync","initRoom","loadRoom","paginateFront","paginateBack","clientStore","options","callbacksStore","client","matrix","createClient","forEach","eventName","cb","on","onClientEvent","callbacks","push","checkIsDirect","roomId","directEvent","getAccountData","aDirectRooms","Object","values","getContent","summaryDirects","accountDirects","includes","toMessage","originalEventId","undefined","getId","content","sender","originServerTs","getDate","edited","Boolean","replacingEventId","redacted","isRedacted","toMappedRoom","room","name","summary","mergeMessageEvents","acc","isRelation","isRedaction","ROOM_MESSAGE_EVENT","ROOM_REDACTION_EVENT","$roomId","store","$timelineWindow","$messages","pending","RoomNotFound","createCustomError","TimelineWindowUndefined","EventNotFound","ClientNotInitialized","_","doneData","timelineWindow","reset","updates","setMessages","guard","source","sample","done","currentRoomId","params","result","messages","filter","canLoad","combine","getMappedRooms","getRooms","map","initialEventId","initialWindowSize","target","size","makeRequest","requestLimit","direction","use","cl","loggedUserId","getUserId","user","getUser","userId","currentlyActive","displayName","lastActiveAgo","lastPresenceTs","presence","from","initialSyncLimit","to","login","async","startup","startClient","term","getRoom","membersCache","search","body","search_categories","room_events","search_term","keys","rooms","results","MatrixEvent","senderId","getSender","getMember","txnId","sendMessage","eventId","m.new_content","msgtype","m.relates_to","rel_type","event_id","reason","redactEvent","toStartOfTimeline","removed","data","eventType","getType","liveEvent","payload","getRoomId","type","redaction","editing","hasAssocation","relatedEventId","getAssociatedId","toMessageEvent","state","prevState","rrEvent","findEventById","setRoomReadMarkers","matrixRoom","events","getLiveTimeline","getEvents","unreadCount","i","length","hasUserReadEvent","mergedMessageEvents","reduce","lastMessage","isDirect","DMUser","guessDMUserId","directUserId","isOnline","lastActivityTS","getLastActiveTimestamp","stopClient","load","isLive","canPaginate","eventsRetrieved","dir","EventTimeline","FORWARDS","BACKWARDS","paginate","roomMembersCount","getJoinedMemberCount","toRoomInfo","timelineSet","getUnfilteredTimelineSet","TimelineWindow","ms","throttle","timeout","batchEvents","width","height","resizeMethod","allowDefault","otherMember","getAvatarUrl","getHomeserverUrl","allowDirectLinks","opts"],"mappings":"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"}